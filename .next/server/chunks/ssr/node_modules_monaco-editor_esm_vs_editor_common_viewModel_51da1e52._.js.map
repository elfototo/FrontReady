{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/monaco-editor/esm/vs/editor/common/viewModel/minimapTokensColorTracker.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/viewModel/file%3A/mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/viewModel/minimapTokensColorTracker.ts","file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/viewModel/vs/editor/common/viewModel/minimapTokensColorTracker.ts"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable, markAsSingleton } from '../../../base/common/lifecycle.js';\nimport { RGBA8 } from '../core/misc/rgba.js';\nimport { TokenizationRegistry } from '../languages.js';\nimport { ColorId } from '../encodedTokenAttributes.js';\n\nexport class MinimapTokensColorTracker extends Disposable {\n\tprivate static _INSTANCE: MinimapTokensColorTracker | null = null;\n\tpublic static getInstance(): MinimapTokensColorTracker {\n\t\tif (!this._INSTANCE) {\n\t\t\tthis._INSTANCE = markAsSingleton(new MinimapTokensColorTracker());\n\t\t}\n\t\treturn this._INSTANCE;\n\t}\n\n\tprivate _colors!: RGBA8[];\n\tprivate _backgroundIsLight!: boolean;\n\n\tprivate readonly _onDidChange = new Emitter<void>();\n\tpublic readonly onDidChange: Event<void> = this._onDidChange.event;\n\n\tprivate constructor() {\n\t\tsuper();\n\t\tthis._updateColorMap();\n\t\tthis._register(TokenizationRegistry.onDidChange(e => {\n\t\t\tif (e.changedColorMap) {\n\t\t\t\tthis._updateColorMap();\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate _updateColorMap(): void {\n\t\tconst colorMap = TokenizationRegistry.getColorMap();\n\t\tif (!colorMap) {\n\t\t\tthis._colors = [RGBA8.Empty];\n\t\t\tthis._backgroundIsLight = true;\n\t\t\treturn;\n\t\t}\n\t\tthis._colors = [RGBA8.Empty];\n\t\tfor (let colorId = 1; colorId < colorMap.length; colorId++) {\n\t\t\tconst source = colorMap[colorId].rgba;\n\t\t\t// Use a VM friendly data-type\n\t\t\tthis._colors[colorId] = new RGBA8(source.r, source.g, source.b, Math.round(source.a * 255));\n\t\t}\n\t\tconst backgroundLuminosity = colorMap[ColorId.DefaultBackground].getRelativeLuminance();\n\t\tthis._backgroundIsLight = backgroundLuminosity >= 0.5;\n\t\tthis._onDidChange.fire(undefined);\n\t}\n\n\tpublic getColor(colorId: ColorId): RGBA8 {\n\t\tif (colorId < 1 || colorId >= this._colors.length) {\n\t\t\t// background color (basically invisible)\n\t\t\tcolorId = ColorId.DefaultBackground;\n\t\t}\n\t\treturn this._colors[colorId];\n\t}\n\n\tpublic backgroundIsLight(): boolean {\n\t\treturn this._backgroundIsLight;\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable, markAsSingleton } from '../../../base/common/lifecycle.js';\nimport { RGBA8 } from '../core/misc/rgba.js';\nimport { TokenizationRegistry } from '../languages.js';\nimport { ColorId } from '../encodedTokenAttributes.js';\n\nexport class MinimapTokensColorTracker extends Disposable {\n\tprivate static _INSTANCE: MinimapTokensColorTracker | null = null;\n\tpublic static getInstance(): MinimapTokensColorTracker {\n\t\tif (!this._INSTANCE) {\n\t\t\tthis._INSTANCE = markAsSingleton(new MinimapTokensColorTracker());\n\t\t}\n\t\treturn this._INSTANCE;\n\t}\n\n\tprivate _colors!: RGBA8[];\n\tprivate _backgroundIsLight!: boolean;\n\n\tprivate readonly _onDidChange = new Emitter<void>();\n\tpublic readonly onDidChange: Event<void> = this._onDidChange.event;\n\n\tprivate constructor() {\n\t\tsuper();\n\t\tthis._updateColorMap();\n\t\tthis._register(TokenizationRegistry.onDidChange(e => {\n\t\t\tif (e.changedColorMap) {\n\t\t\t\tthis._updateColorMap();\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate _updateColorMap(): void {\n\t\tconst colorMap = TokenizationRegistry.getColorMap();\n\t\tif (!colorMap) {\n\t\t\tthis._colors = [RGBA8.Empty];\n\t\t\tthis._backgroundIsLight = true;\n\t\t\treturn;\n\t\t}\n\t\tthis._colors = [RGBA8.Empty];\n\t\tfor (let colorId = 1; colorId < colorMap.length; colorId++) {\n\t\t\tconst source = colorMap[colorId].rgba;\n\t\t\t// Use a VM friendly data-type\n\t\t\tthis._colors[colorId] = new RGBA8(source.r, source.g, source.b, Math.round(source.a * 255));\n\t\t}\n\t\tconst backgroundLuminosity = colorMap[ColorId.DefaultBackground].getRelativeLuminance();\n\t\tthis._backgroundIsLight = backgroundLuminosity >= 0.5;\n\t\tthis._onDidChange.fire(undefined);\n\t}\n\n\tpublic getColor(colorId: ColorId): RGBA8 {\n\t\tif (colorId < 1 || colorId >= this._colors.length) {\n\t\t\t// background color (basically invisible)\n\t\t\tcolorId = ColorId.DefaultBackground;\n\t\t}\n\t\treturn this._colors[colorId];\n\t}\n\n\tpublic backgroundIsLight(): boolean {\n\t\treturn this._backgroundIsLight;\n\t}\n}\n"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;AAEhG,OAAO,EAAE,OAAO,EAAS,MAAM,+BAA+B,CAAC;AAC/D,OAAO,EAAE,UAAU,EAAE,eAAe,EAAE,MAAM,mCAAmC,CAAC;AAChF,OAAO,EAAE,KAAK,EAAE,MAAM,sBAAsB,CAAC;AAC7C,OAAO,EAAE,oBAAoB,EAAE,MAAM,iBAAiB,CAAC;;;;;AAGjD,MAAO,yBAA0B,SAAQ,0LAAU;;QACzC,IAAA,CAAA,SAAS,GAAqC,IAArC,AAAyC,CAAC;IAAA,CAAA;IAC3D,MAAM,CAAC,WAAW,GAAA;QACxB,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;YACrB,IAAI,CAAC,SAAS,OAAG,+LAAe,EAAC,IAAI,yBAAyB,EAAE,CAAC,CAAC;QACnE,CAAC;QACD,OAAO,IAAI,CAAC,SAAS,CAAC;IACvB,CAAC;IAQD,aAAA;QACC,KAAK,EAAE,CAAC;QAJQ,IAAA,CAAA,YAAY,GAAG,IAAI,mLAAO,EAAQ,CAAC;QACpC,IAAA,CAAA,WAAW,GAAgB,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;QAIlE,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,IAAI,CAAC,SAAS,CAAC,sMAAoB,CAAC,WAAW,EAAC,CAAC,CAAC,EAAE;YACnD,IAAI,CAAC,CAAC,eAAe,EAAE,CAAC;gBACvB,IAAI,CAAC,eAAe,EAAE,CAAC;YACxB,CAAC;QACF,CAAC,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,eAAe,GAAA;QACtB,MAAM,QAAQ,GAAG,sMAAoB,CAAC,WAAW,EAAE,CAAC;QACpD,IAAI,CAAC,QAAQ,EAAE,CAAC;YACf,IAAI,CAAC,OAAO,GAAG;gBAAC,kMAAK,CAAC,KAAK;aAAC,CAAC;YAC7B,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;YAC/B,OAAO;QACR,CAAC;QACD,IAAI,CAAC,OAAO,GAAG;YAAC,kMAAK,CAAC,KAAK;SAAC,CAAC;QAC7B,IAAK,IAAI,OAAO,GAAG,CAAC,EAAE,OAAO,GAAG,QAAQ,CAAC,MAAM,EAAE,OAAO,EAAE,CAAE,CAAC;YAC5D,MAAM,MAAM,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC;YACtC,8BAA8B;YAC9B,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,IAAI,kMAAK,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;QAC7F,CAAC;QACD,MAAM,oBAAoB,GAAG,QAAQ,CAAA,EAAA,6BAAA,IAA2B,CAAC,oBAAoB,EAAE,CAAC;QACxF,IAAI,CAAC,kBAAkB,GAAG,oBAAoB,IAAI,GAAG,CAAC;QACtD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACnC,CAAC;IAEM,QAAQ,CAAC,OAAgB,EAAA;QAC/B,IAAI,OAAO,GAAG,CAAC,IAAI,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;YACnD,yCAAyC;YACzC,OAAO,GAAA,EAAA,6BAAA,EAA4B,CAAC;QACrC,CAAC;QACD,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IAC9B,CAAC;IAEM,iBAAiB,GAAA;QACvB,OAAO,IAAI,CAAC,kBAAkB,CAAC;IAChC,CAAC","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/monaco-editor/esm/vs/editor/common/viewModel/viewModelDecoration.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/viewModel/file%3A/mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/viewModel/viewModelDecoration.ts","file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/viewModel/vs/editor/common/viewModel/viewModelDecoration.ts"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IModelDecoration, IModelDecorationOptions, ITextModel } from '../model.js';\nimport { Range } from '../core/range.js';\nimport { StandardTokenType } from '../encodedTokenAttributes.js';\n\nexport class ViewModelDecoration {\n\t_viewModelDecorationBrand: void = undefined;\n\n\tpublic readonly range: Range;\n\tpublic readonly options: IModelDecorationOptions;\n\n\tconstructor(range: Range, options: IModelDecorationOptions) {\n\t\tthis.range = range;\n\t\tthis.options = options;\n\t}\n}\n\nexport function isModelDecorationVisible(model: ITextModel, decoration: IModelDecoration): boolean {\n\tif (decoration.options.hideInCommentTokens && isModelDecorationInComment(model, decoration)) {\n\t\treturn false;\n\t}\n\n\tif (decoration.options.hideInStringTokens && isModelDecorationInString(model, decoration)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\nexport function isModelDecorationInComment(model: ITextModel, decoration: IModelDecoration): boolean {\n\treturn testTokensInRange(\n\t\tmodel,\n\t\tdecoration.range,\n\t\t(tokenType) => tokenType === StandardTokenType.Comment\n\t);\n}\n\nexport function isModelDecorationInString(model: ITextModel, decoration: IModelDecoration): boolean {\n\treturn testTokensInRange(\n\t\tmodel,\n\t\tdecoration.range,\n\t\t(tokenType) => tokenType === StandardTokenType.String\n\t);\n}\n\n/**\n * Calls the callback for every token that intersects the range.\n * If the callback returns `false`, iteration stops and `false` is returned.\n * Otherwise, `true` is returned.\n */\nfunction testTokensInRange(model: ITextModel, range: Range, callback: (tokenType: StandardTokenType) => boolean): boolean {\n\tfor (let lineNumber = range.startLineNumber; lineNumber <= range.endLineNumber; lineNumber++) {\n\t\tconst lineTokens = model.tokenization.getLineTokens(lineNumber);\n\t\tconst isFirstLine = lineNumber === range.startLineNumber;\n\t\tconst isEndLine = lineNumber === range.endLineNumber;\n\n\t\tlet tokenIdx = isFirstLine ? lineTokens.findTokenIndexAtOffset(range.startColumn - 1) : 0;\n\t\twhile (tokenIdx < lineTokens.getCount()) {\n\t\t\tif (isEndLine) {\n\t\t\t\tconst startOffset = lineTokens.getStartOffset(tokenIdx);\n\t\t\t\tif (startOffset > range.endColumn - 1) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst callbackResult = callback(lineTokens.getStandardTokenType(tokenIdx));\n\t\t\tif (!callbackResult) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ttokenIdx++;\n\t\t}\n\t}\n\treturn true;\n}\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IModelDecoration, IModelDecorationOptions, ITextModel } from '../model.js';\nimport { Range } from '../core/range.js';\nimport { StandardTokenType } from '../encodedTokenAttributes.js';\n\nexport class ViewModelDecoration {\n\t_viewModelDecorationBrand: void = undefined;\n\n\tpublic readonly range: Range;\n\tpublic readonly options: IModelDecorationOptions;\n\n\tconstructor(range: Range, options: IModelDecorationOptions) {\n\t\tthis.range = range;\n\t\tthis.options = options;\n\t}\n}\n\nexport function isModelDecorationVisible(model: ITextModel, decoration: IModelDecoration): boolean {\n\tif (decoration.options.hideInCommentTokens && isModelDecorationInComment(model, decoration)) {\n\t\treturn false;\n\t}\n\n\tif (decoration.options.hideInStringTokens && isModelDecorationInString(model, decoration)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\nexport function isModelDecorationInComment(model: ITextModel, decoration: IModelDecoration): boolean {\n\treturn testTokensInRange(\n\t\tmodel,\n\t\tdecoration.range,\n\t\t(tokenType) => tokenType === StandardTokenType.Comment\n\t);\n}\n\nexport function isModelDecorationInString(model: ITextModel, decoration: IModelDecoration): boolean {\n\treturn testTokensInRange(\n\t\tmodel,\n\t\tdecoration.range,\n\t\t(tokenType) => tokenType === StandardTokenType.String\n\t);\n}\n\n/**\n * Calls the callback for every token that intersects the range.\n * If the callback returns `false`, iteration stops and `false` is returned.\n * Otherwise, `true` is returned.\n */\nfunction testTokensInRange(model: ITextModel, range: Range, callback: (tokenType: StandardTokenType) => boolean): boolean {\n\tfor (let lineNumber = range.startLineNumber; lineNumber <= range.endLineNumber; lineNumber++) {\n\t\tconst lineTokens = model.tokenization.getLineTokens(lineNumber);\n\t\tconst isFirstLine = lineNumber === range.startLineNumber;\n\t\tconst isEndLine = lineNumber === range.endLineNumber;\n\n\t\tlet tokenIdx = isFirstLine ? lineTokens.findTokenIndexAtOffset(range.startColumn - 1) : 0;\n\t\twhile (tokenIdx < lineTokens.getCount()) {\n\t\t\tif (isEndLine) {\n\t\t\t\tconst startOffset = lineTokens.getStartOffset(tokenIdx);\n\t\t\t\tif (startOffset > range.endColumn - 1) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst callbackResult = callback(lineTokens.getStandardTokenType(tokenIdx));\n\t\t\tif (!callbackResult) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ttokenIdx++;\n\t\t}\n\t}\n\treturn true;\n}\n\n"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;AAM1F,MAAO,mBAAmB;IAM/B,YAAY,KAAY,EAAE,OAAgC,CAAA;QAL1D,IAAA,CAAA,yBAAyB,GAAS,SAAS,CAAC;QAM3C,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACxB,CAAC;CACD;AAEK,SAAU,wBAAwB,CAAC,KAAiB,EAAE,UAA4B;IACvF,IAAI,UAAU,CAAC,OAAO,CAAC,mBAAmB,IAAI,0BAA0B,CAAC,KAAK,EAAE,UAAU,CAAC,EAAE,CAAC;QAC7F,OAAO,KAAK,CAAC;IACd,CAAC;IAED,IAAI,UAAU,CAAC,OAAO,CAAC,kBAAkB,IAAI,yBAAyB,CAAC,KAAK,EAAE,UAAU,CAAC,EAAE,CAAC;QAC3F,OAAO,KAAK,CAAC;IACd,CAAC;IAED,OAAO,IAAI,CAAC;AACb,CAAC;AAEK,SAAU,0BAA0B,CAAC,KAAiB,EAAE,UAA4B;IACzF,OAAO,iBAAiB,CACvB,KAAK,EACL,UAAU,CAAC,KAAK,EAChB,CAAC,SAAS,EAAE,CAAG,CAAD,QAAU,KAAA,EAAA,6BAAA,EAA8B,CACtD,CAAC;AACH,CAAC;AAEK,SAAU,yBAAyB,CAAC,KAAiB,EAAE,UAA4B;IACxF,OAAO,iBAAiB,CACvB,KAAK,EACL,UAAU,CAAC,KAAK,EAChB,CAAC,SAAS,EAAE,CAAG,CAAD,QAAU,KAAA,EAAA,4BAAA,EAA6B,CACrD,CAAC;AACH,CAAC;AAED;;;;GAIG,CACH,SAAS,iBAAiB,CAAC,KAAiB,EAAE,KAAY,EAAE,QAAmD;IAC9G,IAAK,IAAI,UAAU,GAAG,KAAK,CAAC,eAAe,EAAE,UAAU,IAAI,KAAK,CAAC,aAAa,EAAE,UAAU,EAAE,CAAE,CAAC;QAC9F,MAAM,UAAU,GAAG,KAAK,CAAC,YAAY,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;QAChE,MAAM,WAAW,GAAG,UAAU,KAAK,KAAK,CAAC,eAAe,CAAC;QACzD,MAAM,SAAS,GAAG,UAAU,KAAK,KAAK,CAAC,aAAa,CAAC;QAErD,IAAI,QAAQ,GAAG,WAAW,CAAC,CAAC,CAAC,UAAU,CAAC,sBAAsB,CAAC,KAAK,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1F,MAAO,QAAQ,GAAG,UAAU,CAAC,QAAQ,EAAE,CAAE,CAAC;YACzC,IAAI,SAAS,EAAE,CAAC;gBACf,MAAM,WAAW,GAAG,UAAU,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;gBACxD,IAAI,WAAW,GAAG,KAAK,CAAC,SAAS,GAAG,CAAC,EAAE,CAAC;oBACvC,MAAM;gBACP,CAAC;YACF,CAAC;YAED,MAAM,cAAc,GAAG,QAAQ,CAAC,UAAU,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC3E,IAAI,CAAC,cAAc,EAAE,CAAC;gBACrB,OAAO,KAAK,CAAC;YACd,CAAC;YACD,QAAQ,EAAE,CAAC;QACZ,CAAC;IACF,CAAC;IACD,OAAO,IAAI,CAAC;AACb,CAAC","debugId":null}},
    {"offset": {"line": 141, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/monaco-editor/esm/vs/editor/common/viewModel/overviewZoneManager.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/viewModel/file%3A/mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/viewModel/overviewZoneManager.ts","file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/viewModel/vs/editor/common/viewModel/overviewZoneManager.ts"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nconst enum Constants {\n\tMINIMUM_HEIGHT = 4\n}\n\nexport class ColorZone {\n\t_colorZoneBrand: void = undefined;\n\n\tpublic readonly from: number;\n\tpublic readonly to: number;\n\tpublic readonly colorId: number;\n\n\tconstructor(from: number, to: number, colorId: number) {\n\t\tthis.from = from | 0;\n\t\tthis.to = to | 0;\n\t\tthis.colorId = colorId | 0;\n\t}\n\n\tpublic static compare(a: ColorZone, b: ColorZone): number {\n\t\tif (a.colorId === b.colorId) {\n\t\t\tif (a.from === b.from) {\n\t\t\t\treturn a.to - b.to;\n\t\t\t}\n\t\t\treturn a.from - b.from;\n\t\t}\n\t\treturn a.colorId - b.colorId;\n\t}\n}\n\n/**\n * A zone in the overview ruler\n */\nexport class OverviewRulerZone {\n\t_overviewRulerZoneBrand: void = undefined;\n\n\tpublic readonly startLineNumber: number;\n\tpublic readonly endLineNumber: number;\n\t/**\n\t * If set to 0, the height in lines will be determined based on `endLineNumber`.\n\t */\n\tpublic readonly heightInLines: number;\n\tpublic readonly color: string;\n\n\tprivate _colorZone: ColorZone | null;\n\n\tconstructor(\n\t\tstartLineNumber: number,\n\t\tendLineNumber: number,\n\t\theightInLines: number,\n\t\tcolor: string\n\t) {\n\t\tthis.startLineNumber = startLineNumber;\n\t\tthis.endLineNumber = endLineNumber;\n\t\tthis.heightInLines = heightInLines;\n\t\tthis.color = color;\n\t\tthis._colorZone = null;\n\t}\n\n\tpublic static compare(a: OverviewRulerZone, b: OverviewRulerZone): number {\n\t\tif (a.color === b.color) {\n\t\t\tif (a.startLineNumber === b.startLineNumber) {\n\t\t\t\tif (a.heightInLines === b.heightInLines) {\n\t\t\t\t\treturn a.endLineNumber - b.endLineNumber;\n\t\t\t\t}\n\t\t\t\treturn a.heightInLines - b.heightInLines;\n\t\t\t}\n\t\t\treturn a.startLineNumber - b.startLineNumber;\n\t\t}\n\t\treturn a.color < b.color ? -1 : 1;\n\t}\n\n\tpublic setColorZone(colorZone: ColorZone): void {\n\t\tthis._colorZone = colorZone;\n\t}\n\n\tpublic getColorZones(): ColorZone | null {\n\t\treturn this._colorZone;\n\t}\n}\n\nexport class OverviewZoneManager {\n\n\tprivate readonly _getVerticalOffsetForLine: (lineNumber: number) => number;\n\tprivate _zones: OverviewRulerZone[];\n\tprivate _colorZonesInvalid: boolean;\n\tprivate _lineHeight: number;\n\tprivate _domWidth: number;\n\tprivate _domHeight: number;\n\tprivate _outerHeight: number;\n\tprivate _pixelRatio: number;\n\n\tprivate _lastAssignedId: number;\n\tprivate readonly _color2Id: { [color: string]: number };\n\tprivate readonly _id2Color: string[];\n\n\tconstructor(getVerticalOffsetForLine: (lineNumber: number) => number) {\n\t\tthis._getVerticalOffsetForLine = getVerticalOffsetForLine;\n\t\tthis._zones = [];\n\t\tthis._colorZonesInvalid = false;\n\t\tthis._lineHeight = 0;\n\t\tthis._domWidth = 0;\n\t\tthis._domHeight = 0;\n\t\tthis._outerHeight = 0;\n\t\tthis._pixelRatio = 1;\n\n\t\tthis._lastAssignedId = 0;\n\t\tthis._color2Id = Object.create(null);\n\t\tthis._id2Color = [];\n\t}\n\n\tpublic getId2Color(): string[] {\n\t\treturn this._id2Color;\n\t}\n\n\tpublic setZones(newZones: OverviewRulerZone[]): void {\n\t\tthis._zones = newZones;\n\t\tthis._zones.sort(OverviewRulerZone.compare);\n\t}\n\n\tpublic setLineHeight(lineHeight: number): boolean {\n\t\tif (this._lineHeight === lineHeight) {\n\t\t\treturn false;\n\t\t}\n\t\tthis._lineHeight = lineHeight;\n\t\tthis._colorZonesInvalid = true;\n\t\treturn true;\n\t}\n\n\tpublic setPixelRatio(pixelRatio: number): void {\n\t\tthis._pixelRatio = pixelRatio;\n\t\tthis._colorZonesInvalid = true;\n\t}\n\n\tpublic getDOMWidth(): number {\n\t\treturn this._domWidth;\n\t}\n\n\tpublic getCanvasWidth(): number {\n\t\treturn this._domWidth * this._pixelRatio;\n\t}\n\n\tpublic setDOMWidth(width: number): boolean {\n\t\tif (this._domWidth === width) {\n\t\t\treturn false;\n\t\t}\n\t\tthis._domWidth = width;\n\t\tthis._colorZonesInvalid = true;\n\t\treturn true;\n\t}\n\n\tpublic getDOMHeight(): number {\n\t\treturn this._domHeight;\n\t}\n\n\tpublic getCanvasHeight(): number {\n\t\treturn this._domHeight * this._pixelRatio;\n\t}\n\n\tpublic setDOMHeight(height: number): boolean {\n\t\tif (this._domHeight === height) {\n\t\t\treturn false;\n\t\t}\n\t\tthis._domHeight = height;\n\t\tthis._colorZonesInvalid = true;\n\t\treturn true;\n\t}\n\n\tpublic getOuterHeight(): number {\n\t\treturn this._outerHeight;\n\t}\n\n\tpublic setOuterHeight(outerHeight: number): boolean {\n\t\tif (this._outerHeight === outerHeight) {\n\t\t\treturn false;\n\t\t}\n\t\tthis._outerHeight = outerHeight;\n\t\tthis._colorZonesInvalid = true;\n\t\treturn true;\n\t}\n\n\tpublic resolveColorZones(): ColorZone[] {\n\t\tconst colorZonesInvalid = this._colorZonesInvalid;\n\t\tconst lineHeight = Math.floor(this._lineHeight);\n\t\tconst totalHeight = Math.floor(this.getCanvasHeight());\n\t\tconst outerHeight = Math.floor(this._outerHeight);\n\t\tconst heightRatio = totalHeight / outerHeight;\n\t\tconst halfMinimumHeight = Math.floor(Constants.MINIMUM_HEIGHT * this._pixelRatio / 2);\n\n\t\tconst allColorZones: ColorZone[] = [];\n\t\tfor (let i = 0, len = this._zones.length; i < len; i++) {\n\t\t\tconst zone = this._zones[i];\n\n\t\t\tif (!colorZonesInvalid) {\n\t\t\t\tconst colorZone = zone.getColorZones();\n\t\t\t\tif (colorZone) {\n\t\t\t\t\tallColorZones.push(colorZone);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst offset1 = this._getVerticalOffsetForLine(zone.startLineNumber);\n\t\t\tconst offset2 = (\n\t\t\t\tzone.heightInLines === 0\n\t\t\t\t\t? this._getVerticalOffsetForLine(zone.endLineNumber) + lineHeight\n\t\t\t\t\t: offset1 + zone.heightInLines * lineHeight\n\t\t\t);\n\n\t\t\tconst y1 = Math.floor(heightRatio * offset1);\n\t\t\tconst y2 = Math.floor(heightRatio * offset2);\n\n\t\t\tlet ycenter = Math.floor((y1 + y2) / 2);\n\t\t\tlet halfHeight = (y2 - ycenter);\n\n\t\t\tif (halfHeight < halfMinimumHeight) {\n\t\t\t\thalfHeight = halfMinimumHeight;\n\t\t\t}\n\n\t\t\tif (ycenter - halfHeight < 0) {\n\t\t\t\tycenter = halfHeight;\n\t\t\t}\n\t\t\tif (ycenter + halfHeight > totalHeight) {\n\t\t\t\tycenter = totalHeight - halfHeight;\n\t\t\t}\n\n\t\t\tconst color = zone.color;\n\t\t\tlet colorId = this._color2Id[color];\n\t\t\tif (!colorId) {\n\t\t\t\tcolorId = (++this._lastAssignedId);\n\t\t\t\tthis._color2Id[color] = colorId;\n\t\t\t\tthis._id2Color[colorId] = color;\n\t\t\t}\n\t\t\tconst colorZone = new ColorZone(ycenter - halfHeight, ycenter + halfHeight, colorId);\n\n\t\t\tzone.setColorZone(colorZone);\n\t\t\tallColorZones.push(colorZone);\n\t\t}\n\n\t\tthis._colorZonesInvalid = false;\n\n\t\tallColorZones.sort(ColorZone.compare);\n\t\treturn allColorZones;\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nconst enum Constants {\n\tMINIMUM_HEIGHT = 4\n}\n\nexport class ColorZone {\n\t_colorZoneBrand: void = undefined;\n\n\tpublic readonly from: number;\n\tpublic readonly to: number;\n\tpublic readonly colorId: number;\n\n\tconstructor(from: number, to: number, colorId: number) {\n\t\tthis.from = from | 0;\n\t\tthis.to = to | 0;\n\t\tthis.colorId = colorId | 0;\n\t}\n\n\tpublic static compare(a: ColorZone, b: ColorZone): number {\n\t\tif (a.colorId === b.colorId) {\n\t\t\tif (a.from === b.from) {\n\t\t\t\treturn a.to - b.to;\n\t\t\t}\n\t\t\treturn a.from - b.from;\n\t\t}\n\t\treturn a.colorId - b.colorId;\n\t}\n}\n\n/**\n * A zone in the overview ruler\n */\nexport class OverviewRulerZone {\n\t_overviewRulerZoneBrand: void = undefined;\n\n\tpublic readonly startLineNumber: number;\n\tpublic readonly endLineNumber: number;\n\t/**\n\t * If set to 0, the height in lines will be determined based on `endLineNumber`.\n\t */\n\tpublic readonly heightInLines: number;\n\tpublic readonly color: string;\n\n\tprivate _colorZone: ColorZone | null;\n\n\tconstructor(\n\t\tstartLineNumber: number,\n\t\tendLineNumber: number,\n\t\theightInLines: number,\n\t\tcolor: string\n\t) {\n\t\tthis.startLineNumber = startLineNumber;\n\t\tthis.endLineNumber = endLineNumber;\n\t\tthis.heightInLines = heightInLines;\n\t\tthis.color = color;\n\t\tthis._colorZone = null;\n\t}\n\n\tpublic static compare(a: OverviewRulerZone, b: OverviewRulerZone): number {\n\t\tif (a.color === b.color) {\n\t\t\tif (a.startLineNumber === b.startLineNumber) {\n\t\t\t\tif (a.heightInLines === b.heightInLines) {\n\t\t\t\t\treturn a.endLineNumber - b.endLineNumber;\n\t\t\t\t}\n\t\t\t\treturn a.heightInLines - b.heightInLines;\n\t\t\t}\n\t\t\treturn a.startLineNumber - b.startLineNumber;\n\t\t}\n\t\treturn a.color < b.color ? -1 : 1;\n\t}\n\n\tpublic setColorZone(colorZone: ColorZone): void {\n\t\tthis._colorZone = colorZone;\n\t}\n\n\tpublic getColorZones(): ColorZone | null {\n\t\treturn this._colorZone;\n\t}\n}\n\nexport class OverviewZoneManager {\n\n\tprivate readonly _getVerticalOffsetForLine: (lineNumber: number) => number;\n\tprivate _zones: OverviewRulerZone[];\n\tprivate _colorZonesInvalid: boolean;\n\tprivate _lineHeight: number;\n\tprivate _domWidth: number;\n\tprivate _domHeight: number;\n\tprivate _outerHeight: number;\n\tprivate _pixelRatio: number;\n\n\tprivate _lastAssignedId: number;\n\tprivate readonly _color2Id: { [color: string]: number };\n\tprivate readonly _id2Color: string[];\n\n\tconstructor(getVerticalOffsetForLine: (lineNumber: number) => number) {\n\t\tthis._getVerticalOffsetForLine = getVerticalOffsetForLine;\n\t\tthis._zones = [];\n\t\tthis._colorZonesInvalid = false;\n\t\tthis._lineHeight = 0;\n\t\tthis._domWidth = 0;\n\t\tthis._domHeight = 0;\n\t\tthis._outerHeight = 0;\n\t\tthis._pixelRatio = 1;\n\n\t\tthis._lastAssignedId = 0;\n\t\tthis._color2Id = Object.create(null);\n\t\tthis._id2Color = [];\n\t}\n\n\tpublic getId2Color(): string[] {\n\t\treturn this._id2Color;\n\t}\n\n\tpublic setZones(newZones: OverviewRulerZone[]): void {\n\t\tthis._zones = newZones;\n\t\tthis._zones.sort(OverviewRulerZone.compare);\n\t}\n\n\tpublic setLineHeight(lineHeight: number): boolean {\n\t\tif (this._lineHeight === lineHeight) {\n\t\t\treturn false;\n\t\t}\n\t\tthis._lineHeight = lineHeight;\n\t\tthis._colorZonesInvalid = true;\n\t\treturn true;\n\t}\n\n\tpublic setPixelRatio(pixelRatio: number): void {\n\t\tthis._pixelRatio = pixelRatio;\n\t\tthis._colorZonesInvalid = true;\n\t}\n\n\tpublic getDOMWidth(): number {\n\t\treturn this._domWidth;\n\t}\n\n\tpublic getCanvasWidth(): number {\n\t\treturn this._domWidth * this._pixelRatio;\n\t}\n\n\tpublic setDOMWidth(width: number): boolean {\n\t\tif (this._domWidth === width) {\n\t\t\treturn false;\n\t\t}\n\t\tthis._domWidth = width;\n\t\tthis._colorZonesInvalid = true;\n\t\treturn true;\n\t}\n\n\tpublic getDOMHeight(): number {\n\t\treturn this._domHeight;\n\t}\n\n\tpublic getCanvasHeight(): number {\n\t\treturn this._domHeight * this._pixelRatio;\n\t}\n\n\tpublic setDOMHeight(height: number): boolean {\n\t\tif (this._domHeight === height) {\n\t\t\treturn false;\n\t\t}\n\t\tthis._domHeight = height;\n\t\tthis._colorZonesInvalid = true;\n\t\treturn true;\n\t}\n\n\tpublic getOuterHeight(): number {\n\t\treturn this._outerHeight;\n\t}\n\n\tpublic setOuterHeight(outerHeight: number): boolean {\n\t\tif (this._outerHeight === outerHeight) {\n\t\t\treturn false;\n\t\t}\n\t\tthis._outerHeight = outerHeight;\n\t\tthis._colorZonesInvalid = true;\n\t\treturn true;\n\t}\n\n\tpublic resolveColorZones(): ColorZone[] {\n\t\tconst colorZonesInvalid = this._colorZonesInvalid;\n\t\tconst lineHeight = Math.floor(this._lineHeight);\n\t\tconst totalHeight = Math.floor(this.getCanvasHeight());\n\t\tconst outerHeight = Math.floor(this._outerHeight);\n\t\tconst heightRatio = totalHeight / outerHeight;\n\t\tconst halfMinimumHeight = Math.floor(Constants.MINIMUM_HEIGHT * this._pixelRatio / 2);\n\n\t\tconst allColorZones: ColorZone[] = [];\n\t\tfor (let i = 0, len = this._zones.length; i < len; i++) {\n\t\t\tconst zone = this._zones[i];\n\n\t\t\tif (!colorZonesInvalid) {\n\t\t\t\tconst colorZone = zone.getColorZones();\n\t\t\t\tif (colorZone) {\n\t\t\t\t\tallColorZones.push(colorZone);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst offset1 = this._getVerticalOffsetForLine(zone.startLineNumber);\n\t\t\tconst offset2 = (\n\t\t\t\tzone.heightInLines === 0\n\t\t\t\t\t? this._getVerticalOffsetForLine(zone.endLineNumber) + lineHeight\n\t\t\t\t\t: offset1 + zone.heightInLines * lineHeight\n\t\t\t);\n\n\t\t\tconst y1 = Math.floor(heightRatio * offset1);\n\t\t\tconst y2 = Math.floor(heightRatio * offset2);\n\n\t\t\tlet ycenter = Math.floor((y1 + y2) / 2);\n\t\t\tlet halfHeight = (y2 - ycenter);\n\n\t\t\tif (halfHeight < halfMinimumHeight) {\n\t\t\t\thalfHeight = halfMinimumHeight;\n\t\t\t}\n\n\t\t\tif (ycenter - halfHeight < 0) {\n\t\t\t\tycenter = halfHeight;\n\t\t\t}\n\t\t\tif (ycenter + halfHeight > totalHeight) {\n\t\t\t\tycenter = totalHeight - halfHeight;\n\t\t\t}\n\n\t\t\tconst color = zone.color;\n\t\t\tlet colorId = this._color2Id[color];\n\t\t\tif (!colorId) {\n\t\t\t\tcolorId = (++this._lastAssignedId);\n\t\t\t\tthis._color2Id[color] = colorId;\n\t\t\t\tthis._id2Color[colorId] = color;\n\t\t\t}\n\t\t\tconst colorZone = new ColorZone(ycenter - halfHeight, ycenter + halfHeight, colorId);\n\n\t\t\tzone.setColorZone(colorZone);\n\t\t\tallColorZones.push(colorZone);\n\t\t}\n\n\t\tthis._colorZonesInvalid = false;\n\n\t\tallColorZones.sort(ColorZone.compare);\n\t\treturn allColorZones;\n\t}\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 321, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/monaco-editor/esm/vs/editor/common/viewModel/viewContext.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/viewModel/file%3A/mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/viewModel/viewContext.ts","file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/viewModel/vs/editor/common/viewModel/viewContext.ts"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IEditorConfiguration } from '../config/editorConfiguration.js';\nimport { ViewEventHandler } from '../viewEventHandler.js';\nimport { IViewLayout, IViewModel } from '../viewModel.js';\nimport { IColorTheme } from '../../../platform/theme/common/themeService.js';\nimport { EditorTheme } from '../editorTheme.js';\n\nexport class ViewContext {\n\n\tpublic readonly configuration: IEditorConfiguration;\n\tpublic readonly viewModel: IViewModel;\n\tpublic readonly viewLayout: IViewLayout;\n\tpublic readonly theme: EditorTheme;\n\n\tconstructor(\n\t\tconfiguration: IEditorConfiguration,\n\t\ttheme: IColorTheme,\n\t\tmodel: IViewModel\n\t) {\n\t\tthis.configuration = configuration;\n\t\tthis.theme = new EditorTheme(theme);\n\t\tthis.viewModel = model;\n\t\tthis.viewLayout = model.viewLayout;\n\t}\n\n\tpublic addEventHandler(eventHandler: ViewEventHandler): void {\n\t\tthis.viewModel.addViewEventHandler(eventHandler);\n\t}\n\n\tpublic removeEventHandler(eventHandler: ViewEventHandler): void {\n\t\tthis.viewModel.removeViewEventHandler(eventHandler);\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IEditorConfiguration } from '../config/editorConfiguration.js';\nimport { ViewEventHandler } from '../viewEventHandler.js';\nimport { IViewLayout, IViewModel } from '../viewModel.js';\nimport { IColorTheme } from '../../../platform/theme/common/themeService.js';\nimport { EditorTheme } from '../editorTheme.js';\n\nexport class ViewContext {\n\n\tpublic readonly configuration: IEditorConfiguration;\n\tpublic readonly viewModel: IViewModel;\n\tpublic readonly viewLayout: IViewLayout;\n\tpublic readonly theme: EditorTheme;\n\n\tconstructor(\n\t\tconfiguration: IEditorConfiguration,\n\t\ttheme: IColorTheme,\n\t\tmodel: IViewModel\n\t) {\n\t\tthis.configuration = configuration;\n\t\tthis.theme = new EditorTheme(theme);\n\t\tthis.viewModel = model;\n\t\tthis.viewLayout = model.viewLayout;\n\t}\n\n\tpublic addEventHandler(eventHandler: ViewEventHandler): void {\n\t\tthis.viewModel.addViewEventHandler(eventHandler);\n\t}\n\n\tpublic removeEventHandler(eventHandler: ViewEventHandler): void {\n\t\tthis.viewModel.removeViewEventHandler(eventHandler);\n\t}\n}\n"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;AAMhG,OAAO,EAAE,WAAW,EAAE,MAAM,mBAAmB,CAAC;;AAE1C,MAAO,WAAW;IAOvB,YACC,aAAmC,EACnC,KAAkB,EAClB,KAAiB,CAAA;QAEjB,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,KAAK,GAAG,IAAI,+LAAW,CAAC,KAAK,CAAC,CAAC;QACpC,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC;IACpC,CAAC;IAEM,eAAe,CAAC,YAA8B,EAAA;QACpD,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC;IAClD,CAAC;IAEM,kBAAkB,CAAC,YAA8B,EAAA;QACvD,IAAI,CAAC,SAAS,CAAC,sBAAsB,CAAC,YAAY,CAAC,CAAC;IACrD,CAAC;CACD","debugId":null}},
    {"offset": {"line": 348, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/monaco-editor/esm/vs/editor/common/viewModel/monospaceLineBreaksComputer.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/viewModel/file%3A/mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/viewModel/monospaceLineBreaksComputer.ts","file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/viewModel/vs/editor/common/viewModel/monospaceLineBreaksComputer.ts"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from '../../../base/common/charCode.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { WrappingIndent, IComputedEditorOptions, EditorOption } from '../config/editorOptions.js';\nimport { CharacterClassifier } from '../core/characterClassifier.js';\nimport { FontInfo } from '../config/fontInfo.js';\nimport { LineInjectedText } from '../textModelEvents.js';\nimport { InjectedTextOptions } from '../model.js';\nimport { ILineBreaksComputerFactory, ILineBreaksComputer, ModelLineProjectionData } from '../modelLineProjectionData.js';\n\nexport class MonospaceLineBreaksComputerFactory implements ILineBreaksComputerFactory {\n\tpublic static create(options: IComputedEditorOptions): MonospaceLineBreaksComputerFactory {\n\t\treturn new MonospaceLineBreaksComputerFactory(\n\t\t\toptions.get(EditorOption.wordWrapBreakBeforeCharacters),\n\t\t\toptions.get(EditorOption.wordWrapBreakAfterCharacters)\n\t\t);\n\t}\n\n\tprivate readonly classifier: WrappingCharacterClassifier;\n\n\tconstructor(breakBeforeChars: string, breakAfterChars: string) {\n\t\tthis.classifier = new WrappingCharacterClassifier(breakBeforeChars, breakAfterChars);\n\t}\n\n\tpublic createLineBreaksComputer(fontInfo: FontInfo, tabSize: number, wrappingColumn: number, wrappingIndent: WrappingIndent, wordBreak: 'normal' | 'keepAll', wrapOnEscapedLineFeeds: boolean): ILineBreaksComputer {\n\t\tconst requests: string[] = [];\n\t\tconst injectedTexts: (LineInjectedText[] | null)[] = [];\n\t\tconst previousBreakingData: (ModelLineProjectionData | null)[] = [];\n\t\treturn {\n\t\t\taddRequest: (lineText: string, injectedText: LineInjectedText[] | null, previousLineBreakData: ModelLineProjectionData | null) => {\n\t\t\t\trequests.push(lineText);\n\t\t\t\tinjectedTexts.push(injectedText);\n\t\t\t\tpreviousBreakingData.push(previousLineBreakData);\n\t\t\t},\n\t\t\tfinalize: () => {\n\t\t\t\tconst columnsForFullWidthChar = fontInfo.typicalFullwidthCharacterWidth / fontInfo.typicalHalfwidthCharacterWidth;\n\t\t\t\tconst result: (ModelLineProjectionData | null)[] = [];\n\t\t\t\tfor (let i = 0, len = requests.length; i < len; i++) {\n\t\t\t\t\tconst injectedText = injectedTexts[i];\n\t\t\t\t\tconst previousLineBreakData = previousBreakingData[i];\n\t\t\t\t\tif (previousLineBreakData && !previousLineBreakData.injectionOptions && !injectedText) {\n\t\t\t\t\t\tresult[i] = createLineBreaksFromPreviousLineBreaks(this.classifier, previousLineBreakData, requests[i], tabSize, wrappingColumn, columnsForFullWidthChar, wrappingIndent, wordBreak);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult[i] = createLineBreaks(this.classifier, requests[i], injectedText, tabSize, wrappingColumn, columnsForFullWidthChar, wrappingIndent, wordBreak, wrapOnEscapedLineFeeds);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tarrPool1.length = 0;\n\t\t\t\tarrPool2.length = 0;\n\t\t\t\treturn result;\n\t\t\t}\n\t\t};\n\t}\n}\n\nconst enum CharacterClass {\n\tNONE = 0,\n\tBREAK_BEFORE = 1,\n\tBREAK_AFTER = 2,\n\tBREAK_IDEOGRAPHIC = 3 // for Han and Kana.\n}\n\nclass WrappingCharacterClassifier extends CharacterClassifier<CharacterClass> {\n\n\tconstructor(BREAK_BEFORE: string, BREAK_AFTER: string) {\n\t\tsuper(CharacterClass.NONE);\n\n\t\tfor (let i = 0; i < BREAK_BEFORE.length; i++) {\n\t\t\tthis.set(BREAK_BEFORE.charCodeAt(i), CharacterClass.BREAK_BEFORE);\n\t\t}\n\n\t\tfor (let i = 0; i < BREAK_AFTER.length; i++) {\n\t\t\tthis.set(BREAK_AFTER.charCodeAt(i), CharacterClass.BREAK_AFTER);\n\t\t}\n\t}\n\n\tpublic override get(charCode: number): CharacterClass {\n\t\tif (charCode >= 0 && charCode < 256) {\n\t\t\treturn <CharacterClass>this._asciiMap[charCode];\n\t\t} else {\n\t\t\t// Initialize CharacterClass.BREAK_IDEOGRAPHIC for these Unicode ranges:\n\t\t\t// 1. CJK Unified Ideographs (0x4E00 -- 0x9FFF)\n\t\t\t// 2. CJK Unified Ideographs Extension A (0x3400 -- 0x4DBF)\n\t\t\t// 3. Hiragana and Katakana (0x3040 -- 0x30FF)\n\t\t\tif (\n\t\t\t\t(charCode >= 0x3040 && charCode <= 0x30FF)\n\t\t\t\t|| (charCode >= 0x3400 && charCode <= 0x4DBF)\n\t\t\t\t|| (charCode >= 0x4E00 && charCode <= 0x9FFF)\n\t\t\t) {\n\t\t\t\treturn CharacterClass.BREAK_IDEOGRAPHIC;\n\t\t\t}\n\n\t\t\treturn <CharacterClass>(this._map.get(charCode) || this._defaultValue);\n\t\t}\n\t}\n}\n\nlet arrPool1: number[] = [];\nlet arrPool2: number[] = [];\n\nfunction createLineBreaksFromPreviousLineBreaks(classifier: WrappingCharacterClassifier, previousBreakingData: ModelLineProjectionData, lineText: string, tabSize: number, firstLineBreakColumn: number, columnsForFullWidthChar: number, wrappingIndent: WrappingIndent, wordBreak: 'normal' | 'keepAll'): ModelLineProjectionData | null {\n\tif (firstLineBreakColumn === -1) {\n\t\treturn null;\n\t}\n\n\tconst len = lineText.length;\n\tif (len <= 1) {\n\t\treturn null;\n\t}\n\n\tconst isKeepAll = (wordBreak === 'keepAll');\n\n\tconst prevBreakingOffsets = previousBreakingData.breakOffsets;\n\tconst prevBreakingOffsetsVisibleColumn = previousBreakingData.breakOffsetsVisibleColumn;\n\n\tconst wrappedTextIndentLength = computeWrappedTextIndentLength(lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent);\n\tconst wrappedLineBreakColumn = firstLineBreakColumn - wrappedTextIndentLength;\n\n\tconst breakingOffsets: number[] = arrPool1;\n\tconst breakingOffsetsVisibleColumn: number[] = arrPool2;\n\tlet breakingOffsetsCount = 0;\n\tlet lastBreakingOffset = 0;\n\tlet lastBreakingOffsetVisibleColumn = 0;\n\n\tlet breakingColumn = firstLineBreakColumn;\n\tconst prevLen = prevBreakingOffsets.length;\n\tlet prevIndex = 0;\n\n\tif (prevIndex >= 0) {\n\t\tlet bestDistance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex] - breakingColumn);\n\t\twhile (prevIndex + 1 < prevLen) {\n\t\t\tconst distance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex + 1] - breakingColumn);\n\t\t\tif (distance >= bestDistance) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbestDistance = distance;\n\t\t\tprevIndex++;\n\t\t}\n\t}\n\n\twhile (prevIndex < prevLen) {\n\t\t// Allow for prevIndex to be -1 (for the case where we hit a tab when walking backwards from the first break)\n\t\tlet prevBreakOffset = prevIndex < 0 ? 0 : prevBreakingOffsets[prevIndex];\n\t\tlet prevBreakOffsetVisibleColumn = prevIndex < 0 ? 0 : prevBreakingOffsetsVisibleColumn[prevIndex];\n\t\tif (lastBreakingOffset > prevBreakOffset) {\n\t\t\tprevBreakOffset = lastBreakingOffset;\n\t\t\tprevBreakOffsetVisibleColumn = lastBreakingOffsetVisibleColumn;\n\t\t}\n\n\t\tlet breakOffset = 0;\n\t\tlet breakOffsetVisibleColumn = 0;\n\n\t\tlet forcedBreakOffset = 0;\n\t\tlet forcedBreakOffsetVisibleColumn = 0;\n\n\t\t// initially, we search as much as possible to the right (if it fits)\n\t\tif (prevBreakOffsetVisibleColumn <= breakingColumn) {\n\t\t\tlet visibleColumn = prevBreakOffsetVisibleColumn;\n\t\t\tlet prevCharCode = prevBreakOffset === 0 ? CharCode.Null : lineText.charCodeAt(prevBreakOffset - 1);\n\t\t\tlet prevCharCodeClass = prevBreakOffset === 0 ? CharacterClass.NONE : classifier.get(prevCharCode);\n\t\t\tlet entireLineFits = true;\n\t\t\tfor (let i = prevBreakOffset; i < len; i++) {\n\t\t\t\tconst charStartOffset = i;\n\t\t\t\tconst charCode = lineText.charCodeAt(i);\n\t\t\t\tlet charCodeClass: number;\n\t\t\t\tlet charWidth: number;\n\n\t\t\t\tif (strings.isHighSurrogate(charCode)) {\n\t\t\t\t\t// A surrogate pair must always be considered as a single unit, so it is never to be broken\n\t\t\t\t\ti++;\n\t\t\t\t\tcharCodeClass = CharacterClass.NONE;\n\t\t\t\t\tcharWidth = 2;\n\t\t\t\t} else {\n\t\t\t\t\tcharCodeClass = classifier.get(charCode);\n\t\t\t\t\tcharWidth = computeCharWidth(charCode, visibleColumn, tabSize, columnsForFullWidthChar);\n\t\t\t\t}\n\n\t\t\t\tif (charStartOffset > lastBreakingOffset && canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass, isKeepAll)) {\n\t\t\t\t\tbreakOffset = charStartOffset;\n\t\t\t\t\tbreakOffsetVisibleColumn = visibleColumn;\n\t\t\t\t}\n\n\t\t\t\tvisibleColumn += charWidth;\n\n\t\t\t\t// check if adding character at `i` will go over the breaking column\n\t\t\t\tif (visibleColumn > breakingColumn) {\n\t\t\t\t\t// We need to break at least before character at `i`:\n\t\t\t\t\tif (charStartOffset > lastBreakingOffset) {\n\t\t\t\t\t\tforcedBreakOffset = charStartOffset;\n\t\t\t\t\t\tforcedBreakOffsetVisibleColumn = visibleColumn - charWidth;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// we need to advance at least by one character\n\t\t\t\t\t\tforcedBreakOffset = i + 1;\n\t\t\t\t\t\tforcedBreakOffsetVisibleColumn = visibleColumn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (visibleColumn - breakOffsetVisibleColumn > wrappedLineBreakColumn) {\n\t\t\t\t\t\t// Cannot break at `breakOffset` => reset it if it was set\n\t\t\t\t\t\tbreakOffset = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tentireLineFits = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tprevCharCode = charCode;\n\t\t\t\tprevCharCodeClass = charCodeClass;\n\t\t\t}\n\n\t\t\tif (entireLineFits) {\n\t\t\t\t// there is no more need to break => stop the outer loop!\n\t\t\t\tif (breakingOffsetsCount > 0) {\n\t\t\t\t\t// Add last segment, no need to assign to `lastBreakingOffset` and `lastBreakingOffsetVisibleColumn`\n\t\t\t\t\tbreakingOffsets[breakingOffsetsCount] = prevBreakingOffsets[prevBreakingOffsets.length - 1];\n\t\t\t\t\tbreakingOffsetsVisibleColumn[breakingOffsetsCount] = prevBreakingOffsetsVisibleColumn[prevBreakingOffsets.length - 1];\n\t\t\t\t\tbreakingOffsetsCount++;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (breakOffset === 0) {\n\t\t\t// must search left\n\t\t\tlet visibleColumn = prevBreakOffsetVisibleColumn;\n\t\t\tlet charCode = lineText.charCodeAt(prevBreakOffset);\n\t\t\tlet charCodeClass = classifier.get(charCode);\n\t\t\tlet hitATabCharacter = false;\n\t\t\tfor (let i = prevBreakOffset - 1; i >= lastBreakingOffset; i--) {\n\t\t\t\tconst charStartOffset = i + 1;\n\t\t\t\tconst prevCharCode = lineText.charCodeAt(i);\n\n\t\t\t\tif (prevCharCode === CharCode.Tab) {\n\t\t\t\t\t// cannot determine the width of a tab when going backwards, so we must go forwards\n\t\t\t\t\thitATabCharacter = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tlet prevCharCodeClass: number;\n\t\t\t\tlet prevCharWidth: number;\n\n\t\t\t\tif (strings.isLowSurrogate(prevCharCode)) {\n\t\t\t\t\t// A surrogate pair must always be considered as a single unit, so it is never to be broken\n\t\t\t\t\ti--;\n\t\t\t\t\tprevCharCodeClass = CharacterClass.NONE;\n\t\t\t\t\tprevCharWidth = 2;\n\t\t\t\t} else {\n\t\t\t\t\tprevCharCodeClass = classifier.get(prevCharCode);\n\t\t\t\t\tprevCharWidth = (strings.isFullWidthCharacter(prevCharCode) ? columnsForFullWidthChar : 1);\n\t\t\t\t}\n\n\t\t\t\tif (visibleColumn <= breakingColumn) {\n\t\t\t\t\tif (forcedBreakOffset === 0) {\n\t\t\t\t\t\tforcedBreakOffset = charStartOffset;\n\t\t\t\t\t\tforcedBreakOffsetVisibleColumn = visibleColumn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (visibleColumn <= breakingColumn - wrappedLineBreakColumn) {\n\t\t\t\t\t\t// went too far!\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass, isKeepAll)) {\n\t\t\t\t\t\tbreakOffset = charStartOffset;\n\t\t\t\t\t\tbreakOffsetVisibleColumn = visibleColumn;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvisibleColumn -= prevCharWidth;\n\t\t\t\tcharCode = prevCharCode;\n\t\t\t\tcharCodeClass = prevCharCodeClass;\n\t\t\t}\n\n\t\t\tif (breakOffset !== 0) {\n\t\t\t\tconst remainingWidthOfNextLine = wrappedLineBreakColumn - (forcedBreakOffsetVisibleColumn - breakOffsetVisibleColumn);\n\t\t\t\tif (remainingWidthOfNextLine <= tabSize) {\n\t\t\t\t\tconst charCodeAtForcedBreakOffset = lineText.charCodeAt(forcedBreakOffset);\n\t\t\t\t\tlet charWidth: number;\n\t\t\t\t\tif (strings.isHighSurrogate(charCodeAtForcedBreakOffset)) {\n\t\t\t\t\t\t// A surrogate pair must always be considered as a single unit, so it is never to be broken\n\t\t\t\t\t\tcharWidth = 2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcharWidth = computeCharWidth(charCodeAtForcedBreakOffset, forcedBreakOffsetVisibleColumn, tabSize, columnsForFullWidthChar);\n\t\t\t\t\t}\n\t\t\t\t\tif (remainingWidthOfNextLine - charWidth < 0) {\n\t\t\t\t\t\t// it is not worth it to break at breakOffset, it just introduces an extra needless line!\n\t\t\t\t\t\tbreakOffset = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (hitATabCharacter) {\n\t\t\t\t// cannot determine the width of a tab when going backwards, so we must go forwards from the previous break\n\t\t\t\tprevIndex--;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\tif (breakOffset === 0) {\n\t\t\t// Could not find a good breaking point\n\t\t\tbreakOffset = forcedBreakOffset;\n\t\t\tbreakOffsetVisibleColumn = forcedBreakOffsetVisibleColumn;\n\t\t}\n\n\t\tif (breakOffset <= lastBreakingOffset) {\n\t\t\t// Make sure that we are advancing (at least one character)\n\t\t\tconst charCode = lineText.charCodeAt(lastBreakingOffset);\n\t\t\tif (strings.isHighSurrogate(charCode)) {\n\t\t\t\t// A surrogate pair must always be considered as a single unit, so it is never to be broken\n\t\t\t\tbreakOffset = lastBreakingOffset + 2;\n\t\t\t\tbreakOffsetVisibleColumn = lastBreakingOffsetVisibleColumn + 2;\n\t\t\t} else {\n\t\t\t\tbreakOffset = lastBreakingOffset + 1;\n\t\t\t\tbreakOffsetVisibleColumn = lastBreakingOffsetVisibleColumn + computeCharWidth(charCode, lastBreakingOffsetVisibleColumn, tabSize, columnsForFullWidthChar);\n\t\t\t}\n\t\t}\n\n\t\tlastBreakingOffset = breakOffset;\n\t\tbreakingOffsets[breakingOffsetsCount] = breakOffset;\n\t\tlastBreakingOffsetVisibleColumn = breakOffsetVisibleColumn;\n\t\tbreakingOffsetsVisibleColumn[breakingOffsetsCount] = breakOffsetVisibleColumn;\n\t\tbreakingOffsetsCount++;\n\t\tbreakingColumn = breakOffsetVisibleColumn + wrappedLineBreakColumn;\n\n\t\twhile (prevIndex < 0 || (prevIndex < prevLen && prevBreakingOffsetsVisibleColumn[prevIndex] < breakOffsetVisibleColumn)) {\n\t\t\tprevIndex++;\n\t\t}\n\n\t\tlet bestDistance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex] - breakingColumn);\n\t\twhile (prevIndex + 1 < prevLen) {\n\t\t\tconst distance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex + 1] - breakingColumn);\n\t\t\tif (distance >= bestDistance) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbestDistance = distance;\n\t\t\tprevIndex++;\n\t\t}\n\t}\n\n\tif (breakingOffsetsCount === 0) {\n\t\treturn null;\n\t}\n\n\t// Doing here some object reuse which ends up helping a huge deal with GC pauses!\n\tbreakingOffsets.length = breakingOffsetsCount;\n\tbreakingOffsetsVisibleColumn.length = breakingOffsetsCount;\n\tarrPool1 = previousBreakingData.breakOffsets;\n\tarrPool2 = previousBreakingData.breakOffsetsVisibleColumn;\n\tpreviousBreakingData.breakOffsets = breakingOffsets;\n\tpreviousBreakingData.breakOffsetsVisibleColumn = breakingOffsetsVisibleColumn;\n\tpreviousBreakingData.wrappedTextIndentLength = wrappedTextIndentLength;\n\treturn previousBreakingData;\n}\n\nfunction createLineBreaks(classifier: WrappingCharacterClassifier, _lineText: string, injectedTexts: LineInjectedText[] | null, tabSize: number, firstLineBreakColumn: number, columnsForFullWidthChar: number, wrappingIndent: WrappingIndent, wordBreak: 'normal' | 'keepAll', wrapOnEscapedLineFeeds: boolean): ModelLineProjectionData | null {\n\tconst lineText = LineInjectedText.applyInjectedText(_lineText, injectedTexts);\n\n\tlet injectionOptions: InjectedTextOptions[] | null;\n\tlet injectionOffsets: number[] | null;\n\tif (injectedTexts && injectedTexts.length > 0) {\n\t\tinjectionOptions = injectedTexts.map(t => t.options);\n\t\tinjectionOffsets = injectedTexts.map(text => text.column - 1);\n\t} else {\n\t\tinjectionOptions = null;\n\t\tinjectionOffsets = null;\n\t}\n\n\tif (firstLineBreakColumn === -1) {\n\t\tif (!injectionOptions) {\n\t\t\treturn null;\n\t\t}\n\t\t// creating a `LineBreakData` with an invalid `breakOffsetsVisibleColumn` is OK\n\t\t// because `breakOffsetsVisibleColumn` will never be used because it contains injected text\n\t\treturn new ModelLineProjectionData(injectionOffsets, injectionOptions, [lineText.length], [], 0);\n\t}\n\n\tconst len = lineText.length;\n\tif (len <= 1) {\n\t\tif (!injectionOptions) {\n\t\t\treturn null;\n\t\t}\n\t\t// creating a `LineBreakData` with an invalid `breakOffsetsVisibleColumn` is OK\n\t\t// because `breakOffsetsVisibleColumn` will never be used because it contains injected text\n\t\treturn new ModelLineProjectionData(injectionOffsets, injectionOptions, [lineText.length], [], 0);\n\t}\n\n\tconst isKeepAll = (wordBreak === 'keepAll');\n\tconst wrappedTextIndentLength = computeWrappedTextIndentLength(lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent);\n\tconst wrappedLineBreakColumn = firstLineBreakColumn - wrappedTextIndentLength;\n\n\tconst breakingOffsets: number[] = [];\n\tconst breakingOffsetsVisibleColumn: number[] = [];\n\tlet breakingOffsetsCount: number = 0;\n\tlet breakOffset = 0;\n\tlet breakOffsetVisibleColumn = 0;\n\n\tlet breakingColumn = firstLineBreakColumn;\n\tlet prevCharCode = lineText.charCodeAt(0);\n\tlet prevCharCodeClass = classifier.get(prevCharCode);\n\tlet visibleColumn = computeCharWidth(prevCharCode, 0, tabSize, columnsForFullWidthChar);\n\n\tlet startOffset = 1;\n\tif (strings.isHighSurrogate(prevCharCode)) {\n\t\t// A surrogate pair must always be considered as a single unit, so it is never to be broken\n\t\tvisibleColumn += 1;\n\t\tprevCharCode = lineText.charCodeAt(1);\n\t\tprevCharCodeClass = classifier.get(prevCharCode);\n\t\tstartOffset++;\n\t}\n\n\tfor (let i = startOffset; i < len; i++) {\n\t\tconst charStartOffset = i;\n\t\tconst charCode = lineText.charCodeAt(i);\n\t\tlet charCodeClass: CharacterClass;\n\t\tlet charWidth: number;\n\n\t\tif (strings.isHighSurrogate(charCode)) {\n\t\t\t// A surrogate pair must always be considered as a single unit, so it is never to be broken\n\t\t\ti++;\n\t\t\tcharCodeClass = CharacterClass.NONE;\n\t\t\tcharWidth = 2;\n\t\t} else {\n\t\t\tcharCodeClass = classifier.get(charCode);\n\t\t\tcharWidth = computeCharWidth(charCode, visibleColumn, tabSize, columnsForFullWidthChar);\n\t\t}\n\n\t\tif (canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass, isKeepAll)) {\n\t\t\tbreakOffset = charStartOffset;\n\t\t\tbreakOffsetVisibleColumn = visibleColumn;\n\t\t}\n\n\t\tvisibleColumn += charWidth;\n\n\t\t// literal \\n shall trigger a softwrap\n\t\tif (\n\t\t\twrapOnEscapedLineFeeds\n\t\t\t&& i >= 2\n\t\t\t&& (i < 3 || lineText.charAt(i - 3) !== '\\\\')\n\t\t\t&& lineText.charAt(i - 2) === '\\\\'\n\t\t\t&& lineText.charAt(i - 1) === 'n'\n\t\t\t&& lineText.includes('\"')\n\t\t) {\n\t\t\tvisibleColumn += breakingColumn;\n\t\t}\n\n\t\t// check if adding character at `i` will go over the breaking column\n\t\tif (visibleColumn > breakingColumn) {\n\t\t\t// We need to break at least before character at `i`:\n\n\t\t\tif (breakOffset === 0 || visibleColumn - breakOffsetVisibleColumn > wrappedLineBreakColumn) {\n\t\t\t\t// Cannot break at `breakOffset`, must break at `i`\n\t\t\t\tbreakOffset = charStartOffset;\n\t\t\t\tbreakOffsetVisibleColumn = visibleColumn - charWidth;\n\t\t\t}\n\n\t\t\tbreakingOffsets[breakingOffsetsCount] = breakOffset;\n\t\t\tbreakingOffsetsVisibleColumn[breakingOffsetsCount] = breakOffsetVisibleColumn;\n\t\t\tbreakingOffsetsCount++;\n\t\t\tbreakingColumn = breakOffsetVisibleColumn + wrappedLineBreakColumn;\n\t\t\tbreakOffset = 0;\n\t\t}\n\n\t\tprevCharCode = charCode;\n\t\tprevCharCodeClass = charCodeClass;\n\t}\n\n\tif (breakingOffsetsCount === 0 && (!injectedTexts || injectedTexts.length === 0)) {\n\t\treturn null;\n\t}\n\n\t// Add last segment\n\tbreakingOffsets[breakingOffsetsCount] = len;\n\tbreakingOffsetsVisibleColumn[breakingOffsetsCount] = visibleColumn;\n\n\treturn new ModelLineProjectionData(injectionOffsets, injectionOptions, breakingOffsets, breakingOffsetsVisibleColumn, wrappedTextIndentLength);\n}\n\nfunction computeCharWidth(charCode: number, visibleColumn: number, tabSize: number, columnsForFullWidthChar: number): number {\n\tif (charCode === CharCode.Tab) {\n\t\treturn (tabSize - (visibleColumn % tabSize));\n\t}\n\tif (strings.isFullWidthCharacter(charCode)) {\n\t\treturn columnsForFullWidthChar;\n\t}\n\tif (charCode < 32) {\n\t\t// when using `editor.renderControlCharacters`, the substitutions are often wide\n\t\treturn columnsForFullWidthChar;\n\t}\n\treturn 1;\n}\n\nfunction tabCharacterWidth(visibleColumn: number, tabSize: number): number {\n\treturn (tabSize - (visibleColumn % tabSize));\n}\n\n/**\n * Kinsoku Shori : Don't break after a leading character, like an open bracket\n * Kinsoku Shori : Don't break before a trailing character, like a period\n */\nfunction canBreak(prevCharCode: number, prevCharCodeClass: CharacterClass, charCode: number, charCodeClass: CharacterClass, isKeepAll: boolean): boolean {\n\treturn (\n\t\tcharCode !== CharCode.Space\n\t\t&& (\n\t\t\t(prevCharCodeClass === CharacterClass.BREAK_AFTER && charCodeClass !== CharacterClass.BREAK_AFTER) // break at the end of multiple BREAK_AFTER\n\t\t\t|| (prevCharCodeClass !== CharacterClass.BREAK_BEFORE && charCodeClass === CharacterClass.BREAK_BEFORE) // break at the start of multiple BREAK_BEFORE\n\t\t\t|| (!isKeepAll && prevCharCodeClass === CharacterClass.BREAK_IDEOGRAPHIC && charCodeClass !== CharacterClass.BREAK_AFTER)\n\t\t\t|| (!isKeepAll && charCodeClass === CharacterClass.BREAK_IDEOGRAPHIC && prevCharCodeClass !== CharacterClass.BREAK_BEFORE)\n\t\t)\n\t);\n}\n\nfunction computeWrappedTextIndentLength(lineText: string, tabSize: number, firstLineBreakColumn: number, columnsForFullWidthChar: number, wrappingIndent: WrappingIndent): number {\n\tlet wrappedTextIndentLength = 0;\n\tif (wrappingIndent !== WrappingIndent.None) {\n\t\tconst firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineText);\n\t\tif (firstNonWhitespaceIndex !== -1) {\n\t\t\t// Track existing indent\n\n\t\t\tfor (let i = 0; i < firstNonWhitespaceIndex; i++) {\n\t\t\t\tconst charWidth = (lineText.charCodeAt(i) === CharCode.Tab ? tabCharacterWidth(wrappedTextIndentLength, tabSize) : 1);\n\t\t\t\twrappedTextIndentLength += charWidth;\n\t\t\t}\n\n\t\t\t// Increase indent of continuation lines, if desired\n\t\t\tconst numberOfAdditionalTabs = (wrappingIndent === WrappingIndent.DeepIndent ? 2 : wrappingIndent === WrappingIndent.Indent ? 1 : 0);\n\t\t\tfor (let i = 0; i < numberOfAdditionalTabs; i++) {\n\t\t\t\tconst charWidth = tabCharacterWidth(wrappedTextIndentLength, tabSize);\n\t\t\t\twrappedTextIndentLength += charWidth;\n\t\t\t}\n\n\t\t\t// Force sticking to beginning of line if no character would fit except for the indentation\n\t\t\tif (wrappedTextIndentLength + columnsForFullWidthChar > firstLineBreakColumn) {\n\t\t\t\twrappedTextIndentLength = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn wrappedTextIndentLength;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from '../../../base/common/charCode.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { WrappingIndent, IComputedEditorOptions, EditorOption } from '../config/editorOptions.js';\nimport { CharacterClassifier } from '../core/characterClassifier.js';\nimport { FontInfo } from '../config/fontInfo.js';\nimport { LineInjectedText } from '../textModelEvents.js';\nimport { InjectedTextOptions } from '../model.js';\nimport { ILineBreaksComputerFactory, ILineBreaksComputer, ModelLineProjectionData } from '../modelLineProjectionData.js';\n\nexport class MonospaceLineBreaksComputerFactory implements ILineBreaksComputerFactory {\n\tpublic static create(options: IComputedEditorOptions): MonospaceLineBreaksComputerFactory {\n\t\treturn new MonospaceLineBreaksComputerFactory(\n\t\t\toptions.get(EditorOption.wordWrapBreakBeforeCharacters),\n\t\t\toptions.get(EditorOption.wordWrapBreakAfterCharacters)\n\t\t);\n\t}\n\n\tprivate readonly classifier: WrappingCharacterClassifier;\n\n\tconstructor(breakBeforeChars: string, breakAfterChars: string) {\n\t\tthis.classifier = new WrappingCharacterClassifier(breakBeforeChars, breakAfterChars);\n\t}\n\n\tpublic createLineBreaksComputer(fontInfo: FontInfo, tabSize: number, wrappingColumn: number, wrappingIndent: WrappingIndent, wordBreak: 'normal' | 'keepAll', wrapOnEscapedLineFeeds: boolean): ILineBreaksComputer {\n\t\tconst requests: string[] = [];\n\t\tconst injectedTexts: (LineInjectedText[] | null)[] = [];\n\t\tconst previousBreakingData: (ModelLineProjectionData | null)[] = [];\n\t\treturn {\n\t\t\taddRequest: (lineText: string, injectedText: LineInjectedText[] | null, previousLineBreakData: ModelLineProjectionData | null) => {\n\t\t\t\trequests.push(lineText);\n\t\t\t\tinjectedTexts.push(injectedText);\n\t\t\t\tpreviousBreakingData.push(previousLineBreakData);\n\t\t\t},\n\t\t\tfinalize: () => {\n\t\t\t\tconst columnsForFullWidthChar = fontInfo.typicalFullwidthCharacterWidth / fontInfo.typicalHalfwidthCharacterWidth;\n\t\t\t\tconst result: (ModelLineProjectionData | null)[] = [];\n\t\t\t\tfor (let i = 0, len = requests.length; i < len; i++) {\n\t\t\t\t\tconst injectedText = injectedTexts[i];\n\t\t\t\t\tconst previousLineBreakData = previousBreakingData[i];\n\t\t\t\t\tif (previousLineBreakData && !previousLineBreakData.injectionOptions && !injectedText) {\n\t\t\t\t\t\tresult[i] = createLineBreaksFromPreviousLineBreaks(this.classifier, previousLineBreakData, requests[i], tabSize, wrappingColumn, columnsForFullWidthChar, wrappingIndent, wordBreak);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult[i] = createLineBreaks(this.classifier, requests[i], injectedText, tabSize, wrappingColumn, columnsForFullWidthChar, wrappingIndent, wordBreak, wrapOnEscapedLineFeeds);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tarrPool1.length = 0;\n\t\t\t\tarrPool2.length = 0;\n\t\t\t\treturn result;\n\t\t\t}\n\t\t};\n\t}\n}\n\nconst enum CharacterClass {\n\tNONE = 0,\n\tBREAK_BEFORE = 1,\n\tBREAK_AFTER = 2,\n\tBREAK_IDEOGRAPHIC = 3 // for Han and Kana.\n}\n\nclass WrappingCharacterClassifier extends CharacterClassifier<CharacterClass> {\n\n\tconstructor(BREAK_BEFORE: string, BREAK_AFTER: string) {\n\t\tsuper(CharacterClass.NONE);\n\n\t\tfor (let i = 0; i < BREAK_BEFORE.length; i++) {\n\t\t\tthis.set(BREAK_BEFORE.charCodeAt(i), CharacterClass.BREAK_BEFORE);\n\t\t}\n\n\t\tfor (let i = 0; i < BREAK_AFTER.length; i++) {\n\t\t\tthis.set(BREAK_AFTER.charCodeAt(i), CharacterClass.BREAK_AFTER);\n\t\t}\n\t}\n\n\tpublic override get(charCode: number): CharacterClass {\n\t\tif (charCode >= 0 && charCode < 256) {\n\t\t\treturn <CharacterClass>this._asciiMap[charCode];\n\t\t} else {\n\t\t\t// Initialize CharacterClass.BREAK_IDEOGRAPHIC for these Unicode ranges:\n\t\t\t// 1. CJK Unified Ideographs (0x4E00 -- 0x9FFF)\n\t\t\t// 2. CJK Unified Ideographs Extension A (0x3400 -- 0x4DBF)\n\t\t\t// 3. Hiragana and Katakana (0x3040 -- 0x30FF)\n\t\t\tif (\n\t\t\t\t(charCode >= 0x3040 && charCode <= 0x30FF)\n\t\t\t\t|| (charCode >= 0x3400 && charCode <= 0x4DBF)\n\t\t\t\t|| (charCode >= 0x4E00 && charCode <= 0x9FFF)\n\t\t\t) {\n\t\t\t\treturn CharacterClass.BREAK_IDEOGRAPHIC;\n\t\t\t}\n\n\t\t\treturn <CharacterClass>(this._map.get(charCode) || this._defaultValue);\n\t\t}\n\t}\n}\n\nlet arrPool1: number[] = [];\nlet arrPool2: number[] = [];\n\nfunction createLineBreaksFromPreviousLineBreaks(classifier: WrappingCharacterClassifier, previousBreakingData: ModelLineProjectionData, lineText: string, tabSize: number, firstLineBreakColumn: number, columnsForFullWidthChar: number, wrappingIndent: WrappingIndent, wordBreak: 'normal' | 'keepAll'): ModelLineProjectionData | null {\n\tif (firstLineBreakColumn === -1) {\n\t\treturn null;\n\t}\n\n\tconst len = lineText.length;\n\tif (len <= 1) {\n\t\treturn null;\n\t}\n\n\tconst isKeepAll = (wordBreak === 'keepAll');\n\n\tconst prevBreakingOffsets = previousBreakingData.breakOffsets;\n\tconst prevBreakingOffsetsVisibleColumn = previousBreakingData.breakOffsetsVisibleColumn;\n\n\tconst wrappedTextIndentLength = computeWrappedTextIndentLength(lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent);\n\tconst wrappedLineBreakColumn = firstLineBreakColumn - wrappedTextIndentLength;\n\n\tconst breakingOffsets: number[] = arrPool1;\n\tconst breakingOffsetsVisibleColumn: number[] = arrPool2;\n\tlet breakingOffsetsCount = 0;\n\tlet lastBreakingOffset = 0;\n\tlet lastBreakingOffsetVisibleColumn = 0;\n\n\tlet breakingColumn = firstLineBreakColumn;\n\tconst prevLen = prevBreakingOffsets.length;\n\tlet prevIndex = 0;\n\n\tif (prevIndex >= 0) {\n\t\tlet bestDistance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex] - breakingColumn);\n\t\twhile (prevIndex + 1 < prevLen) {\n\t\t\tconst distance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex + 1] - breakingColumn);\n\t\t\tif (distance >= bestDistance) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbestDistance = distance;\n\t\t\tprevIndex++;\n\t\t}\n\t}\n\n\twhile (prevIndex < prevLen) {\n\t\t// Allow for prevIndex to be -1 (for the case where we hit a tab when walking backwards from the first break)\n\t\tlet prevBreakOffset = prevIndex < 0 ? 0 : prevBreakingOffsets[prevIndex];\n\t\tlet prevBreakOffsetVisibleColumn = prevIndex < 0 ? 0 : prevBreakingOffsetsVisibleColumn[prevIndex];\n\t\tif (lastBreakingOffset > prevBreakOffset) {\n\t\t\tprevBreakOffset = lastBreakingOffset;\n\t\t\tprevBreakOffsetVisibleColumn = lastBreakingOffsetVisibleColumn;\n\t\t}\n\n\t\tlet breakOffset = 0;\n\t\tlet breakOffsetVisibleColumn = 0;\n\n\t\tlet forcedBreakOffset = 0;\n\t\tlet forcedBreakOffsetVisibleColumn = 0;\n\n\t\t// initially, we search as much as possible to the right (if it fits)\n\t\tif (prevBreakOffsetVisibleColumn <= breakingColumn) {\n\t\t\tlet visibleColumn = prevBreakOffsetVisibleColumn;\n\t\t\tlet prevCharCode = prevBreakOffset === 0 ? CharCode.Null : lineText.charCodeAt(prevBreakOffset - 1);\n\t\t\tlet prevCharCodeClass = prevBreakOffset === 0 ? CharacterClass.NONE : classifier.get(prevCharCode);\n\t\t\tlet entireLineFits = true;\n\t\t\tfor (let i = prevBreakOffset; i < len; i++) {\n\t\t\t\tconst charStartOffset = i;\n\t\t\t\tconst charCode = lineText.charCodeAt(i);\n\t\t\t\tlet charCodeClass: number;\n\t\t\t\tlet charWidth: number;\n\n\t\t\t\tif (strings.isHighSurrogate(charCode)) {\n\t\t\t\t\t// A surrogate pair must always be considered as a single unit, so it is never to be broken\n\t\t\t\t\ti++;\n\t\t\t\t\tcharCodeClass = CharacterClass.NONE;\n\t\t\t\t\tcharWidth = 2;\n\t\t\t\t} else {\n\t\t\t\t\tcharCodeClass = classifier.get(charCode);\n\t\t\t\t\tcharWidth = computeCharWidth(charCode, visibleColumn, tabSize, columnsForFullWidthChar);\n\t\t\t\t}\n\n\t\t\t\tif (charStartOffset > lastBreakingOffset && canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass, isKeepAll)) {\n\t\t\t\t\tbreakOffset = charStartOffset;\n\t\t\t\t\tbreakOffsetVisibleColumn = visibleColumn;\n\t\t\t\t}\n\n\t\t\t\tvisibleColumn += charWidth;\n\n\t\t\t\t// check if adding character at `i` will go over the breaking column\n\t\t\t\tif (visibleColumn > breakingColumn) {\n\t\t\t\t\t// We need to break at least before character at `i`:\n\t\t\t\t\tif (charStartOffset > lastBreakingOffset) {\n\t\t\t\t\t\tforcedBreakOffset = charStartOffset;\n\t\t\t\t\t\tforcedBreakOffsetVisibleColumn = visibleColumn - charWidth;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// we need to advance at least by one character\n\t\t\t\t\t\tforcedBreakOffset = i + 1;\n\t\t\t\t\t\tforcedBreakOffsetVisibleColumn = visibleColumn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (visibleColumn - breakOffsetVisibleColumn > wrappedLineBreakColumn) {\n\t\t\t\t\t\t// Cannot break at `breakOffset` => reset it if it was set\n\t\t\t\t\t\tbreakOffset = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tentireLineFits = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tprevCharCode = charCode;\n\t\t\t\tprevCharCodeClass = charCodeClass;\n\t\t\t}\n\n\t\t\tif (entireLineFits) {\n\t\t\t\t// there is no more need to break => stop the outer loop!\n\t\t\t\tif (breakingOffsetsCount > 0) {\n\t\t\t\t\t// Add last segment, no need to assign to `lastBreakingOffset` and `lastBreakingOffsetVisibleColumn`\n\t\t\t\t\tbreakingOffsets[breakingOffsetsCount] = prevBreakingOffsets[prevBreakingOffsets.length - 1];\n\t\t\t\t\tbreakingOffsetsVisibleColumn[breakingOffsetsCount] = prevBreakingOffsetsVisibleColumn[prevBreakingOffsets.length - 1];\n\t\t\t\t\tbreakingOffsetsCount++;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (breakOffset === 0) {\n\t\t\t// must search left\n\t\t\tlet visibleColumn = prevBreakOffsetVisibleColumn;\n\t\t\tlet charCode = lineText.charCodeAt(prevBreakOffset);\n\t\t\tlet charCodeClass = classifier.get(charCode);\n\t\t\tlet hitATabCharacter = false;\n\t\t\tfor (let i = prevBreakOffset - 1; i >= lastBreakingOffset; i--) {\n\t\t\t\tconst charStartOffset = i + 1;\n\t\t\t\tconst prevCharCode = lineText.charCodeAt(i);\n\n\t\t\t\tif (prevCharCode === CharCode.Tab) {\n\t\t\t\t\t// cannot determine the width of a tab when going backwards, so we must go forwards\n\t\t\t\t\thitATabCharacter = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tlet prevCharCodeClass: number;\n\t\t\t\tlet prevCharWidth: number;\n\n\t\t\t\tif (strings.isLowSurrogate(prevCharCode)) {\n\t\t\t\t\t// A surrogate pair must always be considered as a single unit, so it is never to be broken\n\t\t\t\t\ti--;\n\t\t\t\t\tprevCharCodeClass = CharacterClass.NONE;\n\t\t\t\t\tprevCharWidth = 2;\n\t\t\t\t} else {\n\t\t\t\t\tprevCharCodeClass = classifier.get(prevCharCode);\n\t\t\t\t\tprevCharWidth = (strings.isFullWidthCharacter(prevCharCode) ? columnsForFullWidthChar : 1);\n\t\t\t\t}\n\n\t\t\t\tif (visibleColumn <= breakingColumn) {\n\t\t\t\t\tif (forcedBreakOffset === 0) {\n\t\t\t\t\t\tforcedBreakOffset = charStartOffset;\n\t\t\t\t\t\tforcedBreakOffsetVisibleColumn = visibleColumn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (visibleColumn <= breakingColumn - wrappedLineBreakColumn) {\n\t\t\t\t\t\t// went too far!\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass, isKeepAll)) {\n\t\t\t\t\t\tbreakOffset = charStartOffset;\n\t\t\t\t\t\tbreakOffsetVisibleColumn = visibleColumn;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvisibleColumn -= prevCharWidth;\n\t\t\t\tcharCode = prevCharCode;\n\t\t\t\tcharCodeClass = prevCharCodeClass;\n\t\t\t}\n\n\t\t\tif (breakOffset !== 0) {\n\t\t\t\tconst remainingWidthOfNextLine = wrappedLineBreakColumn - (forcedBreakOffsetVisibleColumn - breakOffsetVisibleColumn);\n\t\t\t\tif (remainingWidthOfNextLine <= tabSize) {\n\t\t\t\t\tconst charCodeAtForcedBreakOffset = lineText.charCodeAt(forcedBreakOffset);\n\t\t\t\t\tlet charWidth: number;\n\t\t\t\t\tif (strings.isHighSurrogate(charCodeAtForcedBreakOffset)) {\n\t\t\t\t\t\t// A surrogate pair must always be considered as a single unit, so it is never to be broken\n\t\t\t\t\t\tcharWidth = 2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcharWidth = computeCharWidth(charCodeAtForcedBreakOffset, forcedBreakOffsetVisibleColumn, tabSize, columnsForFullWidthChar);\n\t\t\t\t\t}\n\t\t\t\t\tif (remainingWidthOfNextLine - charWidth < 0) {\n\t\t\t\t\t\t// it is not worth it to break at breakOffset, it just introduces an extra needless line!\n\t\t\t\t\t\tbreakOffset = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (hitATabCharacter) {\n\t\t\t\t// cannot determine the width of a tab when going backwards, so we must go forwards from the previous break\n\t\t\t\tprevIndex--;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\tif (breakOffset === 0) {\n\t\t\t// Could not find a good breaking point\n\t\t\tbreakOffset = forcedBreakOffset;\n\t\t\tbreakOffsetVisibleColumn = forcedBreakOffsetVisibleColumn;\n\t\t}\n\n\t\tif (breakOffset <= lastBreakingOffset) {\n\t\t\t// Make sure that we are advancing (at least one character)\n\t\t\tconst charCode = lineText.charCodeAt(lastBreakingOffset);\n\t\t\tif (strings.isHighSurrogate(charCode)) {\n\t\t\t\t// A surrogate pair must always be considered as a single unit, so it is never to be broken\n\t\t\t\tbreakOffset = lastBreakingOffset + 2;\n\t\t\t\tbreakOffsetVisibleColumn = lastBreakingOffsetVisibleColumn + 2;\n\t\t\t} else {\n\t\t\t\tbreakOffset = lastBreakingOffset + 1;\n\t\t\t\tbreakOffsetVisibleColumn = lastBreakingOffsetVisibleColumn + computeCharWidth(charCode, lastBreakingOffsetVisibleColumn, tabSize, columnsForFullWidthChar);\n\t\t\t}\n\t\t}\n\n\t\tlastBreakingOffset = breakOffset;\n\t\tbreakingOffsets[breakingOffsetsCount] = breakOffset;\n\t\tlastBreakingOffsetVisibleColumn = breakOffsetVisibleColumn;\n\t\tbreakingOffsetsVisibleColumn[breakingOffsetsCount] = breakOffsetVisibleColumn;\n\t\tbreakingOffsetsCount++;\n\t\tbreakingColumn = breakOffsetVisibleColumn + wrappedLineBreakColumn;\n\n\t\twhile (prevIndex < 0 || (prevIndex < prevLen && prevBreakingOffsetsVisibleColumn[prevIndex] < breakOffsetVisibleColumn)) {\n\t\t\tprevIndex++;\n\t\t}\n\n\t\tlet bestDistance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex] - breakingColumn);\n\t\twhile (prevIndex + 1 < prevLen) {\n\t\t\tconst distance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex + 1] - breakingColumn);\n\t\t\tif (distance >= bestDistance) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbestDistance = distance;\n\t\t\tprevIndex++;\n\t\t}\n\t}\n\n\tif (breakingOffsetsCount === 0) {\n\t\treturn null;\n\t}\n\n\t// Doing here some object reuse which ends up helping a huge deal with GC pauses!\n\tbreakingOffsets.length = breakingOffsetsCount;\n\tbreakingOffsetsVisibleColumn.length = breakingOffsetsCount;\n\tarrPool1 = previousBreakingData.breakOffsets;\n\tarrPool2 = previousBreakingData.breakOffsetsVisibleColumn;\n\tpreviousBreakingData.breakOffsets = breakingOffsets;\n\tpreviousBreakingData.breakOffsetsVisibleColumn = breakingOffsetsVisibleColumn;\n\tpreviousBreakingData.wrappedTextIndentLength = wrappedTextIndentLength;\n\treturn previousBreakingData;\n}\n\nfunction createLineBreaks(classifier: WrappingCharacterClassifier, _lineText: string, injectedTexts: LineInjectedText[] | null, tabSize: number, firstLineBreakColumn: number, columnsForFullWidthChar: number, wrappingIndent: WrappingIndent, wordBreak: 'normal' | 'keepAll', wrapOnEscapedLineFeeds: boolean): ModelLineProjectionData | null {\n\tconst lineText = LineInjectedText.applyInjectedText(_lineText, injectedTexts);\n\n\tlet injectionOptions: InjectedTextOptions[] | null;\n\tlet injectionOffsets: number[] | null;\n\tif (injectedTexts && injectedTexts.length > 0) {\n\t\tinjectionOptions = injectedTexts.map(t => t.options);\n\t\tinjectionOffsets = injectedTexts.map(text => text.column - 1);\n\t} else {\n\t\tinjectionOptions = null;\n\t\tinjectionOffsets = null;\n\t}\n\n\tif (firstLineBreakColumn === -1) {\n\t\tif (!injectionOptions) {\n\t\t\treturn null;\n\t\t}\n\t\t// creating a `LineBreakData` with an invalid `breakOffsetsVisibleColumn` is OK\n\t\t// because `breakOffsetsVisibleColumn` will never be used because it contains injected text\n\t\treturn new ModelLineProjectionData(injectionOffsets, injectionOptions, [lineText.length], [], 0);\n\t}\n\n\tconst len = lineText.length;\n\tif (len <= 1) {\n\t\tif (!injectionOptions) {\n\t\t\treturn null;\n\t\t}\n\t\t// creating a `LineBreakData` with an invalid `breakOffsetsVisibleColumn` is OK\n\t\t// because `breakOffsetsVisibleColumn` will never be used because it contains injected text\n\t\treturn new ModelLineProjectionData(injectionOffsets, injectionOptions, [lineText.length], [], 0);\n\t}\n\n\tconst isKeepAll = (wordBreak === 'keepAll');\n\tconst wrappedTextIndentLength = computeWrappedTextIndentLength(lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent);\n\tconst wrappedLineBreakColumn = firstLineBreakColumn - wrappedTextIndentLength;\n\n\tconst breakingOffsets: number[] = [];\n\tconst breakingOffsetsVisibleColumn: number[] = [];\n\tlet breakingOffsetsCount: number = 0;\n\tlet breakOffset = 0;\n\tlet breakOffsetVisibleColumn = 0;\n\n\tlet breakingColumn = firstLineBreakColumn;\n\tlet prevCharCode = lineText.charCodeAt(0);\n\tlet prevCharCodeClass = classifier.get(prevCharCode);\n\tlet visibleColumn = computeCharWidth(prevCharCode, 0, tabSize, columnsForFullWidthChar);\n\n\tlet startOffset = 1;\n\tif (strings.isHighSurrogate(prevCharCode)) {\n\t\t// A surrogate pair must always be considered as a single unit, so it is never to be broken\n\t\tvisibleColumn += 1;\n\t\tprevCharCode = lineText.charCodeAt(1);\n\t\tprevCharCodeClass = classifier.get(prevCharCode);\n\t\tstartOffset++;\n\t}\n\n\tfor (let i = startOffset; i < len; i++) {\n\t\tconst charStartOffset = i;\n\t\tconst charCode = lineText.charCodeAt(i);\n\t\tlet charCodeClass: CharacterClass;\n\t\tlet charWidth: number;\n\n\t\tif (strings.isHighSurrogate(charCode)) {\n\t\t\t// A surrogate pair must always be considered as a single unit, so it is never to be broken\n\t\t\ti++;\n\t\t\tcharCodeClass = CharacterClass.NONE;\n\t\t\tcharWidth = 2;\n\t\t} else {\n\t\t\tcharCodeClass = classifier.get(charCode);\n\t\t\tcharWidth = computeCharWidth(charCode, visibleColumn, tabSize, columnsForFullWidthChar);\n\t\t}\n\n\t\tif (canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass, isKeepAll)) {\n\t\t\tbreakOffset = charStartOffset;\n\t\t\tbreakOffsetVisibleColumn = visibleColumn;\n\t\t}\n\n\t\tvisibleColumn += charWidth;\n\n\t\t// literal \\n shall trigger a softwrap\n\t\tif (\n\t\t\twrapOnEscapedLineFeeds\n\t\t\t&& i >= 2\n\t\t\t&& (i < 3 || lineText.charAt(i - 3) !== '\\\\')\n\t\t\t&& lineText.charAt(i - 2) === '\\\\'\n\t\t\t&& lineText.charAt(i - 1) === 'n'\n\t\t\t&& lineText.includes('\"')\n\t\t) {\n\t\t\tvisibleColumn += breakingColumn;\n\t\t}\n\n\t\t// check if adding character at `i` will go over the breaking column\n\t\tif (visibleColumn > breakingColumn) {\n\t\t\t// We need to break at least before character at `i`:\n\n\t\t\tif (breakOffset === 0 || visibleColumn - breakOffsetVisibleColumn > wrappedLineBreakColumn) {\n\t\t\t\t// Cannot break at `breakOffset`, must break at `i`\n\t\t\t\tbreakOffset = charStartOffset;\n\t\t\t\tbreakOffsetVisibleColumn = visibleColumn - charWidth;\n\t\t\t}\n\n\t\t\tbreakingOffsets[breakingOffsetsCount] = breakOffset;\n\t\t\tbreakingOffsetsVisibleColumn[breakingOffsetsCount] = breakOffsetVisibleColumn;\n\t\t\tbreakingOffsetsCount++;\n\t\t\tbreakingColumn = breakOffsetVisibleColumn + wrappedLineBreakColumn;\n\t\t\tbreakOffset = 0;\n\t\t}\n\n\t\tprevCharCode = charCode;\n\t\tprevCharCodeClass = charCodeClass;\n\t}\n\n\tif (breakingOffsetsCount === 0 && (!injectedTexts || injectedTexts.length === 0)) {\n\t\treturn null;\n\t}\n\n\t// Add last segment\n\tbreakingOffsets[breakingOffsetsCount] = len;\n\tbreakingOffsetsVisibleColumn[breakingOffsetsCount] = visibleColumn;\n\n\treturn new ModelLineProjectionData(injectionOffsets, injectionOptions, breakingOffsets, breakingOffsetsVisibleColumn, wrappedTextIndentLength);\n}\n\nfunction computeCharWidth(charCode: number, visibleColumn: number, tabSize: number, columnsForFullWidthChar: number): number {\n\tif (charCode === CharCode.Tab) {\n\t\treturn (tabSize - (visibleColumn % tabSize));\n\t}\n\tif (strings.isFullWidthCharacter(charCode)) {\n\t\treturn columnsForFullWidthChar;\n\t}\n\tif (charCode < 32) {\n\t\t// when using `editor.renderControlCharacters`, the substitutions are often wide\n\t\treturn columnsForFullWidthChar;\n\t}\n\treturn 1;\n}\n\nfunction tabCharacterWidth(visibleColumn: number, tabSize: number): number {\n\treturn (tabSize - (visibleColumn % tabSize));\n}\n\n/**\n * Kinsoku Shori : Don't break after a leading character, like an open bracket\n * Kinsoku Shori : Don't break before a trailing character, like a period\n */\nfunction canBreak(prevCharCode: number, prevCharCodeClass: CharacterClass, charCode: number, charCodeClass: CharacterClass, isKeepAll: boolean): boolean {\n\treturn (\n\t\tcharCode !== CharCode.Space\n\t\t&& (\n\t\t\t(prevCharCodeClass === CharacterClass.BREAK_AFTER && charCodeClass !== CharacterClass.BREAK_AFTER) // break at the end of multiple BREAK_AFTER\n\t\t\t|| (prevCharCodeClass !== CharacterClass.BREAK_BEFORE && charCodeClass === CharacterClass.BREAK_BEFORE) // break at the start of multiple BREAK_BEFORE\n\t\t\t|| (!isKeepAll && prevCharCodeClass === CharacterClass.BREAK_IDEOGRAPHIC && charCodeClass !== CharacterClass.BREAK_AFTER)\n\t\t\t|| (!isKeepAll && charCodeClass === CharacterClass.BREAK_IDEOGRAPHIC && prevCharCodeClass !== CharacterClass.BREAK_BEFORE)\n\t\t)\n\t);\n}\n\nfunction computeWrappedTextIndentLength(lineText: string, tabSize: number, firstLineBreakColumn: number, columnsForFullWidthChar: number, wrappingIndent: WrappingIndent): number {\n\tlet wrappedTextIndentLength = 0;\n\tif (wrappingIndent !== WrappingIndent.None) {\n\t\tconst firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineText);\n\t\tif (firstNonWhitespaceIndex !== -1) {\n\t\t\t// Track existing indent\n\n\t\t\tfor (let i = 0; i < firstNonWhitespaceIndex; i++) {\n\t\t\t\tconst charWidth = (lineText.charCodeAt(i) === CharCode.Tab ? tabCharacterWidth(wrappedTextIndentLength, tabSize) : 1);\n\t\t\t\twrappedTextIndentLength += charWidth;\n\t\t\t}\n\n\t\t\t// Increase indent of continuation lines, if desired\n\t\t\tconst numberOfAdditionalTabs = (wrappingIndent === WrappingIndent.DeepIndent ? 2 : wrappingIndent === WrappingIndent.Indent ? 1 : 0);\n\t\t\tfor (let i = 0; i < numberOfAdditionalTabs; i++) {\n\t\t\t\tconst charWidth = tabCharacterWidth(wrappedTextIndentLength, tabSize);\n\t\t\t\twrappedTextIndentLength += charWidth;\n\t\t\t}\n\n\t\t\t// Force sticking to beginning of line if no character would fit except for the indentation\n\t\t\tif (wrappedTextIndentLength + columnsForFullWidthChar > firstLineBreakColumn) {\n\t\t\t\twrappedTextIndentLength = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn wrappedTextIndentLength;\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 792, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/monaco-editor/esm/vs/editor/common/viewModel/inlineDecorations.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/viewModel/file%3A/mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/viewModel/inlineDecorations.ts","file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/viewModel/vs/editor/common/viewModel/inlineDecorations.ts"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Range } from '../core/range.js';\n\nexport const enum InlineDecorationType {\n\tRegular = 0,\n\tBefore = 1,\n\tAfter = 2,\n\tRegularAffectingLetterSpacing = 3\n}\n\nexport class InlineDecoration {\n\tconstructor(\n\t\tpublic readonly range: Range,\n\t\tpublic readonly inlineClassName: string,\n\t\tpublic readonly type: InlineDecorationType\n\t) { }\n}\n\nexport class SingleLineInlineDecoration {\n\tconstructor(\n\t\tpublic readonly startOffset: number,\n\t\tpublic readonly endOffset: number,\n\t\tpublic readonly inlineClassName: string,\n\t\tpublic readonly inlineClassNameAffectsLetterSpacing: boolean\n\t) {\n\t}\n\n\ttoInlineDecoration(lineNumber: number): InlineDecoration {\n\t\treturn new InlineDecoration(\n\t\t\tnew Range(lineNumber, this.startOffset + 1, lineNumber, this.endOffset + 1),\n\t\t\tthis.inlineClassName,\n\t\t\tthis.inlineClassNameAffectsLetterSpacing ? InlineDecorationType.RegularAffectingLetterSpacing : InlineDecorationType.Regular\n\t\t);\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Range } from '../core/range.js';\n\nexport const enum InlineDecorationType {\n\tRegular = 0,\n\tBefore = 1,\n\tAfter = 2,\n\tRegularAffectingLetterSpacing = 3\n}\n\nexport class InlineDecoration {\n\tconstructor(\n\t\tpublic readonly range: Range,\n\t\tpublic readonly inlineClassName: string,\n\t\tpublic readonly type: InlineDecorationType\n\t) { }\n}\n\nexport class SingleLineInlineDecoration {\n\tconstructor(\n\t\tpublic readonly startOffset: number,\n\t\tpublic readonly endOffset: number,\n\t\tpublic readonly inlineClassName: string,\n\t\tpublic readonly inlineClassNameAffectsLetterSpacing: boolean\n\t) {\n\t}\n\n\ttoInlineDecoration(lineNumber: number): InlineDecoration {\n\t\treturn new InlineDecoration(\n\t\t\tnew Range(lineNumber, this.startOffset + 1, lineNumber, this.endOffset + 1),\n\t\t\tthis.inlineClassName,\n\t\t\tthis.inlineClassNameAffectsLetterSpacing ? InlineDecorationType.RegularAffectingLetterSpacing : InlineDecorationType.Regular\n\t\t);\n\t}\n}\n"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;AAEhG,OAAO,EAAE,KAAK,EAAE,MAAM,kBAAkB,CAAC;;AASnC,MAAO,gBAAgB;IAC5B,YACiB,KAAY,EACZ,eAAuB,EACvB,IAA0B,CAAA;QAF1B,IAAA,CAAA,KAAK,GAAL,KAAK,CAAO;QACZ,IAAA,CAAA,eAAe,GAAf,eAAe,CAAQ;QACvB,IAAA,CAAA,IAAI,GAAJ,IAAI,CAAsB;IACvC,CAAC;CACL;AAEK,MAAO,0BAA0B;IACtC,YACiB,WAAmB,EACnB,SAAiB,EACjB,eAAuB,EACvB,mCAA4C,CAAA;QAH5C,IAAA,CAAA,WAAW,GAAX,WAAW,CAAQ;QACnB,IAAA,CAAA,SAAS,GAAT,SAAS,CAAQ;QACjB,IAAA,CAAA,eAAe,GAAf,eAAe,CAAQ;QACvB,IAAA,CAAA,mCAAmC,GAAnC,mCAAmC,CAAS;IAE7D,CAAC;IAED,kBAAkB,CAAC,UAAkB,EAAA;QACpC,OAAO,IAAI,gBAAgB,CAC1B,IAAI,2LAAK,CAAC,UAAU,EAAE,IAAI,CAAC,WAAW,GAAG,CAAC,EAAE,UAAU,EAAE,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,EAC3E,IAAI,CAAC,eAAe,EACpB,IAAI,CAAC,mCAAmC,CAAC,CAAC,CAAA,EAAA,sDAAA,GAAoD,CAAC,EAAA,EAAA,gCAAA,EAA6B,CAC5H,CAAC;IACH,CAAC;CACD","debugId":null}},
    {"offset": {"line": 825, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/monaco-editor/esm/vs/editor/common/viewModel/viewModelDecorations.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/viewModel/file%3A/mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/viewModel/viewModelDecorations.ts","file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/viewModel/vs/editor/common/viewModel/viewModelDecorations.ts"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDisposable } from '../../../base/common/lifecycle.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { IEditorConfiguration } from '../config/editorConfiguration.js';\nimport { IModelDecoration, ITextModel, PositionAffinity } from '../model.js';\nimport { IViewModelLines } from './viewModelLines.js';\nimport { filterFontDecorations, filterValidationDecorations } from '../config/editorOptions.js';\nimport { isModelDecorationVisible, ViewModelDecoration } from './viewModelDecoration.js';\nimport { InlineDecoration, InlineDecorationType } from './inlineDecorations.js';\nimport { ICoordinatesConverter } from '../coordinatesConverter.js';\n\n/**\n * A collection of decorations in a range of lines.\n */\nexport interface IViewDecorationsCollection {\n\t/**\n\t * decorations in the range of lines (ungrouped).\n\t */\n\treadonly decorations: ViewModelDecoration[];\n\t/**\n\t * inline decorations (grouped by each line in the range of lines).\n\t */\n\treadonly inlineDecorations: InlineDecoration[][];\n\t/**\n\t * Whether the decorations affect the fonts.\n\t */\n\treadonly hasVariableFonts: boolean;\n}\n\nexport class ViewModelDecorations implements IDisposable {\n\n\tprivate readonly editorId: number;\n\tprivate readonly model: ITextModel;\n\tprivate readonly configuration: IEditorConfiguration;\n\tprivate readonly _linesCollection: IViewModelLines;\n\tprivate readonly _coordinatesConverter: ICoordinatesConverter;\n\n\tprivate _decorationsCache: { [decorationId: string]: ViewModelDecoration };\n\n\tprivate _cachedModelDecorationsResolver: IViewDecorationsCollection | null;\n\tprivate _cachedModelDecorationsResolverViewRange: Range | null;\n\n\tconstructor(editorId: number, model: ITextModel, configuration: IEditorConfiguration, linesCollection: IViewModelLines, coordinatesConverter: ICoordinatesConverter) {\n\t\tthis.editorId = editorId;\n\t\tthis.model = model;\n\t\tthis.configuration = configuration;\n\t\tthis._linesCollection = linesCollection;\n\t\tthis._coordinatesConverter = coordinatesConverter;\n\t\tthis._decorationsCache = Object.create(null);\n\t\tthis._cachedModelDecorationsResolver = null;\n\t\tthis._cachedModelDecorationsResolverViewRange = null;\n\t}\n\n\tprivate _clearCachedModelDecorationsResolver(): void {\n\t\tthis._cachedModelDecorationsResolver = null;\n\t\tthis._cachedModelDecorationsResolverViewRange = null;\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._decorationsCache = Object.create(null);\n\t\tthis._clearCachedModelDecorationsResolver();\n\t}\n\n\tpublic reset(): void {\n\t\tthis._decorationsCache = Object.create(null);\n\t\tthis._clearCachedModelDecorationsResolver();\n\t}\n\n\tpublic onModelDecorationsChanged(): void {\n\t\tthis._decorationsCache = Object.create(null);\n\t\tthis._clearCachedModelDecorationsResolver();\n\t}\n\n\tpublic onLineMappingChanged(): void {\n\t\tthis._decorationsCache = Object.create(null);\n\n\t\tthis._clearCachedModelDecorationsResolver();\n\t}\n\n\tprivate _getOrCreateViewModelDecoration(modelDecoration: IModelDecoration): ViewModelDecoration {\n\t\tconst id = modelDecoration.id;\n\t\tlet r = this._decorationsCache[id];\n\t\tif (!r) {\n\t\t\tconst modelRange = modelDecoration.range;\n\t\t\tconst options = modelDecoration.options;\n\t\t\tlet viewRange: Range;\n\t\t\tif (options.isWholeLine) {\n\t\t\t\tconst start = this._coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.startLineNumber, 1), PositionAffinity.Left, false, true);\n\t\t\t\tconst end = this._coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.endLineNumber, this.model.getLineMaxColumn(modelRange.endLineNumber)), PositionAffinity.Right);\n\t\t\t\tviewRange = new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n\t\t\t} else {\n\t\t\t\t// For backwards compatibility reasons, we want injected text before any decoration.\n\t\t\t\t// Thus, move decorations to the right.\n\t\t\t\tviewRange = this._coordinatesConverter.convertModelRangeToViewRange(modelRange, PositionAffinity.Right);\n\t\t\t}\n\t\t\tr = new ViewModelDecoration(viewRange, options);\n\t\t\tthis._decorationsCache[id] = r;\n\t\t}\n\t\treturn r;\n\t}\n\n\tpublic getMinimapDecorationsInRange(range: Range): ViewModelDecoration[] {\n\t\treturn this._getDecorationsInRange(range, true, false).decorations;\n\t}\n\n\tpublic getDecorationsViewportData(viewRange: Range): IViewDecorationsCollection {\n\t\tlet cacheIsValid = (this._cachedModelDecorationsResolver !== null);\n\t\tcacheIsValid = cacheIsValid && (viewRange.equalsRange(this._cachedModelDecorationsResolverViewRange));\n\t\tif (!cacheIsValid) {\n\t\t\tthis._cachedModelDecorationsResolver = this._getDecorationsInRange(viewRange, false, false);\n\t\t\tthis._cachedModelDecorationsResolverViewRange = viewRange;\n\t\t}\n\t\treturn this._cachedModelDecorationsResolver!;\n\t}\n\n\tpublic getDecorationsOnLine(lineNumber: number, onlyMinimapDecorations: boolean = false, onlyMarginDecorations: boolean = false): IViewDecorationsCollection {\n\t\tconst range = new Range(lineNumber, this._linesCollection.getViewLineMinColumn(lineNumber), lineNumber, this._linesCollection.getViewLineMaxColumn(lineNumber));\n\t\treturn this._getDecorationsInRange(range, onlyMinimapDecorations, onlyMarginDecorations);\n\t}\n\n\tprivate _getDecorationsInRange(viewRange: Range, onlyMinimapDecorations: boolean, onlyMarginDecorations: boolean): IViewDecorationsCollection {\n\t\tconst modelDecorations = this._linesCollection.getDecorationsInRange(viewRange, this.editorId, filterValidationDecorations(this.configuration.options), filterFontDecorations(this.configuration.options), onlyMinimapDecorations, onlyMarginDecorations);\n\t\tconst startLineNumber = viewRange.startLineNumber;\n\t\tconst endLineNumber = viewRange.endLineNumber;\n\n\t\tconst decorationsInViewport: ViewModelDecoration[] = [];\n\t\tlet decorationsInViewportLen = 0;\n\t\tconst inlineDecorations: InlineDecoration[][] = [];\n\t\tfor (let j = startLineNumber; j <= endLineNumber; j++) {\n\t\t\tinlineDecorations[j - startLineNumber] = [];\n\t\t}\n\n\t\tlet hasVariableFonts = false;\n\t\tfor (let i = 0, len = modelDecorations.length; i < len; i++) {\n\t\t\tconst modelDecoration = modelDecorations[i];\n\t\t\tconst decorationOptions = modelDecoration.options;\n\n\t\t\tif (!isModelDecorationVisible(this.model, modelDecoration)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst viewModelDecoration = this._getOrCreateViewModelDecoration(modelDecoration);\n\t\t\tconst viewRange = viewModelDecoration.range;\n\n\t\t\tdecorationsInViewport[decorationsInViewportLen++] = viewModelDecoration;\n\n\t\t\tif (decorationOptions.inlineClassName) {\n\t\t\t\tconst inlineDecoration = new InlineDecoration(viewRange, decorationOptions.inlineClassName, decorationOptions.inlineClassNameAffectsLetterSpacing ? InlineDecorationType.RegularAffectingLetterSpacing : InlineDecorationType.Regular);\n\t\t\t\tconst intersectedStartLineNumber = Math.max(startLineNumber, viewRange.startLineNumber);\n\t\t\t\tconst intersectedEndLineNumber = Math.min(endLineNumber, viewRange.endLineNumber);\n\t\t\t\tfor (let j = intersectedStartLineNumber; j <= intersectedEndLineNumber; j++) {\n\t\t\t\t\tinlineDecorations[j - startLineNumber].push(inlineDecoration);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (decorationOptions.beforeContentClassName) {\n\t\t\t\tif (startLineNumber <= viewRange.startLineNumber && viewRange.startLineNumber <= endLineNumber) {\n\t\t\t\t\tconst inlineDecoration = new InlineDecoration(\n\t\t\t\t\t\tnew Range(viewRange.startLineNumber, viewRange.startColumn, viewRange.startLineNumber, viewRange.startColumn),\n\t\t\t\t\t\tdecorationOptions.beforeContentClassName,\n\t\t\t\t\t\tInlineDecorationType.Before\n\t\t\t\t\t);\n\t\t\t\t\tinlineDecorations[viewRange.startLineNumber - startLineNumber].push(inlineDecoration);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (decorationOptions.afterContentClassName) {\n\t\t\t\tif (startLineNumber <= viewRange.endLineNumber && viewRange.endLineNumber <= endLineNumber) {\n\t\t\t\t\tconst inlineDecoration = new InlineDecoration(\n\t\t\t\t\t\tnew Range(viewRange.endLineNumber, viewRange.endColumn, viewRange.endLineNumber, viewRange.endColumn),\n\t\t\t\t\t\tdecorationOptions.afterContentClassName,\n\t\t\t\t\t\tInlineDecorationType.After\n\t\t\t\t\t);\n\t\t\t\t\tinlineDecorations[viewRange.endLineNumber - startLineNumber].push(inlineDecoration);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (decorationOptions.affectsFont) {\n\t\t\t\thasVariableFonts = true;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tdecorations: decorationsInViewport,\n\t\t\tinlineDecorations: inlineDecorations,\n\t\t\thasVariableFonts\n\t\t};\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDisposable } from '../../../base/common/lifecycle.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { IEditorConfiguration } from '../config/editorConfiguration.js';\nimport { IModelDecoration, ITextModel, PositionAffinity } from '../model.js';\nimport { IViewModelLines } from './viewModelLines.js';\nimport { filterFontDecorations, filterValidationDecorations } from '../config/editorOptions.js';\nimport { isModelDecorationVisible, ViewModelDecoration } from './viewModelDecoration.js';\nimport { InlineDecoration, InlineDecorationType } from './inlineDecorations.js';\nimport { ICoordinatesConverter } from '../coordinatesConverter.js';\n\n/**\n * A collection of decorations in a range of lines.\n */\nexport interface IViewDecorationsCollection {\n\t/**\n\t * decorations in the range of lines (ungrouped).\n\t */\n\treadonly decorations: ViewModelDecoration[];\n\t/**\n\t * inline decorations (grouped by each line in the range of lines).\n\t */\n\treadonly inlineDecorations: InlineDecoration[][];\n\t/**\n\t * Whether the decorations affect the fonts.\n\t */\n\treadonly hasVariableFonts: boolean;\n}\n\nexport class ViewModelDecorations implements IDisposable {\n\n\tprivate readonly editorId: number;\n\tprivate readonly model: ITextModel;\n\tprivate readonly configuration: IEditorConfiguration;\n\tprivate readonly _linesCollection: IViewModelLines;\n\tprivate readonly _coordinatesConverter: ICoordinatesConverter;\n\n\tprivate _decorationsCache: { [decorationId: string]: ViewModelDecoration };\n\n\tprivate _cachedModelDecorationsResolver: IViewDecorationsCollection | null;\n\tprivate _cachedModelDecorationsResolverViewRange: Range | null;\n\n\tconstructor(editorId: number, model: ITextModel, configuration: IEditorConfiguration, linesCollection: IViewModelLines, coordinatesConverter: ICoordinatesConverter) {\n\t\tthis.editorId = editorId;\n\t\tthis.model = model;\n\t\tthis.configuration = configuration;\n\t\tthis._linesCollection = linesCollection;\n\t\tthis._coordinatesConverter = coordinatesConverter;\n\t\tthis._decorationsCache = Object.create(null);\n\t\tthis._cachedModelDecorationsResolver = null;\n\t\tthis._cachedModelDecorationsResolverViewRange = null;\n\t}\n\n\tprivate _clearCachedModelDecorationsResolver(): void {\n\t\tthis._cachedModelDecorationsResolver = null;\n\t\tthis._cachedModelDecorationsResolverViewRange = null;\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._decorationsCache = Object.create(null);\n\t\tthis._clearCachedModelDecorationsResolver();\n\t}\n\n\tpublic reset(): void {\n\t\tthis._decorationsCache = Object.create(null);\n\t\tthis._clearCachedModelDecorationsResolver();\n\t}\n\n\tpublic onModelDecorationsChanged(): void {\n\t\tthis._decorationsCache = Object.create(null);\n\t\tthis._clearCachedModelDecorationsResolver();\n\t}\n\n\tpublic onLineMappingChanged(): void {\n\t\tthis._decorationsCache = Object.create(null);\n\n\t\tthis._clearCachedModelDecorationsResolver();\n\t}\n\n\tprivate _getOrCreateViewModelDecoration(modelDecoration: IModelDecoration): ViewModelDecoration {\n\t\tconst id = modelDecoration.id;\n\t\tlet r = this._decorationsCache[id];\n\t\tif (!r) {\n\t\t\tconst modelRange = modelDecoration.range;\n\t\t\tconst options = modelDecoration.options;\n\t\t\tlet viewRange: Range;\n\t\t\tif (options.isWholeLine) {\n\t\t\t\tconst start = this._coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.startLineNumber, 1), PositionAffinity.Left, false, true);\n\t\t\t\tconst end = this._coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.endLineNumber, this.model.getLineMaxColumn(modelRange.endLineNumber)), PositionAffinity.Right);\n\t\t\t\tviewRange = new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n\t\t\t} else {\n\t\t\t\t// For backwards compatibility reasons, we want injected text before any decoration.\n\t\t\t\t// Thus, move decorations to the right.\n\t\t\t\tviewRange = this._coordinatesConverter.convertModelRangeToViewRange(modelRange, PositionAffinity.Right);\n\t\t\t}\n\t\t\tr = new ViewModelDecoration(viewRange, options);\n\t\t\tthis._decorationsCache[id] = r;\n\t\t}\n\t\treturn r;\n\t}\n\n\tpublic getMinimapDecorationsInRange(range: Range): ViewModelDecoration[] {\n\t\treturn this._getDecorationsInRange(range, true, false).decorations;\n\t}\n\n\tpublic getDecorationsViewportData(viewRange: Range): IViewDecorationsCollection {\n\t\tlet cacheIsValid = (this._cachedModelDecorationsResolver !== null);\n\t\tcacheIsValid = cacheIsValid && (viewRange.equalsRange(this._cachedModelDecorationsResolverViewRange));\n\t\tif (!cacheIsValid) {\n\t\t\tthis._cachedModelDecorationsResolver = this._getDecorationsInRange(viewRange, false, false);\n\t\t\tthis._cachedModelDecorationsResolverViewRange = viewRange;\n\t\t}\n\t\treturn this._cachedModelDecorationsResolver!;\n\t}\n\n\tpublic getDecorationsOnLine(lineNumber: number, onlyMinimapDecorations: boolean = false, onlyMarginDecorations: boolean = false): IViewDecorationsCollection {\n\t\tconst range = new Range(lineNumber, this._linesCollection.getViewLineMinColumn(lineNumber), lineNumber, this._linesCollection.getViewLineMaxColumn(lineNumber));\n\t\treturn this._getDecorationsInRange(range, onlyMinimapDecorations, onlyMarginDecorations);\n\t}\n\n\tprivate _getDecorationsInRange(viewRange: Range, onlyMinimapDecorations: boolean, onlyMarginDecorations: boolean): IViewDecorationsCollection {\n\t\tconst modelDecorations = this._linesCollection.getDecorationsInRange(viewRange, this.editorId, filterValidationDecorations(this.configuration.options), filterFontDecorations(this.configuration.options), onlyMinimapDecorations, onlyMarginDecorations);\n\t\tconst startLineNumber = viewRange.startLineNumber;\n\t\tconst endLineNumber = viewRange.endLineNumber;\n\n\t\tconst decorationsInViewport: ViewModelDecoration[] = [];\n\t\tlet decorationsInViewportLen = 0;\n\t\tconst inlineDecorations: InlineDecoration[][] = [];\n\t\tfor (let j = startLineNumber; j <= endLineNumber; j++) {\n\t\t\tinlineDecorations[j - startLineNumber] = [];\n\t\t}\n\n\t\tlet hasVariableFonts = false;\n\t\tfor (let i = 0, len = modelDecorations.length; i < len; i++) {\n\t\t\tconst modelDecoration = modelDecorations[i];\n\t\t\tconst decorationOptions = modelDecoration.options;\n\n\t\t\tif (!isModelDecorationVisible(this.model, modelDecoration)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst viewModelDecoration = this._getOrCreateViewModelDecoration(modelDecoration);\n\t\t\tconst viewRange = viewModelDecoration.range;\n\n\t\t\tdecorationsInViewport[decorationsInViewportLen++] = viewModelDecoration;\n\n\t\t\tif (decorationOptions.inlineClassName) {\n\t\t\t\tconst inlineDecoration = new InlineDecoration(viewRange, decorationOptions.inlineClassName, decorationOptions.inlineClassNameAffectsLetterSpacing ? InlineDecorationType.RegularAffectingLetterSpacing : InlineDecorationType.Regular);\n\t\t\t\tconst intersectedStartLineNumber = Math.max(startLineNumber, viewRange.startLineNumber);\n\t\t\t\tconst intersectedEndLineNumber = Math.min(endLineNumber, viewRange.endLineNumber);\n\t\t\t\tfor (let j = intersectedStartLineNumber; j <= intersectedEndLineNumber; j++) {\n\t\t\t\t\tinlineDecorations[j - startLineNumber].push(inlineDecoration);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (decorationOptions.beforeContentClassName) {\n\t\t\t\tif (startLineNumber <= viewRange.startLineNumber && viewRange.startLineNumber <= endLineNumber) {\n\t\t\t\t\tconst inlineDecoration = new InlineDecoration(\n\t\t\t\t\t\tnew Range(viewRange.startLineNumber, viewRange.startColumn, viewRange.startLineNumber, viewRange.startColumn),\n\t\t\t\t\t\tdecorationOptions.beforeContentClassName,\n\t\t\t\t\t\tInlineDecorationType.Before\n\t\t\t\t\t);\n\t\t\t\t\tinlineDecorations[viewRange.startLineNumber - startLineNumber].push(inlineDecoration);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (decorationOptions.afterContentClassName) {\n\t\t\t\tif (startLineNumber <= viewRange.endLineNumber && viewRange.endLineNumber <= endLineNumber) {\n\t\t\t\t\tconst inlineDecoration = new InlineDecoration(\n\t\t\t\t\t\tnew Range(viewRange.endLineNumber, viewRange.endColumn, viewRange.endLineNumber, viewRange.endColumn),\n\t\t\t\t\t\tdecorationOptions.afterContentClassName,\n\t\t\t\t\t\tInlineDecorationType.After\n\t\t\t\t\t);\n\t\t\t\t\tinlineDecorations[viewRange.endLineNumber - startLineNumber].push(inlineDecoration);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (decorationOptions.affectsFont) {\n\t\t\t\thasVariableFonts = true;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tdecorations: decorationsInViewport,\n\t\t\tinlineDecorations: inlineDecorations,\n\t\t\thasVariableFonts\n\t\t};\n\t}\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 965, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/monaco-editor/esm/vs/editor/common/viewModel/modelLineProjection.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/viewModel/file%3A/mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/viewModel/modelLineProjection.ts","file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/viewModel/vs/editor/common/viewModel/modelLineProjection.ts"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { LineTokens } from '../tokens/lineTokens.js';\nimport { Position } from '../core/position.js';\nimport { IRange } from '../core/range.js';\nimport { EndOfLinePreference, ITextModel, PositionAffinity } from '../model.js';\nimport { LineInjectedText } from '../textModelEvents.js';\nimport { InjectedText, ModelLineProjectionData } from '../modelLineProjectionData.js';\nimport { ViewLineData } from '../viewModel.js';\nimport { SingleLineInlineDecoration } from './inlineDecorations.js';\n\nexport interface IModelLineProjection {\n\tisVisible(): boolean;\n\n\t/**\n\t * This invalidates the current instance (potentially reuses and returns it again).\n\t*/\n\tsetVisible(isVisible: boolean): IModelLineProjection;\n\n\tgetProjectionData(): ModelLineProjectionData | null;\n\tgetViewLineCount(): number;\n\tgetViewLineContent(model: ISimpleModel, modelLineNumber: number, outputLineIndex: number): string;\n\tgetViewLineLength(model: ISimpleModel, modelLineNumber: number, outputLineIndex: number): number;\n\tgetViewLineMinColumn(model: ISimpleModel, modelLineNumber: number, outputLineIndex: number): number;\n\tgetViewLineMaxColumn(model: ISimpleModel, modelLineNumber: number, outputLineIndex: number): number;\n\tgetViewLineData(model: ISimpleModel, modelLineNumber: number, outputLineIndex: number): ViewLineData;\n\tgetViewLinesData(model: ISimpleModel, modelLineNumber: number, outputLineIdx: number, lineCount: number, globalStartIndex: number, needed: boolean[], result: Array<ViewLineData | null>): void;\n\n\tgetModelColumnOfViewPosition(outputLineIndex: number, outputColumn: number): number;\n\tgetViewPositionOfModelPosition(deltaLineNumber: number, inputColumn: number, affinity?: PositionAffinity): Position;\n\tgetViewLineNumberOfModelPosition(deltaLineNumber: number, inputColumn: number): number;\n\tnormalizePosition(outputLineIndex: number, outputPosition: Position, affinity: PositionAffinity): Position;\n\n\tgetInjectedTextAt(outputLineIndex: number, column: number): InjectedText | null;\n}\n\nexport interface ISimpleModel {\n\ttokenization: {\n\t\tgetLineTokens(lineNumber: number): LineTokens;\n\t};\n\tgetLineContent(lineNumber: number): string;\n\tgetLineLength(lineNumber: number): number;\n\tgetLineMinColumn(lineNumber: number): number;\n\tgetLineMaxColumn(lineNumber: number): number;\n\tgetValueInRange(range: IRange, eol?: EndOfLinePreference): string;\n}\n\nexport function createModelLineProjection(lineBreakData: ModelLineProjectionData | null, isVisible: boolean): IModelLineProjection {\n\tif (lineBreakData === null) {\n\t\t// No mapping needed\n\t\tif (isVisible) {\n\t\t\treturn IdentityModelLineProjection.INSTANCE;\n\t\t}\n\t\treturn HiddenModelLineProjection.INSTANCE;\n\t} else {\n\t\treturn new ModelLineProjection(lineBreakData, isVisible);\n\t}\n}\n\n/**\n * This projection is used to\n * * wrap model lines\n * * inject text\n */\nclass ModelLineProjection implements IModelLineProjection {\n\tprivate readonly _projectionData: ModelLineProjectionData;\n\tprivate _isVisible: boolean;\n\n\tconstructor(lineBreakData: ModelLineProjectionData, isVisible: boolean) {\n\t\tthis._projectionData = lineBreakData;\n\t\tthis._isVisible = isVisible;\n\t}\n\n\tpublic isVisible(): boolean {\n\t\treturn this._isVisible;\n\t}\n\n\tpublic setVisible(isVisible: boolean): IModelLineProjection {\n\t\tthis._isVisible = isVisible;\n\t\treturn this;\n\t}\n\n\tpublic getProjectionData(): ModelLineProjectionData | null {\n\t\treturn this._projectionData;\n\t}\n\n\tpublic getViewLineCount(): number {\n\t\tif (!this._isVisible) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn this._projectionData.getOutputLineCount();\n\t}\n\n\tpublic getViewLineContent(model: ISimpleModel, modelLineNumber: number, outputLineIndex: number): string {\n\t\tthis._assertVisible();\n\n\t\tconst startOffsetInInputWithInjections = outputLineIndex > 0 ? this._projectionData.breakOffsets[outputLineIndex - 1] : 0;\n\t\tconst endOffsetInInputWithInjections = this._projectionData.breakOffsets[outputLineIndex];\n\n\t\tlet r: string;\n\t\tif (this._projectionData.injectionOffsets !== null) {\n\t\t\tconst injectedTexts = this._projectionData.injectionOffsets.map(\n\t\t\t\t(offset, idx) => new LineInjectedText(\n\t\t\t\t\t0,\n\t\t\t\t\t0,\n\t\t\t\t\toffset + 1,\n\t\t\t\t\tthis._projectionData.injectionOptions![idx],\n\t\t\t\t\t0\n\t\t\t\t)\n\t\t\t);\n\t\t\tconst lineWithInjections = LineInjectedText.applyInjectedText(\n\t\t\t\tmodel.getLineContent(modelLineNumber),\n\t\t\t\tinjectedTexts\n\t\t\t);\n\t\t\tr = lineWithInjections.substring(startOffsetInInputWithInjections, endOffsetInInputWithInjections);\n\t\t} else {\n\t\t\tr = model.getValueInRange({\n\t\t\t\tstartLineNumber: modelLineNumber,\n\t\t\t\tstartColumn: startOffsetInInputWithInjections + 1,\n\t\t\t\tendLineNumber: modelLineNumber,\n\t\t\t\tendColumn: endOffsetInInputWithInjections + 1\n\t\t\t});\n\t\t}\n\n\t\tif (outputLineIndex > 0) {\n\t\t\tr = spaces(this._projectionData.wrappedTextIndentLength) + r;\n\t\t}\n\n\t\treturn r;\n\t}\n\n\tpublic getViewLineLength(model: ISimpleModel, modelLineNumber: number, outputLineIndex: number): number {\n\t\tthis._assertVisible();\n\t\treturn this._projectionData.getLineLength(outputLineIndex);\n\t}\n\n\tpublic getViewLineMinColumn(_model: ITextModel, _modelLineNumber: number, outputLineIndex: number): number {\n\t\tthis._assertVisible();\n\t\treturn this._projectionData.getMinOutputOffset(outputLineIndex) + 1;\n\t}\n\n\tpublic getViewLineMaxColumn(model: ISimpleModel, modelLineNumber: number, outputLineIndex: number): number {\n\t\tthis._assertVisible();\n\t\treturn this._projectionData.getMaxOutputOffset(outputLineIndex) + 1;\n\t}\n\n\t/**\n\t * Try using {@link getViewLinesData} instead.\n\t*/\n\tpublic getViewLineData(model: ISimpleModel, modelLineNumber: number, outputLineIndex: number): ViewLineData {\n\t\tconst arr = new Array<ViewLineData>();\n\t\tthis.getViewLinesData(model, modelLineNumber, outputLineIndex, 1, 0, [true], arr);\n\t\treturn arr[0];\n\t}\n\n\tpublic getViewLinesData(model: ISimpleModel, modelLineNumber: number, outputLineIdx: number, lineCount: number, globalStartIndex: number, needed: boolean[], result: Array<ViewLineData | null>): void {\n\t\tthis._assertVisible();\n\n\t\tconst lineBreakData = this._projectionData;\n\n\t\tconst injectionOffsets = lineBreakData.injectionOffsets;\n\t\tconst injectionOptions = lineBreakData.injectionOptions;\n\n\t\tlet inlineDecorationsPerOutputLine: SingleLineInlineDecoration[][] | null = null;\n\n\t\tif (injectionOffsets) {\n\t\t\tinlineDecorationsPerOutputLine = [];\n\t\t\tlet totalInjectedTextLengthBefore = 0;\n\t\t\tlet currentInjectedOffset = 0;\n\n\t\t\tfor (let outputLineIndex = 0; outputLineIndex < lineBreakData.getOutputLineCount(); outputLineIndex++) {\n\t\t\t\tconst inlineDecorations = new Array<SingleLineInlineDecoration>();\n\t\t\t\tinlineDecorationsPerOutputLine[outputLineIndex] = inlineDecorations;\n\n\t\t\t\tconst lineStartOffsetInInputWithInjections = outputLineIndex > 0 ? lineBreakData.breakOffsets[outputLineIndex - 1] : 0;\n\t\t\t\tconst lineEndOffsetInInputWithInjections = lineBreakData.breakOffsets[outputLineIndex];\n\n\t\t\t\twhile (currentInjectedOffset < injectionOffsets.length) {\n\t\t\t\t\tconst length = injectionOptions![currentInjectedOffset].content.length;\n\t\t\t\t\tconst injectedTextStartOffsetInInputWithInjections = injectionOffsets[currentInjectedOffset] + totalInjectedTextLengthBefore;\n\t\t\t\t\tconst injectedTextEndOffsetInInputWithInjections = injectedTextStartOffsetInInputWithInjections + length;\n\n\t\t\t\t\tif (injectedTextStartOffsetInInputWithInjections > lineEndOffsetInInputWithInjections) {\n\t\t\t\t\t\t// Injected text only starts in later wrapped lines.\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (lineStartOffsetInInputWithInjections < injectedTextEndOffsetInInputWithInjections) {\n\t\t\t\t\t\t// Injected text ends after or in this line (but also starts in or before this line).\n\t\t\t\t\t\tconst options = injectionOptions![currentInjectedOffset];\n\t\t\t\t\t\tif (options.inlineClassName) {\n\t\t\t\t\t\t\tconst offset = (outputLineIndex > 0 ? lineBreakData.wrappedTextIndentLength : 0);\n\t\t\t\t\t\t\tconst start = offset + Math.max(injectedTextStartOffsetInInputWithInjections - lineStartOffsetInInputWithInjections, 0);\n\t\t\t\t\t\t\tconst end = offset + Math.min(injectedTextEndOffsetInInputWithInjections - lineStartOffsetInInputWithInjections, lineEndOffsetInInputWithInjections - lineStartOffsetInInputWithInjections);\n\t\t\t\t\t\t\tif (start !== end) {\n\t\t\t\t\t\t\t\tinlineDecorations.push(new SingleLineInlineDecoration(start, end, options.inlineClassName, options.inlineClassNameAffectsLetterSpacing!));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (injectedTextEndOffsetInInputWithInjections <= lineEndOffsetInInputWithInjections) {\n\t\t\t\t\t\ttotalInjectedTextLengthBefore += length;\n\t\t\t\t\t\tcurrentInjectedOffset++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// injected text breaks into next line, process it again\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet lineWithInjections: LineTokens;\n\t\tif (injectionOffsets) {\n\t\t\tconst tokensToInsert: { offset: number; text: string; tokenMetadata: number }[] = [];\n\n\t\t\tfor (let idx = 0; idx < injectionOffsets.length; idx++) {\n\t\t\t\tconst offset = injectionOffsets[idx];\n\t\t\t\tconst tokens = injectionOptions![idx].tokens;\n\t\t\t\tif (tokens) {\n\t\t\t\t\ttokens.forEach((range, info) => {\n\t\t\t\t\t\ttokensToInsert.push({\n\t\t\t\t\t\t\toffset,\n\t\t\t\t\t\t\ttext: range.substring(injectionOptions![idx].content),\n\t\t\t\t\t\t\ttokenMetadata: info.metadata,\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\ttokensToInsert.push({\n\t\t\t\t\t\toffset,\n\t\t\t\t\t\ttext: injectionOptions![idx].content,\n\t\t\t\t\t\ttokenMetadata: LineTokens.defaultTokenMetadata,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlineWithInjections = model.tokenization.getLineTokens(modelLineNumber).withInserted(tokensToInsert);\n\t\t} else {\n\t\t\tlineWithInjections = model.tokenization.getLineTokens(modelLineNumber);\n\t\t}\n\n\t\tfor (let outputLineIndex = outputLineIdx; outputLineIndex < outputLineIdx + lineCount; outputLineIndex++) {\n\t\t\tconst globalIndex = globalStartIndex + outputLineIndex - outputLineIdx;\n\t\t\tif (!needed[globalIndex]) {\n\t\t\t\tresult[globalIndex] = null;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tresult[globalIndex] = this._getViewLineData(lineWithInjections, inlineDecorationsPerOutputLine ? inlineDecorationsPerOutputLine[outputLineIndex] : null, outputLineIndex);\n\t\t}\n\t}\n\n\tprivate _getViewLineData(lineWithInjections: LineTokens, inlineDecorations: null | SingleLineInlineDecoration[], outputLineIndex: number): ViewLineData {\n\t\tthis._assertVisible();\n\t\tconst lineBreakData = this._projectionData;\n\t\tconst deltaStartIndex = (outputLineIndex > 0 ? lineBreakData.wrappedTextIndentLength : 0);\n\n\t\tconst lineStartOffsetInInputWithInjections = outputLineIndex > 0 ? lineBreakData.breakOffsets[outputLineIndex - 1] : 0;\n\t\tconst lineEndOffsetInInputWithInjections = lineBreakData.breakOffsets[outputLineIndex];\n\t\tconst tokens = lineWithInjections.sliceAndInflate(lineStartOffsetInInputWithInjections, lineEndOffsetInInputWithInjections, deltaStartIndex);\n\n\t\tlet lineContent = tokens.getLineContent();\n\t\tif (outputLineIndex > 0) {\n\t\t\tlineContent = spaces(lineBreakData.wrappedTextIndentLength) + lineContent;\n\t\t}\n\n\t\tconst minColumn = this._projectionData.getMinOutputOffset(outputLineIndex) + 1;\n\t\tconst maxColumn = lineContent.length + 1;\n\t\tconst continuesWithWrappedLine = (outputLineIndex + 1 < this.getViewLineCount());\n\t\tconst startVisibleColumn = (outputLineIndex === 0 ? 0 : lineBreakData.breakOffsetsVisibleColumn[outputLineIndex - 1]);\n\n\t\treturn new ViewLineData(\n\t\t\tlineContent,\n\t\t\tcontinuesWithWrappedLine,\n\t\t\tminColumn,\n\t\t\tmaxColumn,\n\t\t\tstartVisibleColumn,\n\t\t\ttokens,\n\t\t\tinlineDecorations\n\t\t);\n\t}\n\n\tpublic getModelColumnOfViewPosition(outputLineIndex: number, outputColumn: number): number {\n\t\tthis._assertVisible();\n\t\treturn this._projectionData.translateToInputOffset(outputLineIndex, outputColumn - 1) + 1;\n\t}\n\n\tpublic getViewPositionOfModelPosition(deltaLineNumber: number, inputColumn: number, affinity: PositionAffinity = PositionAffinity.None): Position {\n\t\tthis._assertVisible();\n\t\tconst r = this._projectionData.translateToOutputPosition(inputColumn - 1, affinity);\n\t\treturn r.toPosition(deltaLineNumber);\n\t}\n\n\tpublic getViewLineNumberOfModelPosition(deltaLineNumber: number, inputColumn: number): number {\n\t\tthis._assertVisible();\n\t\tconst r = this._projectionData.translateToOutputPosition(inputColumn - 1);\n\t\treturn deltaLineNumber + r.outputLineIndex;\n\t}\n\n\tpublic normalizePosition(outputLineIndex: number, outputPosition: Position, affinity: PositionAffinity): Position {\n\t\tconst baseViewLineNumber = outputPosition.lineNumber - outputLineIndex;\n\t\tconst normalizedOutputPosition = this._projectionData.normalizeOutputPosition(outputLineIndex, outputPosition.column - 1, affinity);\n\t\tconst result = normalizedOutputPosition.toPosition(baseViewLineNumber);\n\t\treturn result;\n\t}\n\n\tpublic getInjectedTextAt(outputLineIndex: number, outputColumn: number): InjectedText | null {\n\t\treturn this._projectionData.getInjectedText(outputLineIndex, outputColumn - 1);\n\t}\n\n\tprivate _assertVisible() {\n\t\tif (!this._isVisible) {\n\t\t\tthrow new Error('Not supported');\n\t\t}\n\t}\n}\n\n/**\n * This projection does not change the model line.\n*/\nclass IdentityModelLineProjection implements IModelLineProjection {\n\tpublic static readonly INSTANCE = new IdentityModelLineProjection();\n\n\tprivate constructor() { }\n\n\tpublic isVisible(): boolean {\n\t\treturn true;\n\t}\n\n\tpublic setVisible(isVisible: boolean): IModelLineProjection {\n\t\tif (isVisible) {\n\t\t\treturn this;\n\t\t}\n\t\treturn HiddenModelLineProjection.INSTANCE;\n\t}\n\n\tpublic getProjectionData(): ModelLineProjectionData | null {\n\t\treturn null;\n\t}\n\n\tpublic getViewLineCount(): number {\n\t\treturn 1;\n\t}\n\n\tpublic getViewLineContent(model: ISimpleModel, modelLineNumber: number, _outputLineIndex: number): string {\n\t\treturn model.getLineContent(modelLineNumber);\n\t}\n\n\tpublic getViewLineLength(model: ISimpleModel, modelLineNumber: number, _outputLineIndex: number): number {\n\t\treturn model.getLineLength(modelLineNumber);\n\t}\n\n\tpublic getViewLineMinColumn(model: ISimpleModel, modelLineNumber: number, _outputLineIndex: number): number {\n\t\treturn model.getLineMinColumn(modelLineNumber);\n\t}\n\n\tpublic getViewLineMaxColumn(model: ISimpleModel, modelLineNumber: number, _outputLineIndex: number): number {\n\t\treturn model.getLineMaxColumn(modelLineNumber);\n\t}\n\n\tpublic getViewLineData(model: ISimpleModel, modelLineNumber: number, _outputLineIndex: number): ViewLineData {\n\t\tconst lineTokens = model.tokenization.getLineTokens(modelLineNumber);\n\t\tconst lineContent = lineTokens.getLineContent();\n\t\treturn new ViewLineData(\n\t\t\tlineContent,\n\t\t\tfalse,\n\t\t\t1,\n\t\t\tlineContent.length + 1,\n\t\t\t0,\n\t\t\tlineTokens.inflate(),\n\t\t\tnull\n\t\t);\n\t}\n\n\tpublic getViewLinesData(model: ISimpleModel, modelLineNumber: number, _fromOuputLineIndex: number, _toOutputLineIndex: number, globalStartIndex: number, needed: boolean[], result: Array<ViewLineData | null>): void {\n\t\tif (!needed[globalStartIndex]) {\n\t\t\tresult[globalStartIndex] = null;\n\t\t\treturn;\n\t\t}\n\t\tresult[globalStartIndex] = this.getViewLineData(model, modelLineNumber, 0);\n\t}\n\n\tpublic getModelColumnOfViewPosition(_outputLineIndex: number, outputColumn: number): number {\n\t\treturn outputColumn;\n\t}\n\n\tpublic getViewPositionOfModelPosition(deltaLineNumber: number, inputColumn: number): Position {\n\t\treturn new Position(deltaLineNumber, inputColumn);\n\t}\n\n\tpublic getViewLineNumberOfModelPosition(deltaLineNumber: number, _inputColumn: number): number {\n\t\treturn deltaLineNumber;\n\t}\n\n\tpublic normalizePosition(outputLineIndex: number, outputPosition: Position, affinity: PositionAffinity): Position {\n\t\treturn outputPosition;\n\t}\n\n\tpublic getInjectedTextAt(_outputLineIndex: number, _outputColumn: number): InjectedText | null {\n\t\treturn null;\n\t}\n}\n\n/**\n * This projection hides the model line.\n */\nclass HiddenModelLineProjection implements IModelLineProjection {\n\tpublic static readonly INSTANCE = new HiddenModelLineProjection();\n\n\tprivate constructor() { }\n\n\tpublic isVisible(): boolean {\n\t\treturn false;\n\t}\n\n\tpublic setVisible(isVisible: boolean): IModelLineProjection {\n\t\tif (!isVisible) {\n\t\t\treturn this;\n\t\t}\n\t\treturn IdentityModelLineProjection.INSTANCE;\n\t}\n\n\tpublic getProjectionData(): ModelLineProjectionData | null {\n\t\treturn null;\n\t}\n\n\tpublic getViewLineCount(): number {\n\t\treturn 0;\n\t}\n\n\tpublic getViewLineContent(_model: ISimpleModel, _modelLineNumber: number, _outputLineIndex: number): string {\n\t\tthrow new Error('Not supported');\n\t}\n\n\tpublic getViewLineLength(_model: ISimpleModel, _modelLineNumber: number, _outputLineIndex: number): number {\n\t\tthrow new Error('Not supported');\n\t}\n\n\tpublic getViewLineMinColumn(_model: ISimpleModel, _modelLineNumber: number, _outputLineIndex: number): number {\n\t\tthrow new Error('Not supported');\n\t}\n\n\tpublic getViewLineMaxColumn(_model: ISimpleModel, _modelLineNumber: number, _outputLineIndex: number): number {\n\t\tthrow new Error('Not supported');\n\t}\n\n\tpublic getViewLineData(_model: ISimpleModel, _modelLineNumber: number, _outputLineIndex: number): ViewLineData {\n\t\tthrow new Error('Not supported');\n\t}\n\n\tpublic getViewLinesData(_model: ISimpleModel, _modelLineNumber: number, _fromOuputLineIndex: number, _toOutputLineIndex: number, _globalStartIndex: number, _needed: boolean[], _result: ViewLineData[]): void {\n\t\tthrow new Error('Not supported');\n\t}\n\n\tpublic getModelColumnOfViewPosition(_outputLineIndex: number, _outputColumn: number): number {\n\t\tthrow new Error('Not supported');\n\t}\n\n\tpublic getViewPositionOfModelPosition(_deltaLineNumber: number, _inputColumn: number): Position {\n\t\tthrow new Error('Not supported');\n\t}\n\n\tpublic getViewLineNumberOfModelPosition(_deltaLineNumber: number, _inputColumn: number): number {\n\t\tthrow new Error('Not supported');\n\t}\n\n\tpublic normalizePosition(outputLineIndex: number, outputPosition: Position, affinity: PositionAffinity): Position {\n\t\tthrow new Error('Not supported');\n\t}\n\n\tpublic getInjectedTextAt(_outputLineIndex: number, _outputColumn: number): InjectedText | null {\n\t\tthrow new Error('Not supported');\n\t}\n}\n\nconst _spaces: string[] = [''];\nfunction spaces(count: number): string {\n\tif (count >= _spaces.length) {\n\t\tfor (let i = 1; i <= count; i++) {\n\t\t\t_spaces[i] = _makeSpaces(i);\n\t\t}\n\t}\n\treturn _spaces[count];\n}\n\nfunction _makeSpaces(count: number): string {\n\treturn new Array(count + 1).join(' ');\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { LineTokens } from '../tokens/lineTokens.js';\nimport { Position } from '../core/position.js';\nimport { IRange } from '../core/range.js';\nimport { EndOfLinePreference, ITextModel, PositionAffinity } from '../model.js';\nimport { LineInjectedText } from '../textModelEvents.js';\nimport { InjectedText, ModelLineProjectionData } from '../modelLineProjectionData.js';\nimport { ViewLineData } from '../viewModel.js';\nimport { SingleLineInlineDecoration } from './inlineDecorations.js';\n\nexport interface IModelLineProjection {\n\tisVisible(): boolean;\n\n\t/**\n\t * This invalidates the current instance (potentially reuses and returns it again).\n\t*/\n\tsetVisible(isVisible: boolean): IModelLineProjection;\n\n\tgetProjectionData(): ModelLineProjectionData | null;\n\tgetViewLineCount(): number;\n\tgetViewLineContent(model: ISimpleModel, modelLineNumber: number, outputLineIndex: number): string;\n\tgetViewLineLength(model: ISimpleModel, modelLineNumber: number, outputLineIndex: number): number;\n\tgetViewLineMinColumn(model: ISimpleModel, modelLineNumber: number, outputLineIndex: number): number;\n\tgetViewLineMaxColumn(model: ISimpleModel, modelLineNumber: number, outputLineIndex: number): number;\n\tgetViewLineData(model: ISimpleModel, modelLineNumber: number, outputLineIndex: number): ViewLineData;\n\tgetViewLinesData(model: ISimpleModel, modelLineNumber: number, outputLineIdx: number, lineCount: number, globalStartIndex: number, needed: boolean[], result: Array<ViewLineData | null>): void;\n\n\tgetModelColumnOfViewPosition(outputLineIndex: number, outputColumn: number): number;\n\tgetViewPositionOfModelPosition(deltaLineNumber: number, inputColumn: number, affinity?: PositionAffinity): Position;\n\tgetViewLineNumberOfModelPosition(deltaLineNumber: number, inputColumn: number): number;\n\tnormalizePosition(outputLineIndex: number, outputPosition: Position, affinity: PositionAffinity): Position;\n\n\tgetInjectedTextAt(outputLineIndex: number, column: number): InjectedText | null;\n}\n\nexport interface ISimpleModel {\n\ttokenization: {\n\t\tgetLineTokens(lineNumber: number): LineTokens;\n\t};\n\tgetLineContent(lineNumber: number): string;\n\tgetLineLength(lineNumber: number): number;\n\tgetLineMinColumn(lineNumber: number): number;\n\tgetLineMaxColumn(lineNumber: number): number;\n\tgetValueInRange(range: IRange, eol?: EndOfLinePreference): string;\n}\n\nexport function createModelLineProjection(lineBreakData: ModelLineProjectionData | null, isVisible: boolean): IModelLineProjection {\n\tif (lineBreakData === null) {\n\t\t// No mapping needed\n\t\tif (isVisible) {\n\t\t\treturn IdentityModelLineProjection.INSTANCE;\n\t\t}\n\t\treturn HiddenModelLineProjection.INSTANCE;\n\t} else {\n\t\treturn new ModelLineProjection(lineBreakData, isVisible);\n\t}\n}\n\n/**\n * This projection is used to\n * * wrap model lines\n * * inject text\n */\nclass ModelLineProjection implements IModelLineProjection {\n\tprivate readonly _projectionData: ModelLineProjectionData;\n\tprivate _isVisible: boolean;\n\n\tconstructor(lineBreakData: ModelLineProjectionData, isVisible: boolean) {\n\t\tthis._projectionData = lineBreakData;\n\t\tthis._isVisible = isVisible;\n\t}\n\n\tpublic isVisible(): boolean {\n\t\treturn this._isVisible;\n\t}\n\n\tpublic setVisible(isVisible: boolean): IModelLineProjection {\n\t\tthis._isVisible = isVisible;\n\t\treturn this;\n\t}\n\n\tpublic getProjectionData(): ModelLineProjectionData | null {\n\t\treturn this._projectionData;\n\t}\n\n\tpublic getViewLineCount(): number {\n\t\tif (!this._isVisible) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn this._projectionData.getOutputLineCount();\n\t}\n\n\tpublic getViewLineContent(model: ISimpleModel, modelLineNumber: number, outputLineIndex: number): string {\n\t\tthis._assertVisible();\n\n\t\tconst startOffsetInInputWithInjections = outputLineIndex > 0 ? this._projectionData.breakOffsets[outputLineIndex - 1] : 0;\n\t\tconst endOffsetInInputWithInjections = this._projectionData.breakOffsets[outputLineIndex];\n\n\t\tlet r: string;\n\t\tif (this._projectionData.injectionOffsets !== null) {\n\t\t\tconst injectedTexts = this._projectionData.injectionOffsets.map(\n\t\t\t\t(offset, idx) => new LineInjectedText(\n\t\t\t\t\t0,\n\t\t\t\t\t0,\n\t\t\t\t\toffset + 1,\n\t\t\t\t\tthis._projectionData.injectionOptions![idx],\n\t\t\t\t\t0\n\t\t\t\t)\n\t\t\t);\n\t\t\tconst lineWithInjections = LineInjectedText.applyInjectedText(\n\t\t\t\tmodel.getLineContent(modelLineNumber),\n\t\t\t\tinjectedTexts\n\t\t\t);\n\t\t\tr = lineWithInjections.substring(startOffsetInInputWithInjections, endOffsetInInputWithInjections);\n\t\t} else {\n\t\t\tr = model.getValueInRange({\n\t\t\t\tstartLineNumber: modelLineNumber,\n\t\t\t\tstartColumn: startOffsetInInputWithInjections + 1,\n\t\t\t\tendLineNumber: modelLineNumber,\n\t\t\t\tendColumn: endOffsetInInputWithInjections + 1\n\t\t\t});\n\t\t}\n\n\t\tif (outputLineIndex > 0) {\n\t\t\tr = spaces(this._projectionData.wrappedTextIndentLength) + r;\n\t\t}\n\n\t\treturn r;\n\t}\n\n\tpublic getViewLineLength(model: ISimpleModel, modelLineNumber: number, outputLineIndex: number): number {\n\t\tthis._assertVisible();\n\t\treturn this._projectionData.getLineLength(outputLineIndex);\n\t}\n\n\tpublic getViewLineMinColumn(_model: ITextModel, _modelLineNumber: number, outputLineIndex: number): number {\n\t\tthis._assertVisible();\n\t\treturn this._projectionData.getMinOutputOffset(outputLineIndex) + 1;\n\t}\n\n\tpublic getViewLineMaxColumn(model: ISimpleModel, modelLineNumber: number, outputLineIndex: number): number {\n\t\tthis._assertVisible();\n\t\treturn this._projectionData.getMaxOutputOffset(outputLineIndex) + 1;\n\t}\n\n\t/**\n\t * Try using {@link getViewLinesData} instead.\n\t*/\n\tpublic getViewLineData(model: ISimpleModel, modelLineNumber: number, outputLineIndex: number): ViewLineData {\n\t\tconst arr = new Array<ViewLineData>();\n\t\tthis.getViewLinesData(model, modelLineNumber, outputLineIndex, 1, 0, [true], arr);\n\t\treturn arr[0];\n\t}\n\n\tpublic getViewLinesData(model: ISimpleModel, modelLineNumber: number, outputLineIdx: number, lineCount: number, globalStartIndex: number, needed: boolean[], result: Array<ViewLineData | null>): void {\n\t\tthis._assertVisible();\n\n\t\tconst lineBreakData = this._projectionData;\n\n\t\tconst injectionOffsets = lineBreakData.injectionOffsets;\n\t\tconst injectionOptions = lineBreakData.injectionOptions;\n\n\t\tlet inlineDecorationsPerOutputLine: SingleLineInlineDecoration[][] | null = null;\n\n\t\tif (injectionOffsets) {\n\t\t\tinlineDecorationsPerOutputLine = [];\n\t\t\tlet totalInjectedTextLengthBefore = 0;\n\t\t\tlet currentInjectedOffset = 0;\n\n\t\t\tfor (let outputLineIndex = 0; outputLineIndex < lineBreakData.getOutputLineCount(); outputLineIndex++) {\n\t\t\t\tconst inlineDecorations = new Array<SingleLineInlineDecoration>();\n\t\t\t\tinlineDecorationsPerOutputLine[outputLineIndex] = inlineDecorations;\n\n\t\t\t\tconst lineStartOffsetInInputWithInjections = outputLineIndex > 0 ? lineBreakData.breakOffsets[outputLineIndex - 1] : 0;\n\t\t\t\tconst lineEndOffsetInInputWithInjections = lineBreakData.breakOffsets[outputLineIndex];\n\n\t\t\t\twhile (currentInjectedOffset < injectionOffsets.length) {\n\t\t\t\t\tconst length = injectionOptions![currentInjectedOffset].content.length;\n\t\t\t\t\tconst injectedTextStartOffsetInInputWithInjections = injectionOffsets[currentInjectedOffset] + totalInjectedTextLengthBefore;\n\t\t\t\t\tconst injectedTextEndOffsetInInputWithInjections = injectedTextStartOffsetInInputWithInjections + length;\n\n\t\t\t\t\tif (injectedTextStartOffsetInInputWithInjections > lineEndOffsetInInputWithInjections) {\n\t\t\t\t\t\t// Injected text only starts in later wrapped lines.\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (lineStartOffsetInInputWithInjections < injectedTextEndOffsetInInputWithInjections) {\n\t\t\t\t\t\t// Injected text ends after or in this line (but also starts in or before this line).\n\t\t\t\t\t\tconst options = injectionOptions![currentInjectedOffset];\n\t\t\t\t\t\tif (options.inlineClassName) {\n\t\t\t\t\t\t\tconst offset = (outputLineIndex > 0 ? lineBreakData.wrappedTextIndentLength : 0);\n\t\t\t\t\t\t\tconst start = offset + Math.max(injectedTextStartOffsetInInputWithInjections - lineStartOffsetInInputWithInjections, 0);\n\t\t\t\t\t\t\tconst end = offset + Math.min(injectedTextEndOffsetInInputWithInjections - lineStartOffsetInInputWithInjections, lineEndOffsetInInputWithInjections - lineStartOffsetInInputWithInjections);\n\t\t\t\t\t\t\tif (start !== end) {\n\t\t\t\t\t\t\t\tinlineDecorations.push(new SingleLineInlineDecoration(start, end, options.inlineClassName, options.inlineClassNameAffectsLetterSpacing!));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (injectedTextEndOffsetInInputWithInjections <= lineEndOffsetInInputWithInjections) {\n\t\t\t\t\t\ttotalInjectedTextLengthBefore += length;\n\t\t\t\t\t\tcurrentInjectedOffset++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// injected text breaks into next line, process it again\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet lineWithInjections: LineTokens;\n\t\tif (injectionOffsets) {\n\t\t\tconst tokensToInsert: { offset: number; text: string; tokenMetadata: number }[] = [];\n\n\t\t\tfor (let idx = 0; idx < injectionOffsets.length; idx++) {\n\t\t\t\tconst offset = injectionOffsets[idx];\n\t\t\t\tconst tokens = injectionOptions![idx].tokens;\n\t\t\t\tif (tokens) {\n\t\t\t\t\ttokens.forEach((range, info) => {\n\t\t\t\t\t\ttokensToInsert.push({\n\t\t\t\t\t\t\toffset,\n\t\t\t\t\t\t\ttext: range.substring(injectionOptions![idx].content),\n\t\t\t\t\t\t\ttokenMetadata: info.metadata,\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\ttokensToInsert.push({\n\t\t\t\t\t\toffset,\n\t\t\t\t\t\ttext: injectionOptions![idx].content,\n\t\t\t\t\t\ttokenMetadata: LineTokens.defaultTokenMetadata,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlineWithInjections = model.tokenization.getLineTokens(modelLineNumber).withInserted(tokensToInsert);\n\t\t} else {\n\t\t\tlineWithInjections = model.tokenization.getLineTokens(modelLineNumber);\n\t\t}\n\n\t\tfor (let outputLineIndex = outputLineIdx; outputLineIndex < outputLineIdx + lineCount; outputLineIndex++) {\n\t\t\tconst globalIndex = globalStartIndex + outputLineIndex - outputLineIdx;\n\t\t\tif (!needed[globalIndex]) {\n\t\t\t\tresult[globalIndex] = null;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tresult[globalIndex] = this._getViewLineData(lineWithInjections, inlineDecorationsPerOutputLine ? inlineDecorationsPerOutputLine[outputLineIndex] : null, outputLineIndex);\n\t\t}\n\t}\n\n\tprivate _getViewLineData(lineWithInjections: LineTokens, inlineDecorations: null | SingleLineInlineDecoration[], outputLineIndex: number): ViewLineData {\n\t\tthis._assertVisible();\n\t\tconst lineBreakData = this._projectionData;\n\t\tconst deltaStartIndex = (outputLineIndex > 0 ? lineBreakData.wrappedTextIndentLength : 0);\n\n\t\tconst lineStartOffsetInInputWithInjections = outputLineIndex > 0 ? lineBreakData.breakOffsets[outputLineIndex - 1] : 0;\n\t\tconst lineEndOffsetInInputWithInjections = lineBreakData.breakOffsets[outputLineIndex];\n\t\tconst tokens = lineWithInjections.sliceAndInflate(lineStartOffsetInInputWithInjections, lineEndOffsetInInputWithInjections, deltaStartIndex);\n\n\t\tlet lineContent = tokens.getLineContent();\n\t\tif (outputLineIndex > 0) {\n\t\t\tlineContent = spaces(lineBreakData.wrappedTextIndentLength) + lineContent;\n\t\t}\n\n\t\tconst minColumn = this._projectionData.getMinOutputOffset(outputLineIndex) + 1;\n\t\tconst maxColumn = lineContent.length + 1;\n\t\tconst continuesWithWrappedLine = (outputLineIndex + 1 < this.getViewLineCount());\n\t\tconst startVisibleColumn = (outputLineIndex === 0 ? 0 : lineBreakData.breakOffsetsVisibleColumn[outputLineIndex - 1]);\n\n\t\treturn new ViewLineData(\n\t\t\tlineContent,\n\t\t\tcontinuesWithWrappedLine,\n\t\t\tminColumn,\n\t\t\tmaxColumn,\n\t\t\tstartVisibleColumn,\n\t\t\ttokens,\n\t\t\tinlineDecorations\n\t\t);\n\t}\n\n\tpublic getModelColumnOfViewPosition(outputLineIndex: number, outputColumn: number): number {\n\t\tthis._assertVisible();\n\t\treturn this._projectionData.translateToInputOffset(outputLineIndex, outputColumn - 1) + 1;\n\t}\n\n\tpublic getViewPositionOfModelPosition(deltaLineNumber: number, inputColumn: number, affinity: PositionAffinity = PositionAffinity.None): Position {\n\t\tthis._assertVisible();\n\t\tconst r = this._projectionData.translateToOutputPosition(inputColumn - 1, affinity);\n\t\treturn r.toPosition(deltaLineNumber);\n\t}\n\n\tpublic getViewLineNumberOfModelPosition(deltaLineNumber: number, inputColumn: number): number {\n\t\tthis._assertVisible();\n\t\tconst r = this._projectionData.translateToOutputPosition(inputColumn - 1);\n\t\treturn deltaLineNumber + r.outputLineIndex;\n\t}\n\n\tpublic normalizePosition(outputLineIndex: number, outputPosition: Position, affinity: PositionAffinity): Position {\n\t\tconst baseViewLineNumber = outputPosition.lineNumber - outputLineIndex;\n\t\tconst normalizedOutputPosition = this._projectionData.normalizeOutputPosition(outputLineIndex, outputPosition.column - 1, affinity);\n\t\tconst result = normalizedOutputPosition.toPosition(baseViewLineNumber);\n\t\treturn result;\n\t}\n\n\tpublic getInjectedTextAt(outputLineIndex: number, outputColumn: number): InjectedText | null {\n\t\treturn this._projectionData.getInjectedText(outputLineIndex, outputColumn - 1);\n\t}\n\n\tprivate _assertVisible() {\n\t\tif (!this._isVisible) {\n\t\t\tthrow new Error('Not supported');\n\t\t}\n\t}\n}\n\n/**\n * This projection does not change the model line.\n*/\nclass IdentityModelLineProjection implements IModelLineProjection {\n\tpublic static readonly INSTANCE = new IdentityModelLineProjection();\n\n\tprivate constructor() { }\n\n\tpublic isVisible(): boolean {\n\t\treturn true;\n\t}\n\n\tpublic setVisible(isVisible: boolean): IModelLineProjection {\n\t\tif (isVisible) {\n\t\t\treturn this;\n\t\t}\n\t\treturn HiddenModelLineProjection.INSTANCE;\n\t}\n\n\tpublic getProjectionData(): ModelLineProjectionData | null {\n\t\treturn null;\n\t}\n\n\tpublic getViewLineCount(): number {\n\t\treturn 1;\n\t}\n\n\tpublic getViewLineContent(model: ISimpleModel, modelLineNumber: number, _outputLineIndex: number): string {\n\t\treturn model.getLineContent(modelLineNumber);\n\t}\n\n\tpublic getViewLineLength(model: ISimpleModel, modelLineNumber: number, _outputLineIndex: number): number {\n\t\treturn model.getLineLength(modelLineNumber);\n\t}\n\n\tpublic getViewLineMinColumn(model: ISimpleModel, modelLineNumber: number, _outputLineIndex: number): number {\n\t\treturn model.getLineMinColumn(modelLineNumber);\n\t}\n\n\tpublic getViewLineMaxColumn(model: ISimpleModel, modelLineNumber: number, _outputLineIndex: number): number {\n\t\treturn model.getLineMaxColumn(modelLineNumber);\n\t}\n\n\tpublic getViewLineData(model: ISimpleModel, modelLineNumber: number, _outputLineIndex: number): ViewLineData {\n\t\tconst lineTokens = model.tokenization.getLineTokens(modelLineNumber);\n\t\tconst lineContent = lineTokens.getLineContent();\n\t\treturn new ViewLineData(\n\t\t\tlineContent,\n\t\t\tfalse,\n\t\t\t1,\n\t\t\tlineContent.length + 1,\n\t\t\t0,\n\t\t\tlineTokens.inflate(),\n\t\t\tnull\n\t\t);\n\t}\n\n\tpublic getViewLinesData(model: ISimpleModel, modelLineNumber: number, _fromOuputLineIndex: number, _toOutputLineIndex: number, globalStartIndex: number, needed: boolean[], result: Array<ViewLineData | null>): void {\n\t\tif (!needed[globalStartIndex]) {\n\t\t\tresult[globalStartIndex] = null;\n\t\t\treturn;\n\t\t}\n\t\tresult[globalStartIndex] = this.getViewLineData(model, modelLineNumber, 0);\n\t}\n\n\tpublic getModelColumnOfViewPosition(_outputLineIndex: number, outputColumn: number): number {\n\t\treturn outputColumn;\n\t}\n\n\tpublic getViewPositionOfModelPosition(deltaLineNumber: number, inputColumn: number): Position {\n\t\treturn new Position(deltaLineNumber, inputColumn);\n\t}\n\n\tpublic getViewLineNumberOfModelPosition(deltaLineNumber: number, _inputColumn: number): number {\n\t\treturn deltaLineNumber;\n\t}\n\n\tpublic normalizePosition(outputLineIndex: number, outputPosition: Position, affinity: PositionAffinity): Position {\n\t\treturn outputPosition;\n\t}\n\n\tpublic getInjectedTextAt(_outputLineIndex: number, _outputColumn: number): InjectedText | null {\n\t\treturn null;\n\t}\n}\n\n/**\n * This projection hides the model line.\n */\nclass HiddenModelLineProjection implements IModelLineProjection {\n\tpublic static readonly INSTANCE = new HiddenModelLineProjection();\n\n\tprivate constructor() { }\n\n\tpublic isVisible(): boolean {\n\t\treturn false;\n\t}\n\n\tpublic setVisible(isVisible: boolean): IModelLineProjection {\n\t\tif (!isVisible) {\n\t\t\treturn this;\n\t\t}\n\t\treturn IdentityModelLineProjection.INSTANCE;\n\t}\n\n\tpublic getProjectionData(): ModelLineProjectionData | null {\n\t\treturn null;\n\t}\n\n\tpublic getViewLineCount(): number {\n\t\treturn 0;\n\t}\n\n\tpublic getViewLineContent(_model: ISimpleModel, _modelLineNumber: number, _outputLineIndex: number): string {\n\t\tthrow new Error('Not supported');\n\t}\n\n\tpublic getViewLineLength(_model: ISimpleModel, _modelLineNumber: number, _outputLineIndex: number): number {\n\t\tthrow new Error('Not supported');\n\t}\n\n\tpublic getViewLineMinColumn(_model: ISimpleModel, _modelLineNumber: number, _outputLineIndex: number): number {\n\t\tthrow new Error('Not supported');\n\t}\n\n\tpublic getViewLineMaxColumn(_model: ISimpleModel, _modelLineNumber: number, _outputLineIndex: number): number {\n\t\tthrow new Error('Not supported');\n\t}\n\n\tpublic getViewLineData(_model: ISimpleModel, _modelLineNumber: number, _outputLineIndex: number): ViewLineData {\n\t\tthrow new Error('Not supported');\n\t}\n\n\tpublic getViewLinesData(_model: ISimpleModel, _modelLineNumber: number, _fromOuputLineIndex: number, _toOutputLineIndex: number, _globalStartIndex: number, _needed: boolean[], _result: ViewLineData[]): void {\n\t\tthrow new Error('Not supported');\n\t}\n\n\tpublic getModelColumnOfViewPosition(_outputLineIndex: number, _outputColumn: number): number {\n\t\tthrow new Error('Not supported');\n\t}\n\n\tpublic getViewPositionOfModelPosition(_deltaLineNumber: number, _inputColumn: number): Position {\n\t\tthrow new Error('Not supported');\n\t}\n\n\tpublic getViewLineNumberOfModelPosition(_deltaLineNumber: number, _inputColumn: number): number {\n\t\tthrow new Error('Not supported');\n\t}\n\n\tpublic normalizePosition(outputLineIndex: number, outputPosition: Position, affinity: PositionAffinity): Position {\n\t\tthrow new Error('Not supported');\n\t}\n\n\tpublic getInjectedTextAt(_outputLineIndex: number, _outputColumn: number): InjectedText | null {\n\t\tthrow new Error('Not supported');\n\t}\n}\n\nconst _spaces: string[] = [''];\nfunction spaces(count: number): string {\n\tif (count >= _spaces.length) {\n\t\tfor (let i = 1; i <= count; i++) {\n\t\t\t_spaces[i] = _makeSpaces(i);\n\t\t}\n\t}\n\treturn _spaces[count];\n}\n\nfunction _makeSpaces(count: number): string {\n\treturn new Array(count + 1).join(' ');\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1321, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/monaco-editor/esm/vs/editor/common/viewModel/viewModelLines.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/viewModel/file%3A/mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/viewModel/viewModelLines.ts","file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/viewModel/vs/editor/common/viewModel/viewModelLines.ts"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as arrays from '../../../base/common/arrays.js';\nimport { IDisposable } from '../../../base/common/lifecycle.js';\nimport { WrappingIndent } from '../config/editorOptions.js';\nimport { FontInfo } from '../config/fontInfo.js';\nimport { IPosition, Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { IModelDecoration, IModelDeltaDecoration, ITextModel, PositionAffinity } from '../model.js';\nimport { IActiveIndentGuideInfo, BracketGuideOptions, IndentGuide, IndentGuideHorizontalLine } from '../textModelGuides.js';\nimport { ModelDecorationOptions } from '../model/textModel.js';\nimport { LineInjectedText } from '../textModelEvents.js';\nimport * as viewEvents from '../viewEvents.js';\nimport { createModelLineProjection, IModelLineProjection } from './modelLineProjection.js';\nimport { ILineBreaksComputer, ModelLineProjectionData, InjectedText, ILineBreaksComputerFactory } from '../modelLineProjectionData.js';\nimport { ConstantTimePrefixSumComputer } from '../model/prefixSumComputer.js';\nimport { ViewLineData } from '../viewModel.js';\nimport { ICoordinatesConverter, IdentityCoordinatesConverter } from '../coordinatesConverter.js';\n\nexport interface IViewModelLines extends IDisposable {\n\tcreateCoordinatesConverter(): ICoordinatesConverter;\n\n\tsetWrappingSettings(fontInfo: FontInfo, wrappingStrategy: 'simple' | 'advanced', wrappingColumn: number, wrappingIndent: WrappingIndent, wordBreak: 'normal' | 'keepAll'): boolean;\n\tsetTabSize(newTabSize: number): boolean;\n\tgetHiddenAreas(): Range[];\n\tsetHiddenAreas(_ranges: readonly Range[]): boolean;\n\n\tcreateLineBreaksComputer(): ILineBreaksComputer;\n\tonModelFlushed(): void;\n\tonModelLinesDeleted(versionId: number | null, fromLineNumber: number, toLineNumber: number): viewEvents.ViewLinesDeletedEvent | null;\n\tonModelLinesInserted(versionId: number | null, fromLineNumber: number, toLineNumber: number, lineBreaks: (ModelLineProjectionData | null)[]): viewEvents.ViewLinesInsertedEvent | null;\n\tonModelLineChanged(versionId: number | null, lineNumber: number, lineBreakData: ModelLineProjectionData | null): [boolean, viewEvents.ViewLinesChangedEvent | null, viewEvents.ViewLinesInsertedEvent | null, viewEvents.ViewLinesDeletedEvent | null];\n\tacceptVersionId(versionId: number): void;\n\n\tgetViewLineCount(): number;\n\tgetActiveIndentGuide(viewLineNumber: number, minLineNumber: number, maxLineNumber: number): IActiveIndentGuideInfo;\n\tgetViewLinesIndentGuides(viewStartLineNumber: number, viewEndLineNumber: number): number[];\n\tgetViewLinesBracketGuides(startLineNumber: number, endLineNumber: number, activePosition: IPosition | null, options: BracketGuideOptions): IndentGuide[][];\n\tgetViewLineContent(viewLineNumber: number): string;\n\tgetViewLineLength(viewLineNumber: number): number;\n\tgetViewLineMinColumn(viewLineNumber: number): number;\n\tgetViewLineMaxColumn(viewLineNumber: number): number;\n\tgetViewLineData(viewLineNumber: number): ViewLineData;\n\tgetViewLinesData(viewStartLineNumber: number, viewEndLineNumber: number, needed: boolean[]): Array<ViewLineData | null>;\n\n\tgetDecorationsInRange(range: Range, ownerId: number, filterOutValidation: boolean, filterFontDecorations: boolean, onlyMinimapDecorations: boolean, onlyMarginDecorations: boolean): IModelDecoration[];\n\n\tgetInjectedTextAt(viewPosition: Position): InjectedText | null;\n\n\tnormalizePosition(position: Position, affinity: PositionAffinity): Position;\n\t/**\n\t * Gets the column at which indentation stops at a given line.\n\t * @internal\n\t*/\n\tgetLineIndentColumn(lineNumber: number): number;\n}\n\nexport class ViewModelLinesFromProjectedModel implements IViewModelLines {\n\tprivate readonly _editorId: number;\n\tprivate readonly model: ITextModel;\n\tprivate _validModelVersionId: number;\n\n\tprivate readonly _domLineBreaksComputerFactory: ILineBreaksComputerFactory;\n\tprivate readonly _monospaceLineBreaksComputerFactory: ILineBreaksComputerFactory;\n\n\tprivate fontInfo: FontInfo;\n\tprivate tabSize: number;\n\tprivate wrappingColumn: number;\n\tprivate wrappingIndent: WrappingIndent;\n\tprivate wordBreak: 'normal' | 'keepAll';\n\tprivate wrappingStrategy: 'simple' | 'advanced';\n\tprivate wrapOnEscapedLineFeeds: boolean;\n\n\tprivate modelLineProjections!: IModelLineProjection[];\n\n\t/**\n\t * Reflects the sum of the line counts of all projected model lines.\n\t*/\n\tprivate projectedModelLineLineCounts!: ConstantTimePrefixSumComputer;\n\n\tprivate hiddenAreasDecorationIds!: string[];\n\n\tconstructor(\n\t\teditorId: number,\n\t\tmodel: ITextModel,\n\t\tdomLineBreaksComputerFactory: ILineBreaksComputerFactory,\n\t\tmonospaceLineBreaksComputerFactory: ILineBreaksComputerFactory,\n\t\tfontInfo: FontInfo,\n\t\ttabSize: number,\n\t\twrappingStrategy: 'simple' | 'advanced',\n\t\twrappingColumn: number,\n\t\twrappingIndent: WrappingIndent,\n\t\twordBreak: 'normal' | 'keepAll',\n\t\twrapOnEscapedLineFeeds: boolean\n\t) {\n\t\tthis._editorId = editorId;\n\t\tthis.model = model;\n\t\tthis._validModelVersionId = -1;\n\t\tthis._domLineBreaksComputerFactory = domLineBreaksComputerFactory;\n\t\tthis._monospaceLineBreaksComputerFactory = monospaceLineBreaksComputerFactory;\n\t\tthis.fontInfo = fontInfo;\n\t\tthis.tabSize = tabSize;\n\t\tthis.wrappingStrategy = wrappingStrategy;\n\t\tthis.wrappingColumn = wrappingColumn;\n\t\tthis.wrappingIndent = wrappingIndent;\n\t\tthis.wordBreak = wordBreak;\n\t\tthis.wrapOnEscapedLineFeeds = wrapOnEscapedLineFeeds;\n\n\t\tthis._constructLines(/*resetHiddenAreas*/true, null);\n\t}\n\n\tpublic dispose(): void {\n\t\tthis.hiddenAreasDecorationIds = this.model.deltaDecorations(this.hiddenAreasDecorationIds, []);\n\t}\n\n\tpublic createCoordinatesConverter(): ICoordinatesConverter {\n\t\treturn new CoordinatesConverter(this);\n\t}\n\n\tprivate _constructLines(resetHiddenAreas: boolean, previousLineBreaks: ((ModelLineProjectionData | null)[]) | null): void {\n\t\tthis.modelLineProjections = [];\n\n\t\tif (resetHiddenAreas) {\n\t\t\tthis.hiddenAreasDecorationIds = this.model.deltaDecorations(this.hiddenAreasDecorationIds, []);\n\t\t}\n\n\t\tconst linesContent = this.model.getLinesContent();\n\t\tconst injectedTextDecorations = this.model.getInjectedTextDecorations(this._editorId);\n\t\tconst lineCount = linesContent.length;\n\t\tconst lineBreaksComputer = this.createLineBreaksComputer();\n\n\t\tconst injectedTextQueue = new arrays.ArrayQueue(LineInjectedText.fromDecorations(injectedTextDecorations));\n\t\tfor (let i = 0; i < lineCount; i++) {\n\t\t\tconst lineInjectedText = injectedTextQueue.takeWhile(t => t.lineNumber === i + 1);\n\t\t\tlineBreaksComputer.addRequest(linesContent[i], lineInjectedText, previousLineBreaks ? previousLineBreaks[i] : null);\n\t\t}\n\t\tconst linesBreaks = lineBreaksComputer.finalize();\n\n\t\tconst values: number[] = [];\n\n\t\tconst hiddenAreas = this.hiddenAreasDecorationIds.map((areaId) => this.model.getDecorationRange(areaId)!).sort(Range.compareRangesUsingStarts);\n\t\tlet hiddenAreaStart = 1, hiddenAreaEnd = 0;\n\t\tlet hiddenAreaIdx = -1;\n\t\tlet nextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : lineCount + 2;\n\n\t\tfor (let i = 0; i < lineCount; i++) {\n\t\t\tconst lineNumber = i + 1;\n\n\t\t\tif (lineNumber === nextLineNumberToUpdateHiddenArea) {\n\t\t\t\thiddenAreaIdx++;\n\t\t\t\thiddenAreaStart = hiddenAreas[hiddenAreaIdx]!.startLineNumber;\n\t\t\t\thiddenAreaEnd = hiddenAreas[hiddenAreaIdx]!.endLineNumber;\n\t\t\t\tnextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : lineCount + 2;\n\t\t\t}\n\n\t\t\tconst isInHiddenArea = (lineNumber >= hiddenAreaStart && lineNumber <= hiddenAreaEnd);\n\t\t\tconst line = createModelLineProjection(linesBreaks[i], !isInHiddenArea);\n\t\t\tvalues[i] = line.getViewLineCount();\n\t\t\tthis.modelLineProjections[i] = line;\n\t\t}\n\n\t\tthis._validModelVersionId = this.model.getVersionId();\n\n\t\tthis.projectedModelLineLineCounts = new ConstantTimePrefixSumComputer(values);\n\t}\n\n\tpublic getHiddenAreas(): Range[] {\n\t\treturn this.hiddenAreasDecorationIds.map(\n\t\t\t(decId) => this.model.getDecorationRange(decId)!\n\t\t);\n\t}\n\n\tpublic setHiddenAreas(_ranges: Range[]): boolean {\n\t\tconst validatedRanges = _ranges.map(r => this.model.validateRange(r));\n\t\tconst newRanges = normalizeLineRanges(validatedRanges);\n\n\t\t// TODO@Martin: Please stop calling this method on each model change!\n\n\t\t// This checks if there really was a change\n\t\tconst oldRanges = this.hiddenAreasDecorationIds.map((areaId) => this.model.getDecorationRange(areaId)!).sort(Range.compareRangesUsingStarts);\n\t\tif (newRanges.length === oldRanges.length) {\n\t\t\tlet hasDifference = false;\n\t\t\tfor (let i = 0; i < newRanges.length; i++) {\n\t\t\t\tif (!newRanges[i].equalsRange(oldRanges[i])) {\n\t\t\t\t\thasDifference = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!hasDifference) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tconst newDecorations = newRanges.map<IModelDeltaDecoration>(\n\t\t\t(r) =>\n\t\t\t({\n\t\t\t\trange: r,\n\t\t\t\toptions: ModelDecorationOptions.EMPTY,\n\t\t\t})\n\t\t);\n\n\t\tthis.hiddenAreasDecorationIds = this.model.deltaDecorations(this.hiddenAreasDecorationIds, newDecorations);\n\n\t\tconst hiddenAreas = newRanges;\n\t\tlet hiddenAreaStart = 1, hiddenAreaEnd = 0;\n\t\tlet hiddenAreaIdx = -1;\n\t\tlet nextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : this.modelLineProjections.length + 2;\n\n\t\tlet hasVisibleLine = false;\n\t\tfor (let i = 0; i < this.modelLineProjections.length; i++) {\n\t\t\tconst lineNumber = i + 1;\n\n\t\t\tif (lineNumber === nextLineNumberToUpdateHiddenArea) {\n\t\t\t\thiddenAreaIdx++;\n\t\t\t\thiddenAreaStart = hiddenAreas[hiddenAreaIdx].startLineNumber;\n\t\t\t\thiddenAreaEnd = hiddenAreas[hiddenAreaIdx].endLineNumber;\n\t\t\t\tnextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : this.modelLineProjections.length + 2;\n\t\t\t}\n\n\t\t\tlet lineChanged = false;\n\t\t\tif (lineNumber >= hiddenAreaStart && lineNumber <= hiddenAreaEnd) {\n\t\t\t\t// Line should be hidden\n\t\t\t\tif (this.modelLineProjections[i].isVisible()) {\n\t\t\t\t\tthis.modelLineProjections[i] = this.modelLineProjections[i].setVisible(false);\n\t\t\t\t\tlineChanged = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\thasVisibleLine = true;\n\t\t\t\t// Line should be visible\n\t\t\t\tif (!this.modelLineProjections[i].isVisible()) {\n\t\t\t\t\tthis.modelLineProjections[i] = this.modelLineProjections[i].setVisible(true);\n\t\t\t\t\tlineChanged = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (lineChanged) {\n\t\t\t\tconst newOutputLineCount = this.modelLineProjections[i].getViewLineCount();\n\t\t\t\tthis.projectedModelLineLineCounts.setValue(i, newOutputLineCount);\n\t\t\t}\n\t\t}\n\n\t\tif (!hasVisibleLine) {\n\t\t\t// Cannot have everything be hidden => reveal everything!\n\t\t\tthis.setHiddenAreas([]);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tpublic modelPositionIsVisible(modelLineNumber: number, _modelColumn: number): boolean {\n\t\tif (modelLineNumber < 1 || modelLineNumber > this.modelLineProjections.length) {\n\t\t\t// invalid arguments\n\t\t\treturn false;\n\t\t}\n\t\treturn this.modelLineProjections[modelLineNumber - 1].isVisible();\n\t}\n\n\tpublic getModelLineViewLineCount(modelLineNumber: number): number {\n\t\tif (modelLineNumber < 1 || modelLineNumber > this.modelLineProjections.length) {\n\t\t\t// invalid arguments\n\t\t\treturn 1;\n\t\t}\n\t\treturn this.modelLineProjections[modelLineNumber - 1].getViewLineCount();\n\t}\n\n\tpublic setTabSize(newTabSize: number): boolean {\n\t\tif (this.tabSize === newTabSize) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.tabSize = newTabSize;\n\n\t\tthis._constructLines(/*resetHiddenAreas*/false, null);\n\n\t\treturn true;\n\t}\n\n\tpublic setWrappingSettings(fontInfo: FontInfo, wrappingStrategy: 'simple' | 'advanced', wrappingColumn: number, wrappingIndent: WrappingIndent, wordBreak: 'normal' | 'keepAll'): boolean {\n\t\tconst equalFontInfo = this.fontInfo.equals(fontInfo);\n\t\tconst equalWrappingStrategy = (this.wrappingStrategy === wrappingStrategy);\n\t\tconst equalWrappingColumn = (this.wrappingColumn === wrappingColumn);\n\t\tconst equalWrappingIndent = (this.wrappingIndent === wrappingIndent);\n\t\tconst equalWordBreak = (this.wordBreak === wordBreak);\n\t\tif (equalFontInfo && equalWrappingStrategy && equalWrappingColumn && equalWrappingIndent && equalWordBreak) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst onlyWrappingColumnChanged = (equalFontInfo && equalWrappingStrategy && !equalWrappingColumn && equalWrappingIndent && equalWordBreak);\n\n\t\tthis.fontInfo = fontInfo;\n\t\tthis.wrappingStrategy = wrappingStrategy;\n\t\tthis.wrappingColumn = wrappingColumn;\n\t\tthis.wrappingIndent = wrappingIndent;\n\t\tthis.wordBreak = wordBreak;\n\n\t\tlet previousLineBreaks: ((ModelLineProjectionData | null)[]) | null = null;\n\t\tif (onlyWrappingColumnChanged) {\n\t\t\tpreviousLineBreaks = [];\n\t\t\tfor (let i = 0, len = this.modelLineProjections.length; i < len; i++) {\n\t\t\t\tpreviousLineBreaks[i] = this.modelLineProjections[i].getProjectionData();\n\t\t\t}\n\t\t}\n\n\t\tthis._constructLines(/*resetHiddenAreas*/false, previousLineBreaks);\n\n\t\treturn true;\n\t}\n\n\tpublic createLineBreaksComputer(): ILineBreaksComputer {\n\t\tconst lineBreaksComputerFactory = (\n\t\t\tthis.wrappingStrategy === 'advanced'\n\t\t\t\t? this._domLineBreaksComputerFactory\n\t\t\t\t: this._monospaceLineBreaksComputerFactory\n\t\t);\n\t\treturn lineBreaksComputerFactory.createLineBreaksComputer(this.fontInfo, this.tabSize, this.wrappingColumn, this.wrappingIndent, this.wordBreak, this.wrapOnEscapedLineFeeds);\n\t}\n\n\tpublic onModelFlushed(): void {\n\t\tthis._constructLines(/*resetHiddenAreas*/true, null);\n\t}\n\n\tpublic onModelLinesDeleted(versionId: number | null, fromLineNumber: number, toLineNumber: number): viewEvents.ViewLinesDeletedEvent | null {\n\t\tif (!versionId || versionId <= this._validModelVersionId) {\n\t\t\t// Here we check for versionId in case the lines were reconstructed in the meantime.\n\t\t\t// We don't want to apply stale change events on top of a newer read model state.\n\t\t\treturn null;\n\t\t}\n\n\t\tconst outputFromLineNumber = (fromLineNumber === 1 ? 1 : this.projectedModelLineLineCounts.getPrefixSum(fromLineNumber - 1) + 1);\n\t\tconst outputToLineNumber = this.projectedModelLineLineCounts.getPrefixSum(toLineNumber);\n\n\t\tthis.modelLineProjections.splice(fromLineNumber - 1, toLineNumber - fromLineNumber + 1);\n\t\tthis.projectedModelLineLineCounts.removeValues(fromLineNumber - 1, toLineNumber - fromLineNumber + 1);\n\n\t\treturn new viewEvents.ViewLinesDeletedEvent(outputFromLineNumber, outputToLineNumber);\n\t}\n\n\tpublic onModelLinesInserted(versionId: number | null, fromLineNumber: number, _toLineNumber: number, lineBreaks: (ModelLineProjectionData | null)[]): viewEvents.ViewLinesInsertedEvent | null {\n\t\tif (!versionId || versionId <= this._validModelVersionId) {\n\t\t\t// Here we check for versionId in case the lines were reconstructed in the meantime.\n\t\t\t// We don't want to apply stale change events on top of a newer read model state.\n\t\t\treturn null;\n\t\t}\n\n\t\t// cannot use this.getHiddenAreas() because those decorations have already seen the effect of this model change\n\t\tconst isInHiddenArea = (fromLineNumber > 2 && !this.modelLineProjections[fromLineNumber - 2].isVisible());\n\n\t\tconst outputFromLineNumber = (fromLineNumber === 1 ? 1 : this.projectedModelLineLineCounts.getPrefixSum(fromLineNumber - 1) + 1);\n\n\t\tlet totalOutputLineCount = 0;\n\t\tconst insertLines: IModelLineProjection[] = [];\n\t\tconst insertPrefixSumValues: number[] = [];\n\n\t\tfor (let i = 0, len = lineBreaks.length; i < len; i++) {\n\t\t\tconst line = createModelLineProjection(lineBreaks[i], !isInHiddenArea);\n\t\t\tinsertLines.push(line);\n\n\t\t\tconst outputLineCount = line.getViewLineCount();\n\t\t\ttotalOutputLineCount += outputLineCount;\n\t\t\tinsertPrefixSumValues[i] = outputLineCount;\n\t\t}\n\n\t\t// TODO@Alex: use arrays.arrayInsert\n\t\tthis.modelLineProjections =\n\t\t\tthis.modelLineProjections.slice(0, fromLineNumber - 1)\n\t\t\t\t.concat(insertLines)\n\t\t\t\t.concat(this.modelLineProjections.slice(fromLineNumber - 1));\n\n\t\tthis.projectedModelLineLineCounts.insertValues(fromLineNumber - 1, insertPrefixSumValues);\n\n\t\treturn new viewEvents.ViewLinesInsertedEvent(outputFromLineNumber, outputFromLineNumber + totalOutputLineCount - 1);\n\t}\n\n\tpublic onModelLineChanged(versionId: number | null, lineNumber: number, lineBreakData: ModelLineProjectionData | null): [boolean, viewEvents.ViewLinesChangedEvent | null, viewEvents.ViewLinesInsertedEvent | null, viewEvents.ViewLinesDeletedEvent | null] {\n\t\tif (versionId !== null && versionId <= this._validModelVersionId) {\n\t\t\t// Here we check for versionId in case the lines were reconstructed in the meantime.\n\t\t\t// We don't want to apply stale change events on top of a newer read model state.\n\t\t\treturn [false, null, null, null];\n\t\t}\n\n\t\tconst lineIndex = lineNumber - 1;\n\n\t\tconst oldOutputLineCount = this.modelLineProjections[lineIndex].getViewLineCount();\n\t\tconst isVisible = this.modelLineProjections[lineIndex].isVisible();\n\t\tconst line = createModelLineProjection(lineBreakData, isVisible);\n\t\tthis.modelLineProjections[lineIndex] = line;\n\t\tconst newOutputLineCount = this.modelLineProjections[lineIndex].getViewLineCount();\n\n\t\tlet lineMappingChanged = false;\n\t\tlet changeFrom = 0;\n\t\tlet changeTo = -1;\n\t\tlet insertFrom = 0;\n\t\tlet insertTo = -1;\n\t\tlet deleteFrom = 0;\n\t\tlet deleteTo = -1;\n\n\t\tif (oldOutputLineCount > newOutputLineCount) {\n\t\t\tchangeFrom = this.projectedModelLineLineCounts.getPrefixSum(lineNumber - 1) + 1;\n\t\t\tchangeTo = changeFrom + newOutputLineCount - 1;\n\t\t\tdeleteFrom = changeTo + 1;\n\t\t\tdeleteTo = deleteFrom + (oldOutputLineCount - newOutputLineCount) - 1;\n\t\t\tlineMappingChanged = true;\n\t\t} else if (oldOutputLineCount < newOutputLineCount) {\n\t\t\tchangeFrom = this.projectedModelLineLineCounts.getPrefixSum(lineNumber - 1) + 1;\n\t\t\tchangeTo = changeFrom + oldOutputLineCount - 1;\n\t\t\tinsertFrom = changeTo + 1;\n\t\t\tinsertTo = insertFrom + (newOutputLineCount - oldOutputLineCount) - 1;\n\t\t\tlineMappingChanged = true;\n\t\t} else {\n\t\t\tchangeFrom = this.projectedModelLineLineCounts.getPrefixSum(lineNumber - 1) + 1;\n\t\t\tchangeTo = changeFrom + newOutputLineCount - 1;\n\t\t}\n\n\t\tthis.projectedModelLineLineCounts.setValue(lineIndex, newOutputLineCount);\n\n\t\tconst viewLinesChangedEvent = (changeFrom <= changeTo ? new viewEvents.ViewLinesChangedEvent(changeFrom, changeTo - changeFrom + 1) : null);\n\t\tconst viewLinesInsertedEvent = (insertFrom <= insertTo ? new viewEvents.ViewLinesInsertedEvent(insertFrom, insertTo) : null);\n\t\tconst viewLinesDeletedEvent = (deleteFrom <= deleteTo ? new viewEvents.ViewLinesDeletedEvent(deleteFrom, deleteTo) : null);\n\n\t\treturn [lineMappingChanged, viewLinesChangedEvent, viewLinesInsertedEvent, viewLinesDeletedEvent];\n\t}\n\n\tpublic acceptVersionId(versionId: number): void {\n\t\tthis._validModelVersionId = versionId;\n\t\tif (this.modelLineProjections.length === 1 && !this.modelLineProjections[0].isVisible()) {\n\t\t\t// At least one line must be visible => reset hidden areas\n\t\t\tthis.setHiddenAreas([]);\n\t\t}\n\t}\n\n\tpublic getViewLineCount(): number {\n\t\treturn this.projectedModelLineLineCounts.getTotalSum();\n\t}\n\n\tprivate _toValidViewLineNumber(viewLineNumber: number): number {\n\t\tif (viewLineNumber < 1) {\n\t\t\treturn 1;\n\t\t}\n\t\tconst viewLineCount = this.getViewLineCount();\n\t\tif (viewLineNumber > viewLineCount) {\n\t\t\treturn viewLineCount;\n\t\t}\n\t\treturn viewLineNumber | 0;\n\t}\n\n\tpublic getActiveIndentGuide(viewLineNumber: number, minLineNumber: number, maxLineNumber: number): IActiveIndentGuideInfo {\n\t\tviewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n\t\tminLineNumber = this._toValidViewLineNumber(minLineNumber);\n\t\tmaxLineNumber = this._toValidViewLineNumber(maxLineNumber);\n\n\t\tconst modelPosition = this.convertViewPositionToModelPosition(viewLineNumber, this.getViewLineMinColumn(viewLineNumber));\n\t\tconst modelMinPosition = this.convertViewPositionToModelPosition(minLineNumber, this.getViewLineMinColumn(minLineNumber));\n\t\tconst modelMaxPosition = this.convertViewPositionToModelPosition(maxLineNumber, this.getViewLineMinColumn(maxLineNumber));\n\t\tconst result = this.model.guides.getActiveIndentGuide(modelPosition.lineNumber, modelMinPosition.lineNumber, modelMaxPosition.lineNumber);\n\n\t\tconst viewStartPosition = this.convertModelPositionToViewPosition(result.startLineNumber, 1);\n\t\tconst viewEndPosition = this.convertModelPositionToViewPosition(result.endLineNumber, this.model.getLineMaxColumn(result.endLineNumber));\n\t\treturn {\n\t\t\tstartLineNumber: viewStartPosition.lineNumber,\n\t\t\tendLineNumber: viewEndPosition.lineNumber,\n\t\t\tindent: result.indent\n\t\t};\n\t}\n\n\t// #region ViewLineInfo\n\n\tprivate getViewLineInfo(viewLineNumber: number): ViewLineInfo {\n\t\tviewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n\t\tconst r = this.projectedModelLineLineCounts.getIndexOf(viewLineNumber - 1);\n\t\tconst lineIndex = r.index;\n\t\tconst remainder = r.remainder;\n\t\treturn new ViewLineInfo(lineIndex + 1, remainder);\n\t}\n\n\tprivate getMinColumnOfViewLine(viewLineInfo: ViewLineInfo): number {\n\t\treturn this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewLineMinColumn(\n\t\t\tthis.model,\n\t\t\tviewLineInfo.modelLineNumber,\n\t\t\tviewLineInfo.modelLineWrappedLineIdx\n\t\t);\n\t}\n\n\tprivate getMaxColumnOfViewLine(viewLineInfo: ViewLineInfo): number {\n\t\treturn this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewLineMaxColumn(\n\t\t\tthis.model,\n\t\t\tviewLineInfo.modelLineNumber,\n\t\t\tviewLineInfo.modelLineWrappedLineIdx\n\t\t);\n\t}\n\n\tprivate getModelStartPositionOfViewLine(viewLineInfo: ViewLineInfo): Position {\n\t\tconst line = this.modelLineProjections[viewLineInfo.modelLineNumber - 1];\n\t\tconst minViewColumn = line.getViewLineMinColumn(\n\t\t\tthis.model,\n\t\t\tviewLineInfo.modelLineNumber,\n\t\t\tviewLineInfo.modelLineWrappedLineIdx\n\t\t);\n\t\tconst column = line.getModelColumnOfViewPosition(\n\t\t\tviewLineInfo.modelLineWrappedLineIdx,\n\t\t\tminViewColumn\n\t\t);\n\t\treturn new Position(viewLineInfo.modelLineNumber, column);\n\t}\n\n\tprivate getModelEndPositionOfViewLine(viewLineInfo: ViewLineInfo): Position {\n\t\tconst line = this.modelLineProjections[viewLineInfo.modelLineNumber - 1];\n\t\tconst maxViewColumn = line.getViewLineMaxColumn(\n\t\t\tthis.model,\n\t\t\tviewLineInfo.modelLineNumber,\n\t\t\tviewLineInfo.modelLineWrappedLineIdx\n\t\t);\n\t\tconst column = line.getModelColumnOfViewPosition(\n\t\t\tviewLineInfo.modelLineWrappedLineIdx,\n\t\t\tmaxViewColumn\n\t\t);\n\t\treturn new Position(viewLineInfo.modelLineNumber, column);\n\t}\n\n\tprivate getViewLineInfosGroupedByModelRanges(viewStartLineNumber: number, viewEndLineNumber: number): ViewLineInfoGroupedByModelRange[] {\n\t\tconst startViewLine = this.getViewLineInfo(viewStartLineNumber);\n\t\tconst endViewLine = this.getViewLineInfo(viewEndLineNumber);\n\n\t\tconst result = new Array<ViewLineInfoGroupedByModelRange>();\n\t\tlet lastVisibleModelPos: Position | null = this.getModelStartPositionOfViewLine(startViewLine);\n\t\tlet viewLines = new Array<ViewLineInfo>();\n\n\t\tfor (let curModelLine = startViewLine.modelLineNumber; curModelLine <= endViewLine.modelLineNumber; curModelLine++) {\n\t\t\tconst line = this.modelLineProjections[curModelLine - 1];\n\n\t\t\tif (line.isVisible()) {\n\t\t\t\tconst startOffset =\n\t\t\t\t\tcurModelLine === startViewLine.modelLineNumber\n\t\t\t\t\t\t? startViewLine.modelLineWrappedLineIdx\n\t\t\t\t\t\t: 0;\n\n\t\t\t\tconst endOffset =\n\t\t\t\t\tcurModelLine === endViewLine.modelLineNumber\n\t\t\t\t\t\t? endViewLine.modelLineWrappedLineIdx + 1\n\t\t\t\t\t\t: line.getViewLineCount();\n\n\t\t\t\tfor (let i = startOffset; i < endOffset; i++) {\n\t\t\t\t\tviewLines.push(new ViewLineInfo(curModelLine, i));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!line.isVisible() && lastVisibleModelPos) {\n\t\t\t\tconst lastVisibleModelPos2 = new Position(curModelLine - 1, this.model.getLineMaxColumn(curModelLine - 1) + 1);\n\n\t\t\t\tconst modelRange = Range.fromPositions(lastVisibleModelPos, lastVisibleModelPos2);\n\t\t\t\tresult.push(new ViewLineInfoGroupedByModelRange(modelRange, viewLines));\n\t\t\t\tviewLines = [];\n\n\t\t\t\tlastVisibleModelPos = null;\n\t\t\t} else if (line.isVisible() && !lastVisibleModelPos) {\n\t\t\t\tlastVisibleModelPos = new Position(curModelLine, 1);\n\t\t\t}\n\t\t}\n\n\t\tif (lastVisibleModelPos) {\n\t\t\tconst modelRange = Range.fromPositions(lastVisibleModelPos, this.getModelEndPositionOfViewLine(endViewLine));\n\t\t\tresult.push(new ViewLineInfoGroupedByModelRange(modelRange, viewLines));\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t// #endregion\n\n\tpublic getViewLinesBracketGuides(viewStartLineNumber: number, viewEndLineNumber: number, activeViewPosition: IPosition | null, options: BracketGuideOptions): IndentGuide[][] {\n\t\tconst modelActivePosition = activeViewPosition ? this.convertViewPositionToModelPosition(activeViewPosition.lineNumber, activeViewPosition.column) : null;\n\t\tconst resultPerViewLine: IndentGuide[][] = [];\n\n\t\tfor (const group of this.getViewLineInfosGroupedByModelRanges(viewStartLineNumber, viewEndLineNumber)) {\n\t\t\tconst modelRangeStartLineNumber = group.modelRange.startLineNumber;\n\n\t\t\tconst bracketGuidesPerModelLine = this.model.guides.getLinesBracketGuides(\n\t\t\t\tmodelRangeStartLineNumber,\n\t\t\t\tgroup.modelRange.endLineNumber,\n\t\t\t\tmodelActivePosition,\n\t\t\t\toptions\n\t\t\t);\n\n\t\t\tfor (const viewLineInfo of group.viewLines) {\n\n\t\t\t\tconst bracketGuides = bracketGuidesPerModelLine[viewLineInfo.modelLineNumber - modelRangeStartLineNumber];\n\n\t\t\t\t// visibleColumns stay as they are (this is a bug and needs to be fixed, but it is not a regression)\n\t\t\t\t// model-columns must be converted to view-model columns.\n\t\t\t\tconst result = bracketGuides.map(g => {\n\t\t\t\t\tif (g.forWrappedLinesAfterColumn !== -1) {\n\t\t\t\t\t\tconst p = this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewPositionOfModelPosition(0, g.forWrappedLinesAfterColumn);\n\t\t\t\t\t\tif (p.lineNumber >= viewLineInfo.modelLineWrappedLineIdx) {\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (g.forWrappedLinesBeforeOrAtColumn !== -1) {\n\t\t\t\t\t\tconst p = this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewPositionOfModelPosition(0, g.forWrappedLinesBeforeOrAtColumn);\n\t\t\t\t\t\tif (p.lineNumber < viewLineInfo.modelLineWrappedLineIdx) {\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!g.horizontalLine) {\n\t\t\t\t\t\treturn g;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet column = -1;\n\t\t\t\t\tif (g.column !== -1) {\n\t\t\t\t\t\tconst p = this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewPositionOfModelPosition(0, g.column);\n\t\t\t\t\t\tif (p.lineNumber === viewLineInfo.modelLineWrappedLineIdx) {\n\t\t\t\t\t\t\tcolumn = p.column;\n\t\t\t\t\t\t} else if (p.lineNumber < viewLineInfo.modelLineWrappedLineIdx) {\n\t\t\t\t\t\t\tcolumn = this.getMinColumnOfViewLine(viewLineInfo);\n\t\t\t\t\t\t} else if (p.lineNumber > viewLineInfo.modelLineWrappedLineIdx) {\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst viewPosition = this.convertModelPositionToViewPosition(viewLineInfo.modelLineNumber, g.horizontalLine.endColumn);\n\t\t\t\t\tconst p = this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewPositionOfModelPosition(0, g.horizontalLine.endColumn);\n\t\t\t\t\tif (p.lineNumber === viewLineInfo.modelLineWrappedLineIdx) {\n\t\t\t\t\t\treturn new IndentGuide(g.visibleColumn, column, g.className,\n\t\t\t\t\t\t\tnew IndentGuideHorizontalLine(g.horizontalLine.top,\n\t\t\t\t\t\t\t\tviewPosition.column),\n\t\t\t\t\t\t\t- 1,\n\t\t\t\t\t\t\t-1,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else if (p.lineNumber < viewLineInfo.modelLineWrappedLineIdx) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (g.visibleColumn !== -1) {\n\t\t\t\t\t\t\t// Don't repeat horizontal lines that use visibleColumn for unrelated lines.\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn new IndentGuide(g.visibleColumn, column, g.className,\n\t\t\t\t\t\t\tnew IndentGuideHorizontalLine(g.horizontalLine.top,\n\t\t\t\t\t\t\t\tthis.getMaxColumnOfViewLine(viewLineInfo)\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t-1,\n\t\t\t\t\t\t\t-1,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tresultPerViewLine.push(result.filter((r): r is IndentGuide => !!r));\n\n\t\t\t}\n\t\t}\n\n\t\treturn resultPerViewLine;\n\t}\n\n\tpublic getViewLinesIndentGuides(viewStartLineNumber: number, viewEndLineNumber: number): number[] {\n\t\t// TODO: Use the same code as in `getViewLinesBracketGuides`.\n\t\t// Future TODO: Merge with `getViewLinesBracketGuides`.\n\t\t// However, this requires more refactoring of indent guides.\n\t\tviewStartLineNumber = this._toValidViewLineNumber(viewStartLineNumber);\n\t\tviewEndLineNumber = this._toValidViewLineNumber(viewEndLineNumber);\n\n\t\tconst modelStart = this.convertViewPositionToModelPosition(viewStartLineNumber, this.getViewLineMinColumn(viewStartLineNumber));\n\t\tconst modelEnd = this.convertViewPositionToModelPosition(viewEndLineNumber, this.getViewLineMaxColumn(viewEndLineNumber));\n\n\t\tlet result: number[] = [];\n\t\tconst resultRepeatCount: number[] = [];\n\t\tconst resultRepeatOption: IndentGuideRepeatOption[] = [];\n\t\tconst modelStartLineIndex = modelStart.lineNumber - 1;\n\t\tconst modelEndLineIndex = modelEnd.lineNumber - 1;\n\n\t\tlet reqStart: Position | null = null;\n\t\tfor (let modelLineIndex = modelStartLineIndex; modelLineIndex <= modelEndLineIndex; modelLineIndex++) {\n\t\t\tconst line = this.modelLineProjections[modelLineIndex];\n\t\t\tif (line.isVisible()) {\n\t\t\t\tconst viewLineStartIndex = line.getViewLineNumberOfModelPosition(0, modelLineIndex === modelStartLineIndex ? modelStart.column : 1);\n\t\t\t\tconst viewLineEndIndex = line.getViewLineNumberOfModelPosition(0, this.model.getLineMaxColumn(modelLineIndex + 1));\n\t\t\t\tconst count = viewLineEndIndex - viewLineStartIndex + 1;\n\t\t\t\tlet option = IndentGuideRepeatOption.BlockNone;\n\t\t\t\tif (count > 1 && line.getViewLineMinColumn(this.model, modelLineIndex + 1, viewLineEndIndex) === 1) {\n\t\t\t\t\t// wrapped lines should block indent guides\n\t\t\t\t\toption = (viewLineStartIndex === 0 ? IndentGuideRepeatOption.BlockSubsequent : IndentGuideRepeatOption.BlockAll);\n\t\t\t\t}\n\t\t\t\tresultRepeatCount.push(count);\n\t\t\t\tresultRepeatOption.push(option);\n\t\t\t\t// merge into previous request\n\t\t\t\tif (reqStart === null) {\n\t\t\t\t\treqStart = new Position(modelLineIndex + 1, 0);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// hit invisible line => flush request\n\t\t\t\tif (reqStart !== null) {\n\t\t\t\t\tresult = result.concat(this.model.guides.getLinesIndentGuides(reqStart.lineNumber, modelLineIndex));\n\t\t\t\t\treqStart = null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (reqStart !== null) {\n\t\t\tresult = result.concat(this.model.guides.getLinesIndentGuides(reqStart.lineNumber, modelEnd.lineNumber));\n\t\t\treqStart = null;\n\t\t}\n\n\t\tconst viewLineCount = viewEndLineNumber - viewStartLineNumber + 1;\n\t\tconst viewIndents = new Array<number>(viewLineCount);\n\t\tlet currIndex = 0;\n\t\tfor (let i = 0, len = result.length; i < len; i++) {\n\t\t\tlet value = result[i];\n\t\t\tconst count = Math.min(viewLineCount - currIndex, resultRepeatCount[i]);\n\t\t\tconst option = resultRepeatOption[i];\n\t\t\tlet blockAtIndex: number;\n\t\t\tif (option === IndentGuideRepeatOption.BlockAll) {\n\t\t\t\tblockAtIndex = 0;\n\t\t\t} else if (option === IndentGuideRepeatOption.BlockSubsequent) {\n\t\t\t\tblockAtIndex = 1;\n\t\t\t} else {\n\t\t\t\tblockAtIndex = count;\n\t\t\t}\n\t\t\tfor (let j = 0; j < count; j++) {\n\t\t\t\tif (j === blockAtIndex) {\n\t\t\t\t\tvalue = 0;\n\t\t\t\t}\n\t\t\t\tviewIndents[currIndex++] = value;\n\t\t\t}\n\t\t}\n\t\treturn viewIndents;\n\t}\n\n\tpublic getViewLineContent(viewLineNumber: number): string {\n\t\tconst info = this.getViewLineInfo(viewLineNumber);\n\t\treturn this.modelLineProjections[info.modelLineNumber - 1].getViewLineContent(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n\t}\n\n\tpublic getViewLineLength(viewLineNumber: number): number {\n\t\tconst info = this.getViewLineInfo(viewLineNumber);\n\t\treturn this.modelLineProjections[info.modelLineNumber - 1].getViewLineLength(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n\t}\n\n\tpublic getViewLineMinColumn(viewLineNumber: number): number {\n\t\tconst info = this.getViewLineInfo(viewLineNumber);\n\t\treturn this.modelLineProjections[info.modelLineNumber - 1].getViewLineMinColumn(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n\t}\n\n\tpublic getViewLineMaxColumn(viewLineNumber: number): number {\n\t\tconst info = this.getViewLineInfo(viewLineNumber);\n\t\treturn this.modelLineProjections[info.modelLineNumber - 1].getViewLineMaxColumn(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n\t}\n\n\tpublic getViewLineData(viewLineNumber: number): ViewLineData {\n\t\tconst info = this.getViewLineInfo(viewLineNumber);\n\t\treturn this.modelLineProjections[info.modelLineNumber - 1].getViewLineData(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n\t}\n\n\tpublic getViewLinesData(viewStartLineNumber: number, viewEndLineNumber: number, needed: boolean[]): ViewLineData[] {\n\n\t\tviewStartLineNumber = this._toValidViewLineNumber(viewStartLineNumber);\n\t\tviewEndLineNumber = this._toValidViewLineNumber(viewEndLineNumber);\n\n\t\tconst start = this.projectedModelLineLineCounts.getIndexOf(viewStartLineNumber - 1);\n\t\tlet viewLineNumber = viewStartLineNumber;\n\t\tconst startModelLineIndex = start.index;\n\t\tconst startRemainder = start.remainder;\n\n\t\tconst result: ViewLineData[] = [];\n\t\tfor (let modelLineIndex = startModelLineIndex, len = this.model.getLineCount(); modelLineIndex < len; modelLineIndex++) {\n\t\t\tconst line = this.modelLineProjections[modelLineIndex];\n\t\t\tif (!line.isVisible()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst fromViewLineIndex = (modelLineIndex === startModelLineIndex ? startRemainder : 0);\n\t\t\tlet remainingViewLineCount = line.getViewLineCount() - fromViewLineIndex;\n\n\t\t\tlet lastLine = false;\n\t\t\tif (viewLineNumber + remainingViewLineCount > viewEndLineNumber) {\n\t\t\t\tlastLine = true;\n\t\t\t\tremainingViewLineCount = viewEndLineNumber - viewLineNumber + 1;\n\t\t\t}\n\n\t\t\tline.getViewLinesData(this.model, modelLineIndex + 1, fromViewLineIndex, remainingViewLineCount, viewLineNumber - viewStartLineNumber, needed, result);\n\n\t\t\tviewLineNumber += remainingViewLineCount;\n\n\t\t\tif (lastLine) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic validateViewPosition(viewLineNumber: number, viewColumn: number, expectedModelPosition: Position): Position {\n\t\tviewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n\n\t\tconst r = this.projectedModelLineLineCounts.getIndexOf(viewLineNumber - 1);\n\t\tconst lineIndex = r.index;\n\t\tconst remainder = r.remainder;\n\n\t\tconst line = this.modelLineProjections[lineIndex];\n\n\t\tconst minColumn = line.getViewLineMinColumn(this.model, lineIndex + 1, remainder);\n\t\tconst maxColumn = line.getViewLineMaxColumn(this.model, lineIndex + 1, remainder);\n\t\tif (viewColumn < minColumn) {\n\t\t\tviewColumn = minColumn;\n\t\t}\n\t\tif (viewColumn > maxColumn) {\n\t\t\tviewColumn = maxColumn;\n\t\t}\n\n\t\tconst computedModelColumn = line.getModelColumnOfViewPosition(remainder, viewColumn);\n\t\tconst computedModelPosition = this.model.validatePosition(new Position(lineIndex + 1, computedModelColumn));\n\n\t\tif (computedModelPosition.equals(expectedModelPosition)) {\n\t\t\treturn new Position(viewLineNumber, viewColumn);\n\t\t}\n\n\t\treturn this.convertModelPositionToViewPosition(expectedModelPosition.lineNumber, expectedModelPosition.column);\n\t}\n\n\tpublic validateViewRange(viewRange: Range, expectedModelRange: Range): Range {\n\t\tconst validViewStart = this.validateViewPosition(viewRange.startLineNumber, viewRange.startColumn, expectedModelRange.getStartPosition());\n\t\tconst validViewEnd = this.validateViewPosition(viewRange.endLineNumber, viewRange.endColumn, expectedModelRange.getEndPosition());\n\t\treturn new Range(validViewStart.lineNumber, validViewStart.column, validViewEnd.lineNumber, validViewEnd.column);\n\t}\n\n\tpublic convertViewPositionToModelPosition(viewLineNumber: number, viewColumn: number): Position {\n\t\tconst info = this.getViewLineInfo(viewLineNumber);\n\n\t\tconst inputColumn = this.modelLineProjections[info.modelLineNumber - 1].getModelColumnOfViewPosition(info.modelLineWrappedLineIdx, viewColumn);\n\t\t// console.log('out -> in ' + viewLineNumber + ',' + viewColumn + ' ===> ' + (lineIndex+1) + ',' + inputColumn);\n\t\treturn this.model.validatePosition(new Position(info.modelLineNumber, inputColumn));\n\t}\n\n\tpublic convertViewRangeToModelRange(viewRange: Range): Range {\n\t\tconst start = this.convertViewPositionToModelPosition(viewRange.startLineNumber, viewRange.startColumn);\n\t\tconst end = this.convertViewPositionToModelPosition(viewRange.endLineNumber, viewRange.endColumn);\n\t\treturn new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n\t}\n\n\tpublic convertModelPositionToViewPosition(_modelLineNumber: number, _modelColumn: number, affinity: PositionAffinity = PositionAffinity.None, allowZeroLineNumber: boolean = false, belowHiddenRanges: boolean = false): Position {\n\n\t\tconst validPosition = this.model.validatePosition(new Position(_modelLineNumber, _modelColumn));\n\t\tconst inputLineNumber = validPosition.lineNumber;\n\t\tconst inputColumn = validPosition.column;\n\n\t\tlet lineIndex = inputLineNumber - 1, lineIndexChanged = false;\n\t\tif (belowHiddenRanges) {\n\t\t\twhile (lineIndex < this.modelLineProjections.length && !this.modelLineProjections[lineIndex].isVisible()) {\n\t\t\t\tlineIndex++;\n\t\t\t\tlineIndexChanged = true;\n\t\t\t}\n\t\t} else {\n\t\t\twhile (lineIndex > 0 && !this.modelLineProjections[lineIndex].isVisible()) {\n\t\t\t\tlineIndex--;\n\t\t\t\tlineIndexChanged = true;\n\t\t\t}\n\t\t}\n\t\tif (lineIndex === 0 && !this.modelLineProjections[lineIndex].isVisible()) {\n\t\t\t// Could not reach a real line\n\t\t\t// console.log('in -> out ' + inputLineNumber + ',' + inputColumn + ' ===> ' + 1 + ',' + 1);\n\t\t\t// TODO@alexdima@hediet this isn't soo pretty\n\t\t\treturn new Position(allowZeroLineNumber ? 0 : 1, 1);\n\t\t}\n\t\tconst deltaLineNumber = 1 + this.projectedModelLineLineCounts.getPrefixSum(lineIndex);\n\n\t\tlet r: Position;\n\t\tif (lineIndexChanged) {\n\t\t\tif (belowHiddenRanges) {\n\t\t\t\tr = this.modelLineProjections[lineIndex].getViewPositionOfModelPosition(deltaLineNumber, 1, affinity);\n\t\t\t} else {\n\t\t\t\tr = this.modelLineProjections[lineIndex].getViewPositionOfModelPosition(deltaLineNumber, this.model.getLineMaxColumn(lineIndex + 1), affinity);\n\t\t\t}\n\t\t} else {\n\t\t\tr = this.modelLineProjections[inputLineNumber - 1].getViewPositionOfModelPosition(deltaLineNumber, inputColumn, affinity);\n\t\t}\n\n\t\t// console.log('in -> out ' + inputLineNumber + ',' + inputColumn + ' ===> ' + r.lineNumber + ',' + r);\n\t\treturn r;\n\t}\n\n\t/**\n\t * @param affinity The affinity in case of an empty range. Has no effect for non-empty ranges.\n\t*/\n\tpublic convertModelRangeToViewRange(modelRange: Range, affinity: PositionAffinity = PositionAffinity.Left): Range {\n\t\tif (modelRange.isEmpty()) {\n\t\t\tconst start = this.convertModelPositionToViewPosition(modelRange.startLineNumber, modelRange.startColumn, affinity);\n\t\t\treturn Range.fromPositions(start);\n\t\t} else {\n\t\t\tconst start = this.convertModelPositionToViewPosition(modelRange.startLineNumber, modelRange.startColumn, PositionAffinity.Right);\n\t\t\tconst end = this.convertModelPositionToViewPosition(modelRange.endLineNumber, modelRange.endColumn, PositionAffinity.Left);\n\t\t\treturn new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n\t\t}\n\t}\n\n\tpublic getViewLineNumberOfModelPosition(modelLineNumber: number, modelColumn: number): number {\n\t\tlet lineIndex = modelLineNumber - 1;\n\t\tif (this.modelLineProjections[lineIndex].isVisible()) {\n\t\t\t// this model line is visible\n\t\t\tconst deltaLineNumber = 1 + this.projectedModelLineLineCounts.getPrefixSum(lineIndex);\n\t\t\treturn this.modelLineProjections[lineIndex].getViewLineNumberOfModelPosition(deltaLineNumber, modelColumn);\n\t\t}\n\n\t\t// this model line is not visible\n\t\twhile (lineIndex > 0 && !this.modelLineProjections[lineIndex].isVisible()) {\n\t\t\tlineIndex--;\n\t\t}\n\t\tif (lineIndex === 0 && !this.modelLineProjections[lineIndex].isVisible()) {\n\t\t\t// Could not reach a real line\n\t\t\treturn 1;\n\t\t}\n\t\tconst deltaLineNumber = 1 + this.projectedModelLineLineCounts.getPrefixSum(lineIndex);\n\t\treturn this.modelLineProjections[lineIndex].getViewLineNumberOfModelPosition(deltaLineNumber, this.model.getLineMaxColumn(lineIndex + 1));\n\t}\n\n\tpublic getDecorationsInRange(range: Range, ownerId: number, filterOutValidation: boolean, filterFontDecorations: boolean, onlyMinimapDecorations: boolean, onlyMarginDecorations: boolean): IModelDecoration[] {\n\t\tconst modelStart = this.convertViewPositionToModelPosition(range.startLineNumber, range.startColumn);\n\t\tconst modelEnd = this.convertViewPositionToModelPosition(range.endLineNumber, range.endColumn);\n\n\t\tif (modelEnd.lineNumber - modelStart.lineNumber <= range.endLineNumber - range.startLineNumber) {\n\t\t\t// most likely there are no hidden lines => fast path\n\t\t\t// fetch decorations from column 1 to cover the case of wrapped lines that have whole line decorations at column 1\n\t\t\treturn this.model.getDecorationsInRange(new Range(modelStart.lineNumber, 1, modelEnd.lineNumber, modelEnd.column), ownerId, filterOutValidation, filterFontDecorations, onlyMinimapDecorations, onlyMarginDecorations);\n\t\t}\n\n\t\tlet result: IModelDecoration[] = [];\n\t\tconst modelStartLineIndex = modelStart.lineNumber - 1;\n\t\tconst modelEndLineIndex = modelEnd.lineNumber - 1;\n\n\t\tlet reqStart: Position | null = null;\n\t\tfor (let modelLineIndex = modelStartLineIndex; modelLineIndex <= modelEndLineIndex; modelLineIndex++) {\n\t\t\tconst line = this.modelLineProjections[modelLineIndex];\n\t\t\tif (line.isVisible()) {\n\t\t\t\t// merge into previous request\n\t\t\t\tif (reqStart === null) {\n\t\t\t\t\treqStart = new Position(modelLineIndex + 1, modelLineIndex === modelStartLineIndex ? modelStart.column : 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// hit invisible line => flush request\n\t\t\t\tif (reqStart !== null) {\n\t\t\t\t\tconst maxLineColumn = this.model.getLineMaxColumn(modelLineIndex);\n\t\t\t\t\tresult = result.concat(this.model.getDecorationsInRange(new Range(reqStart.lineNumber, reqStart.column, modelLineIndex, maxLineColumn), ownerId, filterOutValidation, filterFontDecorations, onlyMinimapDecorations));\n\t\t\t\t\treqStart = null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (reqStart !== null) {\n\t\t\tresult = result.concat(this.model.getDecorationsInRange(new Range(reqStart.lineNumber, reqStart.column, modelEnd.lineNumber, modelEnd.column), ownerId, filterOutValidation, filterFontDecorations, onlyMinimapDecorations));\n\t\t\treqStart = null;\n\t\t}\n\n\t\tresult.sort((a, b) => {\n\t\t\tconst res = Range.compareRangesUsingStarts(a.range, b.range);\n\t\t\tif (res === 0) {\n\t\t\t\tif (a.id < b.id) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tif (a.id > b.id) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\treturn res;\n\t\t});\n\n\t\t// Eliminate duplicate decorations that might have intersected our visible ranges multiple times\n\t\tconst finalResult: IModelDecoration[] = [];\n\t\tlet finalResultLen = 0;\n\t\tlet prevDecId: string | null = null;\n\t\tfor (const dec of result) {\n\t\t\tconst decId = dec.id;\n\t\t\tif (prevDecId === decId) {\n\t\t\t\t// skip\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tprevDecId = decId;\n\t\t\tfinalResult[finalResultLen++] = dec;\n\t\t}\n\n\t\treturn finalResult;\n\t}\n\n\tpublic getInjectedTextAt(position: Position): InjectedText | null {\n\t\tconst info = this.getViewLineInfo(position.lineNumber);\n\t\treturn this.modelLineProjections[info.modelLineNumber - 1].getInjectedTextAt(info.modelLineWrappedLineIdx, position.column);\n\t}\n\n\tnormalizePosition(position: Position, affinity: PositionAffinity): Position {\n\t\tconst info = this.getViewLineInfo(position.lineNumber);\n\t\treturn this.modelLineProjections[info.modelLineNumber - 1].normalizePosition(info.modelLineWrappedLineIdx, position, affinity);\n\t}\n\n\tpublic getLineIndentColumn(lineNumber: number): number {\n\t\tconst info = this.getViewLineInfo(lineNumber);\n\t\tif (info.modelLineWrappedLineIdx === 0) {\n\t\t\treturn this.model.getLineIndentColumn(info.modelLineNumber);\n\t\t}\n\n\t\t// wrapped lines have no indentation.\n\t\t// We deliberately don't handle the case that indentation is wrapped\n\t\t// to avoid two view lines reporting indentation for the very same model line.\n\t\treturn 0;\n\t}\n}\n\n/**\n * Overlapping unsorted ranges:\n * [   )      [ )       [  )\n *    [    )      [       )\n * ->\n * Non overlapping sorted ranges:\n * [       )  [ ) [        )\n *\n * Note: This function only considers line information! Columns are ignored.\n*/\nfunction normalizeLineRanges(ranges: Range[]): Range[] {\n\tif (ranges.length === 0) {\n\t\treturn [];\n\t}\n\n\tconst sortedRanges = ranges.slice();\n\tsortedRanges.sort(Range.compareRangesUsingStarts);\n\n\tconst result: Range[] = [];\n\tlet currentRangeStart = sortedRanges[0].startLineNumber;\n\tlet currentRangeEnd = sortedRanges[0].endLineNumber;\n\n\tfor (let i = 1, len = sortedRanges.length; i < len; i++) {\n\t\tconst range = sortedRanges[i];\n\n\t\tif (range.startLineNumber > currentRangeEnd + 1) {\n\t\t\tresult.push(new Range(currentRangeStart, 1, currentRangeEnd, 1));\n\t\t\tcurrentRangeStart = range.startLineNumber;\n\t\t\tcurrentRangeEnd = range.endLineNumber;\n\t\t} else if (range.endLineNumber > currentRangeEnd) {\n\t\t\tcurrentRangeEnd = range.endLineNumber;\n\t\t}\n\t}\n\tresult.push(new Range(currentRangeStart, 1, currentRangeEnd, 1));\n\treturn result;\n}\n\n/**\n * Represents a view line. Can be used to efficiently query more information about it.\n */\nclass ViewLineInfo {\n\n\tconstructor(\n\t\tpublic readonly modelLineNumber: number,\n\t\tpublic readonly modelLineWrappedLineIdx: number,\n\t) { }\n}\n\n/**\n * A list of view lines that have a contiguous span in the model.\n*/\nclass ViewLineInfoGroupedByModelRange {\n\tconstructor(public readonly modelRange: Range, public readonly viewLines: ViewLineInfo[]) {\n\t}\n}\n\nclass CoordinatesConverter implements ICoordinatesConverter {\n\tprivate readonly _lines: ViewModelLinesFromProjectedModel;\n\n\tconstructor(lines: ViewModelLinesFromProjectedModel) {\n\t\tthis._lines = lines;\n\t}\n\n\t// View -> Model conversion and related methods\n\n\tpublic convertViewPositionToModelPosition(viewPosition: Position): Position {\n\t\treturn this._lines.convertViewPositionToModelPosition(viewPosition.lineNumber, viewPosition.column);\n\t}\n\n\tpublic convertViewRangeToModelRange(viewRange: Range): Range {\n\t\treturn this._lines.convertViewRangeToModelRange(viewRange);\n\t}\n\n\tpublic validateViewPosition(viewPosition: Position, expectedModelPosition: Position): Position {\n\t\treturn this._lines.validateViewPosition(viewPosition.lineNumber, viewPosition.column, expectedModelPosition);\n\t}\n\n\tpublic validateViewRange(viewRange: Range, expectedModelRange: Range): Range {\n\t\treturn this._lines.validateViewRange(viewRange, expectedModelRange);\n\t}\n\n\t// Model -> View conversion and related methods\n\n\tpublic convertModelPositionToViewPosition(modelPosition: Position, affinity?: PositionAffinity, allowZero?: boolean, belowHiddenRanges?: boolean): Position {\n\t\treturn this._lines.convertModelPositionToViewPosition(modelPosition.lineNumber, modelPosition.column, affinity, allowZero, belowHiddenRanges);\n\t}\n\n\tpublic convertModelRangeToViewRange(modelRange: Range, affinity?: PositionAffinity): Range {\n\t\treturn this._lines.convertModelRangeToViewRange(modelRange, affinity);\n\t}\n\n\tpublic modelPositionIsVisible(modelPosition: Position): boolean {\n\t\treturn this._lines.modelPositionIsVisible(modelPosition.lineNumber, modelPosition.column);\n\t}\n\n\tpublic getModelLineViewLineCount(modelLineNumber: number): number {\n\t\treturn this._lines.getModelLineViewLineCount(modelLineNumber);\n\t}\n\n\tpublic getViewLineNumberOfModelPosition(modelLineNumber: number, modelColumn: number): number {\n\t\treturn this._lines.getViewLineNumberOfModelPosition(modelLineNumber, modelColumn);\n\t}\n}\n\nconst enum IndentGuideRepeatOption {\n\tBlockNone = 0,\n\tBlockSubsequent = 1,\n\tBlockAll = 2\n}\n\nexport class ViewModelLinesFromModelAsIs implements IViewModelLines {\n\tpublic readonly model: ITextModel;\n\n\tconstructor(model: ITextModel) {\n\t\tthis.model = model;\n\t}\n\n\tpublic dispose(): void {\n\t}\n\n\tpublic createCoordinatesConverter(): ICoordinatesConverter {\n\t\treturn new IdentityCoordinatesConverter(this.model);\n\t}\n\n\tpublic getHiddenAreas(): Range[] {\n\t\treturn [];\n\t}\n\n\tpublic setHiddenAreas(_ranges: Range[]): boolean {\n\t\treturn false;\n\t}\n\n\tpublic setTabSize(_newTabSize: number): boolean {\n\t\treturn false;\n\t}\n\n\tpublic setWrappingSettings(_fontInfo: FontInfo, _wrappingStrategy: 'simple' | 'advanced', _wrappingColumn: number, _wrappingIndent: WrappingIndent): boolean {\n\t\treturn false;\n\t}\n\n\tpublic createLineBreaksComputer(): ILineBreaksComputer {\n\t\tconst result: null[] = [];\n\t\treturn {\n\t\t\taddRequest: (lineText: string, injectedText: LineInjectedText[] | null, previousLineBreakData: ModelLineProjectionData | null) => {\n\t\t\t\tresult.push(null);\n\t\t\t},\n\t\t\tfinalize: () => {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t};\n\t}\n\n\tpublic onModelFlushed(): void {\n\t}\n\n\tpublic onModelLinesDeleted(_versionId: number | null, fromLineNumber: number, toLineNumber: number): viewEvents.ViewLinesDeletedEvent | null {\n\t\treturn new viewEvents.ViewLinesDeletedEvent(fromLineNumber, toLineNumber);\n\t}\n\n\tpublic onModelLinesInserted(_versionId: number | null, fromLineNumber: number, toLineNumber: number, lineBreaks: (ModelLineProjectionData | null)[]): viewEvents.ViewLinesInsertedEvent | null {\n\t\treturn new viewEvents.ViewLinesInsertedEvent(fromLineNumber, toLineNumber);\n\t}\n\n\tpublic onModelLineChanged(_versionId: number | null, lineNumber: number, lineBreakData: ModelLineProjectionData | null): [boolean, viewEvents.ViewLinesChangedEvent | null, viewEvents.ViewLinesInsertedEvent | null, viewEvents.ViewLinesDeletedEvent | null] {\n\t\treturn [false, new viewEvents.ViewLinesChangedEvent(lineNumber, 1), null, null];\n\t}\n\n\tpublic acceptVersionId(_versionId: number): void {\n\t}\n\n\tpublic getViewLineCount(): number {\n\t\treturn this.model.getLineCount();\n\t}\n\n\tpublic getActiveIndentGuide(viewLineNumber: number, _minLineNumber: number, _maxLineNumber: number): IActiveIndentGuideInfo {\n\t\treturn {\n\t\t\tstartLineNumber: viewLineNumber,\n\t\t\tendLineNumber: viewLineNumber,\n\t\t\tindent: 0\n\t\t};\n\t}\n\n\tpublic getViewLinesBracketGuides(startLineNumber: number, endLineNumber: number, activePosition: IPosition | null): IndentGuide[][] {\n\t\treturn new Array(endLineNumber - startLineNumber + 1).fill([]);\n\t}\n\n\tpublic getViewLinesIndentGuides(viewStartLineNumber: number, viewEndLineNumber: number): number[] {\n\t\tconst viewLineCount = viewEndLineNumber - viewStartLineNumber + 1;\n\t\tconst result = new Array<number>(viewLineCount);\n\t\tfor (let i = 0; i < viewLineCount; i++) {\n\t\t\tresult[i] = 0;\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic getViewLineContent(viewLineNumber: number): string {\n\t\treturn this.model.getLineContent(viewLineNumber);\n\t}\n\n\tpublic getViewLineLength(viewLineNumber: number): number {\n\t\treturn this.model.getLineLength(viewLineNumber);\n\t}\n\n\tpublic getViewLineMinColumn(viewLineNumber: number): number {\n\t\treturn this.model.getLineMinColumn(viewLineNumber);\n\t}\n\n\tpublic getViewLineMaxColumn(viewLineNumber: number): number {\n\t\treturn this.model.getLineMaxColumn(viewLineNumber);\n\t}\n\n\tpublic getViewLineData(viewLineNumber: number): ViewLineData {\n\t\tconst lineTokens = this.model.tokenization.getLineTokens(viewLineNumber);\n\t\tconst lineContent = lineTokens.getLineContent();\n\t\treturn new ViewLineData(\n\t\t\tlineContent,\n\t\t\tfalse,\n\t\t\t1,\n\t\t\tlineContent.length + 1,\n\t\t\t0,\n\t\t\tlineTokens.inflate(),\n\t\t\tnull\n\t\t);\n\t}\n\n\tpublic getViewLinesData(viewStartLineNumber: number, viewEndLineNumber: number, needed: boolean[]): Array<ViewLineData | null> {\n\t\tconst lineCount = this.model.getLineCount();\n\t\tviewStartLineNumber = Math.min(Math.max(1, viewStartLineNumber), lineCount);\n\t\tviewEndLineNumber = Math.min(Math.max(1, viewEndLineNumber), lineCount);\n\n\t\tconst result: Array<ViewLineData | null> = [];\n\t\tfor (let lineNumber = viewStartLineNumber; lineNumber <= viewEndLineNumber; lineNumber++) {\n\t\t\tconst idx = lineNumber - viewStartLineNumber;\n\t\t\tresult[idx] = needed[idx] ? this.getViewLineData(lineNumber) : null;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic getDecorationsInRange(range: Range, ownerId: number, filterOutValidation: boolean, filterFontDecorations: boolean, onlyMinimapDecorations: boolean, onlyMarginDecorations: boolean): IModelDecoration[] {\n\t\treturn this.model.getDecorationsInRange(range, ownerId, filterOutValidation, filterFontDecorations, onlyMinimapDecorations, onlyMarginDecorations);\n\t}\n\n\tnormalizePosition(position: Position, affinity: PositionAffinity): Position {\n\t\treturn this.model.normalizePosition(position, affinity);\n\t}\n\n\tpublic getLineIndentColumn(lineNumber: number): number {\n\t\treturn this.model.getLineIndentColumn(lineNumber);\n\t}\n\n\tpublic getInjectedTextAt(position: Position): InjectedText | null {\n\t\t// Identity lines collection does not support injected text.\n\t\treturn null;\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as arrays from '../../../base/common/arrays.js';\nimport { IDisposable } from '../../../base/common/lifecycle.js';\nimport { WrappingIndent } from '../config/editorOptions.js';\nimport { FontInfo } from '../config/fontInfo.js';\nimport { IPosition, Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { IModelDecoration, IModelDeltaDecoration, ITextModel, PositionAffinity } from '../model.js';\nimport { IActiveIndentGuideInfo, BracketGuideOptions, IndentGuide, IndentGuideHorizontalLine } from '../textModelGuides.js';\nimport { ModelDecorationOptions } from '../model/textModel.js';\nimport { LineInjectedText } from '../textModelEvents.js';\nimport * as viewEvents from '../viewEvents.js';\nimport { createModelLineProjection, IModelLineProjection } from './modelLineProjection.js';\nimport { ILineBreaksComputer, ModelLineProjectionData, InjectedText, ILineBreaksComputerFactory } from '../modelLineProjectionData.js';\nimport { ConstantTimePrefixSumComputer } from '../model/prefixSumComputer.js';\nimport { ViewLineData } from '../viewModel.js';\nimport { ICoordinatesConverter, IdentityCoordinatesConverter } from '../coordinatesConverter.js';\n\nexport interface IViewModelLines extends IDisposable {\n\tcreateCoordinatesConverter(): ICoordinatesConverter;\n\n\tsetWrappingSettings(fontInfo: FontInfo, wrappingStrategy: 'simple' | 'advanced', wrappingColumn: number, wrappingIndent: WrappingIndent, wordBreak: 'normal' | 'keepAll'): boolean;\n\tsetTabSize(newTabSize: number): boolean;\n\tgetHiddenAreas(): Range[];\n\tsetHiddenAreas(_ranges: readonly Range[]): boolean;\n\n\tcreateLineBreaksComputer(): ILineBreaksComputer;\n\tonModelFlushed(): void;\n\tonModelLinesDeleted(versionId: number | null, fromLineNumber: number, toLineNumber: number): viewEvents.ViewLinesDeletedEvent | null;\n\tonModelLinesInserted(versionId: number | null, fromLineNumber: number, toLineNumber: number, lineBreaks: (ModelLineProjectionData | null)[]): viewEvents.ViewLinesInsertedEvent | null;\n\tonModelLineChanged(versionId: number | null, lineNumber: number, lineBreakData: ModelLineProjectionData | null): [boolean, viewEvents.ViewLinesChangedEvent | null, viewEvents.ViewLinesInsertedEvent | null, viewEvents.ViewLinesDeletedEvent | null];\n\tacceptVersionId(versionId: number): void;\n\n\tgetViewLineCount(): number;\n\tgetActiveIndentGuide(viewLineNumber: number, minLineNumber: number, maxLineNumber: number): IActiveIndentGuideInfo;\n\tgetViewLinesIndentGuides(viewStartLineNumber: number, viewEndLineNumber: number): number[];\n\tgetViewLinesBracketGuides(startLineNumber: number, endLineNumber: number, activePosition: IPosition | null, options: BracketGuideOptions): IndentGuide[][];\n\tgetViewLineContent(viewLineNumber: number): string;\n\tgetViewLineLength(viewLineNumber: number): number;\n\tgetViewLineMinColumn(viewLineNumber: number): number;\n\tgetViewLineMaxColumn(viewLineNumber: number): number;\n\tgetViewLineData(viewLineNumber: number): ViewLineData;\n\tgetViewLinesData(viewStartLineNumber: number, viewEndLineNumber: number, needed: boolean[]): Array<ViewLineData | null>;\n\n\tgetDecorationsInRange(range: Range, ownerId: number, filterOutValidation: boolean, filterFontDecorations: boolean, onlyMinimapDecorations: boolean, onlyMarginDecorations: boolean): IModelDecoration[];\n\n\tgetInjectedTextAt(viewPosition: Position): InjectedText | null;\n\n\tnormalizePosition(position: Position, affinity: PositionAffinity): Position;\n\t/**\n\t * Gets the column at which indentation stops at a given line.\n\t * @internal\n\t*/\n\tgetLineIndentColumn(lineNumber: number): number;\n}\n\nexport class ViewModelLinesFromProjectedModel implements IViewModelLines {\n\tprivate readonly _editorId: number;\n\tprivate readonly model: ITextModel;\n\tprivate _validModelVersionId: number;\n\n\tprivate readonly _domLineBreaksComputerFactory: ILineBreaksComputerFactory;\n\tprivate readonly _monospaceLineBreaksComputerFactory: ILineBreaksComputerFactory;\n\n\tprivate fontInfo: FontInfo;\n\tprivate tabSize: number;\n\tprivate wrappingColumn: number;\n\tprivate wrappingIndent: WrappingIndent;\n\tprivate wordBreak: 'normal' | 'keepAll';\n\tprivate wrappingStrategy: 'simple' | 'advanced';\n\tprivate wrapOnEscapedLineFeeds: boolean;\n\n\tprivate modelLineProjections!: IModelLineProjection[];\n\n\t/**\n\t * Reflects the sum of the line counts of all projected model lines.\n\t*/\n\tprivate projectedModelLineLineCounts!: ConstantTimePrefixSumComputer;\n\n\tprivate hiddenAreasDecorationIds!: string[];\n\n\tconstructor(\n\t\teditorId: number,\n\t\tmodel: ITextModel,\n\t\tdomLineBreaksComputerFactory: ILineBreaksComputerFactory,\n\t\tmonospaceLineBreaksComputerFactory: ILineBreaksComputerFactory,\n\t\tfontInfo: FontInfo,\n\t\ttabSize: number,\n\t\twrappingStrategy: 'simple' | 'advanced',\n\t\twrappingColumn: number,\n\t\twrappingIndent: WrappingIndent,\n\t\twordBreak: 'normal' | 'keepAll',\n\t\twrapOnEscapedLineFeeds: boolean\n\t) {\n\t\tthis._editorId = editorId;\n\t\tthis.model = model;\n\t\tthis._validModelVersionId = -1;\n\t\tthis._domLineBreaksComputerFactory = domLineBreaksComputerFactory;\n\t\tthis._monospaceLineBreaksComputerFactory = monospaceLineBreaksComputerFactory;\n\t\tthis.fontInfo = fontInfo;\n\t\tthis.tabSize = tabSize;\n\t\tthis.wrappingStrategy = wrappingStrategy;\n\t\tthis.wrappingColumn = wrappingColumn;\n\t\tthis.wrappingIndent = wrappingIndent;\n\t\tthis.wordBreak = wordBreak;\n\t\tthis.wrapOnEscapedLineFeeds = wrapOnEscapedLineFeeds;\n\n\t\tthis._constructLines(/*resetHiddenAreas*/true, null);\n\t}\n\n\tpublic dispose(): void {\n\t\tthis.hiddenAreasDecorationIds = this.model.deltaDecorations(this.hiddenAreasDecorationIds, []);\n\t}\n\n\tpublic createCoordinatesConverter(): ICoordinatesConverter {\n\t\treturn new CoordinatesConverter(this);\n\t}\n\n\tprivate _constructLines(resetHiddenAreas: boolean, previousLineBreaks: ((ModelLineProjectionData | null)[]) | null): void {\n\t\tthis.modelLineProjections = [];\n\n\t\tif (resetHiddenAreas) {\n\t\t\tthis.hiddenAreasDecorationIds = this.model.deltaDecorations(this.hiddenAreasDecorationIds, []);\n\t\t}\n\n\t\tconst linesContent = this.model.getLinesContent();\n\t\tconst injectedTextDecorations = this.model.getInjectedTextDecorations(this._editorId);\n\t\tconst lineCount = linesContent.length;\n\t\tconst lineBreaksComputer = this.createLineBreaksComputer();\n\n\t\tconst injectedTextQueue = new arrays.ArrayQueue(LineInjectedText.fromDecorations(injectedTextDecorations));\n\t\tfor (let i = 0; i < lineCount; i++) {\n\t\t\tconst lineInjectedText = injectedTextQueue.takeWhile(t => t.lineNumber === i + 1);\n\t\t\tlineBreaksComputer.addRequest(linesContent[i], lineInjectedText, previousLineBreaks ? previousLineBreaks[i] : null);\n\t\t}\n\t\tconst linesBreaks = lineBreaksComputer.finalize();\n\n\t\tconst values: number[] = [];\n\n\t\tconst hiddenAreas = this.hiddenAreasDecorationIds.map((areaId) => this.model.getDecorationRange(areaId)!).sort(Range.compareRangesUsingStarts);\n\t\tlet hiddenAreaStart = 1, hiddenAreaEnd = 0;\n\t\tlet hiddenAreaIdx = -1;\n\t\tlet nextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : lineCount + 2;\n\n\t\tfor (let i = 0; i < lineCount; i++) {\n\t\t\tconst lineNumber = i + 1;\n\n\t\t\tif (lineNumber === nextLineNumberToUpdateHiddenArea) {\n\t\t\t\thiddenAreaIdx++;\n\t\t\t\thiddenAreaStart = hiddenAreas[hiddenAreaIdx]!.startLineNumber;\n\t\t\t\thiddenAreaEnd = hiddenAreas[hiddenAreaIdx]!.endLineNumber;\n\t\t\t\tnextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : lineCount + 2;\n\t\t\t}\n\n\t\t\tconst isInHiddenArea = (lineNumber >= hiddenAreaStart && lineNumber <= hiddenAreaEnd);\n\t\t\tconst line = createModelLineProjection(linesBreaks[i], !isInHiddenArea);\n\t\t\tvalues[i] = line.getViewLineCount();\n\t\t\tthis.modelLineProjections[i] = line;\n\t\t}\n\n\t\tthis._validModelVersionId = this.model.getVersionId();\n\n\t\tthis.projectedModelLineLineCounts = new ConstantTimePrefixSumComputer(values);\n\t}\n\n\tpublic getHiddenAreas(): Range[] {\n\t\treturn this.hiddenAreasDecorationIds.map(\n\t\t\t(decId) => this.model.getDecorationRange(decId)!\n\t\t);\n\t}\n\n\tpublic setHiddenAreas(_ranges: Range[]): boolean {\n\t\tconst validatedRanges = _ranges.map(r => this.model.validateRange(r));\n\t\tconst newRanges = normalizeLineRanges(validatedRanges);\n\n\t\t// TODO@Martin: Please stop calling this method on each model change!\n\n\t\t// This checks if there really was a change\n\t\tconst oldRanges = this.hiddenAreasDecorationIds.map((areaId) => this.model.getDecorationRange(areaId)!).sort(Range.compareRangesUsingStarts);\n\t\tif (newRanges.length === oldRanges.length) {\n\t\t\tlet hasDifference = false;\n\t\t\tfor (let i = 0; i < newRanges.length; i++) {\n\t\t\t\tif (!newRanges[i].equalsRange(oldRanges[i])) {\n\t\t\t\t\thasDifference = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!hasDifference) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tconst newDecorations = newRanges.map<IModelDeltaDecoration>(\n\t\t\t(r) =>\n\t\t\t({\n\t\t\t\trange: r,\n\t\t\t\toptions: ModelDecorationOptions.EMPTY,\n\t\t\t})\n\t\t);\n\n\t\tthis.hiddenAreasDecorationIds = this.model.deltaDecorations(this.hiddenAreasDecorationIds, newDecorations);\n\n\t\tconst hiddenAreas = newRanges;\n\t\tlet hiddenAreaStart = 1, hiddenAreaEnd = 0;\n\t\tlet hiddenAreaIdx = -1;\n\t\tlet nextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : this.modelLineProjections.length + 2;\n\n\t\tlet hasVisibleLine = false;\n\t\tfor (let i = 0; i < this.modelLineProjections.length; i++) {\n\t\t\tconst lineNumber = i + 1;\n\n\t\t\tif (lineNumber === nextLineNumberToUpdateHiddenArea) {\n\t\t\t\thiddenAreaIdx++;\n\t\t\t\thiddenAreaStart = hiddenAreas[hiddenAreaIdx].startLineNumber;\n\t\t\t\thiddenAreaEnd = hiddenAreas[hiddenAreaIdx].endLineNumber;\n\t\t\t\tnextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : this.modelLineProjections.length + 2;\n\t\t\t}\n\n\t\t\tlet lineChanged = false;\n\t\t\tif (lineNumber >= hiddenAreaStart && lineNumber <= hiddenAreaEnd) {\n\t\t\t\t// Line should be hidden\n\t\t\t\tif (this.modelLineProjections[i].isVisible()) {\n\t\t\t\t\tthis.modelLineProjections[i] = this.modelLineProjections[i].setVisible(false);\n\t\t\t\t\tlineChanged = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\thasVisibleLine = true;\n\t\t\t\t// Line should be visible\n\t\t\t\tif (!this.modelLineProjections[i].isVisible()) {\n\t\t\t\t\tthis.modelLineProjections[i] = this.modelLineProjections[i].setVisible(true);\n\t\t\t\t\tlineChanged = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (lineChanged) {\n\t\t\t\tconst newOutputLineCount = this.modelLineProjections[i].getViewLineCount();\n\t\t\t\tthis.projectedModelLineLineCounts.setValue(i, newOutputLineCount);\n\t\t\t}\n\t\t}\n\n\t\tif (!hasVisibleLine) {\n\t\t\t// Cannot have everything be hidden => reveal everything!\n\t\t\tthis.setHiddenAreas([]);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tpublic modelPositionIsVisible(modelLineNumber: number, _modelColumn: number): boolean {\n\t\tif (modelLineNumber < 1 || modelLineNumber > this.modelLineProjections.length) {\n\t\t\t// invalid arguments\n\t\t\treturn false;\n\t\t}\n\t\treturn this.modelLineProjections[modelLineNumber - 1].isVisible();\n\t}\n\n\tpublic getModelLineViewLineCount(modelLineNumber: number): number {\n\t\tif (modelLineNumber < 1 || modelLineNumber > this.modelLineProjections.length) {\n\t\t\t// invalid arguments\n\t\t\treturn 1;\n\t\t}\n\t\treturn this.modelLineProjections[modelLineNumber - 1].getViewLineCount();\n\t}\n\n\tpublic setTabSize(newTabSize: number): boolean {\n\t\tif (this.tabSize === newTabSize) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.tabSize = newTabSize;\n\n\t\tthis._constructLines(/*resetHiddenAreas*/false, null);\n\n\t\treturn true;\n\t}\n\n\tpublic setWrappingSettings(fontInfo: FontInfo, wrappingStrategy: 'simple' | 'advanced', wrappingColumn: number, wrappingIndent: WrappingIndent, wordBreak: 'normal' | 'keepAll'): boolean {\n\t\tconst equalFontInfo = this.fontInfo.equals(fontInfo);\n\t\tconst equalWrappingStrategy = (this.wrappingStrategy === wrappingStrategy);\n\t\tconst equalWrappingColumn = (this.wrappingColumn === wrappingColumn);\n\t\tconst equalWrappingIndent = (this.wrappingIndent === wrappingIndent);\n\t\tconst equalWordBreak = (this.wordBreak === wordBreak);\n\t\tif (equalFontInfo && equalWrappingStrategy && equalWrappingColumn && equalWrappingIndent && equalWordBreak) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst onlyWrappingColumnChanged = (equalFontInfo && equalWrappingStrategy && !equalWrappingColumn && equalWrappingIndent && equalWordBreak);\n\n\t\tthis.fontInfo = fontInfo;\n\t\tthis.wrappingStrategy = wrappingStrategy;\n\t\tthis.wrappingColumn = wrappingColumn;\n\t\tthis.wrappingIndent = wrappingIndent;\n\t\tthis.wordBreak = wordBreak;\n\n\t\tlet previousLineBreaks: ((ModelLineProjectionData | null)[]) | null = null;\n\t\tif (onlyWrappingColumnChanged) {\n\t\t\tpreviousLineBreaks = [];\n\t\t\tfor (let i = 0, len = this.modelLineProjections.length; i < len; i++) {\n\t\t\t\tpreviousLineBreaks[i] = this.modelLineProjections[i].getProjectionData();\n\t\t\t}\n\t\t}\n\n\t\tthis._constructLines(/*resetHiddenAreas*/false, previousLineBreaks);\n\n\t\treturn true;\n\t}\n\n\tpublic createLineBreaksComputer(): ILineBreaksComputer {\n\t\tconst lineBreaksComputerFactory = (\n\t\t\tthis.wrappingStrategy === 'advanced'\n\t\t\t\t? this._domLineBreaksComputerFactory\n\t\t\t\t: this._monospaceLineBreaksComputerFactory\n\t\t);\n\t\treturn lineBreaksComputerFactory.createLineBreaksComputer(this.fontInfo, this.tabSize, this.wrappingColumn, this.wrappingIndent, this.wordBreak, this.wrapOnEscapedLineFeeds);\n\t}\n\n\tpublic onModelFlushed(): void {\n\t\tthis._constructLines(/*resetHiddenAreas*/true, null);\n\t}\n\n\tpublic onModelLinesDeleted(versionId: number | null, fromLineNumber: number, toLineNumber: number): viewEvents.ViewLinesDeletedEvent | null {\n\t\tif (!versionId || versionId <= this._validModelVersionId) {\n\t\t\t// Here we check for versionId in case the lines were reconstructed in the meantime.\n\t\t\t// We don't want to apply stale change events on top of a newer read model state.\n\t\t\treturn null;\n\t\t}\n\n\t\tconst outputFromLineNumber = (fromLineNumber === 1 ? 1 : this.projectedModelLineLineCounts.getPrefixSum(fromLineNumber - 1) + 1);\n\t\tconst outputToLineNumber = this.projectedModelLineLineCounts.getPrefixSum(toLineNumber);\n\n\t\tthis.modelLineProjections.splice(fromLineNumber - 1, toLineNumber - fromLineNumber + 1);\n\t\tthis.projectedModelLineLineCounts.removeValues(fromLineNumber - 1, toLineNumber - fromLineNumber + 1);\n\n\t\treturn new viewEvents.ViewLinesDeletedEvent(outputFromLineNumber, outputToLineNumber);\n\t}\n\n\tpublic onModelLinesInserted(versionId: number | null, fromLineNumber: number, _toLineNumber: number, lineBreaks: (ModelLineProjectionData | null)[]): viewEvents.ViewLinesInsertedEvent | null {\n\t\tif (!versionId || versionId <= this._validModelVersionId) {\n\t\t\t// Here we check for versionId in case the lines were reconstructed in the meantime.\n\t\t\t// We don't want to apply stale change events on top of a newer read model state.\n\t\t\treturn null;\n\t\t}\n\n\t\t// cannot use this.getHiddenAreas() because those decorations have already seen the effect of this model change\n\t\tconst isInHiddenArea = (fromLineNumber > 2 && !this.modelLineProjections[fromLineNumber - 2].isVisible());\n\n\t\tconst outputFromLineNumber = (fromLineNumber === 1 ? 1 : this.projectedModelLineLineCounts.getPrefixSum(fromLineNumber - 1) + 1);\n\n\t\tlet totalOutputLineCount = 0;\n\t\tconst insertLines: IModelLineProjection[] = [];\n\t\tconst insertPrefixSumValues: number[] = [];\n\n\t\tfor (let i = 0, len = lineBreaks.length; i < len; i++) {\n\t\t\tconst line = createModelLineProjection(lineBreaks[i], !isInHiddenArea);\n\t\t\tinsertLines.push(line);\n\n\t\t\tconst outputLineCount = line.getViewLineCount();\n\t\t\ttotalOutputLineCount += outputLineCount;\n\t\t\tinsertPrefixSumValues[i] = outputLineCount;\n\t\t}\n\n\t\t// TODO@Alex: use arrays.arrayInsert\n\t\tthis.modelLineProjections =\n\t\t\tthis.modelLineProjections.slice(0, fromLineNumber - 1)\n\t\t\t\t.concat(insertLines)\n\t\t\t\t.concat(this.modelLineProjections.slice(fromLineNumber - 1));\n\n\t\tthis.projectedModelLineLineCounts.insertValues(fromLineNumber - 1, insertPrefixSumValues);\n\n\t\treturn new viewEvents.ViewLinesInsertedEvent(outputFromLineNumber, outputFromLineNumber + totalOutputLineCount - 1);\n\t}\n\n\tpublic onModelLineChanged(versionId: number | null, lineNumber: number, lineBreakData: ModelLineProjectionData | null): [boolean, viewEvents.ViewLinesChangedEvent | null, viewEvents.ViewLinesInsertedEvent | null, viewEvents.ViewLinesDeletedEvent | null] {\n\t\tif (versionId !== null && versionId <= this._validModelVersionId) {\n\t\t\t// Here we check for versionId in case the lines were reconstructed in the meantime.\n\t\t\t// We don't want to apply stale change events on top of a newer read model state.\n\t\t\treturn [false, null, null, null];\n\t\t}\n\n\t\tconst lineIndex = lineNumber - 1;\n\n\t\tconst oldOutputLineCount = this.modelLineProjections[lineIndex].getViewLineCount();\n\t\tconst isVisible = this.modelLineProjections[lineIndex].isVisible();\n\t\tconst line = createModelLineProjection(lineBreakData, isVisible);\n\t\tthis.modelLineProjections[lineIndex] = line;\n\t\tconst newOutputLineCount = this.modelLineProjections[lineIndex].getViewLineCount();\n\n\t\tlet lineMappingChanged = false;\n\t\tlet changeFrom = 0;\n\t\tlet changeTo = -1;\n\t\tlet insertFrom = 0;\n\t\tlet insertTo = -1;\n\t\tlet deleteFrom = 0;\n\t\tlet deleteTo = -1;\n\n\t\tif (oldOutputLineCount > newOutputLineCount) {\n\t\t\tchangeFrom = this.projectedModelLineLineCounts.getPrefixSum(lineNumber - 1) + 1;\n\t\t\tchangeTo = changeFrom + newOutputLineCount - 1;\n\t\t\tdeleteFrom = changeTo + 1;\n\t\t\tdeleteTo = deleteFrom + (oldOutputLineCount - newOutputLineCount) - 1;\n\t\t\tlineMappingChanged = true;\n\t\t} else if (oldOutputLineCount < newOutputLineCount) {\n\t\t\tchangeFrom = this.projectedModelLineLineCounts.getPrefixSum(lineNumber - 1) + 1;\n\t\t\tchangeTo = changeFrom + oldOutputLineCount - 1;\n\t\t\tinsertFrom = changeTo + 1;\n\t\t\tinsertTo = insertFrom + (newOutputLineCount - oldOutputLineCount) - 1;\n\t\t\tlineMappingChanged = true;\n\t\t} else {\n\t\t\tchangeFrom = this.projectedModelLineLineCounts.getPrefixSum(lineNumber - 1) + 1;\n\t\t\tchangeTo = changeFrom + newOutputLineCount - 1;\n\t\t}\n\n\t\tthis.projectedModelLineLineCounts.setValue(lineIndex, newOutputLineCount);\n\n\t\tconst viewLinesChangedEvent = (changeFrom <= changeTo ? new viewEvents.ViewLinesChangedEvent(changeFrom, changeTo - changeFrom + 1) : null);\n\t\tconst viewLinesInsertedEvent = (insertFrom <= insertTo ? new viewEvents.ViewLinesInsertedEvent(insertFrom, insertTo) : null);\n\t\tconst viewLinesDeletedEvent = (deleteFrom <= deleteTo ? new viewEvents.ViewLinesDeletedEvent(deleteFrom, deleteTo) : null);\n\n\t\treturn [lineMappingChanged, viewLinesChangedEvent, viewLinesInsertedEvent, viewLinesDeletedEvent];\n\t}\n\n\tpublic acceptVersionId(versionId: number): void {\n\t\tthis._validModelVersionId = versionId;\n\t\tif (this.modelLineProjections.length === 1 && !this.modelLineProjections[0].isVisible()) {\n\t\t\t// At least one line must be visible => reset hidden areas\n\t\t\tthis.setHiddenAreas([]);\n\t\t}\n\t}\n\n\tpublic getViewLineCount(): number {\n\t\treturn this.projectedModelLineLineCounts.getTotalSum();\n\t}\n\n\tprivate _toValidViewLineNumber(viewLineNumber: number): number {\n\t\tif (viewLineNumber < 1) {\n\t\t\treturn 1;\n\t\t}\n\t\tconst viewLineCount = this.getViewLineCount();\n\t\tif (viewLineNumber > viewLineCount) {\n\t\t\treturn viewLineCount;\n\t\t}\n\t\treturn viewLineNumber | 0;\n\t}\n\n\tpublic getActiveIndentGuide(viewLineNumber: number, minLineNumber: number, maxLineNumber: number): IActiveIndentGuideInfo {\n\t\tviewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n\t\tminLineNumber = this._toValidViewLineNumber(minLineNumber);\n\t\tmaxLineNumber = this._toValidViewLineNumber(maxLineNumber);\n\n\t\tconst modelPosition = this.convertViewPositionToModelPosition(viewLineNumber, this.getViewLineMinColumn(viewLineNumber));\n\t\tconst modelMinPosition = this.convertViewPositionToModelPosition(minLineNumber, this.getViewLineMinColumn(minLineNumber));\n\t\tconst modelMaxPosition = this.convertViewPositionToModelPosition(maxLineNumber, this.getViewLineMinColumn(maxLineNumber));\n\t\tconst result = this.model.guides.getActiveIndentGuide(modelPosition.lineNumber, modelMinPosition.lineNumber, modelMaxPosition.lineNumber);\n\n\t\tconst viewStartPosition = this.convertModelPositionToViewPosition(result.startLineNumber, 1);\n\t\tconst viewEndPosition = this.convertModelPositionToViewPosition(result.endLineNumber, this.model.getLineMaxColumn(result.endLineNumber));\n\t\treturn {\n\t\t\tstartLineNumber: viewStartPosition.lineNumber,\n\t\t\tendLineNumber: viewEndPosition.lineNumber,\n\t\t\tindent: result.indent\n\t\t};\n\t}\n\n\t// #region ViewLineInfo\n\n\tprivate getViewLineInfo(viewLineNumber: number): ViewLineInfo {\n\t\tviewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n\t\tconst r = this.projectedModelLineLineCounts.getIndexOf(viewLineNumber - 1);\n\t\tconst lineIndex = r.index;\n\t\tconst remainder = r.remainder;\n\t\treturn new ViewLineInfo(lineIndex + 1, remainder);\n\t}\n\n\tprivate getMinColumnOfViewLine(viewLineInfo: ViewLineInfo): number {\n\t\treturn this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewLineMinColumn(\n\t\t\tthis.model,\n\t\t\tviewLineInfo.modelLineNumber,\n\t\t\tviewLineInfo.modelLineWrappedLineIdx\n\t\t);\n\t}\n\n\tprivate getMaxColumnOfViewLine(viewLineInfo: ViewLineInfo): number {\n\t\treturn this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewLineMaxColumn(\n\t\t\tthis.model,\n\t\t\tviewLineInfo.modelLineNumber,\n\t\t\tviewLineInfo.modelLineWrappedLineIdx\n\t\t);\n\t}\n\n\tprivate getModelStartPositionOfViewLine(viewLineInfo: ViewLineInfo): Position {\n\t\tconst line = this.modelLineProjections[viewLineInfo.modelLineNumber - 1];\n\t\tconst minViewColumn = line.getViewLineMinColumn(\n\t\t\tthis.model,\n\t\t\tviewLineInfo.modelLineNumber,\n\t\t\tviewLineInfo.modelLineWrappedLineIdx\n\t\t);\n\t\tconst column = line.getModelColumnOfViewPosition(\n\t\t\tviewLineInfo.modelLineWrappedLineIdx,\n\t\t\tminViewColumn\n\t\t);\n\t\treturn new Position(viewLineInfo.modelLineNumber, column);\n\t}\n\n\tprivate getModelEndPositionOfViewLine(viewLineInfo: ViewLineInfo): Position {\n\t\tconst line = this.modelLineProjections[viewLineInfo.modelLineNumber - 1];\n\t\tconst maxViewColumn = line.getViewLineMaxColumn(\n\t\t\tthis.model,\n\t\t\tviewLineInfo.modelLineNumber,\n\t\t\tviewLineInfo.modelLineWrappedLineIdx\n\t\t);\n\t\tconst column = line.getModelColumnOfViewPosition(\n\t\t\tviewLineInfo.modelLineWrappedLineIdx,\n\t\t\tmaxViewColumn\n\t\t);\n\t\treturn new Position(viewLineInfo.modelLineNumber, column);\n\t}\n\n\tprivate getViewLineInfosGroupedByModelRanges(viewStartLineNumber: number, viewEndLineNumber: number): ViewLineInfoGroupedByModelRange[] {\n\t\tconst startViewLine = this.getViewLineInfo(viewStartLineNumber);\n\t\tconst endViewLine = this.getViewLineInfo(viewEndLineNumber);\n\n\t\tconst result = new Array<ViewLineInfoGroupedByModelRange>();\n\t\tlet lastVisibleModelPos: Position | null = this.getModelStartPositionOfViewLine(startViewLine);\n\t\tlet viewLines = new Array<ViewLineInfo>();\n\n\t\tfor (let curModelLine = startViewLine.modelLineNumber; curModelLine <= endViewLine.modelLineNumber; curModelLine++) {\n\t\t\tconst line = this.modelLineProjections[curModelLine - 1];\n\n\t\t\tif (line.isVisible()) {\n\t\t\t\tconst startOffset =\n\t\t\t\t\tcurModelLine === startViewLine.modelLineNumber\n\t\t\t\t\t\t? startViewLine.modelLineWrappedLineIdx\n\t\t\t\t\t\t: 0;\n\n\t\t\t\tconst endOffset =\n\t\t\t\t\tcurModelLine === endViewLine.modelLineNumber\n\t\t\t\t\t\t? endViewLine.modelLineWrappedLineIdx + 1\n\t\t\t\t\t\t: line.getViewLineCount();\n\n\t\t\t\tfor (let i = startOffset; i < endOffset; i++) {\n\t\t\t\t\tviewLines.push(new ViewLineInfo(curModelLine, i));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!line.isVisible() && lastVisibleModelPos) {\n\t\t\t\tconst lastVisibleModelPos2 = new Position(curModelLine - 1, this.model.getLineMaxColumn(curModelLine - 1) + 1);\n\n\t\t\t\tconst modelRange = Range.fromPositions(lastVisibleModelPos, lastVisibleModelPos2);\n\t\t\t\tresult.push(new ViewLineInfoGroupedByModelRange(modelRange, viewLines));\n\t\t\t\tviewLines = [];\n\n\t\t\t\tlastVisibleModelPos = null;\n\t\t\t} else if (line.isVisible() && !lastVisibleModelPos) {\n\t\t\t\tlastVisibleModelPos = new Position(curModelLine, 1);\n\t\t\t}\n\t\t}\n\n\t\tif (lastVisibleModelPos) {\n\t\t\tconst modelRange = Range.fromPositions(lastVisibleModelPos, this.getModelEndPositionOfViewLine(endViewLine));\n\t\t\tresult.push(new ViewLineInfoGroupedByModelRange(modelRange, viewLines));\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t// #endregion\n\n\tpublic getViewLinesBracketGuides(viewStartLineNumber: number, viewEndLineNumber: number, activeViewPosition: IPosition | null, options: BracketGuideOptions): IndentGuide[][] {\n\t\tconst modelActivePosition = activeViewPosition ? this.convertViewPositionToModelPosition(activeViewPosition.lineNumber, activeViewPosition.column) : null;\n\t\tconst resultPerViewLine: IndentGuide[][] = [];\n\n\t\tfor (const group of this.getViewLineInfosGroupedByModelRanges(viewStartLineNumber, viewEndLineNumber)) {\n\t\t\tconst modelRangeStartLineNumber = group.modelRange.startLineNumber;\n\n\t\t\tconst bracketGuidesPerModelLine = this.model.guides.getLinesBracketGuides(\n\t\t\t\tmodelRangeStartLineNumber,\n\t\t\t\tgroup.modelRange.endLineNumber,\n\t\t\t\tmodelActivePosition,\n\t\t\t\toptions\n\t\t\t);\n\n\t\t\tfor (const viewLineInfo of group.viewLines) {\n\n\t\t\t\tconst bracketGuides = bracketGuidesPerModelLine[viewLineInfo.modelLineNumber - modelRangeStartLineNumber];\n\n\t\t\t\t// visibleColumns stay as they are (this is a bug and needs to be fixed, but it is not a regression)\n\t\t\t\t// model-columns must be converted to view-model columns.\n\t\t\t\tconst result = bracketGuides.map(g => {\n\t\t\t\t\tif (g.forWrappedLinesAfterColumn !== -1) {\n\t\t\t\t\t\tconst p = this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewPositionOfModelPosition(0, g.forWrappedLinesAfterColumn);\n\t\t\t\t\t\tif (p.lineNumber >= viewLineInfo.modelLineWrappedLineIdx) {\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (g.forWrappedLinesBeforeOrAtColumn !== -1) {\n\t\t\t\t\t\tconst p = this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewPositionOfModelPosition(0, g.forWrappedLinesBeforeOrAtColumn);\n\t\t\t\t\t\tif (p.lineNumber < viewLineInfo.modelLineWrappedLineIdx) {\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!g.horizontalLine) {\n\t\t\t\t\t\treturn g;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet column = -1;\n\t\t\t\t\tif (g.column !== -1) {\n\t\t\t\t\t\tconst p = this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewPositionOfModelPosition(0, g.column);\n\t\t\t\t\t\tif (p.lineNumber === viewLineInfo.modelLineWrappedLineIdx) {\n\t\t\t\t\t\t\tcolumn = p.column;\n\t\t\t\t\t\t} else if (p.lineNumber < viewLineInfo.modelLineWrappedLineIdx) {\n\t\t\t\t\t\t\tcolumn = this.getMinColumnOfViewLine(viewLineInfo);\n\t\t\t\t\t\t} else if (p.lineNumber > viewLineInfo.modelLineWrappedLineIdx) {\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst viewPosition = this.convertModelPositionToViewPosition(viewLineInfo.modelLineNumber, g.horizontalLine.endColumn);\n\t\t\t\t\tconst p = this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewPositionOfModelPosition(0, g.horizontalLine.endColumn);\n\t\t\t\t\tif (p.lineNumber === viewLineInfo.modelLineWrappedLineIdx) {\n\t\t\t\t\t\treturn new IndentGuide(g.visibleColumn, column, g.className,\n\t\t\t\t\t\t\tnew IndentGuideHorizontalLine(g.horizontalLine.top,\n\t\t\t\t\t\t\t\tviewPosition.column),\n\t\t\t\t\t\t\t- 1,\n\t\t\t\t\t\t\t-1,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else if (p.lineNumber < viewLineInfo.modelLineWrappedLineIdx) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (g.visibleColumn !== -1) {\n\t\t\t\t\t\t\t// Don't repeat horizontal lines that use visibleColumn for unrelated lines.\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn new IndentGuide(g.visibleColumn, column, g.className,\n\t\t\t\t\t\t\tnew IndentGuideHorizontalLine(g.horizontalLine.top,\n\t\t\t\t\t\t\t\tthis.getMaxColumnOfViewLine(viewLineInfo)\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t-1,\n\t\t\t\t\t\t\t-1,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tresultPerViewLine.push(result.filter((r): r is IndentGuide => !!r));\n\n\t\t\t}\n\t\t}\n\n\t\treturn resultPerViewLine;\n\t}\n\n\tpublic getViewLinesIndentGuides(viewStartLineNumber: number, viewEndLineNumber: number): number[] {\n\t\t// TODO: Use the same code as in `getViewLinesBracketGuides`.\n\t\t// Future TODO: Merge with `getViewLinesBracketGuides`.\n\t\t// However, this requires more refactoring of indent guides.\n\t\tviewStartLineNumber = this._toValidViewLineNumber(viewStartLineNumber);\n\t\tviewEndLineNumber = this._toValidViewLineNumber(viewEndLineNumber);\n\n\t\tconst modelStart = this.convertViewPositionToModelPosition(viewStartLineNumber, this.getViewLineMinColumn(viewStartLineNumber));\n\t\tconst modelEnd = this.convertViewPositionToModelPosition(viewEndLineNumber, this.getViewLineMaxColumn(viewEndLineNumber));\n\n\t\tlet result: number[] = [];\n\t\tconst resultRepeatCount: number[] = [];\n\t\tconst resultRepeatOption: IndentGuideRepeatOption[] = [];\n\t\tconst modelStartLineIndex = modelStart.lineNumber - 1;\n\t\tconst modelEndLineIndex = modelEnd.lineNumber - 1;\n\n\t\tlet reqStart: Position | null = null;\n\t\tfor (let modelLineIndex = modelStartLineIndex; modelLineIndex <= modelEndLineIndex; modelLineIndex++) {\n\t\t\tconst line = this.modelLineProjections[modelLineIndex];\n\t\t\tif (line.isVisible()) {\n\t\t\t\tconst viewLineStartIndex = line.getViewLineNumberOfModelPosition(0, modelLineIndex === modelStartLineIndex ? modelStart.column : 1);\n\t\t\t\tconst viewLineEndIndex = line.getViewLineNumberOfModelPosition(0, this.model.getLineMaxColumn(modelLineIndex + 1));\n\t\t\t\tconst count = viewLineEndIndex - viewLineStartIndex + 1;\n\t\t\t\tlet option = IndentGuideRepeatOption.BlockNone;\n\t\t\t\tif (count > 1 && line.getViewLineMinColumn(this.model, modelLineIndex + 1, viewLineEndIndex) === 1) {\n\t\t\t\t\t// wrapped lines should block indent guides\n\t\t\t\t\toption = (viewLineStartIndex === 0 ? IndentGuideRepeatOption.BlockSubsequent : IndentGuideRepeatOption.BlockAll);\n\t\t\t\t}\n\t\t\t\tresultRepeatCount.push(count);\n\t\t\t\tresultRepeatOption.push(option);\n\t\t\t\t// merge into previous request\n\t\t\t\tif (reqStart === null) {\n\t\t\t\t\treqStart = new Position(modelLineIndex + 1, 0);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// hit invisible line => flush request\n\t\t\t\tif (reqStart !== null) {\n\t\t\t\t\tresult = result.concat(this.model.guides.getLinesIndentGuides(reqStart.lineNumber, modelLineIndex));\n\t\t\t\t\treqStart = null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (reqStart !== null) {\n\t\t\tresult = result.concat(this.model.guides.getLinesIndentGuides(reqStart.lineNumber, modelEnd.lineNumber));\n\t\t\treqStart = null;\n\t\t}\n\n\t\tconst viewLineCount = viewEndLineNumber - viewStartLineNumber + 1;\n\t\tconst viewIndents = new Array<number>(viewLineCount);\n\t\tlet currIndex = 0;\n\t\tfor (let i = 0, len = result.length; i < len; i++) {\n\t\t\tlet value = result[i];\n\t\t\tconst count = Math.min(viewLineCount - currIndex, resultRepeatCount[i]);\n\t\t\tconst option = resultRepeatOption[i];\n\t\t\tlet blockAtIndex: number;\n\t\t\tif (option === IndentGuideRepeatOption.BlockAll) {\n\t\t\t\tblockAtIndex = 0;\n\t\t\t} else if (option === IndentGuideRepeatOption.BlockSubsequent) {\n\t\t\t\tblockAtIndex = 1;\n\t\t\t} else {\n\t\t\t\tblockAtIndex = count;\n\t\t\t}\n\t\t\tfor (let j = 0; j < count; j++) {\n\t\t\t\tif (j === blockAtIndex) {\n\t\t\t\t\tvalue = 0;\n\t\t\t\t}\n\t\t\t\tviewIndents[currIndex++] = value;\n\t\t\t}\n\t\t}\n\t\treturn viewIndents;\n\t}\n\n\tpublic getViewLineContent(viewLineNumber: number): string {\n\t\tconst info = this.getViewLineInfo(viewLineNumber);\n\t\treturn this.modelLineProjections[info.modelLineNumber - 1].getViewLineContent(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n\t}\n\n\tpublic getViewLineLength(viewLineNumber: number): number {\n\t\tconst info = this.getViewLineInfo(viewLineNumber);\n\t\treturn this.modelLineProjections[info.modelLineNumber - 1].getViewLineLength(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n\t}\n\n\tpublic getViewLineMinColumn(viewLineNumber: number): number {\n\t\tconst info = this.getViewLineInfo(viewLineNumber);\n\t\treturn this.modelLineProjections[info.modelLineNumber - 1].getViewLineMinColumn(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n\t}\n\n\tpublic getViewLineMaxColumn(viewLineNumber: number): number {\n\t\tconst info = this.getViewLineInfo(viewLineNumber);\n\t\treturn this.modelLineProjections[info.modelLineNumber - 1].getViewLineMaxColumn(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n\t}\n\n\tpublic getViewLineData(viewLineNumber: number): ViewLineData {\n\t\tconst info = this.getViewLineInfo(viewLineNumber);\n\t\treturn this.modelLineProjections[info.modelLineNumber - 1].getViewLineData(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n\t}\n\n\tpublic getViewLinesData(viewStartLineNumber: number, viewEndLineNumber: number, needed: boolean[]): ViewLineData[] {\n\n\t\tviewStartLineNumber = this._toValidViewLineNumber(viewStartLineNumber);\n\t\tviewEndLineNumber = this._toValidViewLineNumber(viewEndLineNumber);\n\n\t\tconst start = this.projectedModelLineLineCounts.getIndexOf(viewStartLineNumber - 1);\n\t\tlet viewLineNumber = viewStartLineNumber;\n\t\tconst startModelLineIndex = start.index;\n\t\tconst startRemainder = start.remainder;\n\n\t\tconst result: ViewLineData[] = [];\n\t\tfor (let modelLineIndex = startModelLineIndex, len = this.model.getLineCount(); modelLineIndex < len; modelLineIndex++) {\n\t\t\tconst line = this.modelLineProjections[modelLineIndex];\n\t\t\tif (!line.isVisible()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst fromViewLineIndex = (modelLineIndex === startModelLineIndex ? startRemainder : 0);\n\t\t\tlet remainingViewLineCount = line.getViewLineCount() - fromViewLineIndex;\n\n\t\t\tlet lastLine = false;\n\t\t\tif (viewLineNumber + remainingViewLineCount > viewEndLineNumber) {\n\t\t\t\tlastLine = true;\n\t\t\t\tremainingViewLineCount = viewEndLineNumber - viewLineNumber + 1;\n\t\t\t}\n\n\t\t\tline.getViewLinesData(this.model, modelLineIndex + 1, fromViewLineIndex, remainingViewLineCount, viewLineNumber - viewStartLineNumber, needed, result);\n\n\t\t\tviewLineNumber += remainingViewLineCount;\n\n\t\t\tif (lastLine) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic validateViewPosition(viewLineNumber: number, viewColumn: number, expectedModelPosition: Position): Position {\n\t\tviewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n\n\t\tconst r = this.projectedModelLineLineCounts.getIndexOf(viewLineNumber - 1);\n\t\tconst lineIndex = r.index;\n\t\tconst remainder = r.remainder;\n\n\t\tconst line = this.modelLineProjections[lineIndex];\n\n\t\tconst minColumn = line.getViewLineMinColumn(this.model, lineIndex + 1, remainder);\n\t\tconst maxColumn = line.getViewLineMaxColumn(this.model, lineIndex + 1, remainder);\n\t\tif (viewColumn < minColumn) {\n\t\t\tviewColumn = minColumn;\n\t\t}\n\t\tif (viewColumn > maxColumn) {\n\t\t\tviewColumn = maxColumn;\n\t\t}\n\n\t\tconst computedModelColumn = line.getModelColumnOfViewPosition(remainder, viewColumn);\n\t\tconst computedModelPosition = this.model.validatePosition(new Position(lineIndex + 1, computedModelColumn));\n\n\t\tif (computedModelPosition.equals(expectedModelPosition)) {\n\t\t\treturn new Position(viewLineNumber, viewColumn);\n\t\t}\n\n\t\treturn this.convertModelPositionToViewPosition(expectedModelPosition.lineNumber, expectedModelPosition.column);\n\t}\n\n\tpublic validateViewRange(viewRange: Range, expectedModelRange: Range): Range {\n\t\tconst validViewStart = this.validateViewPosition(viewRange.startLineNumber, viewRange.startColumn, expectedModelRange.getStartPosition());\n\t\tconst validViewEnd = this.validateViewPosition(viewRange.endLineNumber, viewRange.endColumn, expectedModelRange.getEndPosition());\n\t\treturn new Range(validViewStart.lineNumber, validViewStart.column, validViewEnd.lineNumber, validViewEnd.column);\n\t}\n\n\tpublic convertViewPositionToModelPosition(viewLineNumber: number, viewColumn: number): Position {\n\t\tconst info = this.getViewLineInfo(viewLineNumber);\n\n\t\tconst inputColumn = this.modelLineProjections[info.modelLineNumber - 1].getModelColumnOfViewPosition(info.modelLineWrappedLineIdx, viewColumn);\n\t\t// console.log('out -> in ' + viewLineNumber + ',' + viewColumn + ' ===> ' + (lineIndex+1) + ',' + inputColumn);\n\t\treturn this.model.validatePosition(new Position(info.modelLineNumber, inputColumn));\n\t}\n\n\tpublic convertViewRangeToModelRange(viewRange: Range): Range {\n\t\tconst start = this.convertViewPositionToModelPosition(viewRange.startLineNumber, viewRange.startColumn);\n\t\tconst end = this.convertViewPositionToModelPosition(viewRange.endLineNumber, viewRange.endColumn);\n\t\treturn new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n\t}\n\n\tpublic convertModelPositionToViewPosition(_modelLineNumber: number, _modelColumn: number, affinity: PositionAffinity = PositionAffinity.None, allowZeroLineNumber: boolean = false, belowHiddenRanges: boolean = false): Position {\n\n\t\tconst validPosition = this.model.validatePosition(new Position(_modelLineNumber, _modelColumn));\n\t\tconst inputLineNumber = validPosition.lineNumber;\n\t\tconst inputColumn = validPosition.column;\n\n\t\tlet lineIndex = inputLineNumber - 1, lineIndexChanged = false;\n\t\tif (belowHiddenRanges) {\n\t\t\twhile (lineIndex < this.modelLineProjections.length && !this.modelLineProjections[lineIndex].isVisible()) {\n\t\t\t\tlineIndex++;\n\t\t\t\tlineIndexChanged = true;\n\t\t\t}\n\t\t} else {\n\t\t\twhile (lineIndex > 0 && !this.modelLineProjections[lineIndex].isVisible()) {\n\t\t\t\tlineIndex--;\n\t\t\t\tlineIndexChanged = true;\n\t\t\t}\n\t\t}\n\t\tif (lineIndex === 0 && !this.modelLineProjections[lineIndex].isVisible()) {\n\t\t\t// Could not reach a real line\n\t\t\t// console.log('in -> out ' + inputLineNumber + ',' + inputColumn + ' ===> ' + 1 + ',' + 1);\n\t\t\t// TODO@alexdima@hediet this isn't soo pretty\n\t\t\treturn new Position(allowZeroLineNumber ? 0 : 1, 1);\n\t\t}\n\t\tconst deltaLineNumber = 1 + this.projectedModelLineLineCounts.getPrefixSum(lineIndex);\n\n\t\tlet r: Position;\n\t\tif (lineIndexChanged) {\n\t\t\tif (belowHiddenRanges) {\n\t\t\t\tr = this.modelLineProjections[lineIndex].getViewPositionOfModelPosition(deltaLineNumber, 1, affinity);\n\t\t\t} else {\n\t\t\t\tr = this.modelLineProjections[lineIndex].getViewPositionOfModelPosition(deltaLineNumber, this.model.getLineMaxColumn(lineIndex + 1), affinity);\n\t\t\t}\n\t\t} else {\n\t\t\tr = this.modelLineProjections[inputLineNumber - 1].getViewPositionOfModelPosition(deltaLineNumber, inputColumn, affinity);\n\t\t}\n\n\t\t// console.log('in -> out ' + inputLineNumber + ',' + inputColumn + ' ===> ' + r.lineNumber + ',' + r);\n\t\treturn r;\n\t}\n\n\t/**\n\t * @param affinity The affinity in case of an empty range. Has no effect for non-empty ranges.\n\t*/\n\tpublic convertModelRangeToViewRange(modelRange: Range, affinity: PositionAffinity = PositionAffinity.Left): Range {\n\t\tif (modelRange.isEmpty()) {\n\t\t\tconst start = this.convertModelPositionToViewPosition(modelRange.startLineNumber, modelRange.startColumn, affinity);\n\t\t\treturn Range.fromPositions(start);\n\t\t} else {\n\t\t\tconst start = this.convertModelPositionToViewPosition(modelRange.startLineNumber, modelRange.startColumn, PositionAffinity.Right);\n\t\t\tconst end = this.convertModelPositionToViewPosition(modelRange.endLineNumber, modelRange.endColumn, PositionAffinity.Left);\n\t\t\treturn new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n\t\t}\n\t}\n\n\tpublic getViewLineNumberOfModelPosition(modelLineNumber: number, modelColumn: number): number {\n\t\tlet lineIndex = modelLineNumber - 1;\n\t\tif (this.modelLineProjections[lineIndex].isVisible()) {\n\t\t\t// this model line is visible\n\t\t\tconst deltaLineNumber = 1 + this.projectedModelLineLineCounts.getPrefixSum(lineIndex);\n\t\t\treturn this.modelLineProjections[lineIndex].getViewLineNumberOfModelPosition(deltaLineNumber, modelColumn);\n\t\t}\n\n\t\t// this model line is not visible\n\t\twhile (lineIndex > 0 && !this.modelLineProjections[lineIndex].isVisible()) {\n\t\t\tlineIndex--;\n\t\t}\n\t\tif (lineIndex === 0 && !this.modelLineProjections[lineIndex].isVisible()) {\n\t\t\t// Could not reach a real line\n\t\t\treturn 1;\n\t\t}\n\t\tconst deltaLineNumber = 1 + this.projectedModelLineLineCounts.getPrefixSum(lineIndex);\n\t\treturn this.modelLineProjections[lineIndex].getViewLineNumberOfModelPosition(deltaLineNumber, this.model.getLineMaxColumn(lineIndex + 1));\n\t}\n\n\tpublic getDecorationsInRange(range: Range, ownerId: number, filterOutValidation: boolean, filterFontDecorations: boolean, onlyMinimapDecorations: boolean, onlyMarginDecorations: boolean): IModelDecoration[] {\n\t\tconst modelStart = this.convertViewPositionToModelPosition(range.startLineNumber, range.startColumn);\n\t\tconst modelEnd = this.convertViewPositionToModelPosition(range.endLineNumber, range.endColumn);\n\n\t\tif (modelEnd.lineNumber - modelStart.lineNumber <= range.endLineNumber - range.startLineNumber) {\n\t\t\t// most likely there are no hidden lines => fast path\n\t\t\t// fetch decorations from column 1 to cover the case of wrapped lines that have whole line decorations at column 1\n\t\t\treturn this.model.getDecorationsInRange(new Range(modelStart.lineNumber, 1, modelEnd.lineNumber, modelEnd.column), ownerId, filterOutValidation, filterFontDecorations, onlyMinimapDecorations, onlyMarginDecorations);\n\t\t}\n\n\t\tlet result: IModelDecoration[] = [];\n\t\tconst modelStartLineIndex = modelStart.lineNumber - 1;\n\t\tconst modelEndLineIndex = modelEnd.lineNumber - 1;\n\n\t\tlet reqStart: Position | null = null;\n\t\tfor (let modelLineIndex = modelStartLineIndex; modelLineIndex <= modelEndLineIndex; modelLineIndex++) {\n\t\t\tconst line = this.modelLineProjections[modelLineIndex];\n\t\t\tif (line.isVisible()) {\n\t\t\t\t// merge into previous request\n\t\t\t\tif (reqStart === null) {\n\t\t\t\t\treqStart = new Position(modelLineIndex + 1, modelLineIndex === modelStartLineIndex ? modelStart.column : 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// hit invisible line => flush request\n\t\t\t\tif (reqStart !== null) {\n\t\t\t\t\tconst maxLineColumn = this.model.getLineMaxColumn(modelLineIndex);\n\t\t\t\t\tresult = result.concat(this.model.getDecorationsInRange(new Range(reqStart.lineNumber, reqStart.column, modelLineIndex, maxLineColumn), ownerId, filterOutValidation, filterFontDecorations, onlyMinimapDecorations));\n\t\t\t\t\treqStart = null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (reqStart !== null) {\n\t\t\tresult = result.concat(this.model.getDecorationsInRange(new Range(reqStart.lineNumber, reqStart.column, modelEnd.lineNumber, modelEnd.column), ownerId, filterOutValidation, filterFontDecorations, onlyMinimapDecorations));\n\t\t\treqStart = null;\n\t\t}\n\n\t\tresult.sort((a, b) => {\n\t\t\tconst res = Range.compareRangesUsingStarts(a.range, b.range);\n\t\t\tif (res === 0) {\n\t\t\t\tif (a.id < b.id) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tif (a.id > b.id) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\treturn res;\n\t\t});\n\n\t\t// Eliminate duplicate decorations that might have intersected our visible ranges multiple times\n\t\tconst finalResult: IModelDecoration[] = [];\n\t\tlet finalResultLen = 0;\n\t\tlet prevDecId: string | null = null;\n\t\tfor (const dec of result) {\n\t\t\tconst decId = dec.id;\n\t\t\tif (prevDecId === decId) {\n\t\t\t\t// skip\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tprevDecId = decId;\n\t\t\tfinalResult[finalResultLen++] = dec;\n\t\t}\n\n\t\treturn finalResult;\n\t}\n\n\tpublic getInjectedTextAt(position: Position): InjectedText | null {\n\t\tconst info = this.getViewLineInfo(position.lineNumber);\n\t\treturn this.modelLineProjections[info.modelLineNumber - 1].getInjectedTextAt(info.modelLineWrappedLineIdx, position.column);\n\t}\n\n\tnormalizePosition(position: Position, affinity: PositionAffinity): Position {\n\t\tconst info = this.getViewLineInfo(position.lineNumber);\n\t\treturn this.modelLineProjections[info.modelLineNumber - 1].normalizePosition(info.modelLineWrappedLineIdx, position, affinity);\n\t}\n\n\tpublic getLineIndentColumn(lineNumber: number): number {\n\t\tconst info = this.getViewLineInfo(lineNumber);\n\t\tif (info.modelLineWrappedLineIdx === 0) {\n\t\t\treturn this.model.getLineIndentColumn(info.modelLineNumber);\n\t\t}\n\n\t\t// wrapped lines have no indentation.\n\t\t// We deliberately don't handle the case that indentation is wrapped\n\t\t// to avoid two view lines reporting indentation for the very same model line.\n\t\treturn 0;\n\t}\n}\n\n/**\n * Overlapping unsorted ranges:\n * [   )      [ )       [  )\n *    [    )      [       )\n * ->\n * Non overlapping sorted ranges:\n * [       )  [ ) [        )\n *\n * Note: This function only considers line information! Columns are ignored.\n*/\nfunction normalizeLineRanges(ranges: Range[]): Range[] {\n\tif (ranges.length === 0) {\n\t\treturn [];\n\t}\n\n\tconst sortedRanges = ranges.slice();\n\tsortedRanges.sort(Range.compareRangesUsingStarts);\n\n\tconst result: Range[] = [];\n\tlet currentRangeStart = sortedRanges[0].startLineNumber;\n\tlet currentRangeEnd = sortedRanges[0].endLineNumber;\n\n\tfor (let i = 1, len = sortedRanges.length; i < len; i++) {\n\t\tconst range = sortedRanges[i];\n\n\t\tif (range.startLineNumber > currentRangeEnd + 1) {\n\t\t\tresult.push(new Range(currentRangeStart, 1, currentRangeEnd, 1));\n\t\t\tcurrentRangeStart = range.startLineNumber;\n\t\t\tcurrentRangeEnd = range.endLineNumber;\n\t\t} else if (range.endLineNumber > currentRangeEnd) {\n\t\t\tcurrentRangeEnd = range.endLineNumber;\n\t\t}\n\t}\n\tresult.push(new Range(currentRangeStart, 1, currentRangeEnd, 1));\n\treturn result;\n}\n\n/**\n * Represents a view line. Can be used to efficiently query more information about it.\n */\nclass ViewLineInfo {\n\n\tconstructor(\n\t\tpublic readonly modelLineNumber: number,\n\t\tpublic readonly modelLineWrappedLineIdx: number,\n\t) { }\n}\n\n/**\n * A list of view lines that have a contiguous span in the model.\n*/\nclass ViewLineInfoGroupedByModelRange {\n\tconstructor(public readonly modelRange: Range, public readonly viewLines: ViewLineInfo[]) {\n\t}\n}\n\nclass CoordinatesConverter implements ICoordinatesConverter {\n\tprivate readonly _lines: ViewModelLinesFromProjectedModel;\n\n\tconstructor(lines: ViewModelLinesFromProjectedModel) {\n\t\tthis._lines = lines;\n\t}\n\n\t// View -> Model conversion and related methods\n\n\tpublic convertViewPositionToModelPosition(viewPosition: Position): Position {\n\t\treturn this._lines.convertViewPositionToModelPosition(viewPosition.lineNumber, viewPosition.column);\n\t}\n\n\tpublic convertViewRangeToModelRange(viewRange: Range): Range {\n\t\treturn this._lines.convertViewRangeToModelRange(viewRange);\n\t}\n\n\tpublic validateViewPosition(viewPosition: Position, expectedModelPosition: Position): Position {\n\t\treturn this._lines.validateViewPosition(viewPosition.lineNumber, viewPosition.column, expectedModelPosition);\n\t}\n\n\tpublic validateViewRange(viewRange: Range, expectedModelRange: Range): Range {\n\t\treturn this._lines.validateViewRange(viewRange, expectedModelRange);\n\t}\n\n\t// Model -> View conversion and related methods\n\n\tpublic convertModelPositionToViewPosition(modelPosition: Position, affinity?: PositionAffinity, allowZero?: boolean, belowHiddenRanges?: boolean): Position {\n\t\treturn this._lines.convertModelPositionToViewPosition(modelPosition.lineNumber, modelPosition.column, affinity, allowZero, belowHiddenRanges);\n\t}\n\n\tpublic convertModelRangeToViewRange(modelRange: Range, affinity?: PositionAffinity): Range {\n\t\treturn this._lines.convertModelRangeToViewRange(modelRange, affinity);\n\t}\n\n\tpublic modelPositionIsVisible(modelPosition: Position): boolean {\n\t\treturn this._lines.modelPositionIsVisible(modelPosition.lineNumber, modelPosition.column);\n\t}\n\n\tpublic getModelLineViewLineCount(modelLineNumber: number): number {\n\t\treturn this._lines.getModelLineViewLineCount(modelLineNumber);\n\t}\n\n\tpublic getViewLineNumberOfModelPosition(modelLineNumber: number, modelColumn: number): number {\n\t\treturn this._lines.getViewLineNumberOfModelPosition(modelLineNumber, modelColumn);\n\t}\n}\n\nconst enum IndentGuideRepeatOption {\n\tBlockNone = 0,\n\tBlockSubsequent = 1,\n\tBlockAll = 2\n}\n\nexport class ViewModelLinesFromModelAsIs implements IViewModelLines {\n\tpublic readonly model: ITextModel;\n\n\tconstructor(model: ITextModel) {\n\t\tthis.model = model;\n\t}\n\n\tpublic dispose(): void {\n\t}\n\n\tpublic createCoordinatesConverter(): ICoordinatesConverter {\n\t\treturn new IdentityCoordinatesConverter(this.model);\n\t}\n\n\tpublic getHiddenAreas(): Range[] {\n\t\treturn [];\n\t}\n\n\tpublic setHiddenAreas(_ranges: Range[]): boolean {\n\t\treturn false;\n\t}\n\n\tpublic setTabSize(_newTabSize: number): boolean {\n\t\treturn false;\n\t}\n\n\tpublic setWrappingSettings(_fontInfo: FontInfo, _wrappingStrategy: 'simple' | 'advanced', _wrappingColumn: number, _wrappingIndent: WrappingIndent): boolean {\n\t\treturn false;\n\t}\n\n\tpublic createLineBreaksComputer(): ILineBreaksComputer {\n\t\tconst result: null[] = [];\n\t\treturn {\n\t\t\taddRequest: (lineText: string, injectedText: LineInjectedText[] | null, previousLineBreakData: ModelLineProjectionData | null) => {\n\t\t\t\tresult.push(null);\n\t\t\t},\n\t\t\tfinalize: () => {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t};\n\t}\n\n\tpublic onModelFlushed(): void {\n\t}\n\n\tpublic onModelLinesDeleted(_versionId: number | null, fromLineNumber: number, toLineNumber: number): viewEvents.ViewLinesDeletedEvent | null {\n\t\treturn new viewEvents.ViewLinesDeletedEvent(fromLineNumber, toLineNumber);\n\t}\n\n\tpublic onModelLinesInserted(_versionId: number | null, fromLineNumber: number, toLineNumber: number, lineBreaks: (ModelLineProjectionData | null)[]): viewEvents.ViewLinesInsertedEvent | null {\n\t\treturn new viewEvents.ViewLinesInsertedEvent(fromLineNumber, toLineNumber);\n\t}\n\n\tpublic onModelLineChanged(_versionId: number | null, lineNumber: number, lineBreakData: ModelLineProjectionData | null): [boolean, viewEvents.ViewLinesChangedEvent | null, viewEvents.ViewLinesInsertedEvent | null, viewEvents.ViewLinesDeletedEvent | null] {\n\t\treturn [false, new viewEvents.ViewLinesChangedEvent(lineNumber, 1), null, null];\n\t}\n\n\tpublic acceptVersionId(_versionId: number): void {\n\t}\n\n\tpublic getViewLineCount(): number {\n\t\treturn this.model.getLineCount();\n\t}\n\n\tpublic getActiveIndentGuide(viewLineNumber: number, _minLineNumber: number, _maxLineNumber: number): IActiveIndentGuideInfo {\n\t\treturn {\n\t\t\tstartLineNumber: viewLineNumber,\n\t\t\tendLineNumber: viewLineNumber,\n\t\t\tindent: 0\n\t\t};\n\t}\n\n\tpublic getViewLinesBracketGuides(startLineNumber: number, endLineNumber: number, activePosition: IPosition | null): IndentGuide[][] {\n\t\treturn new Array(endLineNumber - startLineNumber + 1).fill([]);\n\t}\n\n\tpublic getViewLinesIndentGuides(viewStartLineNumber: number, viewEndLineNumber: number): number[] {\n\t\tconst viewLineCount = viewEndLineNumber - viewStartLineNumber + 1;\n\t\tconst result = new Array<number>(viewLineCount);\n\t\tfor (let i = 0; i < viewLineCount; i++) {\n\t\t\tresult[i] = 0;\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic getViewLineContent(viewLineNumber: number): string {\n\t\treturn this.model.getLineContent(viewLineNumber);\n\t}\n\n\tpublic getViewLineLength(viewLineNumber: number): number {\n\t\treturn this.model.getLineLength(viewLineNumber);\n\t}\n\n\tpublic getViewLineMinColumn(viewLineNumber: number): number {\n\t\treturn this.model.getLineMinColumn(viewLineNumber);\n\t}\n\n\tpublic getViewLineMaxColumn(viewLineNumber: number): number {\n\t\treturn this.model.getLineMaxColumn(viewLineNumber);\n\t}\n\n\tpublic getViewLineData(viewLineNumber: number): ViewLineData {\n\t\tconst lineTokens = this.model.tokenization.getLineTokens(viewLineNumber);\n\t\tconst lineContent = lineTokens.getLineContent();\n\t\treturn new ViewLineData(\n\t\t\tlineContent,\n\t\t\tfalse,\n\t\t\t1,\n\t\t\tlineContent.length + 1,\n\t\t\t0,\n\t\t\tlineTokens.inflate(),\n\t\t\tnull\n\t\t);\n\t}\n\n\tpublic getViewLinesData(viewStartLineNumber: number, viewEndLineNumber: number, needed: boolean[]): Array<ViewLineData | null> {\n\t\tconst lineCount = this.model.getLineCount();\n\t\tviewStartLineNumber = Math.min(Math.max(1, viewStartLineNumber), lineCount);\n\t\tviewEndLineNumber = Math.min(Math.max(1, viewEndLineNumber), lineCount);\n\n\t\tconst result: Array<ViewLineData | null> = [];\n\t\tfor (let lineNumber = viewStartLineNumber; lineNumber <= viewEndLineNumber; lineNumber++) {\n\t\t\tconst idx = lineNumber - viewStartLineNumber;\n\t\t\tresult[idx] = needed[idx] ? this.getViewLineData(lineNumber) : null;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic getDecorationsInRange(range: Range, ownerId: number, filterOutValidation: boolean, filterFontDecorations: boolean, onlyMinimapDecorations: boolean, onlyMarginDecorations: boolean): IModelDecoration[] {\n\t\treturn this.model.getDecorationsInRange(range, ownerId, filterOutValidation, filterFontDecorations, onlyMinimapDecorations, onlyMarginDecorations);\n\t}\n\n\tnormalizePosition(position: Position, affinity: PositionAffinity): Position {\n\t\treturn this.model.normalizePosition(position, affinity);\n\t}\n\n\tpublic getLineIndentColumn(lineNumber: number): number {\n\t\treturn this.model.getLineIndentColumn(lineNumber);\n\t}\n\n\tpublic getInjectedTextAt(position: Position): InjectedText | null {\n\t\t// Identity lines collection does not support injected text.\n\t\treturn null;\n\t}\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2257, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/monaco-editor/esm/vs/editor/common/viewModel/glyphLanesModel.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/viewModel/file%3A/mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/viewModel/glyphLanesModel.ts","file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/viewModel/vs/editor/common/viewModel/glyphLanesModel.ts"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Range } from '../core/range.js';\nimport { GlyphMarginLane, IGlyphMarginLanesModel } from '../model.js';\n\n\nconst MAX_LANE = GlyphMarginLane.Right;\n\nexport class GlyphMarginLanesModel implements IGlyphMarginLanesModel {\n\tprivate lanes: Uint8Array;\n\tprivate persist = 0;\n\tprivate _requiredLanes = 1; // always render at least one lane\n\n\tconstructor(maxLine: number) {\n\t\tthis.lanes = new Uint8Array(Math.ceil(((maxLine + 1) * MAX_LANE) / 8));\n\t}\n\n\tpublic reset(maxLine: number) {\n\t\tconst bytes = Math.ceil(((maxLine + 1) * MAX_LANE) / 8);\n\t\tif (this.lanes.length < bytes) {\n\t\t\tthis.lanes = new Uint8Array(bytes);\n\t\t} else {\n\t\t\tthis.lanes.fill(0);\n\t\t}\n\t\tthis._requiredLanes = 1;\n\t}\n\n\tpublic get requiredLanes() {\n\t\treturn this._requiredLanes;\n\t}\n\n\tpublic push(lane: GlyphMarginLane, range: Range, persist?: boolean): void {\n\t\tif (persist) {\n\t\t\tthis.persist |= (1 << (lane - 1));\n\t\t}\n\t\tfor (let i = range.startLineNumber; i <= range.endLineNumber; i++) {\n\t\t\tconst bit = (MAX_LANE * i) + (lane - 1);\n\t\t\tthis.lanes[bit >>> 3] |= (1 << (bit % 8));\n\t\t\tthis._requiredLanes = Math.max(this._requiredLanes, this.countAtLine(i));\n\t\t}\n\t}\n\n\tpublic getLanesAtLine(lineNumber: number): GlyphMarginLane[] {\n\t\tconst lanes: GlyphMarginLane[] = [];\n\t\tlet bit = MAX_LANE * lineNumber;\n\t\tfor (let i = 0; i < MAX_LANE; i++) {\n\t\t\tif (this.persist & (1 << i) || this.lanes[bit >>> 3] & (1 << (bit % 8))) {\n\t\t\t\tlanes.push(i + 1);\n\t\t\t}\n\t\t\tbit++;\n\t\t}\n\n\t\treturn lanes.length ? lanes : [GlyphMarginLane.Center];\n\t}\n\n\tprivate countAtLine(lineNumber: number): number {\n\t\tlet bit = MAX_LANE * lineNumber;\n\t\tlet count = 0;\n\t\tfor (let i = 0; i < MAX_LANE; i++) {\n\t\t\tif (this.persist & (1 << i) || this.lanes[bit >>> 3] & (1 << (bit % 8))) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tbit++;\n\t\t}\n\t\treturn count;\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Range } from '../core/range.js';\nimport { GlyphMarginLane, IGlyphMarginLanesModel } from '../model.js';\n\n\nconst MAX_LANE = GlyphMarginLane.Right;\n\nexport class GlyphMarginLanesModel implements IGlyphMarginLanesModel {\n\tprivate lanes: Uint8Array;\n\tprivate persist = 0;\n\tprivate _requiredLanes = 1; // always render at least one lane\n\n\tconstructor(maxLine: number) {\n\t\tthis.lanes = new Uint8Array(Math.ceil(((maxLine + 1) * MAX_LANE) / 8));\n\t}\n\n\tpublic reset(maxLine: number) {\n\t\tconst bytes = Math.ceil(((maxLine + 1) * MAX_LANE) / 8);\n\t\tif (this.lanes.length < bytes) {\n\t\t\tthis.lanes = new Uint8Array(bytes);\n\t\t} else {\n\t\t\tthis.lanes.fill(0);\n\t\t}\n\t\tthis._requiredLanes = 1;\n\t}\n\n\tpublic get requiredLanes() {\n\t\treturn this._requiredLanes;\n\t}\n\n\tpublic push(lane: GlyphMarginLane, range: Range, persist?: boolean): void {\n\t\tif (persist) {\n\t\t\tthis.persist |= (1 << (lane - 1));\n\t\t}\n\t\tfor (let i = range.startLineNumber; i <= range.endLineNumber; i++) {\n\t\t\tconst bit = (MAX_LANE * i) + (lane - 1);\n\t\t\tthis.lanes[bit >>> 3] |= (1 << (bit % 8));\n\t\t\tthis._requiredLanes = Math.max(this._requiredLanes, this.countAtLine(i));\n\t\t}\n\t}\n\n\tpublic getLanesAtLine(lineNumber: number): GlyphMarginLane[] {\n\t\tconst lanes: GlyphMarginLane[] = [];\n\t\tlet bit = MAX_LANE * lineNumber;\n\t\tfor (let i = 0; i < MAX_LANE; i++) {\n\t\t\tif (this.persist & (1 << i) || this.lanes[bit >>> 3] & (1 << (bit % 8))) {\n\t\t\t\tlanes.push(i + 1);\n\t\t\t}\n\t\t\tbit++;\n\t\t}\n\n\t\treturn lanes.length ? lanes : [GlyphMarginLane.Center];\n\t}\n\n\tprivate countAtLine(lineNumber: number): number {\n\t\tlet bit = MAX_LANE * lineNumber;\n\t\tlet count = 0;\n\t\tfor (let i = 0; i < MAX_LANE; i++) {\n\t\t\tif (this.persist & (1 << i) || this.lanes[bit >>> 3] & (1 << (bit % 8))) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tbit++;\n\t\t}\n\t\treturn count;\n\t}\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2324, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/monaco-editor/esm/vs/editor/common/viewModel/viewModelImpl.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/viewModel/file%3A/mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/viewModel/viewModelImpl.ts","file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/viewModel/vs/editor/common/viewModel/viewModelImpl.ts"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ArrayQueue } from '../../../base/common/arrays.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Color } from '../../../base/common/color.js';\nimport { Event } from '../../../base/common/event.js';\nimport { Disposable, IDisposable } from '../../../base/common/lifecycle.js';\nimport * as platform from '../../../base/common/platform.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { ConfigurationChangedEvent, EditorOption, EDITOR_FONT_DEFAULTS, filterValidationDecorations, filterFontDecorations } from '../config/editorOptions.js';\nimport { CursorsController } from '../cursor/cursor.js';\nimport { CursorConfiguration, CursorState, EditOperationType, IColumnSelectData, PartialCursorState } from '../cursorCommon.js';\nimport { CursorChangeReason } from '../cursorEvents.js';\nimport { IPosition, Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { ISelection, Selection } from '../core/selection.js';\nimport { ICommand, ICursorState, IViewState, ScrollType } from '../editorCommon.js';\nimport { IEditorConfiguration } from '../config/editorConfiguration.js';\nimport { EndOfLinePreference, IAttachedView, ICursorStateComputer, IGlyphMarginLanesModel, IIdentifiedSingleEditOperation, ITextModel, PositionAffinity, TextDirection, TrackedRangeStickiness } from '../model.js';\nimport { IActiveIndentGuideInfo, BracketGuideOptions, IndentGuide } from '../textModelGuides.js';\nimport { ModelDecorationMinimapOptions, ModelDecorationOptions, ModelDecorationOverviewRulerOptions } from '../model/textModel.js';\nimport * as textModelEvents from '../textModelEvents.js';\nimport { TokenizationRegistry } from '../languages.js';\nimport { ColorId } from '../encodedTokenAttributes.js';\nimport { ILanguageConfigurationService } from '../languages/languageConfigurationRegistry.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { tokenizeLineToHTML } from '../languages/textToHtmlTokenizer.js';\nimport { EditorTheme } from '../editorTheme.js';\nimport * as viewEvents from '../viewEvents.js';\nimport { ViewLayout } from '../viewLayout/viewLayout.js';\nimport { MinimapTokensColorTracker } from './minimapTokensColorTracker.js';\nimport { ILineBreaksComputer, ILineBreaksComputerFactory, InjectedText } from '../modelLineProjectionData.js';\nimport { ViewEventHandler } from '../viewEventHandler.js';\nimport { ILineHeightChangeAccessor, IViewModel, IWhitespaceChangeAccessor, MinimapLinesRenderingData, OverviewRulerDecorationsGroup, ViewLineData, ViewLineRenderingData, ViewModelDecoration } from '../viewModel.js';\nimport { ViewModelDecorations } from './viewModelDecorations.js';\nimport { FocusChangedEvent, HiddenAreasChangedEvent, ModelContentChangedEvent, ModelDecorationsChangedEvent, ModelFontChangedEvent, ModelLanguageChangedEvent, ModelLanguageConfigurationChangedEvent, ModelLineHeightChangedEvent, ModelOptionsChangedEvent, ModelTokensChangedEvent, OutgoingViewModelEvent, ReadOnlyEditAttemptEvent, ScrollChangedEvent, ViewModelEventDispatcher, ViewModelEventsCollector, ViewZonesChangedEvent, WidgetFocusChangedEvent } from '../viewModelEventDispatcher.js';\nimport { IViewModelLines, ViewModelLinesFromModelAsIs, ViewModelLinesFromProjectedModel } from './viewModelLines.js';\nimport { IThemeService } from '../../../platform/theme/common/themeService.js';\nimport { GlyphMarginLanesModel } from './glyphLanesModel.js';\nimport { ICustomLineHeightData } from '../viewLayout/lineHeights.js';\nimport { TextModelEditSource } from '../textModelEditSource.js';\nimport { InlineDecoration } from './inlineDecorations.js';\nimport { ICoordinatesConverter } from '../coordinatesConverter.js';\n\nconst USE_IDENTITY_LINES_COLLECTION = true;\n\nexport class ViewModel extends Disposable implements IViewModel {\n\n\tprivate readonly _editorId: number;\n\tprivate readonly _configuration: IEditorConfiguration;\n\tpublic readonly model: ITextModel;\n\tprivate readonly _eventDispatcher: ViewModelEventDispatcher;\n\tpublic readonly onEvent: Event<OutgoingViewModelEvent>;\n\tpublic cursorConfig: CursorConfiguration;\n\tprivate readonly _updateConfigurationViewLineCount: RunOnceScheduler;\n\tprivate _hasFocus: boolean;\n\tprivate readonly _viewportStart: ViewportStart;\n\tprivate readonly _lines: IViewModelLines;\n\tpublic readonly coordinatesConverter: ICoordinatesConverter;\n\tpublic readonly viewLayout: ViewLayout;\n\tprivate readonly _cursor: CursorsController;\n\tprivate readonly _decorations: ViewModelDecorations;\n\tpublic readonly glyphLanes: IGlyphMarginLanesModel;\n\n\tconstructor(\n\t\teditorId: number,\n\t\tconfiguration: IEditorConfiguration,\n\t\tmodel: ITextModel,\n\t\tdomLineBreaksComputerFactory: ILineBreaksComputerFactory,\n\t\tmonospaceLineBreaksComputerFactory: ILineBreaksComputerFactory,\n\t\tscheduleAtNextAnimationFrame: (callback: () => void) => IDisposable,\n\t\tprivate readonly languageConfigurationService: ILanguageConfigurationService,\n\t\tprivate readonly _themeService: IThemeService,\n\t\tprivate readonly _attachedView: IAttachedView,\n\t\tprivate readonly _transactionalTarget: IBatchableTarget,\n\t) {\n\t\tsuper();\n\n\t\tthis._editorId = editorId;\n\t\tthis._configuration = configuration;\n\t\tthis.model = model;\n\t\tthis._eventDispatcher = new ViewModelEventDispatcher();\n\t\tthis.onEvent = this._eventDispatcher.onEvent;\n\t\tthis.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n\t\tthis._updateConfigurationViewLineCount = this._register(new RunOnceScheduler(() => this._updateConfigurationViewLineCountNow(), 0));\n\t\tthis._hasFocus = false;\n\t\tthis._viewportStart = ViewportStart.create(this.model);\n\t\tthis.glyphLanes = new GlyphMarginLanesModel(0);\n\n\t\tif (USE_IDENTITY_LINES_COLLECTION && this.model.isTooLargeForTokenization()) {\n\n\t\t\tthis._lines = new ViewModelLinesFromModelAsIs(this.model);\n\n\t\t} else {\n\t\t\tconst options = this._configuration.options;\n\t\t\tconst fontInfo = options.get(EditorOption.fontInfo);\n\t\t\tconst wrappingStrategy = options.get(EditorOption.wrappingStrategy);\n\t\t\tconst wrappingInfo = options.get(EditorOption.wrappingInfo);\n\t\t\tconst wrappingIndent = options.get(EditorOption.wrappingIndent);\n\t\t\tconst wordBreak = options.get(EditorOption.wordBreak);\n\t\t\tconst wrapOnEscapedLineFeeds = options.get(EditorOption.wrapOnEscapedLineFeeds);\n\n\t\t\tthis._lines = new ViewModelLinesFromProjectedModel(\n\t\t\t\tthis._editorId,\n\t\t\t\tthis.model,\n\t\t\t\tdomLineBreaksComputerFactory,\n\t\t\t\tmonospaceLineBreaksComputerFactory,\n\t\t\t\tfontInfo,\n\t\t\t\tthis.model.getOptions().tabSize,\n\t\t\t\twrappingStrategy,\n\t\t\t\twrappingInfo.wrappingColumn,\n\t\t\t\twrappingIndent,\n\t\t\t\twordBreak,\n\t\t\t\twrapOnEscapedLineFeeds\n\t\t\t);\n\t\t}\n\n\t\tthis.coordinatesConverter = this._lines.createCoordinatesConverter();\n\n\t\tthis._cursor = this._register(new CursorsController(model, this, this.coordinatesConverter, this.cursorConfig));\n\n\t\tthis.viewLayout = this._register(new ViewLayout(this._configuration, this.getLineCount(), this._getCustomLineHeights(), scheduleAtNextAnimationFrame));\n\n\t\tthis._register(this.viewLayout.onDidScroll((e) => {\n\t\t\tif (e.scrollTopChanged) {\n\t\t\t\tthis._handleVisibleLinesChanged();\n\t\t\t}\n\t\t\tif (e.scrollTopChanged) {\n\t\t\t\tthis._viewportStart.invalidate();\n\t\t\t}\n\t\t\tthis._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewScrollChangedEvent(e));\n\t\t\tthis._eventDispatcher.emitOutgoingEvent(new ScrollChangedEvent(\n\t\t\t\te.oldScrollWidth, e.oldScrollLeft, e.oldScrollHeight, e.oldScrollTop,\n\t\t\t\te.scrollWidth, e.scrollLeft, e.scrollHeight, e.scrollTop\n\t\t\t));\n\t\t}));\n\n\t\tthis._register(this.viewLayout.onDidContentSizeChange((e) => {\n\t\t\tthis._eventDispatcher.emitOutgoingEvent(e);\n\t\t}));\n\n\t\tthis._decorations = new ViewModelDecorations(this._editorId, this.model, this._configuration, this._lines, this.coordinatesConverter);\n\n\t\tthis._registerModelEvents();\n\n\t\tthis._register(this._configuration.onDidChangeFast((e) => {\n\t\t\ttry {\n\t\t\t\tconst eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n\t\t\t\tthis._onConfigurationChanged(eventsCollector, e);\n\t\t\t} finally {\n\t\t\t\tthis._eventDispatcher.endEmitViewEvents();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(MinimapTokensColorTracker.getInstance().onDidChange(() => {\n\t\t\tthis._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewTokensColorsChangedEvent());\n\t\t}));\n\n\t\tthis._register(this._themeService.onDidColorThemeChange((theme) => {\n\t\t\tthis._invalidateDecorationsColorCache();\n\t\t\tthis._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewThemeChangedEvent(theme));\n\t\t}));\n\n\t\tthis._updateConfigurationViewLineCountNow();\n\t}\n\n\tpublic override dispose(): void {\n\t\t// First remove listeners, as disposing the lines might end up sending\n\t\t// model decoration changed events ... and we no longer care about them ...\n\t\tsuper.dispose();\n\t\tthis._decorations.dispose();\n\t\tthis._lines.dispose();\n\t\tthis._viewportStart.dispose();\n\t\tthis._eventDispatcher.dispose();\n\t}\n\n\tpublic createLineBreaksComputer(): ILineBreaksComputer {\n\t\treturn this._lines.createLineBreaksComputer();\n\t}\n\n\tpublic addViewEventHandler(eventHandler: ViewEventHandler): void {\n\t\tthis._eventDispatcher.addViewEventHandler(eventHandler);\n\t}\n\n\tpublic removeViewEventHandler(eventHandler: ViewEventHandler): void {\n\t\tthis._eventDispatcher.removeViewEventHandler(eventHandler);\n\t}\n\n\tprivate _getCustomLineHeights(): ICustomLineHeightData[] {\n\t\tconst allowVariableLineHeights = this._configuration.options.get(EditorOption.allowVariableLineHeights);\n\t\tif (!allowVariableLineHeights) {\n\t\t\treturn [];\n\t\t}\n\t\tconst decorations = this.model.getCustomLineHeightsDecorations(this._editorId);\n\t\treturn decorations.map((d) => {\n\t\t\tconst lineNumber = d.range.startLineNumber;\n\t\t\tconst viewRange = this.coordinatesConverter.convertModelRangeToViewRange(new Range(lineNumber, 1, lineNumber, this.model.getLineMaxColumn(lineNumber)));\n\t\t\treturn {\n\t\t\t\tdecorationId: d.id,\n\t\t\t\tstartLineNumber: viewRange.startLineNumber,\n\t\t\t\tendLineNumber: viewRange.endLineNumber,\n\t\t\t\tlineHeight: d.options.lineHeight || 0\n\t\t\t};\n\t\t});\n\t}\n\n\tprivate _updateConfigurationViewLineCountNow(): void {\n\t\tthis._configuration.setViewLineCount(this._lines.getViewLineCount());\n\t}\n\n\tprivate getModelVisibleRanges(): Range[] {\n\t\tconst linesViewportData = this.viewLayout.getLinesViewportData();\n\t\tconst viewVisibleRange = new Range(\n\t\t\tlinesViewportData.startLineNumber,\n\t\t\tthis.getLineMinColumn(linesViewportData.startLineNumber),\n\t\t\tlinesViewportData.endLineNumber,\n\t\t\tthis.getLineMaxColumn(linesViewportData.endLineNumber)\n\t\t);\n\t\tconst modelVisibleRanges = this._toModelVisibleRanges(viewVisibleRange);\n\t\treturn modelVisibleRanges;\n\t}\n\n\tpublic visibleLinesStabilized(): void {\n\t\tconst modelVisibleRanges = this.getModelVisibleRanges();\n\t\tthis._attachedView.setVisibleLines(modelVisibleRanges, true);\n\t}\n\n\tprivate _handleVisibleLinesChanged(): void {\n\t\tconst modelVisibleRanges = this.getModelVisibleRanges();\n\t\tthis._attachedView.setVisibleLines(modelVisibleRanges, false);\n\t}\n\n\tpublic setHasFocus(hasFocus: boolean): void {\n\t\tthis._hasFocus = hasFocus;\n\t\tthis._cursor.setHasFocus(hasFocus);\n\t\tthis._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewFocusChangedEvent(hasFocus));\n\t\tthis._eventDispatcher.emitOutgoingEvent(new FocusChangedEvent(!hasFocus, hasFocus));\n\t}\n\n\tpublic setHasWidgetFocus(hasWidgetFocus: boolean): void {\n\t\tthis._eventDispatcher.emitOutgoingEvent(new WidgetFocusChangedEvent(!hasWidgetFocus, hasWidgetFocus));\n\t}\n\n\tpublic onCompositionStart(): void {\n\t\tthis._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewCompositionStartEvent());\n\t}\n\n\tpublic onCompositionEnd(): void {\n\t\tthis._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewCompositionEndEvent());\n\t}\n\n\tprivate _captureStableViewport(): StableViewport {\n\t\t// We might need to restore the current start view range, so save it (if available)\n\t\t// But only if the scroll position is not at the top of the file\n\t\tif (this._viewportStart.isValid && this.viewLayout.getCurrentScrollTop() > 0) {\n\t\t\tconst previousViewportStartViewPosition = new Position(this._viewportStart.viewLineNumber, this.getLineMinColumn(this._viewportStart.viewLineNumber));\n\t\t\tconst previousViewportStartModelPosition = this.coordinatesConverter.convertViewPositionToModelPosition(previousViewportStartViewPosition);\n\t\t\treturn new StableViewport(previousViewportStartModelPosition, this._viewportStart.startLineDelta);\n\t\t}\n\t\treturn new StableViewport(null, 0);\n\t}\n\n\tprivate _onConfigurationChanged(eventsCollector: ViewModelEventsCollector, e: ConfigurationChangedEvent): void {\n\t\tconst stableViewport = this._captureStableViewport();\n\t\tconst options = this._configuration.options;\n\t\tconst fontInfo = options.get(EditorOption.fontInfo);\n\t\tconst wrappingStrategy = options.get(EditorOption.wrappingStrategy);\n\t\tconst wrappingInfo = options.get(EditorOption.wrappingInfo);\n\t\tconst wrappingIndent = options.get(EditorOption.wrappingIndent);\n\t\tconst wordBreak = options.get(EditorOption.wordBreak);\n\n\t\tif (this._lines.setWrappingSettings(fontInfo, wrappingStrategy, wrappingInfo.wrappingColumn, wrappingIndent, wordBreak)) {\n\t\t\teventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n\t\t\teventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n\t\t\teventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n\t\t\tthis._cursor.onLineMappingChanged(eventsCollector);\n\t\t\tthis._decorations.onLineMappingChanged();\n\t\t\tthis.viewLayout.onFlushed(this.getLineCount(), this._getCustomLineHeights());\n\n\t\t\tthis._updateConfigurationViewLineCount.schedule();\n\t\t}\n\n\t\tif (e.hasChanged(EditorOption.readOnly)) {\n\t\t\t// Must read again all decorations due to readOnly filtering\n\t\t\tthis._decorations.reset();\n\t\t\teventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n\t\t}\n\n\t\tif (e.hasChanged(EditorOption.renderValidationDecorations)) {\n\t\t\tthis._decorations.reset();\n\t\t\teventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n\t\t}\n\n\t\teventsCollector.emitViewEvent(new viewEvents.ViewConfigurationChangedEvent(e));\n\t\tthis.viewLayout.onConfigurationChanged(e);\n\n\t\tstableViewport.recoverViewportStart(this.coordinatesConverter, this.viewLayout);\n\n\t\tif (CursorConfiguration.shouldRecreate(e)) {\n\t\t\tthis.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n\t\t\tthis._cursor.updateConfiguration(this.cursorConfig);\n\t\t}\n\t}\n\n\tprivate _registerModelEvents(): void {\n\n\t\tthis._register(this.model.onDidChangeContentOrInjectedText((e) => {\n\t\t\ttry {\n\t\t\t\tconst eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n\n\t\t\t\tlet hadOtherModelChange = false;\n\t\t\t\tlet hadModelLineChangeThatChangedLineMapping = false;\n\n\t\t\t\tconst changes = (e instanceof textModelEvents.InternalModelContentChangeEvent ? e.rawContentChangedEvent.changes : e.changes);\n\t\t\t\tconst versionId = (e instanceof textModelEvents.InternalModelContentChangeEvent ? e.rawContentChangedEvent.versionId : null);\n\n\t\t\t\t// Do a first pass to compute line mappings, and a second pass to actually interpret them\n\t\t\t\tconst lineBreaksComputer = this._lines.createLineBreaksComputer();\n\t\t\t\tfor (const change of changes) {\n\t\t\t\t\tswitch (change.changeType) {\n\t\t\t\t\t\tcase textModelEvents.RawContentChangedType.LinesInserted: {\n\t\t\t\t\t\t\tfor (let lineIdx = 0; lineIdx < change.detail.length; lineIdx++) {\n\t\t\t\t\t\t\t\tconst line = change.detail[lineIdx];\n\t\t\t\t\t\t\t\tlet injectedText = change.injectedTexts[lineIdx];\n\t\t\t\t\t\t\t\tif (injectedText) {\n\t\t\t\t\t\t\t\t\tinjectedText = injectedText.filter(element => (!element.ownerId || element.ownerId === this._editorId));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tlineBreaksComputer.addRequest(line, injectedText, null);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase textModelEvents.RawContentChangedType.LineChanged: {\n\t\t\t\t\t\t\tlet injectedText: textModelEvents.LineInjectedText[] | null = null;\n\t\t\t\t\t\t\tif (change.injectedText) {\n\t\t\t\t\t\t\t\tinjectedText = change.injectedText.filter(element => (!element.ownerId || element.ownerId === this._editorId));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlineBreaksComputer.addRequest(change.detail, injectedText, null);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst lineBreaks = lineBreaksComputer.finalize();\n\t\t\t\tconst lineBreakQueue = new ArrayQueue(lineBreaks);\n\n\t\t\t\tfor (const change of changes) {\n\t\t\t\t\tswitch (change.changeType) {\n\t\t\t\t\t\tcase textModelEvents.RawContentChangedType.Flush: {\n\t\t\t\t\t\t\tthis._lines.onModelFlushed();\n\t\t\t\t\t\t\teventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n\t\t\t\t\t\t\tthis._decorations.reset();\n\t\t\t\t\t\t\tthis.viewLayout.onFlushed(this.getLineCount(), this._getCustomLineHeights());\n\t\t\t\t\t\t\thadOtherModelChange = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase textModelEvents.RawContentChangedType.LinesDeleted: {\n\t\t\t\t\t\t\tconst linesDeletedEvent = this._lines.onModelLinesDeleted(versionId, change.fromLineNumber, change.toLineNumber);\n\t\t\t\t\t\t\tif (linesDeletedEvent !== null) {\n\t\t\t\t\t\t\t\teventsCollector.emitViewEvent(linesDeletedEvent);\n\t\t\t\t\t\t\t\tthis.viewLayout.onLinesDeleted(linesDeletedEvent.fromLineNumber, linesDeletedEvent.toLineNumber);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\thadOtherModelChange = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase textModelEvents.RawContentChangedType.LinesInserted: {\n\t\t\t\t\t\t\tconst insertedLineBreaks = lineBreakQueue.takeCount(change.detail.length);\n\t\t\t\t\t\t\tconst linesInsertedEvent = this._lines.onModelLinesInserted(versionId, change.fromLineNumber, change.toLineNumber, insertedLineBreaks);\n\t\t\t\t\t\t\tif (linesInsertedEvent !== null) {\n\t\t\t\t\t\t\t\teventsCollector.emitViewEvent(linesInsertedEvent);\n\t\t\t\t\t\t\t\tthis.viewLayout.onLinesInserted(linesInsertedEvent.fromLineNumber, linesInsertedEvent.toLineNumber);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\thadOtherModelChange = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase textModelEvents.RawContentChangedType.LineChanged: {\n\t\t\t\t\t\t\tconst changedLineBreakData = lineBreakQueue.dequeue()!;\n\t\t\t\t\t\t\tconst [lineMappingChanged, linesChangedEvent, linesInsertedEvent, linesDeletedEvent] =\n\t\t\t\t\t\t\t\tthis._lines.onModelLineChanged(versionId, change.lineNumber, changedLineBreakData);\n\t\t\t\t\t\t\thadModelLineChangeThatChangedLineMapping = lineMappingChanged;\n\t\t\t\t\t\t\tif (linesChangedEvent) {\n\t\t\t\t\t\t\t\teventsCollector.emitViewEvent(linesChangedEvent);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (linesInsertedEvent) {\n\t\t\t\t\t\t\t\teventsCollector.emitViewEvent(linesInsertedEvent);\n\t\t\t\t\t\t\t\tthis.viewLayout.onLinesInserted(linesInsertedEvent.fromLineNumber, linesInsertedEvent.toLineNumber);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (linesDeletedEvent) {\n\t\t\t\t\t\t\t\teventsCollector.emitViewEvent(linesDeletedEvent);\n\t\t\t\t\t\t\t\tthis.viewLayout.onLinesDeleted(linesDeletedEvent.fromLineNumber, linesDeletedEvent.toLineNumber);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase textModelEvents.RawContentChangedType.EOLChanged: {\n\t\t\t\t\t\t\t// Nothing to do. The new version will be accepted below\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (versionId !== null) {\n\t\t\t\t\tthis._lines.acceptVersionId(versionId);\n\t\t\t\t}\n\t\t\t\tthis.viewLayout.onHeightMaybeChanged();\n\n\t\t\t\tif (!hadOtherModelChange && hadModelLineChangeThatChangedLineMapping) {\n\t\t\t\t\teventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n\t\t\t\t\teventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n\t\t\t\t\tthis._cursor.onLineMappingChanged(eventsCollector);\n\t\t\t\t\tthis._decorations.onLineMappingChanged();\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tthis._eventDispatcher.endEmitViewEvents();\n\t\t\t}\n\n\t\t\t// Update the configuration and reset the centered view line\n\t\t\tconst viewportStartWasValid = this._viewportStart.isValid;\n\t\t\tthis._viewportStart.invalidate();\n\t\t\tthis._configuration.setModelLineCount(this.model.getLineCount());\n\t\t\tthis._updateConfigurationViewLineCountNow();\n\n\t\t\t// Recover viewport\n\t\t\tif (!this._hasFocus && this.model.getAttachedEditorCount() >= 2 && viewportStartWasValid) {\n\t\t\t\tconst modelRange = this.model._getTrackedRange(this._viewportStart.modelTrackedRange);\n\t\t\t\tif (modelRange) {\n\t\t\t\t\tconst viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(modelRange.getStartPosition());\n\t\t\t\t\tconst viewPositionTop = this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n\t\t\t\t\tthis.viewLayout.setScrollPosition({ scrollTop: viewPositionTop + this._viewportStart.startLineDelta }, ScrollType.Immediate);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tconst eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n\t\t\t\tif (e instanceof textModelEvents.InternalModelContentChangeEvent) {\n\t\t\t\t\teventsCollector.emitOutgoingEvent(new ModelContentChangedEvent(e.contentChangedEvent));\n\t\t\t\t}\n\t\t\t\tthis._cursor.onModelContentChanged(eventsCollector, e);\n\t\t\t} finally {\n\t\t\t\tthis._eventDispatcher.endEmitViewEvents();\n\t\t\t}\n\n\t\t\tthis._handleVisibleLinesChanged();\n\t\t}));\n\n\t\tconst allowVariableLineHeights = this._configuration.options.get(EditorOption.allowVariableLineHeights);\n\t\tif (allowVariableLineHeights) {\n\t\t\tthis._register(this.model.onDidChangeLineHeight((e) => {\n\t\t\t\tconst filteredChanges = e.changes.filter((change) => change.ownerId === this._editorId || change.ownerId === 0);\n\n\t\t\t\tthis.viewLayout.changeSpecialLineHeights((accessor: ILineHeightChangeAccessor) => {\n\t\t\t\t\tfor (const change of filteredChanges) {\n\t\t\t\t\t\tconst { decorationId, lineNumber, lineHeight } = change;\n\t\t\t\t\t\tconst viewRange = this.coordinatesConverter.convertModelRangeToViewRange(new Range(lineNumber, 1, lineNumber, this.model.getLineMaxColumn(lineNumber)));\n\t\t\t\t\t\tif (lineHeight !== null) {\n\t\t\t\t\t\t\taccessor.insertOrChangeCustomLineHeight(decorationId, viewRange.startLineNumber, viewRange.endLineNumber, lineHeight);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\taccessor.removeCustomLineHeight(decorationId);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// recreate the model event using the filtered changes\n\t\t\t\tif (filteredChanges.length > 0) {\n\t\t\t\t\tconst filteredEvent = new textModelEvents.ModelLineHeightChangedEvent(filteredChanges);\n\t\t\t\t\tthis._eventDispatcher.emitOutgoingEvent(new ModelLineHeightChangedEvent(filteredEvent));\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\n\t\tconst allowVariableFonts = this._configuration.options.get(EditorOption.effectiveAllowVariableFonts);\n\t\tif (allowVariableFonts) {\n\t\t\tthis._register(this.model.onDidChangeFont((e) => {\n\t\t\t\tconst filteredChanges = e.changes.filter((change) => change.ownerId === this._editorId || change.ownerId === 0);\n\t\t\t\t// recreate the model event using the filtered changes\n\t\t\t\tif (filteredChanges.length > 0) {\n\t\t\t\t\tconst filteredEvent = new textModelEvents.ModelFontChangedEvent(filteredChanges);\n\t\t\t\t\tthis._eventDispatcher.emitOutgoingEvent(new ModelFontChangedEvent(filteredEvent));\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\n\t\tthis._register(this.model.onDidChangeTokens((e) => {\n\t\t\tconst viewRanges: { fromLineNumber: number; toLineNumber: number }[] = [];\n\t\t\tfor (let j = 0, lenJ = e.ranges.length; j < lenJ; j++) {\n\t\t\t\tconst modelRange = e.ranges[j];\n\t\t\t\tconst viewStartLineNumber = this.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.fromLineNumber, 1)).lineNumber;\n\t\t\t\tconst viewEndLineNumber = this.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.toLineNumber, this.model.getLineMaxColumn(modelRange.toLineNumber))).lineNumber;\n\t\t\t\tviewRanges[j] = {\n\t\t\t\t\tfromLineNumber: viewStartLineNumber,\n\t\t\t\t\ttoLineNumber: viewEndLineNumber\n\t\t\t\t};\n\t\t\t}\n\t\t\tthis._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewTokensChangedEvent(viewRanges));\n\t\t\tthis._eventDispatcher.emitOutgoingEvent(new ModelTokensChangedEvent(e));\n\t\t}));\n\n\t\tthis._register(this.model.onDidChangeLanguageConfiguration((e) => {\n\t\t\tthis._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewLanguageConfigurationEvent());\n\t\t\tthis.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n\t\t\tthis._cursor.updateConfiguration(this.cursorConfig);\n\t\t\tthis._eventDispatcher.emitOutgoingEvent(new ModelLanguageConfigurationChangedEvent(e));\n\t\t}));\n\n\t\tthis._register(this.model.onDidChangeLanguage((e) => {\n\t\t\tthis.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n\t\t\tthis._cursor.updateConfiguration(this.cursorConfig);\n\t\t\tthis._eventDispatcher.emitOutgoingEvent(new ModelLanguageChangedEvent(e));\n\t\t}));\n\n\t\tthis._register(this.model.onDidChangeOptions((e) => {\n\t\t\t// A tab size change causes a line mapping changed event => all view parts will repaint OK, no further event needed here\n\t\t\tif (this._lines.setTabSize(this.model.getOptions().tabSize)) {\n\t\t\t\ttry {\n\t\t\t\t\tconst eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n\t\t\t\t\teventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n\t\t\t\t\teventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n\t\t\t\t\teventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n\t\t\t\t\tthis._cursor.onLineMappingChanged(eventsCollector);\n\t\t\t\t\tthis._decorations.onLineMappingChanged();\n\t\t\t\t\tthis.viewLayout.onFlushed(this.getLineCount(), this._getCustomLineHeights());\n\t\t\t\t} finally {\n\t\t\t\t\tthis._eventDispatcher.endEmitViewEvents();\n\t\t\t\t}\n\t\t\t\tthis._updateConfigurationViewLineCount.schedule();\n\t\t\t}\n\n\t\t\tthis.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n\t\t\tthis._cursor.updateConfiguration(this.cursorConfig);\n\n\t\t\tthis._eventDispatcher.emitOutgoingEvent(new ModelOptionsChangedEvent(e));\n\t\t}));\n\n\t\tthis._register(this.model.onDidChangeDecorations((e) => {\n\t\t\tthis._decorations.onModelDecorationsChanged();\n\t\t\tthis._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewDecorationsChangedEvent(e));\n\t\t\tthis._eventDispatcher.emitOutgoingEvent(new ModelDecorationsChangedEvent(e));\n\t\t}));\n\t}\n\n\tprivate readonly hiddenAreasModel = new HiddenAreasModel();\n\tprivate previousHiddenAreas: readonly Range[] = [];\n\n\tpublic getFontSizeAtPosition(position: IPosition): string | null {\n\t\tconst allowVariableFonts = this._configuration.options.get(EditorOption.effectiveAllowVariableFonts);\n\t\tif (!allowVariableFonts) {\n\t\t\treturn null;\n\t\t}\n\t\tconst fontDecorations = this.model.getFontDecorationsInRange(Range.fromPositions(position), this._editorId);\n\t\tlet fontSize: string = this._configuration.options.get(EditorOption.fontInfo).fontSize + 'px';\n\t\tfor (const fontDecoration of fontDecorations) {\n\t\t\tif (fontDecoration.options.fontSize) {\n\t\t\t\tfontSize = fontDecoration.options.fontSize;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn fontSize;\n\t}\n\n\t/**\n\t * @param forceUpdate If true, the hidden areas will be updated even if the new ranges are the same as the previous ranges.\n\t * This is because the model might have changed, which resets the hidden areas, but not the last cached value.\n\t * This needs a better fix in the future.\n\t*/\n\tpublic setHiddenAreas(ranges: Range[], source?: unknown, forceUpdate?: boolean): void {\n\t\tthis.hiddenAreasModel.setHiddenAreas(source, ranges);\n\t\tconst mergedRanges = this.hiddenAreasModel.getMergedRanges();\n\t\tif (mergedRanges === this.previousHiddenAreas && !forceUpdate) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.previousHiddenAreas = mergedRanges;\n\n\t\tconst stableViewport = this._captureStableViewport();\n\n\t\tlet lineMappingChanged = false;\n\t\ttry {\n\t\t\tconst eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n\t\t\tlineMappingChanged = this._lines.setHiddenAreas(mergedRanges);\n\t\t\tif (lineMappingChanged) {\n\t\t\t\teventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n\t\t\t\teventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n\t\t\t\teventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n\t\t\t\tthis._cursor.onLineMappingChanged(eventsCollector);\n\t\t\t\tthis._decorations.onLineMappingChanged();\n\t\t\t\tthis.viewLayout.onFlushed(this.getLineCount(), this._getCustomLineHeights());\n\t\t\t\tthis.viewLayout.onHeightMaybeChanged();\n\t\t\t}\n\n\t\t\tconst firstModelLineInViewPort = stableViewport.viewportStartModelPosition?.lineNumber;\n\t\t\tconst firstModelLineIsHidden = firstModelLineInViewPort && mergedRanges.some(range => range.startLineNumber <= firstModelLineInViewPort && firstModelLineInViewPort <= range.endLineNumber);\n\t\t\tif (!firstModelLineIsHidden) {\n\t\t\t\tstableViewport.recoverViewportStart(this.coordinatesConverter, this.viewLayout);\n\t\t\t}\n\t\t} finally {\n\t\t\tthis._eventDispatcher.endEmitViewEvents();\n\t\t}\n\t\tthis._updateConfigurationViewLineCount.schedule();\n\n\t\tif (lineMappingChanged) {\n\t\t\tthis._eventDispatcher.emitOutgoingEvent(new HiddenAreasChangedEvent());\n\t\t}\n\t}\n\n\tpublic getVisibleRangesPlusViewportAboveBelow(): Range[] {\n\t\tconst layoutInfo = this._configuration.options.get(EditorOption.layoutInfo);\n\t\tconst lineHeight = this._configuration.options.get(EditorOption.lineHeight);\n\t\tconst linesAround = Math.max(20, Math.round(layoutInfo.height / lineHeight));\n\t\tconst partialData = this.viewLayout.getLinesViewportData();\n\t\tconst startViewLineNumber = Math.max(1, partialData.completelyVisibleStartLineNumber - linesAround);\n\t\tconst endViewLineNumber = Math.min(this.getLineCount(), partialData.completelyVisibleEndLineNumber + linesAround);\n\n\t\treturn this._toModelVisibleRanges(new Range(\n\t\t\tstartViewLineNumber, this.getLineMinColumn(startViewLineNumber),\n\t\t\tendViewLineNumber, this.getLineMaxColumn(endViewLineNumber)\n\t\t));\n\t}\n\n\tpublic getVisibleRanges(): Range[] {\n\t\tconst visibleViewRange = this.getCompletelyVisibleViewRange();\n\t\treturn this._toModelVisibleRanges(visibleViewRange);\n\t}\n\n\tpublic getHiddenAreas(): Range[] {\n\t\treturn this._lines.getHiddenAreas();\n\t}\n\n\tprivate _toModelVisibleRanges(visibleViewRange: Range): Range[] {\n\t\tconst visibleRange = this.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange);\n\t\tconst hiddenAreas = this._lines.getHiddenAreas();\n\n\t\tif (hiddenAreas.length === 0) {\n\t\t\treturn [visibleRange];\n\t\t}\n\n\t\tconst result: Range[] = [];\n\t\tlet resultLen = 0;\n\t\tlet startLineNumber = visibleRange.startLineNumber;\n\t\tlet startColumn = visibleRange.startColumn;\n\t\tconst endLineNumber = visibleRange.endLineNumber;\n\t\tconst endColumn = visibleRange.endColumn;\n\t\tfor (let i = 0, len = hiddenAreas.length; i < len; i++) {\n\t\t\tconst hiddenStartLineNumber = hiddenAreas[i].startLineNumber;\n\t\t\tconst hiddenEndLineNumber = hiddenAreas[i].endLineNumber;\n\n\t\t\tif (hiddenEndLineNumber < startLineNumber) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (hiddenStartLineNumber > endLineNumber) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (startLineNumber < hiddenStartLineNumber) {\n\t\t\t\tresult[resultLen++] = new Range(\n\t\t\t\t\tstartLineNumber, startColumn,\n\t\t\t\t\thiddenStartLineNumber - 1, this.model.getLineMaxColumn(hiddenStartLineNumber - 1)\n\t\t\t\t);\n\t\t\t}\n\t\t\tstartLineNumber = hiddenEndLineNumber + 1;\n\t\t\tstartColumn = 1;\n\t\t}\n\n\t\tif (startLineNumber < endLineNumber || (startLineNumber === endLineNumber && startColumn < endColumn)) {\n\t\t\tresult[resultLen++] = new Range(\n\t\t\t\tstartLineNumber, startColumn,\n\t\t\t\tendLineNumber, endColumn\n\t\t\t);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic getCompletelyVisibleViewRange(): Range {\n\t\tconst partialData = this.viewLayout.getLinesViewportData();\n\t\tconst startViewLineNumber = partialData.completelyVisibleStartLineNumber;\n\t\tconst endViewLineNumber = partialData.completelyVisibleEndLineNumber;\n\n\t\treturn new Range(\n\t\t\tstartViewLineNumber, this.getLineMinColumn(startViewLineNumber),\n\t\t\tendViewLineNumber, this.getLineMaxColumn(endViewLineNumber)\n\t\t);\n\t}\n\n\tpublic getCompletelyVisibleViewRangeAtScrollTop(scrollTop: number): Range {\n\t\tconst partialData = this.viewLayout.getLinesViewportDataAtScrollTop(scrollTop);\n\t\tconst startViewLineNumber = partialData.completelyVisibleStartLineNumber;\n\t\tconst endViewLineNumber = partialData.completelyVisibleEndLineNumber;\n\n\t\treturn new Range(\n\t\t\tstartViewLineNumber, this.getLineMinColumn(startViewLineNumber),\n\t\t\tendViewLineNumber, this.getLineMaxColumn(endViewLineNumber)\n\t\t);\n\t}\n\n\tpublic saveState(): IViewState {\n\t\tconst compatViewState = this.viewLayout.saveState();\n\n\t\tconst scrollTop = compatViewState.scrollTop;\n\t\tconst firstViewLineNumber = this.viewLayout.getLineNumberAtVerticalOffset(scrollTop);\n\t\tconst firstPosition = this.coordinatesConverter.convertViewPositionToModelPosition(new Position(firstViewLineNumber, this.getLineMinColumn(firstViewLineNumber)));\n\t\tconst firstPositionDeltaTop = this.viewLayout.getVerticalOffsetForLineNumber(firstViewLineNumber) - scrollTop;\n\n\t\treturn {\n\t\t\tscrollLeft: compatViewState.scrollLeft,\n\t\t\tfirstPosition: firstPosition,\n\t\t\tfirstPositionDeltaTop: firstPositionDeltaTop\n\t\t};\n\t}\n\n\tpublic reduceRestoreState(state: IViewState): { scrollLeft: number; scrollTop: number } {\n\t\tif (typeof state.firstPosition === 'undefined') {\n\t\t\t// This is a view state serialized by an older version\n\t\t\treturn this._reduceRestoreStateCompatibility(state);\n\t\t}\n\n\t\tconst modelPosition = this.model.validatePosition(state.firstPosition);\n\t\tconst viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(modelPosition);\n\t\tconst scrollTop = this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber) - state.firstPositionDeltaTop;\n\t\treturn {\n\t\t\tscrollLeft: state.scrollLeft,\n\t\t\tscrollTop: scrollTop\n\t\t};\n\t}\n\n\tprivate _reduceRestoreStateCompatibility(state: IViewState): { scrollLeft: number; scrollTop: number } {\n\t\treturn {\n\t\t\tscrollLeft: state.scrollLeft,\n\t\t\tscrollTop: state.scrollTopWithoutViewZones!\n\t\t};\n\t}\n\n\tprivate getTabSize(): number {\n\t\treturn this.model.getOptions().tabSize;\n\t}\n\n\tpublic getLineCount(): number {\n\t\treturn this._lines.getViewLineCount();\n\t}\n\n\t/**\n\t * Gives a hint that a lot of requests are about to come in for these line numbers.\n\t */\n\tpublic setViewport(startLineNumber: number, endLineNumber: number, centeredLineNumber: number): void {\n\t\tthis._viewportStart.update(this, startLineNumber);\n\t}\n\n\tpublic getActiveIndentGuide(lineNumber: number, minLineNumber: number, maxLineNumber: number): IActiveIndentGuideInfo {\n\t\treturn this._lines.getActiveIndentGuide(lineNumber, minLineNumber, maxLineNumber);\n\t}\n\n\tpublic getLinesIndentGuides(startLineNumber: number, endLineNumber: number): number[] {\n\t\treturn this._lines.getViewLinesIndentGuides(startLineNumber, endLineNumber);\n\t}\n\n\tpublic getBracketGuidesInRangeByLine(startLineNumber: number, endLineNumber: number, activePosition: IPosition | null, options: BracketGuideOptions): IndentGuide[][] {\n\t\treturn this._lines.getViewLinesBracketGuides(startLineNumber, endLineNumber, activePosition, options);\n\t}\n\n\tpublic getLineContent(lineNumber: number): string {\n\t\treturn this._lines.getViewLineContent(lineNumber);\n\t}\n\n\tpublic getLineLength(lineNumber: number): number {\n\t\treturn this._lines.getViewLineLength(lineNumber);\n\t}\n\n\tpublic getLineMinColumn(lineNumber: number): number {\n\t\treturn this._lines.getViewLineMinColumn(lineNumber);\n\t}\n\n\tpublic getLineMaxColumn(lineNumber: number): number {\n\t\treturn this._lines.getViewLineMaxColumn(lineNumber);\n\t}\n\n\tpublic getLineFirstNonWhitespaceColumn(lineNumber: number): number {\n\t\tconst result = strings.firstNonWhitespaceIndex(this.getLineContent(lineNumber));\n\t\tif (result === -1) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn result + 1;\n\t}\n\n\tpublic getLineLastNonWhitespaceColumn(lineNumber: number): number {\n\t\tconst result = strings.lastNonWhitespaceIndex(this.getLineContent(lineNumber));\n\t\tif (result === -1) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn result + 2;\n\t}\n\n\tpublic getMinimapDecorationsInRange(range: Range): ViewModelDecoration[] {\n\t\treturn this._decorations.getMinimapDecorationsInRange(range);\n\t}\n\n\tpublic getDecorationsInViewport(visibleRange: Range): ViewModelDecoration[] {\n\t\treturn this._decorations.getDecorationsViewportData(visibleRange).decorations;\n\t}\n\n\tpublic getInjectedTextAt(viewPosition: Position): InjectedText | null {\n\t\treturn this._lines.getInjectedTextAt(viewPosition);\n\t}\n\n\tprivate _getTextDirection(lineNumber: number, decorations: ViewModelDecoration[]): TextDirection {\n\t\tlet rtlCount = 0;\n\n\t\tfor (const decoration of decorations) {\n\t\t\tconst range = decoration.range;\n\t\t\tif (range.startLineNumber > lineNumber || range.endLineNumber < lineNumber) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst textDirection = decoration.options.textDirection;\n\t\t\tif (textDirection === TextDirection.RTL) {\n\t\t\t\trtlCount++;\n\t\t\t} else if (textDirection === TextDirection.LTR) {\n\t\t\t\trtlCount--;\n\t\t\t}\n\t\t}\n\n\t\treturn rtlCount > 0 ? TextDirection.RTL : TextDirection.LTR;\n\t}\n\n\tpublic getTextDirection(lineNumber: number): TextDirection {\n\t\tconst decorationsCollection = this._decorations.getDecorationsOnLine(lineNumber);\n\t\treturn this._getTextDirection(lineNumber, decorationsCollection.decorations);\n\t}\n\n\tpublic getViewportViewLineRenderingData(visibleRange: Range, lineNumber: number): ViewLineRenderingData {\n\t\tconst viewportDecorationsCollection = this._decorations.getDecorationsViewportData(visibleRange);\n\t\tconst inlineDecorations = viewportDecorationsCollection.inlineDecorations[lineNumber - visibleRange.startLineNumber];\n\t\treturn this._getViewLineRenderingData(lineNumber, inlineDecorations, viewportDecorationsCollection.hasVariableFonts, viewportDecorationsCollection.decorations);\n\t}\n\n\tpublic getViewLineRenderingData(lineNumber: number): ViewLineRenderingData {\n\t\tconst decorationsCollection = this._decorations.getDecorationsOnLine(lineNumber);\n\t\treturn this._getViewLineRenderingData(lineNumber, decorationsCollection.inlineDecorations[0], decorationsCollection.hasVariableFonts, decorationsCollection.decorations);\n\t}\n\n\tprivate _getViewLineRenderingData(lineNumber: number, inlineDecorations: InlineDecoration[], hasVariableFonts: boolean, decorations: ViewModelDecoration[]): ViewLineRenderingData {\n\t\tconst mightContainRTL = this.model.mightContainRTL();\n\t\tconst mightContainNonBasicASCII = this.model.mightContainNonBasicASCII();\n\t\tconst tabSize = this.getTabSize();\n\t\tconst lineData = this._lines.getViewLineData(lineNumber);\n\n\t\tif (lineData.inlineDecorations) {\n\t\t\tinlineDecorations = [\n\t\t\t\t...inlineDecorations,\n\t\t\t\t...lineData.inlineDecorations.map(d =>\n\t\t\t\t\td.toInlineDecoration(lineNumber)\n\t\t\t\t)\n\t\t\t];\n\t\t}\n\n\t\treturn new ViewLineRenderingData(\n\t\t\tlineData.minColumn,\n\t\t\tlineData.maxColumn,\n\t\t\tlineData.content,\n\t\t\tlineData.continuesWithWrappedLine,\n\t\t\tmightContainRTL,\n\t\t\tmightContainNonBasicASCII,\n\t\t\tlineData.tokens,\n\t\t\tinlineDecorations,\n\t\t\ttabSize,\n\t\t\tlineData.startVisibleColumn,\n\t\t\tthis._getTextDirection(lineNumber, decorations),\n\t\t\thasVariableFonts\n\t\t);\n\t}\n\n\tpublic getViewLineData(lineNumber: number): ViewLineData {\n\t\treturn this._lines.getViewLineData(lineNumber);\n\t}\n\n\tpublic getMinimapLinesRenderingData(startLineNumber: number, endLineNumber: number, needed: boolean[]): MinimapLinesRenderingData {\n\t\tconst result = this._lines.getViewLinesData(startLineNumber, endLineNumber, needed);\n\t\treturn new MinimapLinesRenderingData(\n\t\t\tthis.getTabSize(),\n\t\t\tresult\n\t\t);\n\t}\n\n\tpublic getAllOverviewRulerDecorations(theme: EditorTheme): OverviewRulerDecorationsGroup[] {\n\t\tconst decorations = this.model.getOverviewRulerDecorations(this._editorId, filterValidationDecorations(this._configuration.options), filterFontDecorations(this._configuration.options));\n\t\tconst result = new OverviewRulerDecorations();\n\t\tfor (const decoration of decorations) {\n\t\t\tconst decorationOptions = <ModelDecorationOptions>decoration.options;\n\t\t\tconst opts = decorationOptions.overviewRuler;\n\t\t\tif (!opts) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst lane = <number>opts.position;\n\t\t\tif (lane === 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst color = opts.getColor(theme.value);\n\t\t\tconst viewStartLineNumber = this.coordinatesConverter.getViewLineNumberOfModelPosition(decoration.range.startLineNumber, decoration.range.startColumn);\n\t\t\tconst viewEndLineNumber = this.coordinatesConverter.getViewLineNumberOfModelPosition(decoration.range.endLineNumber, decoration.range.endColumn);\n\n\t\t\tresult.accept(color, decorationOptions.zIndex, viewStartLineNumber, viewEndLineNumber, lane);\n\t\t}\n\t\treturn result.asArray;\n\t}\n\n\tprivate _invalidateDecorationsColorCache(): void {\n\t\tconst decorations = this.model.getOverviewRulerDecorations();\n\t\tfor (const decoration of decorations) {\n\t\t\tconst opts1 = <ModelDecorationOverviewRulerOptions>decoration.options.overviewRuler;\n\t\t\topts1?.invalidateCachedColor();\n\t\t\tconst opts2 = <ModelDecorationMinimapOptions>decoration.options.minimap;\n\t\t\topts2?.invalidateCachedColor();\n\t\t}\n\t}\n\n\tpublic getValueInRange(range: Range, eol: EndOfLinePreference): string {\n\t\tconst modelRange = this.coordinatesConverter.convertViewRangeToModelRange(range);\n\t\treturn this.model.getValueInRange(modelRange, eol);\n\t}\n\n\tpublic getValueLengthInRange(range: Range, eol: EndOfLinePreference): number {\n\t\tconst modelRange = this.coordinatesConverter.convertViewRangeToModelRange(range);\n\t\treturn this.model.getValueLengthInRange(modelRange, eol);\n\t}\n\n\tpublic modifyPosition(position: Position, offset: number): Position {\n\t\tconst modelPosition = this.coordinatesConverter.convertViewPositionToModelPosition(position);\n\t\tconst resultModelPosition = this.model.modifyPosition(modelPosition, offset);\n\t\treturn this.coordinatesConverter.convertModelPositionToViewPosition(resultModelPosition);\n\t}\n\n\tpublic deduceModelPositionRelativeToViewPosition(viewAnchorPosition: Position, deltaOffset: number, lineFeedCnt: number): Position {\n\t\tconst modelAnchor = this.coordinatesConverter.convertViewPositionToModelPosition(viewAnchorPosition);\n\t\tif (this.model.getEOL().length === 2) {\n\t\t\t// This model uses CRLF, so the delta must take that into account\n\t\t\tif (deltaOffset < 0) {\n\t\t\t\tdeltaOffset -= lineFeedCnt;\n\t\t\t} else {\n\t\t\t\tdeltaOffset += lineFeedCnt;\n\t\t\t}\n\t\t}\n\n\t\tconst modelAnchorOffset = this.model.getOffsetAt(modelAnchor);\n\t\tconst resultOffset = modelAnchorOffset + deltaOffset;\n\t\treturn this.model.getPositionAt(resultOffset);\n\t}\n\n\tpublic getPlainTextToCopy(modelRanges: Range[], emptySelectionClipboard: boolean, forceCRLF: boolean): string | string[] {\n\t\tconst newLineCharacter = forceCRLF ? '\\r\\n' : this.model.getEOL();\n\n\t\tmodelRanges = modelRanges.slice(0);\n\t\tmodelRanges.sort(Range.compareRangesUsingStarts);\n\n\t\tlet hasEmptyRange = false;\n\t\tlet hasNonEmptyRange = false;\n\t\tfor (const range of modelRanges) {\n\t\t\tif (range.isEmpty()) {\n\t\t\t\thasEmptyRange = true;\n\t\t\t} else {\n\t\t\t\thasNonEmptyRange = true;\n\t\t\t}\n\t\t}\n\n\t\tif (!hasNonEmptyRange) {\n\t\t\t// all ranges are empty\n\t\t\tif (!emptySelectionClipboard) {\n\t\t\t\treturn '';\n\t\t\t}\n\n\t\t\tconst modelLineNumbers = modelRanges.map((r) => r.startLineNumber);\n\n\t\t\tlet result = '';\n\t\t\tfor (let i = 0; i < modelLineNumbers.length; i++) {\n\t\t\t\tif (i > 0 && modelLineNumbers[i - 1] === modelLineNumbers[i]) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tresult += this.model.getLineContent(modelLineNumbers[i]) + newLineCharacter;\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\n\t\tif (hasEmptyRange && emptySelectionClipboard) {\n\t\t\t// mixed empty selections and non-empty selections\n\t\t\tconst result: string[] = [];\n\t\t\tlet prevModelLineNumber = 0;\n\t\t\tfor (const modelRange of modelRanges) {\n\t\t\t\tconst modelLineNumber = modelRange.startLineNumber;\n\t\t\t\tif (modelRange.isEmpty()) {\n\t\t\t\t\tif (modelLineNumber !== prevModelLineNumber) {\n\t\t\t\t\t\tresult.push(this.model.getLineContent(modelLineNumber));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tresult.push(this.model.getValueInRange(modelRange, forceCRLF ? EndOfLinePreference.CRLF : EndOfLinePreference.TextDefined));\n\t\t\t\t}\n\t\t\t\tprevModelLineNumber = modelLineNumber;\n\t\t\t}\n\t\t\treturn result.length === 1 ? result[0] : result;\n\t\t}\n\n\t\tconst result: string[] = [];\n\t\tfor (const modelRange of modelRanges) {\n\t\t\tif (!modelRange.isEmpty()) {\n\t\t\t\tresult.push(this.model.getValueInRange(modelRange, forceCRLF ? EndOfLinePreference.CRLF : EndOfLinePreference.TextDefined));\n\t\t\t}\n\t\t}\n\t\treturn result.length === 1 ? result[0] : result;\n\t}\n\n\tpublic getRichTextToCopy(modelRanges: Range[], emptySelectionClipboard: boolean): { html: string; mode: string } | null {\n\t\tconst languageId = this.model.getLanguageId();\n\t\tif (languageId === PLAINTEXT_LANGUAGE_ID) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (modelRanges.length !== 1) {\n\t\t\t// no multiple selection support at this time\n\t\t\treturn null;\n\t\t}\n\n\t\tlet range = modelRanges[0];\n\t\tif (range.isEmpty()) {\n\t\t\tif (!emptySelectionClipboard) {\n\t\t\t\t// nothing to copy\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tconst lineNumber = range.startLineNumber;\n\t\t\trange = new Range(lineNumber, this.model.getLineMinColumn(lineNumber), lineNumber, this.model.getLineMaxColumn(lineNumber));\n\t\t}\n\n\t\tconst fontInfo = this._configuration.options.get(EditorOption.fontInfo);\n\t\tconst colorMap = this._getColorMap();\n\t\tconst hasBadChars = (/[:;\\\\\\/<>]/.test(fontInfo.fontFamily));\n\t\tconst useDefaultFontFamily = (hasBadChars || fontInfo.fontFamily === EDITOR_FONT_DEFAULTS.fontFamily);\n\t\tlet fontFamily: string;\n\t\tif (useDefaultFontFamily) {\n\t\t\tfontFamily = EDITOR_FONT_DEFAULTS.fontFamily;\n\t\t} else {\n\t\t\tfontFamily = fontInfo.fontFamily;\n\t\t\tfontFamily = fontFamily.replace(/\"/g, '\\'');\n\t\t\tconst hasQuotesOrIsList = /[,']/.test(fontFamily);\n\t\t\tif (!hasQuotesOrIsList) {\n\t\t\t\tconst needsQuotes = /[+ ]/.test(fontFamily);\n\t\t\t\tif (needsQuotes) {\n\t\t\t\t\tfontFamily = `'${fontFamily}'`;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfontFamily = `${fontFamily}, ${EDITOR_FONT_DEFAULTS.fontFamily}`;\n\t\t}\n\n\t\treturn {\n\t\t\tmode: languageId,\n\t\t\thtml: (\n\t\t\t\t`<div style=\"`\n\t\t\t\t+ `color: ${colorMap[ColorId.DefaultForeground]};`\n\t\t\t\t+ `background-color: ${colorMap[ColorId.DefaultBackground]};`\n\t\t\t\t+ `font-family: ${fontFamily};`\n\t\t\t\t+ `font-weight: ${fontInfo.fontWeight};`\n\t\t\t\t+ `font-size: ${fontInfo.fontSize}px;`\n\t\t\t\t+ `line-height: ${fontInfo.lineHeight}px;`\n\t\t\t\t+ `white-space: pre;`\n\t\t\t\t+ `\">`\n\t\t\t\t+ this._getHTMLToCopy(range, colorMap)\n\t\t\t\t+ '</div>'\n\t\t\t)\n\t\t};\n\t}\n\n\tprivate _getHTMLToCopy(modelRange: Range, colorMap: string[]): string {\n\t\tconst startLineNumber = modelRange.startLineNumber;\n\t\tconst startColumn = modelRange.startColumn;\n\t\tconst endLineNumber = modelRange.endLineNumber;\n\t\tconst endColumn = modelRange.endColumn;\n\n\t\tconst tabSize = this.getTabSize();\n\n\t\tlet result = '';\n\n\t\tfor (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n\t\t\tconst lineTokens = this.model.tokenization.getLineTokens(lineNumber);\n\t\t\tconst lineContent = lineTokens.getLineContent();\n\t\t\tconst startOffset = (lineNumber === startLineNumber ? startColumn - 1 : 0);\n\t\t\tconst endOffset = (lineNumber === endLineNumber ? endColumn - 1 : lineContent.length);\n\n\t\t\tif (lineContent === '') {\n\t\t\t\tresult += '<br>';\n\t\t\t} else {\n\t\t\t\tresult += tokenizeLineToHTML(lineContent, lineTokens.inflate(), colorMap, startOffset, endOffset, tabSize, platform.isWindows);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate _getColorMap(): string[] {\n\t\tconst colorMap = TokenizationRegistry.getColorMap();\n\t\tconst result: string[] = ['#000000'];\n\t\tif (colorMap) {\n\t\t\tfor (let i = 1, len = colorMap.length; i < len; i++) {\n\t\t\t\tresult[i] = Color.Format.CSS.formatHex(colorMap[i]);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\t//#region cursor operations\n\n\tpublic getPrimaryCursorState(): CursorState {\n\t\treturn this._cursor.getPrimaryCursorState();\n\t}\n\tpublic getLastAddedCursorIndex(): number {\n\t\treturn this._cursor.getLastAddedCursorIndex();\n\t}\n\tpublic getCursorStates(): CursorState[] {\n\t\treturn this._cursor.getCursorStates();\n\t}\n\tpublic setCursorStates(source: string | null | undefined, reason: CursorChangeReason, states: PartialCursorState[] | null): boolean {\n\t\treturn this._withViewEventsCollector(eventsCollector => this._cursor.setStates(eventsCollector, source, reason, states));\n\t}\n\tpublic getCursorColumnSelectData(): IColumnSelectData {\n\t\treturn this._cursor.getCursorColumnSelectData();\n\t}\n\tpublic getCursorAutoClosedCharacters(): Range[] {\n\t\treturn this._cursor.getAutoClosedCharacters();\n\t}\n\tpublic setCursorColumnSelectData(columnSelectData: IColumnSelectData): void {\n\t\tthis._cursor.setCursorColumnSelectData(columnSelectData);\n\t}\n\tpublic getPrevEditOperationType(): EditOperationType {\n\t\treturn this._cursor.getPrevEditOperationType();\n\t}\n\tpublic setPrevEditOperationType(type: EditOperationType): void {\n\t\tthis._cursor.setPrevEditOperationType(type);\n\t}\n\tpublic getSelection(): Selection {\n\t\treturn this._cursor.getSelection();\n\t}\n\tpublic getSelections(): Selection[] {\n\t\treturn this._cursor.getSelections();\n\t}\n\tpublic getPosition(): Position {\n\t\treturn this._cursor.getPrimaryCursorState().modelState.position;\n\t}\n\tpublic setSelections(source: string | null | undefined, selections: readonly ISelection[], reason = CursorChangeReason.NotSet): void {\n\t\tthis._withViewEventsCollector(eventsCollector => this._cursor.setSelections(eventsCollector, source, selections, reason));\n\t}\n\tpublic saveCursorState(): ICursorState[] {\n\t\treturn this._cursor.saveState();\n\t}\n\tpublic restoreCursorState(states: ICursorState[]): void {\n\t\tthis._withViewEventsCollector(eventsCollector => this._cursor.restoreState(eventsCollector, states));\n\t}\n\n\tprivate _executeCursorEdit(callback: (eventsCollector: ViewModelEventsCollector) => void): void {\n\t\tif (this._cursor.context.cursorConfig.readOnly) {\n\t\t\t// we cannot edit when read only...\n\t\t\tthis._eventDispatcher.emitOutgoingEvent(new ReadOnlyEditAttemptEvent());\n\t\t\treturn;\n\t\t}\n\t\tthis._withViewEventsCollector(callback);\n\t}\n\tpublic executeEdits(source: string | null | undefined, edits: IIdentifiedSingleEditOperation[], cursorStateComputer: ICursorStateComputer, reason: TextModelEditSource): void {\n\t\tthis._executeCursorEdit(eventsCollector => this._cursor.executeEdits(eventsCollector, source, edits, cursorStateComputer, reason));\n\t}\n\tpublic startComposition(): void {\n\t\tthis._executeCursorEdit(eventsCollector => this._cursor.startComposition(eventsCollector));\n\t}\n\tpublic endComposition(source?: string | null | undefined): void {\n\t\tthis._executeCursorEdit(eventsCollector => this._cursor.endComposition(eventsCollector, source));\n\t}\n\tpublic type(text: string, source?: string | null | undefined): void {\n\t\tthis._executeCursorEdit(eventsCollector => this._cursor.type(eventsCollector, text, source));\n\t}\n\tpublic compositionType(text: string, replacePrevCharCnt: number, replaceNextCharCnt: number, positionDelta: number, source?: string | null | undefined): void {\n\t\tthis._executeCursorEdit(eventsCollector => this._cursor.compositionType(eventsCollector, text, replacePrevCharCnt, replaceNextCharCnt, positionDelta, source));\n\t}\n\tpublic paste(text: string, pasteOnNewLine: boolean, multicursorText?: string[] | null | undefined, source?: string | null | undefined): void {\n\t\tthis._executeCursorEdit(eventsCollector => this._cursor.paste(eventsCollector, text, pasteOnNewLine, multicursorText, source));\n\t}\n\tpublic cut(source?: string | null | undefined): void {\n\t\tthis._executeCursorEdit(eventsCollector => this._cursor.cut(eventsCollector, source));\n\t}\n\tpublic executeCommand(command: ICommand, source?: string | null | undefined): void {\n\t\tthis._executeCursorEdit(eventsCollector => this._cursor.executeCommand(eventsCollector, command, source));\n\t}\n\tpublic executeCommands(commands: ICommand[], source?: string | null | undefined): void {\n\t\tthis._executeCursorEdit(eventsCollector => this._cursor.executeCommands(eventsCollector, commands, source));\n\t}\n\tpublic revealAllCursors(source: string | null | undefined, revealHorizontal: boolean, minimalReveal: boolean = false): void {\n\t\tthis._withViewEventsCollector(eventsCollector => this._cursor.revealAll(eventsCollector, source, minimalReveal, viewEvents.VerticalRevealType.Simple, revealHorizontal, ScrollType.Smooth));\n\t}\n\tpublic revealPrimaryCursor(source: string | null | undefined, revealHorizontal: boolean, minimalReveal: boolean = false): void {\n\t\tthis._withViewEventsCollector(eventsCollector => this._cursor.revealPrimary(eventsCollector, source, minimalReveal, viewEvents.VerticalRevealType.Simple, revealHorizontal, ScrollType.Smooth));\n\t}\n\tpublic revealTopMostCursor(source: string | null | undefined): void {\n\t\tconst viewPosition = this._cursor.getTopMostViewPosition();\n\t\tconst viewRange = new Range(viewPosition.lineNumber, viewPosition.column, viewPosition.lineNumber, viewPosition.column);\n\t\tthis._withViewEventsCollector(eventsCollector => eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source, false, viewRange, null, viewEvents.VerticalRevealType.Simple, true, ScrollType.Smooth)));\n\t}\n\tpublic revealBottomMostCursor(source: string | null | undefined): void {\n\t\tconst viewPosition = this._cursor.getBottomMostViewPosition();\n\t\tconst viewRange = new Range(viewPosition.lineNumber, viewPosition.column, viewPosition.lineNumber, viewPosition.column);\n\t\tthis._withViewEventsCollector(eventsCollector => eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source, false, viewRange, null, viewEvents.VerticalRevealType.Simple, true, ScrollType.Smooth)));\n\t}\n\tpublic revealRange(source: string | null | undefined, revealHorizontal: boolean, viewRange: Range, verticalType: viewEvents.VerticalRevealType, scrollType: ScrollType): void {\n\t\tthis._withViewEventsCollector(eventsCollector => eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source, false, viewRange, null, verticalType, revealHorizontal, scrollType)));\n\t}\n\n\t//#endregion\n\n\t//#region viewLayout\n\tpublic changeWhitespace(callback: (accessor: IWhitespaceChangeAccessor) => void): void {\n\t\tconst hadAChange = this.viewLayout.changeWhitespace(callback);\n\t\tif (hadAChange) {\n\t\t\tthis._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewZonesChangedEvent());\n\t\t\tthis._eventDispatcher.emitOutgoingEvent(new ViewZonesChangedEvent());\n\t\t}\n\t}\n\t//#endregion\n\n\tprivate _withViewEventsCollector<T>(callback: (eventsCollector: ViewModelEventsCollector) => T): T {\n\t\treturn this._transactionalTarget.batchChanges(() => {\n\t\t\ttry {\n\t\t\t\tconst eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n\t\t\t\treturn callback(eventsCollector);\n\t\t\t} finally {\n\t\t\t\tthis._eventDispatcher.endEmitViewEvents();\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic batchEvents(callback: () => void): void {\n\t\tthis._withViewEventsCollector(() => { callback(); });\n\t}\n\n\tnormalizePosition(position: Position, affinity: PositionAffinity): Position {\n\t\treturn this._lines.normalizePosition(position, affinity);\n\t}\n\n\t/**\n\t * Gets the column at which indentation stops at a given line.\n\t * @internal\n\t*/\n\tgetLineIndentColumn(lineNumber: number): number {\n\t\treturn this._lines.getLineIndentColumn(lineNumber);\n\t}\n}\n\nexport interface IBatchableTarget {\n\t/**\n\t * Allows the target to apply the changes introduced by the callback in a batch.\n\t*/\n\tbatchChanges<T>(cb: () => T): T;\n}\n\nclass ViewportStart implements IDisposable {\n\n\tpublic static create(model: ITextModel): ViewportStart {\n\t\tconst viewportStartLineTrackedRange = model._setTrackedRange(null, new Range(1, 1, 1, 1), TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges);\n\t\treturn new ViewportStart(model, 1, false, viewportStartLineTrackedRange, 0);\n\t}\n\n\tpublic get viewLineNumber(): number {\n\t\treturn this._viewLineNumber;\n\t}\n\n\tpublic get isValid(): boolean {\n\t\treturn this._isValid;\n\t}\n\n\tpublic get modelTrackedRange(): string {\n\t\treturn this._modelTrackedRange;\n\t}\n\n\tpublic get startLineDelta(): number {\n\t\treturn this._startLineDelta;\n\t}\n\n\tprivate constructor(\n\t\tprivate readonly _model: ITextModel,\n\t\tprivate _viewLineNumber: number,\n\t\tprivate _isValid: boolean,\n\t\tprivate _modelTrackedRange: string,\n\t\tprivate _startLineDelta: number,\n\t) { }\n\n\tpublic dispose(): void {\n\t\tthis._model._setTrackedRange(this._modelTrackedRange, null, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges);\n\t}\n\n\tpublic update(viewModel: IViewModel, startLineNumber: number): void {\n\t\tconst position = viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(startLineNumber, viewModel.getLineMinColumn(startLineNumber)));\n\t\tconst viewportStartLineTrackedRange = viewModel.model._setTrackedRange(this._modelTrackedRange, new Range(position.lineNumber, position.column, position.lineNumber, position.column), TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges);\n\t\tconst viewportStartLineTop = viewModel.viewLayout.getVerticalOffsetForLineNumber(startLineNumber);\n\t\tconst scrollTop = viewModel.viewLayout.getCurrentScrollTop();\n\n\t\tthis._viewLineNumber = startLineNumber;\n\t\tthis._isValid = true;\n\t\tthis._modelTrackedRange = viewportStartLineTrackedRange;\n\t\tthis._startLineDelta = scrollTop - viewportStartLineTop;\n\t}\n\n\tpublic invalidate(): void {\n\t\tthis._isValid = false;\n\t}\n}\n\nclass OverviewRulerDecorations {\n\n\tprivate readonly _asMap: { [color: string]: OverviewRulerDecorationsGroup } = Object.create(null);\n\treadonly asArray: OverviewRulerDecorationsGroup[] = [];\n\n\tpublic accept(color: string, zIndex: number, startLineNumber: number, endLineNumber: number, lane: number): void {\n\t\tconst prevGroup = this._asMap[color];\n\n\t\tif (prevGroup) {\n\t\t\tconst prevData = prevGroup.data;\n\t\t\tconst prevLane = prevData[prevData.length - 3];\n\t\t\tconst prevEndLineNumber = prevData[prevData.length - 1];\n\t\t\tif (prevLane === lane && prevEndLineNumber + 1 >= startLineNumber) {\n\t\t\t\t// merge into prev\n\t\t\t\tif (endLineNumber > prevEndLineNumber) {\n\t\t\t\t\tprevData[prevData.length - 1] = endLineNumber;\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// push\n\t\t\tprevData.push(lane, startLineNumber, endLineNumber);\n\t\t} else {\n\t\t\tconst group = new OverviewRulerDecorationsGroup(color, zIndex, [lane, startLineNumber, endLineNumber]);\n\t\t\tthis._asMap[color] = group;\n\t\t\tthis.asArray.push(group);\n\t\t}\n\t}\n}\n\nclass HiddenAreasModel {\n\tprivate readonly hiddenAreas = new Map<unknown, Range[]>();\n\tprivate shouldRecompute = false;\n\tprivate ranges: Range[] = [];\n\n\tsetHiddenAreas(source: unknown, ranges: Range[]): void {\n\t\tconst existing = this.hiddenAreas.get(source);\n\t\tif (existing && rangeArraysEqual(existing, ranges)) {\n\t\t\treturn;\n\t\t}\n\t\tthis.hiddenAreas.set(source, ranges);\n\t\tthis.shouldRecompute = true;\n\t}\n\n\t/**\n\t * The returned array is immutable.\n\t*/\n\tgetMergedRanges(): readonly Range[] {\n\t\tif (!this.shouldRecompute) {\n\t\t\treturn this.ranges;\n\t\t}\n\t\tthis.shouldRecompute = false;\n\t\tconst newRanges = Array.from(this.hiddenAreas.values()).reduce((r, hiddenAreas) => mergeLineRangeArray(r, hiddenAreas), []);\n\t\tif (rangeArraysEqual(this.ranges, newRanges)) {\n\t\t\treturn this.ranges;\n\t\t}\n\t\tthis.ranges = newRanges;\n\t\treturn this.ranges;\n\t}\n}\n\nfunction mergeLineRangeArray(arr1: Range[], arr2: Range[]): Range[] {\n\tconst result: Range[] = [];\n\tlet i = 0;\n\tlet j = 0;\n\twhile (i < arr1.length && j < arr2.length) {\n\t\tconst item1 = arr1[i];\n\t\tconst item2 = arr2[j];\n\n\t\tif (item1.endLineNumber < item2.startLineNumber - 1) {\n\t\t\tresult.push(arr1[i++]);\n\t\t} else if (item2.endLineNumber < item1.startLineNumber - 1) {\n\t\t\tresult.push(arr2[j++]);\n\t\t} else {\n\t\t\tconst startLineNumber = Math.min(item1.startLineNumber, item2.startLineNumber);\n\t\t\tconst endLineNumber = Math.max(item1.endLineNumber, item2.endLineNumber);\n\t\t\tresult.push(new Range(startLineNumber, 1, endLineNumber, 1));\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t}\n\twhile (i < arr1.length) {\n\t\tresult.push(arr1[i++]);\n\t}\n\twhile (j < arr2.length) {\n\t\tresult.push(arr2[j++]);\n\t}\n\treturn result;\n}\n\nfunction rangeArraysEqual(arr1: Range[], arr2: Range[]): boolean {\n\tif (arr1.length !== arr2.length) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i < arr1.length; i++) {\n\t\tif (!arr1[i].equalsRange(arr2[i])) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n/**\n * Maintain a stable viewport by trying to keep the first line in the viewport constant.\n */\nclass StableViewport {\n\tconstructor(\n\t\tpublic readonly viewportStartModelPosition: Position | null,\n\t\tpublic readonly startLineDelta: number\n\t) { }\n\n\tpublic recoverViewportStart(coordinatesConverter: ICoordinatesConverter, viewLayout: ViewLayout): void {\n\t\tif (!this.viewportStartModelPosition) {\n\t\t\treturn;\n\t\t}\n\t\tconst viewPosition = coordinatesConverter.convertModelPositionToViewPosition(this.viewportStartModelPosition);\n\t\tconst viewPositionTop = viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n\t\tviewLayout.setScrollPosition({ scrollTop: viewPositionTop + this.startLineDelta }, ScrollType.Immediate);\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ArrayQueue } from '../../../base/common/arrays.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Color } from '../../../base/common/color.js';\nimport { Event } from '../../../base/common/event.js';\nimport { Disposable, IDisposable } from '../../../base/common/lifecycle.js';\nimport * as platform from '../../../base/common/platform.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { ConfigurationChangedEvent, EditorOption, EDITOR_FONT_DEFAULTS, filterValidationDecorations, filterFontDecorations } from '../config/editorOptions.js';\nimport { CursorsController } from '../cursor/cursor.js';\nimport { CursorConfiguration, CursorState, EditOperationType, IColumnSelectData, PartialCursorState } from '../cursorCommon.js';\nimport { CursorChangeReason } from '../cursorEvents.js';\nimport { IPosition, Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { ISelection, Selection } from '../core/selection.js';\nimport { ICommand, ICursorState, IViewState, ScrollType } from '../editorCommon.js';\nimport { IEditorConfiguration } from '../config/editorConfiguration.js';\nimport { EndOfLinePreference, IAttachedView, ICursorStateComputer, IGlyphMarginLanesModel, IIdentifiedSingleEditOperation, ITextModel, PositionAffinity, TextDirection, TrackedRangeStickiness } from '../model.js';\nimport { IActiveIndentGuideInfo, BracketGuideOptions, IndentGuide } from '../textModelGuides.js';\nimport { ModelDecorationMinimapOptions, ModelDecorationOptions, ModelDecorationOverviewRulerOptions } from '../model/textModel.js';\nimport * as textModelEvents from '../textModelEvents.js';\nimport { TokenizationRegistry } from '../languages.js';\nimport { ColorId } from '../encodedTokenAttributes.js';\nimport { ILanguageConfigurationService } from '../languages/languageConfigurationRegistry.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { tokenizeLineToHTML } from '../languages/textToHtmlTokenizer.js';\nimport { EditorTheme } from '../editorTheme.js';\nimport * as viewEvents from '../viewEvents.js';\nimport { ViewLayout } from '../viewLayout/viewLayout.js';\nimport { MinimapTokensColorTracker } from './minimapTokensColorTracker.js';\nimport { ILineBreaksComputer, ILineBreaksComputerFactory, InjectedText } from '../modelLineProjectionData.js';\nimport { ViewEventHandler } from '../viewEventHandler.js';\nimport { ILineHeightChangeAccessor, IViewModel, IWhitespaceChangeAccessor, MinimapLinesRenderingData, OverviewRulerDecorationsGroup, ViewLineData, ViewLineRenderingData, ViewModelDecoration } from '../viewModel.js';\nimport { ViewModelDecorations } from './viewModelDecorations.js';\nimport { FocusChangedEvent, HiddenAreasChangedEvent, ModelContentChangedEvent, ModelDecorationsChangedEvent, ModelFontChangedEvent, ModelLanguageChangedEvent, ModelLanguageConfigurationChangedEvent, ModelLineHeightChangedEvent, ModelOptionsChangedEvent, ModelTokensChangedEvent, OutgoingViewModelEvent, ReadOnlyEditAttemptEvent, ScrollChangedEvent, ViewModelEventDispatcher, ViewModelEventsCollector, ViewZonesChangedEvent, WidgetFocusChangedEvent } from '../viewModelEventDispatcher.js';\nimport { IViewModelLines, ViewModelLinesFromModelAsIs, ViewModelLinesFromProjectedModel } from './viewModelLines.js';\nimport { IThemeService } from '../../../platform/theme/common/themeService.js';\nimport { GlyphMarginLanesModel } from './glyphLanesModel.js';\nimport { ICustomLineHeightData } from '../viewLayout/lineHeights.js';\nimport { TextModelEditSource } from '../textModelEditSource.js';\nimport { InlineDecoration } from './inlineDecorations.js';\nimport { ICoordinatesConverter } from '../coordinatesConverter.js';\n\nconst USE_IDENTITY_LINES_COLLECTION = true;\n\nexport class ViewModel extends Disposable implements IViewModel {\n\n\tprivate readonly _editorId: number;\n\tprivate readonly _configuration: IEditorConfiguration;\n\tpublic readonly model: ITextModel;\n\tprivate readonly _eventDispatcher: ViewModelEventDispatcher;\n\tpublic readonly onEvent: Event<OutgoingViewModelEvent>;\n\tpublic cursorConfig: CursorConfiguration;\n\tprivate readonly _updateConfigurationViewLineCount: RunOnceScheduler;\n\tprivate _hasFocus: boolean;\n\tprivate readonly _viewportStart: ViewportStart;\n\tprivate readonly _lines: IViewModelLines;\n\tpublic readonly coordinatesConverter: ICoordinatesConverter;\n\tpublic readonly viewLayout: ViewLayout;\n\tprivate readonly _cursor: CursorsController;\n\tprivate readonly _decorations: ViewModelDecorations;\n\tpublic readonly glyphLanes: IGlyphMarginLanesModel;\n\n\tconstructor(\n\t\teditorId: number,\n\t\tconfiguration: IEditorConfiguration,\n\t\tmodel: ITextModel,\n\t\tdomLineBreaksComputerFactory: ILineBreaksComputerFactory,\n\t\tmonospaceLineBreaksComputerFactory: ILineBreaksComputerFactory,\n\t\tscheduleAtNextAnimationFrame: (callback: () => void) => IDisposable,\n\t\tprivate readonly languageConfigurationService: ILanguageConfigurationService,\n\t\tprivate readonly _themeService: IThemeService,\n\t\tprivate readonly _attachedView: IAttachedView,\n\t\tprivate readonly _transactionalTarget: IBatchableTarget,\n\t) {\n\t\tsuper();\n\n\t\tthis._editorId = editorId;\n\t\tthis._configuration = configuration;\n\t\tthis.model = model;\n\t\tthis._eventDispatcher = new ViewModelEventDispatcher();\n\t\tthis.onEvent = this._eventDispatcher.onEvent;\n\t\tthis.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n\t\tthis._updateConfigurationViewLineCount = this._register(new RunOnceScheduler(() => this._updateConfigurationViewLineCountNow(), 0));\n\t\tthis._hasFocus = false;\n\t\tthis._viewportStart = ViewportStart.create(this.model);\n\t\tthis.glyphLanes = new GlyphMarginLanesModel(0);\n\n\t\tif (USE_IDENTITY_LINES_COLLECTION && this.model.isTooLargeForTokenization()) {\n\n\t\t\tthis._lines = new ViewModelLinesFromModelAsIs(this.model);\n\n\t\t} else {\n\t\t\tconst options = this._configuration.options;\n\t\t\tconst fontInfo = options.get(EditorOption.fontInfo);\n\t\t\tconst wrappingStrategy = options.get(EditorOption.wrappingStrategy);\n\t\t\tconst wrappingInfo = options.get(EditorOption.wrappingInfo);\n\t\t\tconst wrappingIndent = options.get(EditorOption.wrappingIndent);\n\t\t\tconst wordBreak = options.get(EditorOption.wordBreak);\n\t\t\tconst wrapOnEscapedLineFeeds = options.get(EditorOption.wrapOnEscapedLineFeeds);\n\n\t\t\tthis._lines = new ViewModelLinesFromProjectedModel(\n\t\t\t\tthis._editorId,\n\t\t\t\tthis.model,\n\t\t\t\tdomLineBreaksComputerFactory,\n\t\t\t\tmonospaceLineBreaksComputerFactory,\n\t\t\t\tfontInfo,\n\t\t\t\tthis.model.getOptions().tabSize,\n\t\t\t\twrappingStrategy,\n\t\t\t\twrappingInfo.wrappingColumn,\n\t\t\t\twrappingIndent,\n\t\t\t\twordBreak,\n\t\t\t\twrapOnEscapedLineFeeds\n\t\t\t);\n\t\t}\n\n\t\tthis.coordinatesConverter = this._lines.createCoordinatesConverter();\n\n\t\tthis._cursor = this._register(new CursorsController(model, this, this.coordinatesConverter, this.cursorConfig));\n\n\t\tthis.viewLayout = this._register(new ViewLayout(this._configuration, this.getLineCount(), this._getCustomLineHeights(), scheduleAtNextAnimationFrame));\n\n\t\tthis._register(this.viewLayout.onDidScroll((e) => {\n\t\t\tif (e.scrollTopChanged) {\n\t\t\t\tthis._handleVisibleLinesChanged();\n\t\t\t}\n\t\t\tif (e.scrollTopChanged) {\n\t\t\t\tthis._viewportStart.invalidate();\n\t\t\t}\n\t\t\tthis._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewScrollChangedEvent(e));\n\t\t\tthis._eventDispatcher.emitOutgoingEvent(new ScrollChangedEvent(\n\t\t\t\te.oldScrollWidth, e.oldScrollLeft, e.oldScrollHeight, e.oldScrollTop,\n\t\t\t\te.scrollWidth, e.scrollLeft, e.scrollHeight, e.scrollTop\n\t\t\t));\n\t\t}));\n\n\t\tthis._register(this.viewLayout.onDidContentSizeChange((e) => {\n\t\t\tthis._eventDispatcher.emitOutgoingEvent(e);\n\t\t}));\n\n\t\tthis._decorations = new ViewModelDecorations(this._editorId, this.model, this._configuration, this._lines, this.coordinatesConverter);\n\n\t\tthis._registerModelEvents();\n\n\t\tthis._register(this._configuration.onDidChangeFast((e) => {\n\t\t\ttry {\n\t\t\t\tconst eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n\t\t\t\tthis._onConfigurationChanged(eventsCollector, e);\n\t\t\t} finally {\n\t\t\t\tthis._eventDispatcher.endEmitViewEvents();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(MinimapTokensColorTracker.getInstance().onDidChange(() => {\n\t\t\tthis._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewTokensColorsChangedEvent());\n\t\t}));\n\n\t\tthis._register(this._themeService.onDidColorThemeChange((theme) => {\n\t\t\tthis._invalidateDecorationsColorCache();\n\t\t\tthis._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewThemeChangedEvent(theme));\n\t\t}));\n\n\t\tthis._updateConfigurationViewLineCountNow();\n\t}\n\n\tpublic override dispose(): void {\n\t\t// First remove listeners, as disposing the lines might end up sending\n\t\t// model decoration changed events ... and we no longer care about them ...\n\t\tsuper.dispose();\n\t\tthis._decorations.dispose();\n\t\tthis._lines.dispose();\n\t\tthis._viewportStart.dispose();\n\t\tthis._eventDispatcher.dispose();\n\t}\n\n\tpublic createLineBreaksComputer(): ILineBreaksComputer {\n\t\treturn this._lines.createLineBreaksComputer();\n\t}\n\n\tpublic addViewEventHandler(eventHandler: ViewEventHandler): void {\n\t\tthis._eventDispatcher.addViewEventHandler(eventHandler);\n\t}\n\n\tpublic removeViewEventHandler(eventHandler: ViewEventHandler): void {\n\t\tthis._eventDispatcher.removeViewEventHandler(eventHandler);\n\t}\n\n\tprivate _getCustomLineHeights(): ICustomLineHeightData[] {\n\t\tconst allowVariableLineHeights = this._configuration.options.get(EditorOption.allowVariableLineHeights);\n\t\tif (!allowVariableLineHeights) {\n\t\t\treturn [];\n\t\t}\n\t\tconst decorations = this.model.getCustomLineHeightsDecorations(this._editorId);\n\t\treturn decorations.map((d) => {\n\t\t\tconst lineNumber = d.range.startLineNumber;\n\t\t\tconst viewRange = this.coordinatesConverter.convertModelRangeToViewRange(new Range(lineNumber, 1, lineNumber, this.model.getLineMaxColumn(lineNumber)));\n\t\t\treturn {\n\t\t\t\tdecorationId: d.id,\n\t\t\t\tstartLineNumber: viewRange.startLineNumber,\n\t\t\t\tendLineNumber: viewRange.endLineNumber,\n\t\t\t\tlineHeight: d.options.lineHeight || 0\n\t\t\t};\n\t\t});\n\t}\n\n\tprivate _updateConfigurationViewLineCountNow(): void {\n\t\tthis._configuration.setViewLineCount(this._lines.getViewLineCount());\n\t}\n\n\tprivate getModelVisibleRanges(): Range[] {\n\t\tconst linesViewportData = this.viewLayout.getLinesViewportData();\n\t\tconst viewVisibleRange = new Range(\n\t\t\tlinesViewportData.startLineNumber,\n\t\t\tthis.getLineMinColumn(linesViewportData.startLineNumber),\n\t\t\tlinesViewportData.endLineNumber,\n\t\t\tthis.getLineMaxColumn(linesViewportData.endLineNumber)\n\t\t);\n\t\tconst modelVisibleRanges = this._toModelVisibleRanges(viewVisibleRange);\n\t\treturn modelVisibleRanges;\n\t}\n\n\tpublic visibleLinesStabilized(): void {\n\t\tconst modelVisibleRanges = this.getModelVisibleRanges();\n\t\tthis._attachedView.setVisibleLines(modelVisibleRanges, true);\n\t}\n\n\tprivate _handleVisibleLinesChanged(): void {\n\t\tconst modelVisibleRanges = this.getModelVisibleRanges();\n\t\tthis._attachedView.setVisibleLines(modelVisibleRanges, false);\n\t}\n\n\tpublic setHasFocus(hasFocus: boolean): void {\n\t\tthis._hasFocus = hasFocus;\n\t\tthis._cursor.setHasFocus(hasFocus);\n\t\tthis._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewFocusChangedEvent(hasFocus));\n\t\tthis._eventDispatcher.emitOutgoingEvent(new FocusChangedEvent(!hasFocus, hasFocus));\n\t}\n\n\tpublic setHasWidgetFocus(hasWidgetFocus: boolean): void {\n\t\tthis._eventDispatcher.emitOutgoingEvent(new WidgetFocusChangedEvent(!hasWidgetFocus, hasWidgetFocus));\n\t}\n\n\tpublic onCompositionStart(): void {\n\t\tthis._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewCompositionStartEvent());\n\t}\n\n\tpublic onCompositionEnd(): void {\n\t\tthis._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewCompositionEndEvent());\n\t}\n\n\tprivate _captureStableViewport(): StableViewport {\n\t\t// We might need to restore the current start view range, so save it (if available)\n\t\t// But only if the scroll position is not at the top of the file\n\t\tif (this._viewportStart.isValid && this.viewLayout.getCurrentScrollTop() > 0) {\n\t\t\tconst previousViewportStartViewPosition = new Position(this._viewportStart.viewLineNumber, this.getLineMinColumn(this._viewportStart.viewLineNumber));\n\t\t\tconst previousViewportStartModelPosition = this.coordinatesConverter.convertViewPositionToModelPosition(previousViewportStartViewPosition);\n\t\t\treturn new StableViewport(previousViewportStartModelPosition, this._viewportStart.startLineDelta);\n\t\t}\n\t\treturn new StableViewport(null, 0);\n\t}\n\n\tprivate _onConfigurationChanged(eventsCollector: ViewModelEventsCollector, e: ConfigurationChangedEvent): void {\n\t\tconst stableViewport = this._captureStableViewport();\n\t\tconst options = this._configuration.options;\n\t\tconst fontInfo = options.get(EditorOption.fontInfo);\n\t\tconst wrappingStrategy = options.get(EditorOption.wrappingStrategy);\n\t\tconst wrappingInfo = options.get(EditorOption.wrappingInfo);\n\t\tconst wrappingIndent = options.get(EditorOption.wrappingIndent);\n\t\tconst wordBreak = options.get(EditorOption.wordBreak);\n\n\t\tif (this._lines.setWrappingSettings(fontInfo, wrappingStrategy, wrappingInfo.wrappingColumn, wrappingIndent, wordBreak)) {\n\t\t\teventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n\t\t\teventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n\t\t\teventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n\t\t\tthis._cursor.onLineMappingChanged(eventsCollector);\n\t\t\tthis._decorations.onLineMappingChanged();\n\t\t\tthis.viewLayout.onFlushed(this.getLineCount(), this._getCustomLineHeights());\n\n\t\t\tthis._updateConfigurationViewLineCount.schedule();\n\t\t}\n\n\t\tif (e.hasChanged(EditorOption.readOnly)) {\n\t\t\t// Must read again all decorations due to readOnly filtering\n\t\t\tthis._decorations.reset();\n\t\t\teventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n\t\t}\n\n\t\tif (e.hasChanged(EditorOption.renderValidationDecorations)) {\n\t\t\tthis._decorations.reset();\n\t\t\teventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n\t\t}\n\n\t\teventsCollector.emitViewEvent(new viewEvents.ViewConfigurationChangedEvent(e));\n\t\tthis.viewLayout.onConfigurationChanged(e);\n\n\t\tstableViewport.recoverViewportStart(this.coordinatesConverter, this.viewLayout);\n\n\t\tif (CursorConfiguration.shouldRecreate(e)) {\n\t\t\tthis.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n\t\t\tthis._cursor.updateConfiguration(this.cursorConfig);\n\t\t}\n\t}\n\n\tprivate _registerModelEvents(): void {\n\n\t\tthis._register(this.model.onDidChangeContentOrInjectedText((e) => {\n\t\t\ttry {\n\t\t\t\tconst eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n\n\t\t\t\tlet hadOtherModelChange = false;\n\t\t\t\tlet hadModelLineChangeThatChangedLineMapping = false;\n\n\t\t\t\tconst changes = (e instanceof textModelEvents.InternalModelContentChangeEvent ? e.rawContentChangedEvent.changes : e.changes);\n\t\t\t\tconst versionId = (e instanceof textModelEvents.InternalModelContentChangeEvent ? e.rawContentChangedEvent.versionId : null);\n\n\t\t\t\t// Do a first pass to compute line mappings, and a second pass to actually interpret them\n\t\t\t\tconst lineBreaksComputer = this._lines.createLineBreaksComputer();\n\t\t\t\tfor (const change of changes) {\n\t\t\t\t\tswitch (change.changeType) {\n\t\t\t\t\t\tcase textModelEvents.RawContentChangedType.LinesInserted: {\n\t\t\t\t\t\t\tfor (let lineIdx = 0; lineIdx < change.detail.length; lineIdx++) {\n\t\t\t\t\t\t\t\tconst line = change.detail[lineIdx];\n\t\t\t\t\t\t\t\tlet injectedText = change.injectedTexts[lineIdx];\n\t\t\t\t\t\t\t\tif (injectedText) {\n\t\t\t\t\t\t\t\t\tinjectedText = injectedText.filter(element => (!element.ownerId || element.ownerId === this._editorId));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tlineBreaksComputer.addRequest(line, injectedText, null);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase textModelEvents.RawContentChangedType.LineChanged: {\n\t\t\t\t\t\t\tlet injectedText: textModelEvents.LineInjectedText[] | null = null;\n\t\t\t\t\t\t\tif (change.injectedText) {\n\t\t\t\t\t\t\t\tinjectedText = change.injectedText.filter(element => (!element.ownerId || element.ownerId === this._editorId));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlineBreaksComputer.addRequest(change.detail, injectedText, null);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst lineBreaks = lineBreaksComputer.finalize();\n\t\t\t\tconst lineBreakQueue = new ArrayQueue(lineBreaks);\n\n\t\t\t\tfor (const change of changes) {\n\t\t\t\t\tswitch (change.changeType) {\n\t\t\t\t\t\tcase textModelEvents.RawContentChangedType.Flush: {\n\t\t\t\t\t\t\tthis._lines.onModelFlushed();\n\t\t\t\t\t\t\teventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n\t\t\t\t\t\t\tthis._decorations.reset();\n\t\t\t\t\t\t\tthis.viewLayout.onFlushed(this.getLineCount(), this._getCustomLineHeights());\n\t\t\t\t\t\t\thadOtherModelChange = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase textModelEvents.RawContentChangedType.LinesDeleted: {\n\t\t\t\t\t\t\tconst linesDeletedEvent = this._lines.onModelLinesDeleted(versionId, change.fromLineNumber, change.toLineNumber);\n\t\t\t\t\t\t\tif (linesDeletedEvent !== null) {\n\t\t\t\t\t\t\t\teventsCollector.emitViewEvent(linesDeletedEvent);\n\t\t\t\t\t\t\t\tthis.viewLayout.onLinesDeleted(linesDeletedEvent.fromLineNumber, linesDeletedEvent.toLineNumber);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\thadOtherModelChange = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase textModelEvents.RawContentChangedType.LinesInserted: {\n\t\t\t\t\t\t\tconst insertedLineBreaks = lineBreakQueue.takeCount(change.detail.length);\n\t\t\t\t\t\t\tconst linesInsertedEvent = this._lines.onModelLinesInserted(versionId, change.fromLineNumber, change.toLineNumber, insertedLineBreaks);\n\t\t\t\t\t\t\tif (linesInsertedEvent !== null) {\n\t\t\t\t\t\t\t\teventsCollector.emitViewEvent(linesInsertedEvent);\n\t\t\t\t\t\t\t\tthis.viewLayout.onLinesInserted(linesInsertedEvent.fromLineNumber, linesInsertedEvent.toLineNumber);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\thadOtherModelChange = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase textModelEvents.RawContentChangedType.LineChanged: {\n\t\t\t\t\t\t\tconst changedLineBreakData = lineBreakQueue.dequeue()!;\n\t\t\t\t\t\t\tconst [lineMappingChanged, linesChangedEvent, linesInsertedEvent, linesDeletedEvent] =\n\t\t\t\t\t\t\t\tthis._lines.onModelLineChanged(versionId, change.lineNumber, changedLineBreakData);\n\t\t\t\t\t\t\thadModelLineChangeThatChangedLineMapping = lineMappingChanged;\n\t\t\t\t\t\t\tif (linesChangedEvent) {\n\t\t\t\t\t\t\t\teventsCollector.emitViewEvent(linesChangedEvent);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (linesInsertedEvent) {\n\t\t\t\t\t\t\t\teventsCollector.emitViewEvent(linesInsertedEvent);\n\t\t\t\t\t\t\t\tthis.viewLayout.onLinesInserted(linesInsertedEvent.fromLineNumber, linesInsertedEvent.toLineNumber);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (linesDeletedEvent) {\n\t\t\t\t\t\t\t\teventsCollector.emitViewEvent(linesDeletedEvent);\n\t\t\t\t\t\t\t\tthis.viewLayout.onLinesDeleted(linesDeletedEvent.fromLineNumber, linesDeletedEvent.toLineNumber);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase textModelEvents.RawContentChangedType.EOLChanged: {\n\t\t\t\t\t\t\t// Nothing to do. The new version will be accepted below\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (versionId !== null) {\n\t\t\t\t\tthis._lines.acceptVersionId(versionId);\n\t\t\t\t}\n\t\t\t\tthis.viewLayout.onHeightMaybeChanged();\n\n\t\t\t\tif (!hadOtherModelChange && hadModelLineChangeThatChangedLineMapping) {\n\t\t\t\t\teventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n\t\t\t\t\teventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n\t\t\t\t\tthis._cursor.onLineMappingChanged(eventsCollector);\n\t\t\t\t\tthis._decorations.onLineMappingChanged();\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tthis._eventDispatcher.endEmitViewEvents();\n\t\t\t}\n\n\t\t\t// Update the configuration and reset the centered view line\n\t\t\tconst viewportStartWasValid = this._viewportStart.isValid;\n\t\t\tthis._viewportStart.invalidate();\n\t\t\tthis._configuration.setModelLineCount(this.model.getLineCount());\n\t\t\tthis._updateConfigurationViewLineCountNow();\n\n\t\t\t// Recover viewport\n\t\t\tif (!this._hasFocus && this.model.getAttachedEditorCount() >= 2 && viewportStartWasValid) {\n\t\t\t\tconst modelRange = this.model._getTrackedRange(this._viewportStart.modelTrackedRange);\n\t\t\t\tif (modelRange) {\n\t\t\t\t\tconst viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(modelRange.getStartPosition());\n\t\t\t\t\tconst viewPositionTop = this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n\t\t\t\t\tthis.viewLayout.setScrollPosition({ scrollTop: viewPositionTop + this._viewportStart.startLineDelta }, ScrollType.Immediate);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tconst eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n\t\t\t\tif (e instanceof textModelEvents.InternalModelContentChangeEvent) {\n\t\t\t\t\teventsCollector.emitOutgoingEvent(new ModelContentChangedEvent(e.contentChangedEvent));\n\t\t\t\t}\n\t\t\t\tthis._cursor.onModelContentChanged(eventsCollector, e);\n\t\t\t} finally {\n\t\t\t\tthis._eventDispatcher.endEmitViewEvents();\n\t\t\t}\n\n\t\t\tthis._handleVisibleLinesChanged();\n\t\t}));\n\n\t\tconst allowVariableLineHeights = this._configuration.options.get(EditorOption.allowVariableLineHeights);\n\t\tif (allowVariableLineHeights) {\n\t\t\tthis._register(this.model.onDidChangeLineHeight((e) => {\n\t\t\t\tconst filteredChanges = e.changes.filter((change) => change.ownerId === this._editorId || change.ownerId === 0);\n\n\t\t\t\tthis.viewLayout.changeSpecialLineHeights((accessor: ILineHeightChangeAccessor) => {\n\t\t\t\t\tfor (const change of filteredChanges) {\n\t\t\t\t\t\tconst { decorationId, lineNumber, lineHeight } = change;\n\t\t\t\t\t\tconst viewRange = this.coordinatesConverter.convertModelRangeToViewRange(new Range(lineNumber, 1, lineNumber, this.model.getLineMaxColumn(lineNumber)));\n\t\t\t\t\t\tif (lineHeight !== null) {\n\t\t\t\t\t\t\taccessor.insertOrChangeCustomLineHeight(decorationId, viewRange.startLineNumber, viewRange.endLineNumber, lineHeight);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\taccessor.removeCustomLineHeight(decorationId);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// recreate the model event using the filtered changes\n\t\t\t\tif (filteredChanges.length > 0) {\n\t\t\t\t\tconst filteredEvent = new textModelEvents.ModelLineHeightChangedEvent(filteredChanges);\n\t\t\t\t\tthis._eventDispatcher.emitOutgoingEvent(new ModelLineHeightChangedEvent(filteredEvent));\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\n\t\tconst allowVariableFonts = this._configuration.options.get(EditorOption.effectiveAllowVariableFonts);\n\t\tif (allowVariableFonts) {\n\t\t\tthis._register(this.model.onDidChangeFont((e) => {\n\t\t\t\tconst filteredChanges = e.changes.filter((change) => change.ownerId === this._editorId || change.ownerId === 0);\n\t\t\t\t// recreate the model event using the filtered changes\n\t\t\t\tif (filteredChanges.length > 0) {\n\t\t\t\t\tconst filteredEvent = new textModelEvents.ModelFontChangedEvent(filteredChanges);\n\t\t\t\t\tthis._eventDispatcher.emitOutgoingEvent(new ModelFontChangedEvent(filteredEvent));\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\n\t\tthis._register(this.model.onDidChangeTokens((e) => {\n\t\t\tconst viewRanges: { fromLineNumber: number; toLineNumber: number }[] = [];\n\t\t\tfor (let j = 0, lenJ = e.ranges.length; j < lenJ; j++) {\n\t\t\t\tconst modelRange = e.ranges[j];\n\t\t\t\tconst viewStartLineNumber = this.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.fromLineNumber, 1)).lineNumber;\n\t\t\t\tconst viewEndLineNumber = this.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.toLineNumber, this.model.getLineMaxColumn(modelRange.toLineNumber))).lineNumber;\n\t\t\t\tviewRanges[j] = {\n\t\t\t\t\tfromLineNumber: viewStartLineNumber,\n\t\t\t\t\ttoLineNumber: viewEndLineNumber\n\t\t\t\t};\n\t\t\t}\n\t\t\tthis._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewTokensChangedEvent(viewRanges));\n\t\t\tthis._eventDispatcher.emitOutgoingEvent(new ModelTokensChangedEvent(e));\n\t\t}));\n\n\t\tthis._register(this.model.onDidChangeLanguageConfiguration((e) => {\n\t\t\tthis._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewLanguageConfigurationEvent());\n\t\t\tthis.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n\t\t\tthis._cursor.updateConfiguration(this.cursorConfig);\n\t\t\tthis._eventDispatcher.emitOutgoingEvent(new ModelLanguageConfigurationChangedEvent(e));\n\t\t}));\n\n\t\tthis._register(this.model.onDidChangeLanguage((e) => {\n\t\t\tthis.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n\t\t\tthis._cursor.updateConfiguration(this.cursorConfig);\n\t\t\tthis._eventDispatcher.emitOutgoingEvent(new ModelLanguageChangedEvent(e));\n\t\t}));\n\n\t\tthis._register(this.model.onDidChangeOptions((e) => {\n\t\t\t// A tab size change causes a line mapping changed event => all view parts will repaint OK, no further event needed here\n\t\t\tif (this._lines.setTabSize(this.model.getOptions().tabSize)) {\n\t\t\t\ttry {\n\t\t\t\t\tconst eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n\t\t\t\t\teventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n\t\t\t\t\teventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n\t\t\t\t\teventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n\t\t\t\t\tthis._cursor.onLineMappingChanged(eventsCollector);\n\t\t\t\t\tthis._decorations.onLineMappingChanged();\n\t\t\t\t\tthis.viewLayout.onFlushed(this.getLineCount(), this._getCustomLineHeights());\n\t\t\t\t} finally {\n\t\t\t\t\tthis._eventDispatcher.endEmitViewEvents();\n\t\t\t\t}\n\t\t\t\tthis._updateConfigurationViewLineCount.schedule();\n\t\t\t}\n\n\t\t\tthis.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n\t\t\tthis._cursor.updateConfiguration(this.cursorConfig);\n\n\t\t\tthis._eventDispatcher.emitOutgoingEvent(new ModelOptionsChangedEvent(e));\n\t\t}));\n\n\t\tthis._register(this.model.onDidChangeDecorations((e) => {\n\t\t\tthis._decorations.onModelDecorationsChanged();\n\t\t\tthis._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewDecorationsChangedEvent(e));\n\t\t\tthis._eventDispatcher.emitOutgoingEvent(new ModelDecorationsChangedEvent(e));\n\t\t}));\n\t}\n\n\tprivate readonly hiddenAreasModel = new HiddenAreasModel();\n\tprivate previousHiddenAreas: readonly Range[] = [];\n\n\tpublic getFontSizeAtPosition(position: IPosition): string | null {\n\t\tconst allowVariableFonts = this._configuration.options.get(EditorOption.effectiveAllowVariableFonts);\n\t\tif (!allowVariableFonts) {\n\t\t\treturn null;\n\t\t}\n\t\tconst fontDecorations = this.model.getFontDecorationsInRange(Range.fromPositions(position), this._editorId);\n\t\tlet fontSize: string = this._configuration.options.get(EditorOption.fontInfo).fontSize + 'px';\n\t\tfor (const fontDecoration of fontDecorations) {\n\t\t\tif (fontDecoration.options.fontSize) {\n\t\t\t\tfontSize = fontDecoration.options.fontSize;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn fontSize;\n\t}\n\n\t/**\n\t * @param forceUpdate If true, the hidden areas will be updated even if the new ranges are the same as the previous ranges.\n\t * This is because the model might have changed, which resets the hidden areas, but not the last cached value.\n\t * This needs a better fix in the future.\n\t*/\n\tpublic setHiddenAreas(ranges: Range[], source?: unknown, forceUpdate?: boolean): void {\n\t\tthis.hiddenAreasModel.setHiddenAreas(source, ranges);\n\t\tconst mergedRanges = this.hiddenAreasModel.getMergedRanges();\n\t\tif (mergedRanges === this.previousHiddenAreas && !forceUpdate) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.previousHiddenAreas = mergedRanges;\n\n\t\tconst stableViewport = this._captureStableViewport();\n\n\t\tlet lineMappingChanged = false;\n\t\ttry {\n\t\t\tconst eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n\t\t\tlineMappingChanged = this._lines.setHiddenAreas(mergedRanges);\n\t\t\tif (lineMappingChanged) {\n\t\t\t\teventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n\t\t\t\teventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n\t\t\t\teventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n\t\t\t\tthis._cursor.onLineMappingChanged(eventsCollector);\n\t\t\t\tthis._decorations.onLineMappingChanged();\n\t\t\t\tthis.viewLayout.onFlushed(this.getLineCount(), this._getCustomLineHeights());\n\t\t\t\tthis.viewLayout.onHeightMaybeChanged();\n\t\t\t}\n\n\t\t\tconst firstModelLineInViewPort = stableViewport.viewportStartModelPosition?.lineNumber;\n\t\t\tconst firstModelLineIsHidden = firstModelLineInViewPort && mergedRanges.some(range => range.startLineNumber <= firstModelLineInViewPort && firstModelLineInViewPort <= range.endLineNumber);\n\t\t\tif (!firstModelLineIsHidden) {\n\t\t\t\tstableViewport.recoverViewportStart(this.coordinatesConverter, this.viewLayout);\n\t\t\t}\n\t\t} finally {\n\t\t\tthis._eventDispatcher.endEmitViewEvents();\n\t\t}\n\t\tthis._updateConfigurationViewLineCount.schedule();\n\n\t\tif (lineMappingChanged) {\n\t\t\tthis._eventDispatcher.emitOutgoingEvent(new HiddenAreasChangedEvent());\n\t\t}\n\t}\n\n\tpublic getVisibleRangesPlusViewportAboveBelow(): Range[] {\n\t\tconst layoutInfo = this._configuration.options.get(EditorOption.layoutInfo);\n\t\tconst lineHeight = this._configuration.options.get(EditorOption.lineHeight);\n\t\tconst linesAround = Math.max(20, Math.round(layoutInfo.height / lineHeight));\n\t\tconst partialData = this.viewLayout.getLinesViewportData();\n\t\tconst startViewLineNumber = Math.max(1, partialData.completelyVisibleStartLineNumber - linesAround);\n\t\tconst endViewLineNumber = Math.min(this.getLineCount(), partialData.completelyVisibleEndLineNumber + linesAround);\n\n\t\treturn this._toModelVisibleRanges(new Range(\n\t\t\tstartViewLineNumber, this.getLineMinColumn(startViewLineNumber),\n\t\t\tendViewLineNumber, this.getLineMaxColumn(endViewLineNumber)\n\t\t));\n\t}\n\n\tpublic getVisibleRanges(): Range[] {\n\t\tconst visibleViewRange = this.getCompletelyVisibleViewRange();\n\t\treturn this._toModelVisibleRanges(visibleViewRange);\n\t}\n\n\tpublic getHiddenAreas(): Range[] {\n\t\treturn this._lines.getHiddenAreas();\n\t}\n\n\tprivate _toModelVisibleRanges(visibleViewRange: Range): Range[] {\n\t\tconst visibleRange = this.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange);\n\t\tconst hiddenAreas = this._lines.getHiddenAreas();\n\n\t\tif (hiddenAreas.length === 0) {\n\t\t\treturn [visibleRange];\n\t\t}\n\n\t\tconst result: Range[] = [];\n\t\tlet resultLen = 0;\n\t\tlet startLineNumber = visibleRange.startLineNumber;\n\t\tlet startColumn = visibleRange.startColumn;\n\t\tconst endLineNumber = visibleRange.endLineNumber;\n\t\tconst endColumn = visibleRange.endColumn;\n\t\tfor (let i = 0, len = hiddenAreas.length; i < len; i++) {\n\t\t\tconst hiddenStartLineNumber = hiddenAreas[i].startLineNumber;\n\t\t\tconst hiddenEndLineNumber = hiddenAreas[i].endLineNumber;\n\n\t\t\tif (hiddenEndLineNumber < startLineNumber) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (hiddenStartLineNumber > endLineNumber) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (startLineNumber < hiddenStartLineNumber) {\n\t\t\t\tresult[resultLen++] = new Range(\n\t\t\t\t\tstartLineNumber, startColumn,\n\t\t\t\t\thiddenStartLineNumber - 1, this.model.getLineMaxColumn(hiddenStartLineNumber - 1)\n\t\t\t\t);\n\t\t\t}\n\t\t\tstartLineNumber = hiddenEndLineNumber + 1;\n\t\t\tstartColumn = 1;\n\t\t}\n\n\t\tif (startLineNumber < endLineNumber || (startLineNumber === endLineNumber && startColumn < endColumn)) {\n\t\t\tresult[resultLen++] = new Range(\n\t\t\t\tstartLineNumber, startColumn,\n\t\t\t\tendLineNumber, endColumn\n\t\t\t);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic getCompletelyVisibleViewRange(): Range {\n\t\tconst partialData = this.viewLayout.getLinesViewportData();\n\t\tconst startViewLineNumber = partialData.completelyVisibleStartLineNumber;\n\t\tconst endViewLineNumber = partialData.completelyVisibleEndLineNumber;\n\n\t\treturn new Range(\n\t\t\tstartViewLineNumber, this.getLineMinColumn(startViewLineNumber),\n\t\t\tendViewLineNumber, this.getLineMaxColumn(endViewLineNumber)\n\t\t);\n\t}\n\n\tpublic getCompletelyVisibleViewRangeAtScrollTop(scrollTop: number): Range {\n\t\tconst partialData = this.viewLayout.getLinesViewportDataAtScrollTop(scrollTop);\n\t\tconst startViewLineNumber = partialData.completelyVisibleStartLineNumber;\n\t\tconst endViewLineNumber = partialData.completelyVisibleEndLineNumber;\n\n\t\treturn new Range(\n\t\t\tstartViewLineNumber, this.getLineMinColumn(startViewLineNumber),\n\t\t\tendViewLineNumber, this.getLineMaxColumn(endViewLineNumber)\n\t\t);\n\t}\n\n\tpublic saveState(): IViewState {\n\t\tconst compatViewState = this.viewLayout.saveState();\n\n\t\tconst scrollTop = compatViewState.scrollTop;\n\t\tconst firstViewLineNumber = this.viewLayout.getLineNumberAtVerticalOffset(scrollTop);\n\t\tconst firstPosition = this.coordinatesConverter.convertViewPositionToModelPosition(new Position(firstViewLineNumber, this.getLineMinColumn(firstViewLineNumber)));\n\t\tconst firstPositionDeltaTop = this.viewLayout.getVerticalOffsetForLineNumber(firstViewLineNumber) - scrollTop;\n\n\t\treturn {\n\t\t\tscrollLeft: compatViewState.scrollLeft,\n\t\t\tfirstPosition: firstPosition,\n\t\t\tfirstPositionDeltaTop: firstPositionDeltaTop\n\t\t};\n\t}\n\n\tpublic reduceRestoreState(state: IViewState): { scrollLeft: number; scrollTop: number } {\n\t\tif (typeof state.firstPosition === 'undefined') {\n\t\t\t// This is a view state serialized by an older version\n\t\t\treturn this._reduceRestoreStateCompatibility(state);\n\t\t}\n\n\t\tconst modelPosition = this.model.validatePosition(state.firstPosition);\n\t\tconst viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(modelPosition);\n\t\tconst scrollTop = this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber) - state.firstPositionDeltaTop;\n\t\treturn {\n\t\t\tscrollLeft: state.scrollLeft,\n\t\t\tscrollTop: scrollTop\n\t\t};\n\t}\n\n\tprivate _reduceRestoreStateCompatibility(state: IViewState): { scrollLeft: number; scrollTop: number } {\n\t\treturn {\n\t\t\tscrollLeft: state.scrollLeft,\n\t\t\tscrollTop: state.scrollTopWithoutViewZones!\n\t\t};\n\t}\n\n\tprivate getTabSize(): number {\n\t\treturn this.model.getOptions().tabSize;\n\t}\n\n\tpublic getLineCount(): number {\n\t\treturn this._lines.getViewLineCount();\n\t}\n\n\t/**\n\t * Gives a hint that a lot of requests are about to come in for these line numbers.\n\t */\n\tpublic setViewport(startLineNumber: number, endLineNumber: number, centeredLineNumber: number): void {\n\t\tthis._viewportStart.update(this, startLineNumber);\n\t}\n\n\tpublic getActiveIndentGuide(lineNumber: number, minLineNumber: number, maxLineNumber: number): IActiveIndentGuideInfo {\n\t\treturn this._lines.getActiveIndentGuide(lineNumber, minLineNumber, maxLineNumber);\n\t}\n\n\tpublic getLinesIndentGuides(startLineNumber: number, endLineNumber: number): number[] {\n\t\treturn this._lines.getViewLinesIndentGuides(startLineNumber, endLineNumber);\n\t}\n\n\tpublic getBracketGuidesInRangeByLine(startLineNumber: number, endLineNumber: number, activePosition: IPosition | null, options: BracketGuideOptions): IndentGuide[][] {\n\t\treturn this._lines.getViewLinesBracketGuides(startLineNumber, endLineNumber, activePosition, options);\n\t}\n\n\tpublic getLineContent(lineNumber: number): string {\n\t\treturn this._lines.getViewLineContent(lineNumber);\n\t}\n\n\tpublic getLineLength(lineNumber: number): number {\n\t\treturn this._lines.getViewLineLength(lineNumber);\n\t}\n\n\tpublic getLineMinColumn(lineNumber: number): number {\n\t\treturn this._lines.getViewLineMinColumn(lineNumber);\n\t}\n\n\tpublic getLineMaxColumn(lineNumber: number): number {\n\t\treturn this._lines.getViewLineMaxColumn(lineNumber);\n\t}\n\n\tpublic getLineFirstNonWhitespaceColumn(lineNumber: number): number {\n\t\tconst result = strings.firstNonWhitespaceIndex(this.getLineContent(lineNumber));\n\t\tif (result === -1) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn result + 1;\n\t}\n\n\tpublic getLineLastNonWhitespaceColumn(lineNumber: number): number {\n\t\tconst result = strings.lastNonWhitespaceIndex(this.getLineContent(lineNumber));\n\t\tif (result === -1) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn result + 2;\n\t}\n\n\tpublic getMinimapDecorationsInRange(range: Range): ViewModelDecoration[] {\n\t\treturn this._decorations.getMinimapDecorationsInRange(range);\n\t}\n\n\tpublic getDecorationsInViewport(visibleRange: Range): ViewModelDecoration[] {\n\t\treturn this._decorations.getDecorationsViewportData(visibleRange).decorations;\n\t}\n\n\tpublic getInjectedTextAt(viewPosition: Position): InjectedText | null {\n\t\treturn this._lines.getInjectedTextAt(viewPosition);\n\t}\n\n\tprivate _getTextDirection(lineNumber: number, decorations: ViewModelDecoration[]): TextDirection {\n\t\tlet rtlCount = 0;\n\n\t\tfor (const decoration of decorations) {\n\t\t\tconst range = decoration.range;\n\t\t\tif (range.startLineNumber > lineNumber || range.endLineNumber < lineNumber) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst textDirection = decoration.options.textDirection;\n\t\t\tif (textDirection === TextDirection.RTL) {\n\t\t\t\trtlCount++;\n\t\t\t} else if (textDirection === TextDirection.LTR) {\n\t\t\t\trtlCount--;\n\t\t\t}\n\t\t}\n\n\t\treturn rtlCount > 0 ? TextDirection.RTL : TextDirection.LTR;\n\t}\n\n\tpublic getTextDirection(lineNumber: number): TextDirection {\n\t\tconst decorationsCollection = this._decorations.getDecorationsOnLine(lineNumber);\n\t\treturn this._getTextDirection(lineNumber, decorationsCollection.decorations);\n\t}\n\n\tpublic getViewportViewLineRenderingData(visibleRange: Range, lineNumber: number): ViewLineRenderingData {\n\t\tconst viewportDecorationsCollection = this._decorations.getDecorationsViewportData(visibleRange);\n\t\tconst inlineDecorations = viewportDecorationsCollection.inlineDecorations[lineNumber - visibleRange.startLineNumber];\n\t\treturn this._getViewLineRenderingData(lineNumber, inlineDecorations, viewportDecorationsCollection.hasVariableFonts, viewportDecorationsCollection.decorations);\n\t}\n\n\tpublic getViewLineRenderingData(lineNumber: number): ViewLineRenderingData {\n\t\tconst decorationsCollection = this._decorations.getDecorationsOnLine(lineNumber);\n\t\treturn this._getViewLineRenderingData(lineNumber, decorationsCollection.inlineDecorations[0], decorationsCollection.hasVariableFonts, decorationsCollection.decorations);\n\t}\n\n\tprivate _getViewLineRenderingData(lineNumber: number, inlineDecorations: InlineDecoration[], hasVariableFonts: boolean, decorations: ViewModelDecoration[]): ViewLineRenderingData {\n\t\tconst mightContainRTL = this.model.mightContainRTL();\n\t\tconst mightContainNonBasicASCII = this.model.mightContainNonBasicASCII();\n\t\tconst tabSize = this.getTabSize();\n\t\tconst lineData = this._lines.getViewLineData(lineNumber);\n\n\t\tif (lineData.inlineDecorations) {\n\t\t\tinlineDecorations = [\n\t\t\t\t...inlineDecorations,\n\t\t\t\t...lineData.inlineDecorations.map(d =>\n\t\t\t\t\td.toInlineDecoration(lineNumber)\n\t\t\t\t)\n\t\t\t];\n\t\t}\n\n\t\treturn new ViewLineRenderingData(\n\t\t\tlineData.minColumn,\n\t\t\tlineData.maxColumn,\n\t\t\tlineData.content,\n\t\t\tlineData.continuesWithWrappedLine,\n\t\t\tmightContainRTL,\n\t\t\tmightContainNonBasicASCII,\n\t\t\tlineData.tokens,\n\t\t\tinlineDecorations,\n\t\t\ttabSize,\n\t\t\tlineData.startVisibleColumn,\n\t\t\tthis._getTextDirection(lineNumber, decorations),\n\t\t\thasVariableFonts\n\t\t);\n\t}\n\n\tpublic getViewLineData(lineNumber: number): ViewLineData {\n\t\treturn this._lines.getViewLineData(lineNumber);\n\t}\n\n\tpublic getMinimapLinesRenderingData(startLineNumber: number, endLineNumber: number, needed: boolean[]): MinimapLinesRenderingData {\n\t\tconst result = this._lines.getViewLinesData(startLineNumber, endLineNumber, needed);\n\t\treturn new MinimapLinesRenderingData(\n\t\t\tthis.getTabSize(),\n\t\t\tresult\n\t\t);\n\t}\n\n\tpublic getAllOverviewRulerDecorations(theme: EditorTheme): OverviewRulerDecorationsGroup[] {\n\t\tconst decorations = this.model.getOverviewRulerDecorations(this._editorId, filterValidationDecorations(this._configuration.options), filterFontDecorations(this._configuration.options));\n\t\tconst result = new OverviewRulerDecorations();\n\t\tfor (const decoration of decorations) {\n\t\t\tconst decorationOptions = <ModelDecorationOptions>decoration.options;\n\t\t\tconst opts = decorationOptions.overviewRuler;\n\t\t\tif (!opts) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst lane = <number>opts.position;\n\t\t\tif (lane === 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst color = opts.getColor(theme.value);\n\t\t\tconst viewStartLineNumber = this.coordinatesConverter.getViewLineNumberOfModelPosition(decoration.range.startLineNumber, decoration.range.startColumn);\n\t\t\tconst viewEndLineNumber = this.coordinatesConverter.getViewLineNumberOfModelPosition(decoration.range.endLineNumber, decoration.range.endColumn);\n\n\t\t\tresult.accept(color, decorationOptions.zIndex, viewStartLineNumber, viewEndLineNumber, lane);\n\t\t}\n\t\treturn result.asArray;\n\t}\n\n\tprivate _invalidateDecorationsColorCache(): void {\n\t\tconst decorations = this.model.getOverviewRulerDecorations();\n\t\tfor (const decoration of decorations) {\n\t\t\tconst opts1 = <ModelDecorationOverviewRulerOptions>decoration.options.overviewRuler;\n\t\t\topts1?.invalidateCachedColor();\n\t\t\tconst opts2 = <ModelDecorationMinimapOptions>decoration.options.minimap;\n\t\t\topts2?.invalidateCachedColor();\n\t\t}\n\t}\n\n\tpublic getValueInRange(range: Range, eol: EndOfLinePreference): string {\n\t\tconst modelRange = this.coordinatesConverter.convertViewRangeToModelRange(range);\n\t\treturn this.model.getValueInRange(modelRange, eol);\n\t}\n\n\tpublic getValueLengthInRange(range: Range, eol: EndOfLinePreference): number {\n\t\tconst modelRange = this.coordinatesConverter.convertViewRangeToModelRange(range);\n\t\treturn this.model.getValueLengthInRange(modelRange, eol);\n\t}\n\n\tpublic modifyPosition(position: Position, offset: number): Position {\n\t\tconst modelPosition = this.coordinatesConverter.convertViewPositionToModelPosition(position);\n\t\tconst resultModelPosition = this.model.modifyPosition(modelPosition, offset);\n\t\treturn this.coordinatesConverter.convertModelPositionToViewPosition(resultModelPosition);\n\t}\n\n\tpublic deduceModelPositionRelativeToViewPosition(viewAnchorPosition: Position, deltaOffset: number, lineFeedCnt: number): Position {\n\t\tconst modelAnchor = this.coordinatesConverter.convertViewPositionToModelPosition(viewAnchorPosition);\n\t\tif (this.model.getEOL().length === 2) {\n\t\t\t// This model uses CRLF, so the delta must take that into account\n\t\t\tif (deltaOffset < 0) {\n\t\t\t\tdeltaOffset -= lineFeedCnt;\n\t\t\t} else {\n\t\t\t\tdeltaOffset += lineFeedCnt;\n\t\t\t}\n\t\t}\n\n\t\tconst modelAnchorOffset = this.model.getOffsetAt(modelAnchor);\n\t\tconst resultOffset = modelAnchorOffset + deltaOffset;\n\t\treturn this.model.getPositionAt(resultOffset);\n\t}\n\n\tpublic getPlainTextToCopy(modelRanges: Range[], emptySelectionClipboard: boolean, forceCRLF: boolean): string | string[] {\n\t\tconst newLineCharacter = forceCRLF ? '\\r\\n' : this.model.getEOL();\n\n\t\tmodelRanges = modelRanges.slice(0);\n\t\tmodelRanges.sort(Range.compareRangesUsingStarts);\n\n\t\tlet hasEmptyRange = false;\n\t\tlet hasNonEmptyRange = false;\n\t\tfor (const range of modelRanges) {\n\t\t\tif (range.isEmpty()) {\n\t\t\t\thasEmptyRange = true;\n\t\t\t} else {\n\t\t\t\thasNonEmptyRange = true;\n\t\t\t}\n\t\t}\n\n\t\tif (!hasNonEmptyRange) {\n\t\t\t// all ranges are empty\n\t\t\tif (!emptySelectionClipboard) {\n\t\t\t\treturn '';\n\t\t\t}\n\n\t\t\tconst modelLineNumbers = modelRanges.map((r) => r.startLineNumber);\n\n\t\t\tlet result = '';\n\t\t\tfor (let i = 0; i < modelLineNumbers.length; i++) {\n\t\t\t\tif (i > 0 && modelLineNumbers[i - 1] === modelLineNumbers[i]) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tresult += this.model.getLineContent(modelLineNumbers[i]) + newLineCharacter;\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\n\t\tif (hasEmptyRange && emptySelectionClipboard) {\n\t\t\t// mixed empty selections and non-empty selections\n\t\t\tconst result: string[] = [];\n\t\t\tlet prevModelLineNumber = 0;\n\t\t\tfor (const modelRange of modelRanges) {\n\t\t\t\tconst modelLineNumber = modelRange.startLineNumber;\n\t\t\t\tif (modelRange.isEmpty()) {\n\t\t\t\t\tif (modelLineNumber !== prevModelLineNumber) {\n\t\t\t\t\t\tresult.push(this.model.getLineContent(modelLineNumber));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tresult.push(this.model.getValueInRange(modelRange, forceCRLF ? EndOfLinePreference.CRLF : EndOfLinePreference.TextDefined));\n\t\t\t\t}\n\t\t\t\tprevModelLineNumber = modelLineNumber;\n\t\t\t}\n\t\t\treturn result.length === 1 ? result[0] : result;\n\t\t}\n\n\t\tconst result: string[] = [];\n\t\tfor (const modelRange of modelRanges) {\n\t\t\tif (!modelRange.isEmpty()) {\n\t\t\t\tresult.push(this.model.getValueInRange(modelRange, forceCRLF ? EndOfLinePreference.CRLF : EndOfLinePreference.TextDefined));\n\t\t\t}\n\t\t}\n\t\treturn result.length === 1 ? result[0] : result;\n\t}\n\n\tpublic getRichTextToCopy(modelRanges: Range[], emptySelectionClipboard: boolean): { html: string; mode: string } | null {\n\t\tconst languageId = this.model.getLanguageId();\n\t\tif (languageId === PLAINTEXT_LANGUAGE_ID) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (modelRanges.length !== 1) {\n\t\t\t// no multiple selection support at this time\n\t\t\treturn null;\n\t\t}\n\n\t\tlet range = modelRanges[0];\n\t\tif (range.isEmpty()) {\n\t\t\tif (!emptySelectionClipboard) {\n\t\t\t\t// nothing to copy\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tconst lineNumber = range.startLineNumber;\n\t\t\trange = new Range(lineNumber, this.model.getLineMinColumn(lineNumber), lineNumber, this.model.getLineMaxColumn(lineNumber));\n\t\t}\n\n\t\tconst fontInfo = this._configuration.options.get(EditorOption.fontInfo);\n\t\tconst colorMap = this._getColorMap();\n\t\tconst hasBadChars = (/[:;\\\\\\/<>]/.test(fontInfo.fontFamily));\n\t\tconst useDefaultFontFamily = (hasBadChars || fontInfo.fontFamily === EDITOR_FONT_DEFAULTS.fontFamily);\n\t\tlet fontFamily: string;\n\t\tif (useDefaultFontFamily) {\n\t\t\tfontFamily = EDITOR_FONT_DEFAULTS.fontFamily;\n\t\t} else {\n\t\t\tfontFamily = fontInfo.fontFamily;\n\t\t\tfontFamily = fontFamily.replace(/\"/g, '\\'');\n\t\t\tconst hasQuotesOrIsList = /[,']/.test(fontFamily);\n\t\t\tif (!hasQuotesOrIsList) {\n\t\t\t\tconst needsQuotes = /[+ ]/.test(fontFamily);\n\t\t\t\tif (needsQuotes) {\n\t\t\t\t\tfontFamily = `'${fontFamily}'`;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfontFamily = `${fontFamily}, ${EDITOR_FONT_DEFAULTS.fontFamily}`;\n\t\t}\n\n\t\treturn {\n\t\t\tmode: languageId,\n\t\t\thtml: (\n\t\t\t\t`<div style=\"`\n\t\t\t\t+ `color: ${colorMap[ColorId.DefaultForeground]};`\n\t\t\t\t+ `background-color: ${colorMap[ColorId.DefaultBackground]};`\n\t\t\t\t+ `font-family: ${fontFamily};`\n\t\t\t\t+ `font-weight: ${fontInfo.fontWeight};`\n\t\t\t\t+ `font-size: ${fontInfo.fontSize}px;`\n\t\t\t\t+ `line-height: ${fontInfo.lineHeight}px;`\n\t\t\t\t+ `white-space: pre;`\n\t\t\t\t+ `\">`\n\t\t\t\t+ this._getHTMLToCopy(range, colorMap)\n\t\t\t\t+ '</div>'\n\t\t\t)\n\t\t};\n\t}\n\n\tprivate _getHTMLToCopy(modelRange: Range, colorMap: string[]): string {\n\t\tconst startLineNumber = modelRange.startLineNumber;\n\t\tconst startColumn = modelRange.startColumn;\n\t\tconst endLineNumber = modelRange.endLineNumber;\n\t\tconst endColumn = modelRange.endColumn;\n\n\t\tconst tabSize = this.getTabSize();\n\n\t\tlet result = '';\n\n\t\tfor (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n\t\t\tconst lineTokens = this.model.tokenization.getLineTokens(lineNumber);\n\t\t\tconst lineContent = lineTokens.getLineContent();\n\t\t\tconst startOffset = (lineNumber === startLineNumber ? startColumn - 1 : 0);\n\t\t\tconst endOffset = (lineNumber === endLineNumber ? endColumn - 1 : lineContent.length);\n\n\t\t\tif (lineContent === '') {\n\t\t\t\tresult += '<br>';\n\t\t\t} else {\n\t\t\t\tresult += tokenizeLineToHTML(lineContent, lineTokens.inflate(), colorMap, startOffset, endOffset, tabSize, platform.isWindows);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate _getColorMap(): string[] {\n\t\tconst colorMap = TokenizationRegistry.getColorMap();\n\t\tconst result: string[] = ['#000000'];\n\t\tif (colorMap) {\n\t\t\tfor (let i = 1, len = colorMap.length; i < len; i++) {\n\t\t\t\tresult[i] = Color.Format.CSS.formatHex(colorMap[i]);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\t//#region cursor operations\n\n\tpublic getPrimaryCursorState(): CursorState {\n\t\treturn this._cursor.getPrimaryCursorState();\n\t}\n\tpublic getLastAddedCursorIndex(): number {\n\t\treturn this._cursor.getLastAddedCursorIndex();\n\t}\n\tpublic getCursorStates(): CursorState[] {\n\t\treturn this._cursor.getCursorStates();\n\t}\n\tpublic setCursorStates(source: string | null | undefined, reason: CursorChangeReason, states: PartialCursorState[] | null): boolean {\n\t\treturn this._withViewEventsCollector(eventsCollector => this._cursor.setStates(eventsCollector, source, reason, states));\n\t}\n\tpublic getCursorColumnSelectData(): IColumnSelectData {\n\t\treturn this._cursor.getCursorColumnSelectData();\n\t}\n\tpublic getCursorAutoClosedCharacters(): Range[] {\n\t\treturn this._cursor.getAutoClosedCharacters();\n\t}\n\tpublic setCursorColumnSelectData(columnSelectData: IColumnSelectData): void {\n\t\tthis._cursor.setCursorColumnSelectData(columnSelectData);\n\t}\n\tpublic getPrevEditOperationType(): EditOperationType {\n\t\treturn this._cursor.getPrevEditOperationType();\n\t}\n\tpublic setPrevEditOperationType(type: EditOperationType): void {\n\t\tthis._cursor.setPrevEditOperationType(type);\n\t}\n\tpublic getSelection(): Selection {\n\t\treturn this._cursor.getSelection();\n\t}\n\tpublic getSelections(): Selection[] {\n\t\treturn this._cursor.getSelections();\n\t}\n\tpublic getPosition(): Position {\n\t\treturn this._cursor.getPrimaryCursorState().modelState.position;\n\t}\n\tpublic setSelections(source: string | null | undefined, selections: readonly ISelection[], reason = CursorChangeReason.NotSet): void {\n\t\tthis._withViewEventsCollector(eventsCollector => this._cursor.setSelections(eventsCollector, source, selections, reason));\n\t}\n\tpublic saveCursorState(): ICursorState[] {\n\t\treturn this._cursor.saveState();\n\t}\n\tpublic restoreCursorState(states: ICursorState[]): void {\n\t\tthis._withViewEventsCollector(eventsCollector => this._cursor.restoreState(eventsCollector, states));\n\t}\n\n\tprivate _executeCursorEdit(callback: (eventsCollector: ViewModelEventsCollector) => void): void {\n\t\tif (this._cursor.context.cursorConfig.readOnly) {\n\t\t\t// we cannot edit when read only...\n\t\t\tthis._eventDispatcher.emitOutgoingEvent(new ReadOnlyEditAttemptEvent());\n\t\t\treturn;\n\t\t}\n\t\tthis._withViewEventsCollector(callback);\n\t}\n\tpublic executeEdits(source: string | null | undefined, edits: IIdentifiedSingleEditOperation[], cursorStateComputer: ICursorStateComputer, reason: TextModelEditSource): void {\n\t\tthis._executeCursorEdit(eventsCollector => this._cursor.executeEdits(eventsCollector, source, edits, cursorStateComputer, reason));\n\t}\n\tpublic startComposition(): void {\n\t\tthis._executeCursorEdit(eventsCollector => this._cursor.startComposition(eventsCollector));\n\t}\n\tpublic endComposition(source?: string | null | undefined): void {\n\t\tthis._executeCursorEdit(eventsCollector => this._cursor.endComposition(eventsCollector, source));\n\t}\n\tpublic type(text: string, source?: string | null | undefined): void {\n\t\tthis._executeCursorEdit(eventsCollector => this._cursor.type(eventsCollector, text, source));\n\t}\n\tpublic compositionType(text: string, replacePrevCharCnt: number, replaceNextCharCnt: number, positionDelta: number, source?: string | null | undefined): void {\n\t\tthis._executeCursorEdit(eventsCollector => this._cursor.compositionType(eventsCollector, text, replacePrevCharCnt, replaceNextCharCnt, positionDelta, source));\n\t}\n\tpublic paste(text: string, pasteOnNewLine: boolean, multicursorText?: string[] | null | undefined, source?: string | null | undefined): void {\n\t\tthis._executeCursorEdit(eventsCollector => this._cursor.paste(eventsCollector, text, pasteOnNewLine, multicursorText, source));\n\t}\n\tpublic cut(source?: string | null | undefined): void {\n\t\tthis._executeCursorEdit(eventsCollector => this._cursor.cut(eventsCollector, source));\n\t}\n\tpublic executeCommand(command: ICommand, source?: string | null | undefined): void {\n\t\tthis._executeCursorEdit(eventsCollector => this._cursor.executeCommand(eventsCollector, command, source));\n\t}\n\tpublic executeCommands(commands: ICommand[], source?: string | null | undefined): void {\n\t\tthis._executeCursorEdit(eventsCollector => this._cursor.executeCommands(eventsCollector, commands, source));\n\t}\n\tpublic revealAllCursors(source: string | null | undefined, revealHorizontal: boolean, minimalReveal: boolean = false): void {\n\t\tthis._withViewEventsCollector(eventsCollector => this._cursor.revealAll(eventsCollector, source, minimalReveal, viewEvents.VerticalRevealType.Simple, revealHorizontal, ScrollType.Smooth));\n\t}\n\tpublic revealPrimaryCursor(source: string | null | undefined, revealHorizontal: boolean, minimalReveal: boolean = false): void {\n\t\tthis._withViewEventsCollector(eventsCollector => this._cursor.revealPrimary(eventsCollector, source, minimalReveal, viewEvents.VerticalRevealType.Simple, revealHorizontal, ScrollType.Smooth));\n\t}\n\tpublic revealTopMostCursor(source: string | null | undefined): void {\n\t\tconst viewPosition = this._cursor.getTopMostViewPosition();\n\t\tconst viewRange = new Range(viewPosition.lineNumber, viewPosition.column, viewPosition.lineNumber, viewPosition.column);\n\t\tthis._withViewEventsCollector(eventsCollector => eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source, false, viewRange, null, viewEvents.VerticalRevealType.Simple, true, ScrollType.Smooth)));\n\t}\n\tpublic revealBottomMostCursor(source: string | null | undefined): void {\n\t\tconst viewPosition = this._cursor.getBottomMostViewPosition();\n\t\tconst viewRange = new Range(viewPosition.lineNumber, viewPosition.column, viewPosition.lineNumber, viewPosition.column);\n\t\tthis._withViewEventsCollector(eventsCollector => eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source, false, viewRange, null, viewEvents.VerticalRevealType.Simple, true, ScrollType.Smooth)));\n\t}\n\tpublic revealRange(source: string | null | undefined, revealHorizontal: boolean, viewRange: Range, verticalType: viewEvents.VerticalRevealType, scrollType: ScrollType): void {\n\t\tthis._withViewEventsCollector(eventsCollector => eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source, false, viewRange, null, verticalType, revealHorizontal, scrollType)));\n\t}\n\n\t//#endregion\n\n\t//#region viewLayout\n\tpublic changeWhitespace(callback: (accessor: IWhitespaceChangeAccessor) => void): void {\n\t\tconst hadAChange = this.viewLayout.changeWhitespace(callback);\n\t\tif (hadAChange) {\n\t\t\tthis._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewZonesChangedEvent());\n\t\t\tthis._eventDispatcher.emitOutgoingEvent(new ViewZonesChangedEvent());\n\t\t}\n\t}\n\t//#endregion\n\n\tprivate _withViewEventsCollector<T>(callback: (eventsCollector: ViewModelEventsCollector) => T): T {\n\t\treturn this._transactionalTarget.batchChanges(() => {\n\t\t\ttry {\n\t\t\t\tconst eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n\t\t\t\treturn callback(eventsCollector);\n\t\t\t} finally {\n\t\t\t\tthis._eventDispatcher.endEmitViewEvents();\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic batchEvents(callback: () => void): void {\n\t\tthis._withViewEventsCollector(() => { callback(); });\n\t}\n\n\tnormalizePosition(position: Position, affinity: PositionAffinity): Position {\n\t\treturn this._lines.normalizePosition(position, affinity);\n\t}\n\n\t/**\n\t * Gets the column at which indentation stops at a given line.\n\t * @internal\n\t*/\n\tgetLineIndentColumn(lineNumber: number): number {\n\t\treturn this._lines.getLineIndentColumn(lineNumber);\n\t}\n}\n\nexport interface IBatchableTarget {\n\t/**\n\t * Allows the target to apply the changes introduced by the callback in a batch.\n\t*/\n\tbatchChanges<T>(cb: () => T): T;\n}\n\nclass ViewportStart implements IDisposable {\n\n\tpublic static create(model: ITextModel): ViewportStart {\n\t\tconst viewportStartLineTrackedRange = model._setTrackedRange(null, new Range(1, 1, 1, 1), TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges);\n\t\treturn new ViewportStart(model, 1, false, viewportStartLineTrackedRange, 0);\n\t}\n\n\tpublic get viewLineNumber(): number {\n\t\treturn this._viewLineNumber;\n\t}\n\n\tpublic get isValid(): boolean {\n\t\treturn this._isValid;\n\t}\n\n\tpublic get modelTrackedRange(): string {\n\t\treturn this._modelTrackedRange;\n\t}\n\n\tpublic get startLineDelta(): number {\n\t\treturn this._startLineDelta;\n\t}\n\n\tprivate constructor(\n\t\tprivate readonly _model: ITextModel,\n\t\tprivate _viewLineNumber: number,\n\t\tprivate _isValid: boolean,\n\t\tprivate _modelTrackedRange: string,\n\t\tprivate _startLineDelta: number,\n\t) { }\n\n\tpublic dispose(): void {\n\t\tthis._model._setTrackedRange(this._modelTrackedRange, null, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges);\n\t}\n\n\tpublic update(viewModel: IViewModel, startLineNumber: number): void {\n\t\tconst position = viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(startLineNumber, viewModel.getLineMinColumn(startLineNumber)));\n\t\tconst viewportStartLineTrackedRange = viewModel.model._setTrackedRange(this._modelTrackedRange, new Range(position.lineNumber, position.column, position.lineNumber, position.column), TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges);\n\t\tconst viewportStartLineTop = viewModel.viewLayout.getVerticalOffsetForLineNumber(startLineNumber);\n\t\tconst scrollTop = viewModel.viewLayout.getCurrentScrollTop();\n\n\t\tthis._viewLineNumber = startLineNumber;\n\t\tthis._isValid = true;\n\t\tthis._modelTrackedRange = viewportStartLineTrackedRange;\n\t\tthis._startLineDelta = scrollTop - viewportStartLineTop;\n\t}\n\n\tpublic invalidate(): void {\n\t\tthis._isValid = false;\n\t}\n}\n\nclass OverviewRulerDecorations {\n\n\tprivate readonly _asMap: { [color: string]: OverviewRulerDecorationsGroup } = Object.create(null);\n\treadonly asArray: OverviewRulerDecorationsGroup[] = [];\n\n\tpublic accept(color: string, zIndex: number, startLineNumber: number, endLineNumber: number, lane: number): void {\n\t\tconst prevGroup = this._asMap[color];\n\n\t\tif (prevGroup) {\n\t\t\tconst prevData = prevGroup.data;\n\t\t\tconst prevLane = prevData[prevData.length - 3];\n\t\t\tconst prevEndLineNumber = prevData[prevData.length - 1];\n\t\t\tif (prevLane === lane && prevEndLineNumber + 1 >= startLineNumber) {\n\t\t\t\t// merge into prev\n\t\t\t\tif (endLineNumber > prevEndLineNumber) {\n\t\t\t\t\tprevData[prevData.length - 1] = endLineNumber;\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// push\n\t\t\tprevData.push(lane, startLineNumber, endLineNumber);\n\t\t} else {\n\t\t\tconst group = new OverviewRulerDecorationsGroup(color, zIndex, [lane, startLineNumber, endLineNumber]);\n\t\t\tthis._asMap[color] = group;\n\t\t\tthis.asArray.push(group);\n\t\t}\n\t}\n}\n\nclass HiddenAreasModel {\n\tprivate readonly hiddenAreas = new Map<unknown, Range[]>();\n\tprivate shouldRecompute = false;\n\tprivate ranges: Range[] = [];\n\n\tsetHiddenAreas(source: unknown, ranges: Range[]): void {\n\t\tconst existing = this.hiddenAreas.get(source);\n\t\tif (existing && rangeArraysEqual(existing, ranges)) {\n\t\t\treturn;\n\t\t}\n\t\tthis.hiddenAreas.set(source, ranges);\n\t\tthis.shouldRecompute = true;\n\t}\n\n\t/**\n\t * The returned array is immutable.\n\t*/\n\tgetMergedRanges(): readonly Range[] {\n\t\tif (!this.shouldRecompute) {\n\t\t\treturn this.ranges;\n\t\t}\n\t\tthis.shouldRecompute = false;\n\t\tconst newRanges = Array.from(this.hiddenAreas.values()).reduce((r, hiddenAreas) => mergeLineRangeArray(r, hiddenAreas), []);\n\t\tif (rangeArraysEqual(this.ranges, newRanges)) {\n\t\t\treturn this.ranges;\n\t\t}\n\t\tthis.ranges = newRanges;\n\t\treturn this.ranges;\n\t}\n}\n\nfunction mergeLineRangeArray(arr1: Range[], arr2: Range[]): Range[] {\n\tconst result: Range[] = [];\n\tlet i = 0;\n\tlet j = 0;\n\twhile (i < arr1.length && j < arr2.length) {\n\t\tconst item1 = arr1[i];\n\t\tconst item2 = arr2[j];\n\n\t\tif (item1.endLineNumber < item2.startLineNumber - 1) {\n\t\t\tresult.push(arr1[i++]);\n\t\t} else if (item2.endLineNumber < item1.startLineNumber - 1) {\n\t\t\tresult.push(arr2[j++]);\n\t\t} else {\n\t\t\tconst startLineNumber = Math.min(item1.startLineNumber, item2.startLineNumber);\n\t\t\tconst endLineNumber = Math.max(item1.endLineNumber, item2.endLineNumber);\n\t\t\tresult.push(new Range(startLineNumber, 1, endLineNumber, 1));\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t}\n\twhile (i < arr1.length) {\n\t\tresult.push(arr1[i++]);\n\t}\n\twhile (j < arr2.length) {\n\t\tresult.push(arr2[j++]);\n\t}\n\treturn result;\n}\n\nfunction rangeArraysEqual(arr1: Range[], arr2: Range[]): boolean {\n\tif (arr1.length !== arr2.length) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i < arr1.length; i++) {\n\t\tif (!arr1[i].equalsRange(arr2[i])) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n/**\n * Maintain a stable viewport by trying to keep the first line in the viewport constant.\n */\nclass StableViewport {\n\tconstructor(\n\t\tpublic readonly viewportStartModelPosition: Position | null,\n\t\tpublic readonly startLineDelta: number\n\t) { }\n\n\tpublic recoverViewportStart(coordinatesConverter: ICoordinatesConverter, viewLayout: ViewLayout): void {\n\t\tif (!this.viewportStartModelPosition) {\n\t\t\treturn;\n\t\t}\n\t\tconst viewPosition = coordinatesConverter.convertModelPositionToViewPosition(this.viewportStartModelPosition);\n\t\tconst viewPositionTop = viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n\t\tviewLayout.setScrollPosition({ scrollTop: viewPositionTop + this.startLineDelta }, ScrollType.Immediate);\n\t}\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}