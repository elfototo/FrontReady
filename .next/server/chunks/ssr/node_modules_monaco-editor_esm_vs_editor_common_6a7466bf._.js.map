{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/monaco-editor/esm/vs/editor/common/inputMode.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/file%3A/mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/inputMode.ts","file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/vs/editor/common/inputMode.ts"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from '../../base/common/event.js';\n\nclass InputModeImpl {\n\n\tprivate _inputMode: 'overtype' | 'insert' = 'insert';\n\tprivate readonly _onDidChangeInputMode = new Emitter<'overtype' | 'insert'>();\n\tpublic readonly onDidChangeInputMode: Event<'overtype' | 'insert'> = this._onDidChangeInputMode.event;\n\n\tpublic getInputMode(): 'overtype' | 'insert' {\n\t\treturn this._inputMode;\n\t}\n}\n\n/**\n * Controls the type mode, whether insert or overtype\n */\nexport const InputMode = new InputModeImpl();\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from '../../base/common/event.js';\n\nclass InputModeImpl {\n\n\tprivate _inputMode: 'overtype' | 'insert' = 'insert';\n\tprivate readonly _onDidChangeInputMode = new Emitter<'overtype' | 'insert'>();\n\tpublic readonly onDidChangeInputMode: Event<'overtype' | 'insert'> = this._onDidChangeInputMode.event;\n\n\tpublic getInputMode(): 'overtype' | 'insert' {\n\t\treturn this._inputMode;\n\t}\n}\n\n/**\n * Controls the type mode, whether insert or overtype\n */\nexport const InputMode = new InputModeImpl();\n"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;AAEhG,OAAO,EAAE,OAAO,EAAS,MAAM,4BAA4B,CAAC;;AAE5D,MAAM,aAAa;IAAnB,aAAA;QAES,IAAA,CAAA,UAAU,GAA0B,QAAQ,CAAC;QACpC,IAAA,CAAA,qBAAqB,GAAG,IAAI,mLAAO,EAAyB,CAAC;QAC9D,IAAA,CAAA,oBAAoB,GAAiC,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC;IAKvG,CAAC;IAHO,YAAY,GAAA;QAClB,OAAO,IAAI,CAAC,UAAU,CAAC;IACxB,CAAC;CACD;AAKM,MAAM,SAAS,GAAG,IAAI,aAAa,EAAE,CAAC","debugId":null}},
    {"offset": {"line": 28, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/monaco-editor/esm/vs/editor/common/cursorCommon.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/file%3A/mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/cursorCommon.ts","file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/vs/editor/common/cursorCommon.ts"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ConfigurationChangedEvent, EditorAutoClosingEditStrategy, EditorAutoClosingStrategy, EditorAutoIndentStrategy, EditorAutoSurroundStrategy, EditorOption } from './config/editorOptions.js';\nimport { LineTokens } from './tokens/lineTokens.js';\nimport { Position } from './core/position.js';\nimport { Range } from './core/range.js';\nimport { ISelection, Selection } from './core/selection.js';\nimport { ICommand } from './editorCommon.js';\nimport { IEditorConfiguration } from './config/editorConfiguration.js';\nimport { PositionAffinity, TextModelResolvedOptions } from './model.js';\nimport { AutoClosingPairs } from './languages/languageConfiguration.js';\nimport { ILanguageConfigurationService } from './languages/languageConfigurationRegistry.js';\nimport { createScopedLineTokens } from './languages/supports.js';\nimport { IElectricAction } from './languages/supports/electricCharacter.js';\nimport { CursorColumns } from './core/cursorColumns.js';\nimport { normalizeIndentation } from './core/misc/indentation.js';\nimport { InputMode } from './inputMode.js';\n\nexport interface IColumnSelectData {\n\tisReal: boolean;\n\tfromViewLineNumber: number;\n\tfromViewVisualColumn: number;\n\ttoViewLineNumber: number;\n\ttoViewVisualColumn: number;\n}\n\n/**\n * This is an operation type that will be recorded for undo/redo purposes.\n * The goal is to introduce an undo stop when the controller switches between different operation types.\n */\nexport const enum EditOperationType {\n\tOther = 0,\n\tDeletingLeft = 2,\n\tDeletingRight = 3,\n\tTypingOther = 4,\n\tTypingFirstSpace = 5,\n\tTypingConsecutiveSpace = 6,\n}\n\nexport interface CharacterMap {\n\t[char: string]: string;\n}\n\nconst autoCloseAlways = () => true;\nconst autoCloseNever = () => false;\nconst autoCloseBeforeWhitespace = (chr: string) => (chr === ' ' || chr === '\\t');\n\nexport class CursorConfiguration {\n\t_cursorMoveConfigurationBrand: void = undefined;\n\n\tpublic readonly readOnly: boolean;\n\tpublic readonly tabSize: number;\n\tpublic readonly indentSize: number;\n\tpublic readonly insertSpaces: boolean;\n\tpublic readonly stickyTabStops: boolean;\n\tpublic readonly pageSize: number;\n\tpublic readonly lineHeight: number;\n\tpublic readonly typicalHalfwidthCharacterWidth: number;\n\tpublic readonly useTabStops: boolean;\n\tpublic readonly trimWhitespaceOnDelete: boolean;\n\tpublic readonly wordSeparators: string;\n\tpublic readonly emptySelectionClipboard: boolean;\n\tpublic readonly copyWithSyntaxHighlighting: boolean;\n\tpublic readonly multiCursorMergeOverlapping: boolean;\n\tpublic readonly multiCursorPaste: 'spread' | 'full';\n\tpublic readonly multiCursorLimit: number;\n\tpublic readonly autoClosingBrackets: EditorAutoClosingStrategy;\n\tpublic readonly autoClosingComments: EditorAutoClosingStrategy;\n\tpublic readonly autoClosingQuotes: EditorAutoClosingStrategy;\n\tpublic readonly autoClosingDelete: EditorAutoClosingEditStrategy;\n\tpublic readonly autoClosingOvertype: EditorAutoClosingEditStrategy;\n\tpublic readonly autoSurround: EditorAutoSurroundStrategy;\n\tpublic readonly autoIndent: EditorAutoIndentStrategy;\n\tpublic readonly autoClosingPairs: AutoClosingPairs;\n\tpublic readonly surroundingPairs: CharacterMap;\n\tpublic readonly blockCommentStartToken: string | null;\n\tpublic readonly shouldAutoCloseBefore: { quote: (ch: string) => boolean; bracket: (ch: string) => boolean; comment: (ch: string) => boolean };\n\tpublic readonly wordSegmenterLocales: string[];\n\tpublic readonly overtypeOnPaste: boolean;\n\n\tprivate readonly _languageId: string;\n\tprivate _electricChars: { [key: string]: boolean } | null;\n\n\tpublic static shouldRecreate(e: ConfigurationChangedEvent): boolean {\n\t\treturn (\n\t\t\te.hasChanged(EditorOption.layoutInfo)\n\t\t\t|| e.hasChanged(EditorOption.wordSeparators)\n\t\t\t|| e.hasChanged(EditorOption.emptySelectionClipboard)\n\t\t\t|| e.hasChanged(EditorOption.multiCursorMergeOverlapping)\n\t\t\t|| e.hasChanged(EditorOption.multiCursorPaste)\n\t\t\t|| e.hasChanged(EditorOption.multiCursorLimit)\n\t\t\t|| e.hasChanged(EditorOption.autoClosingBrackets)\n\t\t\t|| e.hasChanged(EditorOption.autoClosingComments)\n\t\t\t|| e.hasChanged(EditorOption.autoClosingQuotes)\n\t\t\t|| e.hasChanged(EditorOption.autoClosingDelete)\n\t\t\t|| e.hasChanged(EditorOption.autoClosingOvertype)\n\t\t\t|| e.hasChanged(EditorOption.autoSurround)\n\t\t\t|| e.hasChanged(EditorOption.useTabStops)\n\t\t\t|| e.hasChanged(EditorOption.trimWhitespaceOnDelete)\n\t\t\t|| e.hasChanged(EditorOption.fontInfo)\n\t\t\t|| e.hasChanged(EditorOption.readOnly)\n\t\t\t|| e.hasChanged(EditorOption.wordSegmenterLocales)\n\t\t\t|| e.hasChanged(EditorOption.overtypeOnPaste)\n\t\t);\n\t}\n\n\tconstructor(\n\t\tlanguageId: string,\n\t\tmodelOptions: TextModelResolvedOptions,\n\t\tconfiguration: IEditorConfiguration,\n\t\tpublic readonly languageConfigurationService: ILanguageConfigurationService\n\t) {\n\t\tthis._languageId = languageId;\n\n\t\tconst options = configuration.options;\n\t\tconst layoutInfo = options.get(EditorOption.layoutInfo);\n\t\tconst fontInfo = options.get(EditorOption.fontInfo);\n\n\t\tthis.readOnly = options.get(EditorOption.readOnly);\n\t\tthis.tabSize = modelOptions.tabSize;\n\t\tthis.indentSize = modelOptions.indentSize;\n\t\tthis.insertSpaces = modelOptions.insertSpaces;\n\t\tthis.stickyTabStops = options.get(EditorOption.stickyTabStops);\n\t\tthis.lineHeight = fontInfo.lineHeight;\n\t\tthis.typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n\t\tthis.pageSize = Math.max(1, Math.floor(layoutInfo.height / this.lineHeight) - 2);\n\t\tthis.useTabStops = options.get(EditorOption.useTabStops);\n\t\tthis.trimWhitespaceOnDelete = options.get(EditorOption.trimWhitespaceOnDelete);\n\t\tthis.wordSeparators = options.get(EditorOption.wordSeparators);\n\t\tthis.emptySelectionClipboard = options.get(EditorOption.emptySelectionClipboard);\n\t\tthis.copyWithSyntaxHighlighting = options.get(EditorOption.copyWithSyntaxHighlighting);\n\t\tthis.multiCursorMergeOverlapping = options.get(EditorOption.multiCursorMergeOverlapping);\n\t\tthis.multiCursorPaste = options.get(EditorOption.multiCursorPaste);\n\t\tthis.multiCursorLimit = options.get(EditorOption.multiCursorLimit);\n\t\tthis.autoClosingBrackets = options.get(EditorOption.autoClosingBrackets);\n\t\tthis.autoClosingComments = options.get(EditorOption.autoClosingComments);\n\t\tthis.autoClosingQuotes = options.get(EditorOption.autoClosingQuotes);\n\t\tthis.autoClosingDelete = options.get(EditorOption.autoClosingDelete);\n\t\tthis.autoClosingOvertype = options.get(EditorOption.autoClosingOvertype);\n\t\tthis.autoSurround = options.get(EditorOption.autoSurround);\n\t\tthis.autoIndent = options.get(EditorOption.autoIndent);\n\t\tthis.wordSegmenterLocales = options.get(EditorOption.wordSegmenterLocales);\n\t\tthis.overtypeOnPaste = options.get(EditorOption.overtypeOnPaste);\n\n\t\tthis.surroundingPairs = {};\n\t\tthis._electricChars = null;\n\n\t\tthis.shouldAutoCloseBefore = {\n\t\t\tquote: this._getShouldAutoClose(languageId, this.autoClosingQuotes, true),\n\t\t\tcomment: this._getShouldAutoClose(languageId, this.autoClosingComments, false),\n\t\t\tbracket: this._getShouldAutoClose(languageId, this.autoClosingBrackets, false),\n\t\t};\n\n\t\tthis.autoClosingPairs = this.languageConfigurationService.getLanguageConfiguration(languageId).getAutoClosingPairs();\n\n\t\tconst surroundingPairs = this.languageConfigurationService.getLanguageConfiguration(languageId).getSurroundingPairs();\n\t\tif (surroundingPairs) {\n\t\t\tfor (const pair of surroundingPairs) {\n\t\t\t\tthis.surroundingPairs[pair.open] = pair.close;\n\t\t\t}\n\t\t}\n\n\t\tconst commentsConfiguration = this.languageConfigurationService.getLanguageConfiguration(languageId).comments;\n\t\tthis.blockCommentStartToken = commentsConfiguration?.blockCommentStartToken ?? null;\n\t}\n\n\tpublic get electricChars() {\n\t\tif (!this._electricChars) {\n\t\t\tthis._electricChars = {};\n\t\t\tconst electricChars = this.languageConfigurationService.getLanguageConfiguration(this._languageId).electricCharacter?.getElectricCharacters();\n\t\t\tif (electricChars) {\n\t\t\t\tfor (const char of electricChars) {\n\t\t\t\t\tthis._electricChars[char] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this._electricChars;\n\t}\n\n\tpublic get inputMode(): 'insert' | 'overtype' {\n\t\treturn InputMode.getInputMode();\n\t}\n\n\t/**\n\t * Should return opening bracket type to match indentation with\n\t */\n\tpublic onElectricCharacter(character: string, context: LineTokens, column: number): IElectricAction | null {\n\t\tconst scopedLineTokens = createScopedLineTokens(context, column - 1);\n\t\tconst electricCharacterSupport = this.languageConfigurationService.getLanguageConfiguration(scopedLineTokens.languageId).electricCharacter;\n\t\tif (!electricCharacterSupport) {\n\t\t\treturn null;\n\t\t}\n\t\treturn electricCharacterSupport.onElectricCharacter(character, scopedLineTokens, column - scopedLineTokens.firstCharOffset);\n\t}\n\n\tpublic normalizeIndentation(str: string): string {\n\t\treturn normalizeIndentation(str, this.indentSize, this.insertSpaces);\n\t}\n\n\tprivate _getShouldAutoClose(languageId: string, autoCloseConfig: EditorAutoClosingStrategy, forQuotes: boolean): (ch: string) => boolean {\n\t\tswitch (autoCloseConfig) {\n\t\t\tcase 'beforeWhitespace':\n\t\t\t\treturn autoCloseBeforeWhitespace;\n\t\t\tcase 'languageDefined':\n\t\t\t\treturn this._getLanguageDefinedShouldAutoClose(languageId, forQuotes);\n\t\t\tcase 'always':\n\t\t\t\treturn autoCloseAlways;\n\t\t\tcase 'never':\n\t\t\t\treturn autoCloseNever;\n\t\t}\n\t}\n\n\tprivate _getLanguageDefinedShouldAutoClose(languageId: string, forQuotes: boolean): (ch: string) => boolean {\n\t\tconst autoCloseBeforeSet = this.languageConfigurationService.getLanguageConfiguration(languageId).getAutoCloseBeforeSet(forQuotes);\n\t\treturn c => autoCloseBeforeSet.indexOf(c) !== -1;\n\t}\n\n\t/**\n\t * Returns a visible column from a column.\n\t * @see {@link CursorColumns}\n\t */\n\tpublic visibleColumnFromColumn(model: ICursorSimpleModel, position: Position): number {\n\t\treturn CursorColumns.visibleColumnFromColumn(model.getLineContent(position.lineNumber), position.column, this.tabSize);\n\t}\n\n\t/**\n\t * Returns a visible column from a column.\n\t * @see {@link CursorColumns}\n\t */\n\tpublic columnFromVisibleColumn(model: ICursorSimpleModel, lineNumber: number, visibleColumn: number): number {\n\t\tconst result = CursorColumns.columnFromVisibleColumn(model.getLineContent(lineNumber), visibleColumn, this.tabSize);\n\n\t\tconst minColumn = model.getLineMinColumn(lineNumber);\n\t\tif (result < minColumn) {\n\t\t\treturn minColumn;\n\t\t}\n\n\t\tconst maxColumn = model.getLineMaxColumn(lineNumber);\n\t\tif (result > maxColumn) {\n\t\t\treturn maxColumn;\n\t\t}\n\n\t\treturn result;\n\t}\n}\n\n/**\n * Represents a simple model (either the model or the view model).\n */\nexport interface ICursorSimpleModel {\n\tgetLineCount(): number;\n\tgetLineContent(lineNumber: number): string;\n\tgetLineMinColumn(lineNumber: number): number;\n\tgetLineMaxColumn(lineNumber: number): number;\n\tgetLineFirstNonWhitespaceColumn(lineNumber: number): number;\n\tnormalizePosition(position: Position, affinity: PositionAffinity): Position;\n\n\t/**\n\t * Gets the column at which indentation stops at a given line.\n\t * @internal\n\t */\n\tgetLineIndentColumn(lineNumber: number): number;\n}\n\nexport type PartialCursorState = CursorState | PartialModelCursorState | PartialViewCursorState;\n\nexport class CursorState {\n\t_cursorStateBrand: void = undefined;\n\n\tpublic static fromModelState(modelState: SingleCursorState): PartialModelCursorState {\n\t\treturn new PartialModelCursorState(modelState);\n\t}\n\n\tpublic static fromViewState(viewState: SingleCursorState): PartialViewCursorState {\n\t\treturn new PartialViewCursorState(viewState);\n\t}\n\n\tpublic static fromModelSelection(modelSelection: ISelection): PartialModelCursorState {\n\t\tconst selection = Selection.liftSelection(modelSelection);\n\t\tconst modelState = new SingleCursorState(\n\t\t\tRange.fromPositions(selection.getSelectionStart()),\n\t\t\tSelectionStartKind.Simple, 0,\n\t\t\tselection.getPosition(), 0\n\t\t);\n\t\treturn CursorState.fromModelState(modelState);\n\t}\n\n\tpublic static fromModelSelections(modelSelections: readonly ISelection[]): PartialModelCursorState[] {\n\t\tconst states: PartialModelCursorState[] = [];\n\t\tfor (let i = 0, len = modelSelections.length; i < len; i++) {\n\t\t\tstates[i] = this.fromModelSelection(modelSelections[i]);\n\t\t}\n\t\treturn states;\n\t}\n\n\treadonly modelState: SingleCursorState;\n\treadonly viewState: SingleCursorState;\n\n\tconstructor(modelState: SingleCursorState, viewState: SingleCursorState) {\n\t\tthis.modelState = modelState;\n\t\tthis.viewState = viewState;\n\t}\n\n\tpublic equals(other: CursorState): boolean {\n\t\treturn (this.viewState.equals(other.viewState) && this.modelState.equals(other.modelState));\n\t}\n}\n\nexport class PartialModelCursorState {\n\treadonly modelState: SingleCursorState;\n\treadonly viewState: null;\n\n\tconstructor(modelState: SingleCursorState) {\n\t\tthis.modelState = modelState;\n\t\tthis.viewState = null;\n\t}\n}\n\nexport class PartialViewCursorState {\n\treadonly modelState: null;\n\treadonly viewState: SingleCursorState;\n\n\tconstructor(viewState: SingleCursorState) {\n\t\tthis.modelState = null;\n\t\tthis.viewState = viewState;\n\t}\n}\n\nexport const enum SelectionStartKind {\n\tSimple,\n\tWord,\n\tLine\n}\n\n/**\n * Represents the cursor state on either the model or on the view model.\n */\nexport class SingleCursorState {\n\t_singleCursorStateBrand: void = undefined;\n\n\tpublic readonly selection: Selection;\n\n\tconstructor(\n\t\tpublic readonly selectionStart: Range,\n\t\tpublic readonly selectionStartKind: SelectionStartKind,\n\t\tpublic readonly selectionStartLeftoverVisibleColumns: number,\n\t\tpublic readonly position: Position,\n\t\tpublic readonly leftoverVisibleColumns: number,\n\t) {\n\t\tthis.selection = SingleCursorState._computeSelection(this.selectionStart, this.position);\n\t}\n\n\tpublic equals(other: SingleCursorState) {\n\t\treturn (\n\t\t\tthis.selectionStartLeftoverVisibleColumns === other.selectionStartLeftoverVisibleColumns\n\t\t\t&& this.leftoverVisibleColumns === other.leftoverVisibleColumns\n\t\t\t&& this.selectionStartKind === other.selectionStartKind\n\t\t\t&& this.position.equals(other.position)\n\t\t\t&& this.selectionStart.equalsRange(other.selectionStart)\n\t\t);\n\t}\n\n\tpublic hasSelection(): boolean {\n\t\treturn (!this.selection.isEmpty() || !this.selectionStart.isEmpty());\n\t}\n\n\tpublic move(inSelectionMode: boolean, lineNumber: number, column: number, leftoverVisibleColumns: number): SingleCursorState {\n\t\tif (inSelectionMode) {\n\t\t\t// move just position\n\t\t\treturn new SingleCursorState(\n\t\t\t\tthis.selectionStart,\n\t\t\t\tthis.selectionStartKind,\n\t\t\t\tthis.selectionStartLeftoverVisibleColumns,\n\t\t\t\tnew Position(lineNumber, column),\n\t\t\t\tleftoverVisibleColumns\n\t\t\t);\n\t\t} else {\n\t\t\t// move everything\n\t\t\treturn new SingleCursorState(\n\t\t\t\tnew Range(lineNumber, column, lineNumber, column),\n\t\t\t\tSelectionStartKind.Simple,\n\t\t\t\tleftoverVisibleColumns,\n\t\t\t\tnew Position(lineNumber, column),\n\t\t\t\tleftoverVisibleColumns\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate static _computeSelection(selectionStart: Range, position: Position): Selection {\n\t\tif (selectionStart.isEmpty() || !position.isBeforeOrEqual(selectionStart.getStartPosition())) {\n\t\t\treturn Selection.fromPositions(selectionStart.getStartPosition(), position);\n\t\t} else {\n\t\t\treturn Selection.fromPositions(selectionStart.getEndPosition(), position);\n\t\t}\n\t}\n}\n\nexport class EditOperationResult {\n\t_editOperationResultBrand: void = undefined;\n\n\treadonly type: EditOperationType;\n\treadonly commands: Array<ICommand | null>;\n\treadonly shouldPushStackElementBefore: boolean;\n\treadonly shouldPushStackElementAfter: boolean;\n\n\tconstructor(\n\t\ttype: EditOperationType,\n\t\tcommands: Array<ICommand | null>,\n\t\topts: {\n\t\t\tshouldPushStackElementBefore: boolean;\n\t\t\tshouldPushStackElementAfter: boolean;\n\t\t}\n\t) {\n\t\tthis.type = type;\n\t\tthis.commands = commands;\n\t\tthis.shouldPushStackElementBefore = opts.shouldPushStackElementBefore;\n\t\tthis.shouldPushStackElementAfter = opts.shouldPushStackElementAfter;\n\t}\n}\n\nexport function isQuote(ch: string): boolean {\n\treturn (ch === '\\'' || ch === '\"' || ch === '`');\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ConfigurationChangedEvent, EditorAutoClosingEditStrategy, EditorAutoClosingStrategy, EditorAutoIndentStrategy, EditorAutoSurroundStrategy, EditorOption } from './config/editorOptions.js';\nimport { LineTokens } from './tokens/lineTokens.js';\nimport { Position } from './core/position.js';\nimport { Range } from './core/range.js';\nimport { ISelection, Selection } from './core/selection.js';\nimport { ICommand } from './editorCommon.js';\nimport { IEditorConfiguration } from './config/editorConfiguration.js';\nimport { PositionAffinity, TextModelResolvedOptions } from './model.js';\nimport { AutoClosingPairs } from './languages/languageConfiguration.js';\nimport { ILanguageConfigurationService } from './languages/languageConfigurationRegistry.js';\nimport { createScopedLineTokens } from './languages/supports.js';\nimport { IElectricAction } from './languages/supports/electricCharacter.js';\nimport { CursorColumns } from './core/cursorColumns.js';\nimport { normalizeIndentation } from './core/misc/indentation.js';\nimport { InputMode } from './inputMode.js';\n\nexport interface IColumnSelectData {\n\tisReal: boolean;\n\tfromViewLineNumber: number;\n\tfromViewVisualColumn: number;\n\ttoViewLineNumber: number;\n\ttoViewVisualColumn: number;\n}\n\n/**\n * This is an operation type that will be recorded for undo/redo purposes.\n * The goal is to introduce an undo stop when the controller switches between different operation types.\n */\nexport const enum EditOperationType {\n\tOther = 0,\n\tDeletingLeft = 2,\n\tDeletingRight = 3,\n\tTypingOther = 4,\n\tTypingFirstSpace = 5,\n\tTypingConsecutiveSpace = 6,\n}\n\nexport interface CharacterMap {\n\t[char: string]: string;\n}\n\nconst autoCloseAlways = () => true;\nconst autoCloseNever = () => false;\nconst autoCloseBeforeWhitespace = (chr: string) => (chr === ' ' || chr === '\\t');\n\nexport class CursorConfiguration {\n\t_cursorMoveConfigurationBrand: void = undefined;\n\n\tpublic readonly readOnly: boolean;\n\tpublic readonly tabSize: number;\n\tpublic readonly indentSize: number;\n\tpublic readonly insertSpaces: boolean;\n\tpublic readonly stickyTabStops: boolean;\n\tpublic readonly pageSize: number;\n\tpublic readonly lineHeight: number;\n\tpublic readonly typicalHalfwidthCharacterWidth: number;\n\tpublic readonly useTabStops: boolean;\n\tpublic readonly trimWhitespaceOnDelete: boolean;\n\tpublic readonly wordSeparators: string;\n\tpublic readonly emptySelectionClipboard: boolean;\n\tpublic readonly copyWithSyntaxHighlighting: boolean;\n\tpublic readonly multiCursorMergeOverlapping: boolean;\n\tpublic readonly multiCursorPaste: 'spread' | 'full';\n\tpublic readonly multiCursorLimit: number;\n\tpublic readonly autoClosingBrackets: EditorAutoClosingStrategy;\n\tpublic readonly autoClosingComments: EditorAutoClosingStrategy;\n\tpublic readonly autoClosingQuotes: EditorAutoClosingStrategy;\n\tpublic readonly autoClosingDelete: EditorAutoClosingEditStrategy;\n\tpublic readonly autoClosingOvertype: EditorAutoClosingEditStrategy;\n\tpublic readonly autoSurround: EditorAutoSurroundStrategy;\n\tpublic readonly autoIndent: EditorAutoIndentStrategy;\n\tpublic readonly autoClosingPairs: AutoClosingPairs;\n\tpublic readonly surroundingPairs: CharacterMap;\n\tpublic readonly blockCommentStartToken: string | null;\n\tpublic readonly shouldAutoCloseBefore: { quote: (ch: string) => boolean; bracket: (ch: string) => boolean; comment: (ch: string) => boolean };\n\tpublic readonly wordSegmenterLocales: string[];\n\tpublic readonly overtypeOnPaste: boolean;\n\n\tprivate readonly _languageId: string;\n\tprivate _electricChars: { [key: string]: boolean } | null;\n\n\tpublic static shouldRecreate(e: ConfigurationChangedEvent): boolean {\n\t\treturn (\n\t\t\te.hasChanged(EditorOption.layoutInfo)\n\t\t\t|| e.hasChanged(EditorOption.wordSeparators)\n\t\t\t|| e.hasChanged(EditorOption.emptySelectionClipboard)\n\t\t\t|| e.hasChanged(EditorOption.multiCursorMergeOverlapping)\n\t\t\t|| e.hasChanged(EditorOption.multiCursorPaste)\n\t\t\t|| e.hasChanged(EditorOption.multiCursorLimit)\n\t\t\t|| e.hasChanged(EditorOption.autoClosingBrackets)\n\t\t\t|| e.hasChanged(EditorOption.autoClosingComments)\n\t\t\t|| e.hasChanged(EditorOption.autoClosingQuotes)\n\t\t\t|| e.hasChanged(EditorOption.autoClosingDelete)\n\t\t\t|| e.hasChanged(EditorOption.autoClosingOvertype)\n\t\t\t|| e.hasChanged(EditorOption.autoSurround)\n\t\t\t|| e.hasChanged(EditorOption.useTabStops)\n\t\t\t|| e.hasChanged(EditorOption.trimWhitespaceOnDelete)\n\t\t\t|| e.hasChanged(EditorOption.fontInfo)\n\t\t\t|| e.hasChanged(EditorOption.readOnly)\n\t\t\t|| e.hasChanged(EditorOption.wordSegmenterLocales)\n\t\t\t|| e.hasChanged(EditorOption.overtypeOnPaste)\n\t\t);\n\t}\n\n\tconstructor(\n\t\tlanguageId: string,\n\t\tmodelOptions: TextModelResolvedOptions,\n\t\tconfiguration: IEditorConfiguration,\n\t\tpublic readonly languageConfigurationService: ILanguageConfigurationService\n\t) {\n\t\tthis._languageId = languageId;\n\n\t\tconst options = configuration.options;\n\t\tconst layoutInfo = options.get(EditorOption.layoutInfo);\n\t\tconst fontInfo = options.get(EditorOption.fontInfo);\n\n\t\tthis.readOnly = options.get(EditorOption.readOnly);\n\t\tthis.tabSize = modelOptions.tabSize;\n\t\tthis.indentSize = modelOptions.indentSize;\n\t\tthis.insertSpaces = modelOptions.insertSpaces;\n\t\tthis.stickyTabStops = options.get(EditorOption.stickyTabStops);\n\t\tthis.lineHeight = fontInfo.lineHeight;\n\t\tthis.typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n\t\tthis.pageSize = Math.max(1, Math.floor(layoutInfo.height / this.lineHeight) - 2);\n\t\tthis.useTabStops = options.get(EditorOption.useTabStops);\n\t\tthis.trimWhitespaceOnDelete = options.get(EditorOption.trimWhitespaceOnDelete);\n\t\tthis.wordSeparators = options.get(EditorOption.wordSeparators);\n\t\tthis.emptySelectionClipboard = options.get(EditorOption.emptySelectionClipboard);\n\t\tthis.copyWithSyntaxHighlighting = options.get(EditorOption.copyWithSyntaxHighlighting);\n\t\tthis.multiCursorMergeOverlapping = options.get(EditorOption.multiCursorMergeOverlapping);\n\t\tthis.multiCursorPaste = options.get(EditorOption.multiCursorPaste);\n\t\tthis.multiCursorLimit = options.get(EditorOption.multiCursorLimit);\n\t\tthis.autoClosingBrackets = options.get(EditorOption.autoClosingBrackets);\n\t\tthis.autoClosingComments = options.get(EditorOption.autoClosingComments);\n\t\tthis.autoClosingQuotes = options.get(EditorOption.autoClosingQuotes);\n\t\tthis.autoClosingDelete = options.get(EditorOption.autoClosingDelete);\n\t\tthis.autoClosingOvertype = options.get(EditorOption.autoClosingOvertype);\n\t\tthis.autoSurround = options.get(EditorOption.autoSurround);\n\t\tthis.autoIndent = options.get(EditorOption.autoIndent);\n\t\tthis.wordSegmenterLocales = options.get(EditorOption.wordSegmenterLocales);\n\t\tthis.overtypeOnPaste = options.get(EditorOption.overtypeOnPaste);\n\n\t\tthis.surroundingPairs = {};\n\t\tthis._electricChars = null;\n\n\t\tthis.shouldAutoCloseBefore = {\n\t\t\tquote: this._getShouldAutoClose(languageId, this.autoClosingQuotes, true),\n\t\t\tcomment: this._getShouldAutoClose(languageId, this.autoClosingComments, false),\n\t\t\tbracket: this._getShouldAutoClose(languageId, this.autoClosingBrackets, false),\n\t\t};\n\n\t\tthis.autoClosingPairs = this.languageConfigurationService.getLanguageConfiguration(languageId).getAutoClosingPairs();\n\n\t\tconst surroundingPairs = this.languageConfigurationService.getLanguageConfiguration(languageId).getSurroundingPairs();\n\t\tif (surroundingPairs) {\n\t\t\tfor (const pair of surroundingPairs) {\n\t\t\t\tthis.surroundingPairs[pair.open] = pair.close;\n\t\t\t}\n\t\t}\n\n\t\tconst commentsConfiguration = this.languageConfigurationService.getLanguageConfiguration(languageId).comments;\n\t\tthis.blockCommentStartToken = commentsConfiguration?.blockCommentStartToken ?? null;\n\t}\n\n\tpublic get electricChars() {\n\t\tif (!this._electricChars) {\n\t\t\tthis._electricChars = {};\n\t\t\tconst electricChars = this.languageConfigurationService.getLanguageConfiguration(this._languageId).electricCharacter?.getElectricCharacters();\n\t\t\tif (electricChars) {\n\t\t\t\tfor (const char of electricChars) {\n\t\t\t\t\tthis._electricChars[char] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this._electricChars;\n\t}\n\n\tpublic get inputMode(): 'insert' | 'overtype' {\n\t\treturn InputMode.getInputMode();\n\t}\n\n\t/**\n\t * Should return opening bracket type to match indentation with\n\t */\n\tpublic onElectricCharacter(character: string, context: LineTokens, column: number): IElectricAction | null {\n\t\tconst scopedLineTokens = createScopedLineTokens(context, column - 1);\n\t\tconst electricCharacterSupport = this.languageConfigurationService.getLanguageConfiguration(scopedLineTokens.languageId).electricCharacter;\n\t\tif (!electricCharacterSupport) {\n\t\t\treturn null;\n\t\t}\n\t\treturn electricCharacterSupport.onElectricCharacter(character, scopedLineTokens, column - scopedLineTokens.firstCharOffset);\n\t}\n\n\tpublic normalizeIndentation(str: string): string {\n\t\treturn normalizeIndentation(str, this.indentSize, this.insertSpaces);\n\t}\n\n\tprivate _getShouldAutoClose(languageId: string, autoCloseConfig: EditorAutoClosingStrategy, forQuotes: boolean): (ch: string) => boolean {\n\t\tswitch (autoCloseConfig) {\n\t\t\tcase 'beforeWhitespace':\n\t\t\t\treturn autoCloseBeforeWhitespace;\n\t\t\tcase 'languageDefined':\n\t\t\t\treturn this._getLanguageDefinedShouldAutoClose(languageId, forQuotes);\n\t\t\tcase 'always':\n\t\t\t\treturn autoCloseAlways;\n\t\t\tcase 'never':\n\t\t\t\treturn autoCloseNever;\n\t\t}\n\t}\n\n\tprivate _getLanguageDefinedShouldAutoClose(languageId: string, forQuotes: boolean): (ch: string) => boolean {\n\t\tconst autoCloseBeforeSet = this.languageConfigurationService.getLanguageConfiguration(languageId).getAutoCloseBeforeSet(forQuotes);\n\t\treturn c => autoCloseBeforeSet.indexOf(c) !== -1;\n\t}\n\n\t/**\n\t * Returns a visible column from a column.\n\t * @see {@link CursorColumns}\n\t */\n\tpublic visibleColumnFromColumn(model: ICursorSimpleModel, position: Position): number {\n\t\treturn CursorColumns.visibleColumnFromColumn(model.getLineContent(position.lineNumber), position.column, this.tabSize);\n\t}\n\n\t/**\n\t * Returns a visible column from a column.\n\t * @see {@link CursorColumns}\n\t */\n\tpublic columnFromVisibleColumn(model: ICursorSimpleModel, lineNumber: number, visibleColumn: number): number {\n\t\tconst result = CursorColumns.columnFromVisibleColumn(model.getLineContent(lineNumber), visibleColumn, this.tabSize);\n\n\t\tconst minColumn = model.getLineMinColumn(lineNumber);\n\t\tif (result < minColumn) {\n\t\t\treturn minColumn;\n\t\t}\n\n\t\tconst maxColumn = model.getLineMaxColumn(lineNumber);\n\t\tif (result > maxColumn) {\n\t\t\treturn maxColumn;\n\t\t}\n\n\t\treturn result;\n\t}\n}\n\n/**\n * Represents a simple model (either the model or the view model).\n */\nexport interface ICursorSimpleModel {\n\tgetLineCount(): number;\n\tgetLineContent(lineNumber: number): string;\n\tgetLineMinColumn(lineNumber: number): number;\n\tgetLineMaxColumn(lineNumber: number): number;\n\tgetLineFirstNonWhitespaceColumn(lineNumber: number): number;\n\tnormalizePosition(position: Position, affinity: PositionAffinity): Position;\n\n\t/**\n\t * Gets the column at which indentation stops at a given line.\n\t * @internal\n\t */\n\tgetLineIndentColumn(lineNumber: number): number;\n}\n\nexport type PartialCursorState = CursorState | PartialModelCursorState | PartialViewCursorState;\n\nexport class CursorState {\n\t_cursorStateBrand: void = undefined;\n\n\tpublic static fromModelState(modelState: SingleCursorState): PartialModelCursorState {\n\t\treturn new PartialModelCursorState(modelState);\n\t}\n\n\tpublic static fromViewState(viewState: SingleCursorState): PartialViewCursorState {\n\t\treturn new PartialViewCursorState(viewState);\n\t}\n\n\tpublic static fromModelSelection(modelSelection: ISelection): PartialModelCursorState {\n\t\tconst selection = Selection.liftSelection(modelSelection);\n\t\tconst modelState = new SingleCursorState(\n\t\t\tRange.fromPositions(selection.getSelectionStart()),\n\t\t\tSelectionStartKind.Simple, 0,\n\t\t\tselection.getPosition(), 0\n\t\t);\n\t\treturn CursorState.fromModelState(modelState);\n\t}\n\n\tpublic static fromModelSelections(modelSelections: readonly ISelection[]): PartialModelCursorState[] {\n\t\tconst states: PartialModelCursorState[] = [];\n\t\tfor (let i = 0, len = modelSelections.length; i < len; i++) {\n\t\t\tstates[i] = this.fromModelSelection(modelSelections[i]);\n\t\t}\n\t\treturn states;\n\t}\n\n\treadonly modelState: SingleCursorState;\n\treadonly viewState: SingleCursorState;\n\n\tconstructor(modelState: SingleCursorState, viewState: SingleCursorState) {\n\t\tthis.modelState = modelState;\n\t\tthis.viewState = viewState;\n\t}\n\n\tpublic equals(other: CursorState): boolean {\n\t\treturn (this.viewState.equals(other.viewState) && this.modelState.equals(other.modelState));\n\t}\n}\n\nexport class PartialModelCursorState {\n\treadonly modelState: SingleCursorState;\n\treadonly viewState: null;\n\n\tconstructor(modelState: SingleCursorState) {\n\t\tthis.modelState = modelState;\n\t\tthis.viewState = null;\n\t}\n}\n\nexport class PartialViewCursorState {\n\treadonly modelState: null;\n\treadonly viewState: SingleCursorState;\n\n\tconstructor(viewState: SingleCursorState) {\n\t\tthis.modelState = null;\n\t\tthis.viewState = viewState;\n\t}\n}\n\nexport const enum SelectionStartKind {\n\tSimple,\n\tWord,\n\tLine\n}\n\n/**\n * Represents the cursor state on either the model or on the view model.\n */\nexport class SingleCursorState {\n\t_singleCursorStateBrand: void = undefined;\n\n\tpublic readonly selection: Selection;\n\n\tconstructor(\n\t\tpublic readonly selectionStart: Range,\n\t\tpublic readonly selectionStartKind: SelectionStartKind,\n\t\tpublic readonly selectionStartLeftoverVisibleColumns: number,\n\t\tpublic readonly position: Position,\n\t\tpublic readonly leftoverVisibleColumns: number,\n\t) {\n\t\tthis.selection = SingleCursorState._computeSelection(this.selectionStart, this.position);\n\t}\n\n\tpublic equals(other: SingleCursorState) {\n\t\treturn (\n\t\t\tthis.selectionStartLeftoverVisibleColumns === other.selectionStartLeftoverVisibleColumns\n\t\t\t&& this.leftoverVisibleColumns === other.leftoverVisibleColumns\n\t\t\t&& this.selectionStartKind === other.selectionStartKind\n\t\t\t&& this.position.equals(other.position)\n\t\t\t&& this.selectionStart.equalsRange(other.selectionStart)\n\t\t);\n\t}\n\n\tpublic hasSelection(): boolean {\n\t\treturn (!this.selection.isEmpty() || !this.selectionStart.isEmpty());\n\t}\n\n\tpublic move(inSelectionMode: boolean, lineNumber: number, column: number, leftoverVisibleColumns: number): SingleCursorState {\n\t\tif (inSelectionMode) {\n\t\t\t// move just position\n\t\t\treturn new SingleCursorState(\n\t\t\t\tthis.selectionStart,\n\t\t\t\tthis.selectionStartKind,\n\t\t\t\tthis.selectionStartLeftoverVisibleColumns,\n\t\t\t\tnew Position(lineNumber, column),\n\t\t\t\tleftoverVisibleColumns\n\t\t\t);\n\t\t} else {\n\t\t\t// move everything\n\t\t\treturn new SingleCursorState(\n\t\t\t\tnew Range(lineNumber, column, lineNumber, column),\n\t\t\t\tSelectionStartKind.Simple,\n\t\t\t\tleftoverVisibleColumns,\n\t\t\t\tnew Position(lineNumber, column),\n\t\t\t\tleftoverVisibleColumns\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate static _computeSelection(selectionStart: Range, position: Position): Selection {\n\t\tif (selectionStart.isEmpty() || !position.isBeforeOrEqual(selectionStart.getStartPosition())) {\n\t\t\treturn Selection.fromPositions(selectionStart.getStartPosition(), position);\n\t\t} else {\n\t\t\treturn Selection.fromPositions(selectionStart.getEndPosition(), position);\n\t\t}\n\t}\n}\n\nexport class EditOperationResult {\n\t_editOperationResultBrand: void = undefined;\n\n\treadonly type: EditOperationType;\n\treadonly commands: Array<ICommand | null>;\n\treadonly shouldPushStackElementBefore: boolean;\n\treadonly shouldPushStackElementAfter: boolean;\n\n\tconstructor(\n\t\ttype: EditOperationType,\n\t\tcommands: Array<ICommand | null>,\n\t\topts: {\n\t\t\tshouldPushStackElementBefore: boolean;\n\t\t\tshouldPushStackElementAfter: boolean;\n\t\t}\n\t) {\n\t\tthis.type = type;\n\t\tthis.commands = commands;\n\t\tthis.shouldPushStackElementBefore = opts.shouldPushStackElementBefore;\n\t\tthis.shouldPushStackElementAfter = opts.shouldPushStackElementAfter;\n\t}\n}\n\nexport function isQuote(ch: string): boolean {\n\treturn (ch === '\\'' || ch === '\"' || ch === '`');\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 272, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/monaco-editor/esm/vs/editor/common/commands/replaceCommand.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/commands/file%3A/mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/commands/replaceCommand.ts","file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/commands/vs/editor/common/commands/replaceCommand.ts"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { Selection, SelectionDirection } from '../core/selection.js';\nimport { ICommand, ICursorStateComputerData, IEditOperationBuilder } from '../editorCommon.js';\nimport { ITextModel } from '../model.js';\n\nexport class ReplaceCommand implements ICommand {\n\n\tprivate readonly _range: Range;\n\tprivate readonly _text: string;\n\tpublic readonly insertsAutoWhitespace: boolean;\n\n\tconstructor(range: Range, text: string, insertsAutoWhitespace: boolean = false) {\n\t\tthis._range = range;\n\t\tthis._text = text;\n\t\tthis.insertsAutoWhitespace = insertsAutoWhitespace;\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tbuilder.addTrackedEditOperation(this._range, this._text);\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\tconst inverseEditOperations = helper.getInverseEditOperations();\n\t\tconst srcRange = inverseEditOperations[0].range;\n\t\treturn Selection.fromPositions(srcRange.getEndPosition());\n\t}\n}\n\nexport class ReplaceOvertypeCommand implements ICommand {\n\n\tprivate readonly _range: Range;\n\tprivate readonly _text: string;\n\tpublic readonly insertsAutoWhitespace: boolean;\n\n\tconstructor(range: Range, text: string, insertsAutoWhitespace: boolean = false) {\n\t\tthis._range = range;\n\t\tthis._text = text;\n\t\tthis.insertsAutoWhitespace = insertsAutoWhitespace;\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tconst intialStartPosition = this._range.getStartPosition();\n\t\tconst initialEndPosition = this._range.getEndPosition();\n\t\tconst initialEndLineNumber = initialEndPosition.lineNumber;\n\t\tconst offsetDelta = this._text.length + (this._range.isEmpty() ? 0 : -1);\n\t\tlet endPosition = addPositiveOffsetToModelPosition(model, initialEndPosition, offsetDelta);\n\t\tif (endPosition.lineNumber > initialEndLineNumber) {\n\t\t\tendPosition = new Position(initialEndLineNumber, model.getLineMaxColumn(initialEndLineNumber));\n\t\t}\n\t\tconst replaceRange = Range.fromPositions(intialStartPosition, endPosition);\n\t\tbuilder.addTrackedEditOperation(replaceRange, this._text);\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\tconst inverseEditOperations = helper.getInverseEditOperations();\n\t\tconst srcRange = inverseEditOperations[0].range;\n\t\treturn Selection.fromPositions(srcRange.getEndPosition());\n\t}\n}\n\nexport class ReplaceCommandThatSelectsText implements ICommand {\n\n\tprivate readonly _range: Range;\n\tprivate readonly _text: string;\n\n\tconstructor(range: Range, text: string) {\n\t\tthis._range = range;\n\t\tthis._text = text;\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tbuilder.addTrackedEditOperation(this._range, this._text);\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\tconst inverseEditOperations = helper.getInverseEditOperations();\n\t\tconst srcRange = inverseEditOperations[0].range;\n\t\treturn Selection.fromRange(srcRange, SelectionDirection.LTR);\n\t}\n}\n\nexport class ReplaceCommandWithoutChangingPosition implements ICommand {\n\n\tprivate readonly _range: Range;\n\tprivate readonly _text: string;\n\tpublic readonly insertsAutoWhitespace: boolean;\n\n\tconstructor(range: Range, text: string, insertsAutoWhitespace: boolean = false) {\n\t\tthis._range = range;\n\t\tthis._text = text;\n\t\tthis.insertsAutoWhitespace = insertsAutoWhitespace;\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tbuilder.addTrackedEditOperation(this._range, this._text);\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\tconst inverseEditOperations = helper.getInverseEditOperations();\n\t\tconst srcRange = inverseEditOperations[0].range;\n\t\treturn Selection.fromPositions(srcRange.getStartPosition());\n\t}\n}\n\nexport class ReplaceCommandWithOffsetCursorState implements ICommand {\n\n\tprivate readonly _range: Range;\n\tprivate readonly _text: string;\n\tprivate readonly _columnDeltaOffset: number;\n\tprivate readonly _lineNumberDeltaOffset: number;\n\tpublic readonly insertsAutoWhitespace: boolean;\n\n\tconstructor(range: Range, text: string, lineNumberDeltaOffset: number, columnDeltaOffset: number, insertsAutoWhitespace: boolean = false) {\n\t\tthis._range = range;\n\t\tthis._text = text;\n\t\tthis._columnDeltaOffset = columnDeltaOffset;\n\t\tthis._lineNumberDeltaOffset = lineNumberDeltaOffset;\n\t\tthis.insertsAutoWhitespace = insertsAutoWhitespace;\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tbuilder.addTrackedEditOperation(this._range, this._text);\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\tconst inverseEditOperations = helper.getInverseEditOperations();\n\t\tconst srcRange = inverseEditOperations[0].range;\n\t\treturn Selection.fromPositions(srcRange.getEndPosition().delta(this._lineNumberDeltaOffset, this._columnDeltaOffset));\n\t}\n}\n\nexport class ReplaceOvertypeCommandOnCompositionEnd implements ICommand {\n\n\tprivate readonly _range: Range;\n\n\tconstructor(range: Range) {\n\t\tthis._range = range;\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tconst text = model.getValueInRange(this._range);\n\t\tconst initialEndPosition = this._range.getEndPosition();\n\t\tconst initialEndLineNumber = initialEndPosition.lineNumber;\n\t\tlet endPosition = addPositiveOffsetToModelPosition(model, initialEndPosition, text.length);\n\t\tif (endPosition.lineNumber > initialEndLineNumber) {\n\t\t\tendPosition = new Position(initialEndLineNumber, model.getLineMaxColumn(initialEndLineNumber));\n\t\t}\n\t\tconst replaceRange = Range.fromPositions(initialEndPosition, endPosition);\n\t\tbuilder.addTrackedEditOperation(replaceRange, '');\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\tconst inverseEditOperations = helper.getInverseEditOperations();\n\t\tconst srcRange = inverseEditOperations[0].range;\n\t\treturn Selection.fromPositions(srcRange.getEndPosition());\n\t}\n}\n\nexport class ReplaceCommandThatPreservesSelection implements ICommand {\n\n\tprivate readonly _range: Range;\n\tprivate readonly _text: string;\n\tprivate readonly _initialSelection: Selection;\n\tprivate readonly _forceMoveMarkers: boolean;\n\tprivate _selectionId: string | null;\n\n\tconstructor(editRange: Range, text: string, initialSelection: Selection, forceMoveMarkers: boolean = false) {\n\t\tthis._range = editRange;\n\t\tthis._text = text;\n\t\tthis._initialSelection = initialSelection;\n\t\tthis._forceMoveMarkers = forceMoveMarkers;\n\t\tthis._selectionId = null;\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tbuilder.addTrackedEditOperation(this._range, this._text, this._forceMoveMarkers);\n\t\tthis._selectionId = builder.trackSelection(this._initialSelection);\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\treturn helper.getTrackedSelection(this._selectionId!);\n\t}\n}\n\nfunction addPositiveOffsetToModelPosition(model: ITextModel, position: Position, offset: number): Position {\n\tif (offset < 0) {\n\t\tthrow new Error('Unexpected negative delta');\n\t}\n\tconst lineCount = model.getLineCount();\n\tlet endPosition = new Position(lineCount, model.getLineMaxColumn(lineCount));\n\tfor (let lineNumber = position.lineNumber; lineNumber <= lineCount; lineNumber++) {\n\t\tif (lineNumber === position.lineNumber) {\n\t\t\tconst futureOffset = offset - model.getLineMaxColumn(position.lineNumber) + position.column;\n\t\t\tif (futureOffset <= 0) {\n\t\t\t\tendPosition = new Position(position.lineNumber, position.column + offset);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\toffset = futureOffset;\n\t\t} else {\n\t\t\tconst futureOffset = offset - model.getLineMaxColumn(lineNumber);\n\t\t\tif (futureOffset <= 0) {\n\t\t\t\tendPosition = new Position(lineNumber, offset);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\toffset = futureOffset;\n\t\t}\n\t}\n\treturn endPosition;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { Selection, SelectionDirection } from '../core/selection.js';\nimport { ICommand, ICursorStateComputerData, IEditOperationBuilder } from '../editorCommon.js';\nimport { ITextModel } from '../model.js';\n\nexport class ReplaceCommand implements ICommand {\n\n\tprivate readonly _range: Range;\n\tprivate readonly _text: string;\n\tpublic readonly insertsAutoWhitespace: boolean;\n\n\tconstructor(range: Range, text: string, insertsAutoWhitespace: boolean = false) {\n\t\tthis._range = range;\n\t\tthis._text = text;\n\t\tthis.insertsAutoWhitespace = insertsAutoWhitespace;\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tbuilder.addTrackedEditOperation(this._range, this._text);\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\tconst inverseEditOperations = helper.getInverseEditOperations();\n\t\tconst srcRange = inverseEditOperations[0].range;\n\t\treturn Selection.fromPositions(srcRange.getEndPosition());\n\t}\n}\n\nexport class ReplaceOvertypeCommand implements ICommand {\n\n\tprivate readonly _range: Range;\n\tprivate readonly _text: string;\n\tpublic readonly insertsAutoWhitespace: boolean;\n\n\tconstructor(range: Range, text: string, insertsAutoWhitespace: boolean = false) {\n\t\tthis._range = range;\n\t\tthis._text = text;\n\t\tthis.insertsAutoWhitespace = insertsAutoWhitespace;\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tconst intialStartPosition = this._range.getStartPosition();\n\t\tconst initialEndPosition = this._range.getEndPosition();\n\t\tconst initialEndLineNumber = initialEndPosition.lineNumber;\n\t\tconst offsetDelta = this._text.length + (this._range.isEmpty() ? 0 : -1);\n\t\tlet endPosition = addPositiveOffsetToModelPosition(model, initialEndPosition, offsetDelta);\n\t\tif (endPosition.lineNumber > initialEndLineNumber) {\n\t\t\tendPosition = new Position(initialEndLineNumber, model.getLineMaxColumn(initialEndLineNumber));\n\t\t}\n\t\tconst replaceRange = Range.fromPositions(intialStartPosition, endPosition);\n\t\tbuilder.addTrackedEditOperation(replaceRange, this._text);\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\tconst inverseEditOperations = helper.getInverseEditOperations();\n\t\tconst srcRange = inverseEditOperations[0].range;\n\t\treturn Selection.fromPositions(srcRange.getEndPosition());\n\t}\n}\n\nexport class ReplaceCommandThatSelectsText implements ICommand {\n\n\tprivate readonly _range: Range;\n\tprivate readonly _text: string;\n\n\tconstructor(range: Range, text: string) {\n\t\tthis._range = range;\n\t\tthis._text = text;\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tbuilder.addTrackedEditOperation(this._range, this._text);\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\tconst inverseEditOperations = helper.getInverseEditOperations();\n\t\tconst srcRange = inverseEditOperations[0].range;\n\t\treturn Selection.fromRange(srcRange, SelectionDirection.LTR);\n\t}\n}\n\nexport class ReplaceCommandWithoutChangingPosition implements ICommand {\n\n\tprivate readonly _range: Range;\n\tprivate readonly _text: string;\n\tpublic readonly insertsAutoWhitespace: boolean;\n\n\tconstructor(range: Range, text: string, insertsAutoWhitespace: boolean = false) {\n\t\tthis._range = range;\n\t\tthis._text = text;\n\t\tthis.insertsAutoWhitespace = insertsAutoWhitespace;\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tbuilder.addTrackedEditOperation(this._range, this._text);\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\tconst inverseEditOperations = helper.getInverseEditOperations();\n\t\tconst srcRange = inverseEditOperations[0].range;\n\t\treturn Selection.fromPositions(srcRange.getStartPosition());\n\t}\n}\n\nexport class ReplaceCommandWithOffsetCursorState implements ICommand {\n\n\tprivate readonly _range: Range;\n\tprivate readonly _text: string;\n\tprivate readonly _columnDeltaOffset: number;\n\tprivate readonly _lineNumberDeltaOffset: number;\n\tpublic readonly insertsAutoWhitespace: boolean;\n\n\tconstructor(range: Range, text: string, lineNumberDeltaOffset: number, columnDeltaOffset: number, insertsAutoWhitespace: boolean = false) {\n\t\tthis._range = range;\n\t\tthis._text = text;\n\t\tthis._columnDeltaOffset = columnDeltaOffset;\n\t\tthis._lineNumberDeltaOffset = lineNumberDeltaOffset;\n\t\tthis.insertsAutoWhitespace = insertsAutoWhitespace;\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tbuilder.addTrackedEditOperation(this._range, this._text);\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\tconst inverseEditOperations = helper.getInverseEditOperations();\n\t\tconst srcRange = inverseEditOperations[0].range;\n\t\treturn Selection.fromPositions(srcRange.getEndPosition().delta(this._lineNumberDeltaOffset, this._columnDeltaOffset));\n\t}\n}\n\nexport class ReplaceOvertypeCommandOnCompositionEnd implements ICommand {\n\n\tprivate readonly _range: Range;\n\n\tconstructor(range: Range) {\n\t\tthis._range = range;\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tconst text = model.getValueInRange(this._range);\n\t\tconst initialEndPosition = this._range.getEndPosition();\n\t\tconst initialEndLineNumber = initialEndPosition.lineNumber;\n\t\tlet endPosition = addPositiveOffsetToModelPosition(model, initialEndPosition, text.length);\n\t\tif (endPosition.lineNumber > initialEndLineNumber) {\n\t\t\tendPosition = new Position(initialEndLineNumber, model.getLineMaxColumn(initialEndLineNumber));\n\t\t}\n\t\tconst replaceRange = Range.fromPositions(initialEndPosition, endPosition);\n\t\tbuilder.addTrackedEditOperation(replaceRange, '');\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\tconst inverseEditOperations = helper.getInverseEditOperations();\n\t\tconst srcRange = inverseEditOperations[0].range;\n\t\treturn Selection.fromPositions(srcRange.getEndPosition());\n\t}\n}\n\nexport class ReplaceCommandThatPreservesSelection implements ICommand {\n\n\tprivate readonly _range: Range;\n\tprivate readonly _text: string;\n\tprivate readonly _initialSelection: Selection;\n\tprivate readonly _forceMoveMarkers: boolean;\n\tprivate _selectionId: string | null;\n\n\tconstructor(editRange: Range, text: string, initialSelection: Selection, forceMoveMarkers: boolean = false) {\n\t\tthis._range = editRange;\n\t\tthis._text = text;\n\t\tthis._initialSelection = initialSelection;\n\t\tthis._forceMoveMarkers = forceMoveMarkers;\n\t\tthis._selectionId = null;\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tbuilder.addTrackedEditOperation(this._range, this._text, this._forceMoveMarkers);\n\t\tthis._selectionId = builder.trackSelection(this._initialSelection);\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\treturn helper.getTrackedSelection(this._selectionId!);\n\t}\n}\n\nfunction addPositiveOffsetToModelPosition(model: ITextModel, position: Position, offset: number): Position {\n\tif (offset < 0) {\n\t\tthrow new Error('Unexpected negative delta');\n\t}\n\tconst lineCount = model.getLineCount();\n\tlet endPosition = new Position(lineCount, model.getLineMaxColumn(lineCount));\n\tfor (let lineNumber = position.lineNumber; lineNumber <= lineCount; lineNumber++) {\n\t\tif (lineNumber === position.lineNumber) {\n\t\t\tconst futureOffset = offset - model.getLineMaxColumn(position.lineNumber) + position.column;\n\t\t\tif (futureOffset <= 0) {\n\t\t\t\tendPosition = new Position(position.lineNumber, position.column + offset);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\toffset = futureOffset;\n\t\t} else {\n\t\t\tconst futureOffset = offset - model.getLineMaxColumn(lineNumber);\n\t\t\tif (futureOffset <= 0) {\n\t\t\t\tendPosition = new Position(lineNumber, offset);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\toffset = futureOffset;\n\t\t}\n\t}\n\treturn endPosition;\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 448, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/monaco-editor/esm/vs/editor/common/commands/shiftCommand.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/commands/file%3A/mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/commands/shiftCommand.ts","file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/commands/vs/editor/common/commands/shiftCommand.ts"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from '../../../base/common/charCode.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { CursorColumns } from '../core/cursorColumns.js';\nimport { Range } from '../core/range.js';\nimport { Selection, SelectionDirection } from '../core/selection.js';\nimport { ICommand, ICursorStateComputerData, IEditOperationBuilder } from '../editorCommon.js';\nimport { ITextModel } from '../model.js';\nimport { EditorAutoIndentStrategy } from '../config/editorOptions.js';\nimport { getEnterAction } from '../languages/enterAction.js';\nimport { ILanguageConfigurationService } from '../languages/languageConfigurationRegistry.js';\n\nexport interface IShiftCommandOpts {\n\tisUnshift: boolean;\n\ttabSize: number;\n\tindentSize: number;\n\tinsertSpaces: boolean;\n\tuseTabStops: boolean;\n\tautoIndent: EditorAutoIndentStrategy;\n}\n\nconst repeatCache: { [str: string]: string[] } = Object.create(null);\nfunction cachedStringRepeat(str: string, count: number): string {\n\tif (count <= 0) {\n\t\treturn '';\n\t}\n\tif (!repeatCache[str]) {\n\t\trepeatCache[str] = ['', str];\n\t}\n\tconst cache = repeatCache[str];\n\tfor (let i = cache.length; i <= count; i++) {\n\t\tcache[i] = cache[i - 1] + str;\n\t}\n\treturn cache[count];\n}\n\nexport class ShiftCommand implements ICommand {\n\n\tpublic static unshiftIndent(line: string, column: number, tabSize: number, indentSize: number, insertSpaces: boolean): string {\n\t\t// Determine the visible column where the content starts\n\t\tconst contentStartVisibleColumn = CursorColumns.visibleColumnFromColumn(line, column, tabSize);\n\n\t\tif (insertSpaces) {\n\t\t\tconst indent = cachedStringRepeat(' ', indentSize);\n\t\t\tconst desiredTabStop = CursorColumns.prevIndentTabStop(contentStartVisibleColumn, indentSize);\n\t\t\tconst indentCount = desiredTabStop / indentSize; // will be an integer\n\t\t\treturn cachedStringRepeat(indent, indentCount);\n\t\t} else {\n\t\t\tconst indent = '\\t';\n\t\t\tconst desiredTabStop = CursorColumns.prevRenderTabStop(contentStartVisibleColumn, tabSize);\n\t\t\tconst indentCount = desiredTabStop / tabSize; // will be an integer\n\t\t\treturn cachedStringRepeat(indent, indentCount);\n\t\t}\n\t}\n\n\tpublic static shiftIndent(line: string, column: number, tabSize: number, indentSize: number, insertSpaces: boolean): string {\n\t\t// Determine the visible column where the content starts\n\t\tconst contentStartVisibleColumn = CursorColumns.visibleColumnFromColumn(line, column, tabSize);\n\n\t\tif (insertSpaces) {\n\t\t\tconst indent = cachedStringRepeat(' ', indentSize);\n\t\t\tconst desiredTabStop = CursorColumns.nextIndentTabStop(contentStartVisibleColumn, indentSize);\n\t\t\tconst indentCount = desiredTabStop / indentSize; // will be an integer\n\t\t\treturn cachedStringRepeat(indent, indentCount);\n\t\t} else {\n\t\t\tconst indent = '\\t';\n\t\t\tconst desiredTabStop = CursorColumns.nextRenderTabStop(contentStartVisibleColumn, tabSize);\n\t\t\tconst indentCount = desiredTabStop / tabSize; // will be an integer\n\t\t\treturn cachedStringRepeat(indent, indentCount);\n\t\t}\n\t}\n\n\tprivate readonly _opts: IShiftCommandOpts;\n\tprivate readonly _selection: Selection;\n\tprivate _selectionId: string | null;\n\tprivate _useLastEditRangeForCursorEndPosition: boolean;\n\tprivate _selectionStartColumnStaysPut: boolean;\n\n\tconstructor(\n\t\trange: Selection,\n\t\topts: IShiftCommandOpts,\n\t\t@ILanguageConfigurationService private readonly _languageConfigurationService: ILanguageConfigurationService\n\t) {\n\t\tthis._opts = opts;\n\t\tthis._selection = range;\n\t\tthis._selectionId = null;\n\t\tthis._useLastEditRangeForCursorEndPosition = false;\n\t\tthis._selectionStartColumnStaysPut = false;\n\t}\n\n\tprivate _addEditOperation(builder: IEditOperationBuilder, range: Range, text: string) {\n\t\tif (this._useLastEditRangeForCursorEndPosition) {\n\t\t\tbuilder.addTrackedEditOperation(range, text);\n\t\t} else {\n\t\t\tbuilder.addEditOperation(range, text);\n\t\t}\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tconst startLine = this._selection.startLineNumber;\n\n\t\tlet endLine = this._selection.endLineNumber;\n\t\tif (this._selection.endColumn === 1 && startLine !== endLine) {\n\t\t\tendLine = endLine - 1;\n\t\t}\n\n\t\tconst { tabSize, indentSize, insertSpaces } = this._opts;\n\t\tconst shouldIndentEmptyLines = (startLine === endLine);\n\n\t\tif (this._opts.useTabStops) {\n\t\t\t// if indenting or outdenting on a whitespace only line\n\t\t\tif (this._selection.isEmpty()) {\n\t\t\t\tif (/^\\s*$/.test(model.getLineContent(startLine))) {\n\t\t\t\t\tthis._useLastEditRangeForCursorEndPosition = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// keep track of previous line's \"miss-alignment\"\n\t\t\tlet previousLineExtraSpaces = 0, extraSpaces = 0;\n\t\t\tfor (let lineNumber = startLine; lineNumber <= endLine; lineNumber++, previousLineExtraSpaces = extraSpaces) {\n\t\t\t\textraSpaces = 0;\n\t\t\t\tconst lineText = model.getLineContent(lineNumber);\n\t\t\t\tlet indentationEndIndex = strings.firstNonWhitespaceIndex(lineText);\n\n\t\t\t\tif (this._opts.isUnshift && (lineText.length === 0 || indentationEndIndex === 0)) {\n\t\t\t\t\t// empty line or line with no leading whitespace => nothing to do\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (!shouldIndentEmptyLines && !this._opts.isUnshift && lineText.length === 0) {\n\t\t\t\t\t// do not indent empty lines => nothing to do\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (indentationEndIndex === -1) {\n\t\t\t\t\t// the entire line is whitespace\n\t\t\t\t\tindentationEndIndex = lineText.length;\n\t\t\t\t}\n\n\t\t\t\tif (lineNumber > 1) {\n\t\t\t\t\tconst contentStartVisibleColumn = CursorColumns.visibleColumnFromColumn(lineText, indentationEndIndex + 1, tabSize);\n\t\t\t\t\tif (contentStartVisibleColumn % indentSize !== 0) {\n\t\t\t\t\t\t// The current line is \"miss-aligned\", so let's see if this is expected...\n\t\t\t\t\t\t// This can only happen when it has trailing commas in the indent\n\t\t\t\t\t\tif (model.tokenization.isCheapToTokenize(lineNumber - 1)) {\n\t\t\t\t\t\t\tconst enterAction = getEnterAction(this._opts.autoIndent, model, new Range(lineNumber - 1, model.getLineMaxColumn(lineNumber - 1), lineNumber - 1, model.getLineMaxColumn(lineNumber - 1)), this._languageConfigurationService);\n\t\t\t\t\t\t\tif (enterAction) {\n\t\t\t\t\t\t\t\textraSpaces = previousLineExtraSpaces;\n\t\t\t\t\t\t\t\tif (enterAction.appendText) {\n\t\t\t\t\t\t\t\t\tfor (let j = 0, lenJ = enterAction.appendText.length; j < lenJ && extraSpaces < indentSize; j++) {\n\t\t\t\t\t\t\t\t\t\tif (enterAction.appendText.charCodeAt(j) === CharCode.Space) {\n\t\t\t\t\t\t\t\t\t\t\textraSpaces++;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (enterAction.removeText) {\n\t\t\t\t\t\t\t\t\textraSpaces = Math.max(0, extraSpaces - enterAction.removeText);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Act as if `prefixSpaces` is not part of the indentation\n\t\t\t\t\t\t\t\tfor (let j = 0; j < extraSpaces; j++) {\n\t\t\t\t\t\t\t\t\tif (indentationEndIndex === 0 || lineText.charCodeAt(indentationEndIndex - 1) !== CharCode.Space) {\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tindentationEndIndex--;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\n\t\t\t\tif (this._opts.isUnshift && indentationEndIndex === 0) {\n\t\t\t\t\t// line with no leading whitespace => nothing to do\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tlet desiredIndent: string;\n\t\t\t\tif (this._opts.isUnshift) {\n\t\t\t\t\tdesiredIndent = ShiftCommand.unshiftIndent(lineText, indentationEndIndex + 1, tabSize, indentSize, insertSpaces);\n\t\t\t\t} else {\n\t\t\t\t\tdesiredIndent = ShiftCommand.shiftIndent(lineText, indentationEndIndex + 1, tabSize, indentSize, insertSpaces);\n\t\t\t\t}\n\n\t\t\t\tthis._addEditOperation(builder, new Range(lineNumber, 1, lineNumber, indentationEndIndex + 1), desiredIndent);\n\t\t\t\tif (lineNumber === startLine && !this._selection.isEmpty()) {\n\t\t\t\t\t// Force the startColumn to stay put because we're inserting after it\n\t\t\t\t\tthis._selectionStartColumnStaysPut = (this._selection.startColumn <= indentationEndIndex + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\n\t\t\t// if indenting or outdenting on a whitespace only line\n\t\t\tif (!this._opts.isUnshift && this._selection.isEmpty() && model.getLineLength(startLine) === 0) {\n\t\t\t\tthis._useLastEditRangeForCursorEndPosition = true;\n\t\t\t}\n\n\t\t\tconst oneIndent = (insertSpaces ? cachedStringRepeat(' ', indentSize) : '\\t');\n\n\t\t\tfor (let lineNumber = startLine; lineNumber <= endLine; lineNumber++) {\n\t\t\t\tconst lineText = model.getLineContent(lineNumber);\n\t\t\t\tlet indentationEndIndex = strings.firstNonWhitespaceIndex(lineText);\n\n\t\t\t\tif (this._opts.isUnshift && (lineText.length === 0 || indentationEndIndex === 0)) {\n\t\t\t\t\t// empty line or line with no leading whitespace => nothing to do\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (!shouldIndentEmptyLines && !this._opts.isUnshift && lineText.length === 0) {\n\t\t\t\t\t// do not indent empty lines => nothing to do\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (indentationEndIndex === -1) {\n\t\t\t\t\t// the entire line is whitespace\n\t\t\t\t\tindentationEndIndex = lineText.length;\n\t\t\t\t}\n\n\t\t\t\tif (this._opts.isUnshift && indentationEndIndex === 0) {\n\t\t\t\t\t// line with no leading whitespace => nothing to do\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (this._opts.isUnshift) {\n\n\t\t\t\t\tindentationEndIndex = Math.min(indentationEndIndex, indentSize);\n\t\t\t\t\tfor (let i = 0; i < indentationEndIndex; i++) {\n\t\t\t\t\t\tconst chr = lineText.charCodeAt(i);\n\t\t\t\t\t\tif (chr === CharCode.Tab) {\n\t\t\t\t\t\t\tindentationEndIndex = i + 1;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._addEditOperation(builder, new Range(lineNumber, 1, lineNumber, indentationEndIndex + 1), '');\n\t\t\t\t} else {\n\t\t\t\t\tthis._addEditOperation(builder, new Range(lineNumber, 1, lineNumber, 1), oneIndent);\n\t\t\t\t\tif (lineNumber === startLine && !this._selection.isEmpty()) {\n\t\t\t\t\t\t// Force the startColumn to stay put because we're inserting after it\n\t\t\t\t\t\tthis._selectionStartColumnStaysPut = (this._selection.startColumn === 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._selectionId = builder.trackSelection(this._selection);\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\tif (this._useLastEditRangeForCursorEndPosition) {\n\t\t\tconst lastOp = helper.getInverseEditOperations()[0];\n\t\t\treturn new Selection(lastOp.range.endLineNumber, lastOp.range.endColumn, lastOp.range.endLineNumber, lastOp.range.endColumn);\n\t\t}\n\t\tconst result = helper.getTrackedSelection(this._selectionId!);\n\n\t\tif (this._selectionStartColumnStaysPut) {\n\t\t\t// The selection start should not move\n\t\t\tconst initialStartColumn = this._selection.startColumn;\n\t\t\tconst resultStartColumn = result.startColumn;\n\t\t\tif (resultStartColumn <= initialStartColumn) {\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\tif (result.getDirection() === SelectionDirection.LTR) {\n\t\t\t\treturn new Selection(result.startLineNumber, initialStartColumn, result.endLineNumber, result.endColumn);\n\t\t\t}\n\t\t\treturn new Selection(result.endLineNumber, result.endColumn, result.startLineNumber, initialStartColumn);\n\t\t}\n\n\t\treturn result;\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from '../../../base/common/charCode.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { CursorColumns } from '../core/cursorColumns.js';\nimport { Range } from '../core/range.js';\nimport { Selection, SelectionDirection } from '../core/selection.js';\nimport { ICommand, ICursorStateComputerData, IEditOperationBuilder } from '../editorCommon.js';\nimport { ITextModel } from '../model.js';\nimport { EditorAutoIndentStrategy } from '../config/editorOptions.js';\nimport { getEnterAction } from '../languages/enterAction.js';\nimport { ILanguageConfigurationService } from '../languages/languageConfigurationRegistry.js';\n\nexport interface IShiftCommandOpts {\n\tisUnshift: boolean;\n\ttabSize: number;\n\tindentSize: number;\n\tinsertSpaces: boolean;\n\tuseTabStops: boolean;\n\tautoIndent: EditorAutoIndentStrategy;\n}\n\nconst repeatCache: { [str: string]: string[] } = Object.create(null);\nfunction cachedStringRepeat(str: string, count: number): string {\n\tif (count <= 0) {\n\t\treturn '';\n\t}\n\tif (!repeatCache[str]) {\n\t\trepeatCache[str] = ['', str];\n\t}\n\tconst cache = repeatCache[str];\n\tfor (let i = cache.length; i <= count; i++) {\n\t\tcache[i] = cache[i - 1] + str;\n\t}\n\treturn cache[count];\n}\n\nexport class ShiftCommand implements ICommand {\n\n\tpublic static unshiftIndent(line: string, column: number, tabSize: number, indentSize: number, insertSpaces: boolean): string {\n\t\t// Determine the visible column where the content starts\n\t\tconst contentStartVisibleColumn = CursorColumns.visibleColumnFromColumn(line, column, tabSize);\n\n\t\tif (insertSpaces) {\n\t\t\tconst indent = cachedStringRepeat(' ', indentSize);\n\t\t\tconst desiredTabStop = CursorColumns.prevIndentTabStop(contentStartVisibleColumn, indentSize);\n\t\t\tconst indentCount = desiredTabStop / indentSize; // will be an integer\n\t\t\treturn cachedStringRepeat(indent, indentCount);\n\t\t} else {\n\t\t\tconst indent = '\\t';\n\t\t\tconst desiredTabStop = CursorColumns.prevRenderTabStop(contentStartVisibleColumn, tabSize);\n\t\t\tconst indentCount = desiredTabStop / tabSize; // will be an integer\n\t\t\treturn cachedStringRepeat(indent, indentCount);\n\t\t}\n\t}\n\n\tpublic static shiftIndent(line: string, column: number, tabSize: number, indentSize: number, insertSpaces: boolean): string {\n\t\t// Determine the visible column where the content starts\n\t\tconst contentStartVisibleColumn = CursorColumns.visibleColumnFromColumn(line, column, tabSize);\n\n\t\tif (insertSpaces) {\n\t\t\tconst indent = cachedStringRepeat(' ', indentSize);\n\t\t\tconst desiredTabStop = CursorColumns.nextIndentTabStop(contentStartVisibleColumn, indentSize);\n\t\t\tconst indentCount = desiredTabStop / indentSize; // will be an integer\n\t\t\treturn cachedStringRepeat(indent, indentCount);\n\t\t} else {\n\t\t\tconst indent = '\\t';\n\t\t\tconst desiredTabStop = CursorColumns.nextRenderTabStop(contentStartVisibleColumn, tabSize);\n\t\t\tconst indentCount = desiredTabStop / tabSize; // will be an integer\n\t\t\treturn cachedStringRepeat(indent, indentCount);\n\t\t}\n\t}\n\n\tprivate readonly _opts: IShiftCommandOpts;\n\tprivate readonly _selection: Selection;\n\tprivate _selectionId: string | null;\n\tprivate _useLastEditRangeForCursorEndPosition: boolean;\n\tprivate _selectionStartColumnStaysPut: boolean;\n\n\tconstructor(\n\t\trange: Selection,\n\t\topts: IShiftCommandOpts,\n\t\t@ILanguageConfigurationService private readonly _languageConfigurationService: ILanguageConfigurationService\n\t) {\n\t\tthis._opts = opts;\n\t\tthis._selection = range;\n\t\tthis._selectionId = null;\n\t\tthis._useLastEditRangeForCursorEndPosition = false;\n\t\tthis._selectionStartColumnStaysPut = false;\n\t}\n\n\tprivate _addEditOperation(builder: IEditOperationBuilder, range: Range, text: string) {\n\t\tif (this._useLastEditRangeForCursorEndPosition) {\n\t\t\tbuilder.addTrackedEditOperation(range, text);\n\t\t} else {\n\t\t\tbuilder.addEditOperation(range, text);\n\t\t}\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tconst startLine = this._selection.startLineNumber;\n\n\t\tlet endLine = this._selection.endLineNumber;\n\t\tif (this._selection.endColumn === 1 && startLine !== endLine) {\n\t\t\tendLine = endLine - 1;\n\t\t}\n\n\t\tconst { tabSize, indentSize, insertSpaces } = this._opts;\n\t\tconst shouldIndentEmptyLines = (startLine === endLine);\n\n\t\tif (this._opts.useTabStops) {\n\t\t\t// if indenting or outdenting on a whitespace only line\n\t\t\tif (this._selection.isEmpty()) {\n\t\t\t\tif (/^\\s*$/.test(model.getLineContent(startLine))) {\n\t\t\t\t\tthis._useLastEditRangeForCursorEndPosition = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// keep track of previous line's \"miss-alignment\"\n\t\t\tlet previousLineExtraSpaces = 0, extraSpaces = 0;\n\t\t\tfor (let lineNumber = startLine; lineNumber <= endLine; lineNumber++, previousLineExtraSpaces = extraSpaces) {\n\t\t\t\textraSpaces = 0;\n\t\t\t\tconst lineText = model.getLineContent(lineNumber);\n\t\t\t\tlet indentationEndIndex = strings.firstNonWhitespaceIndex(lineText);\n\n\t\t\t\tif (this._opts.isUnshift && (lineText.length === 0 || indentationEndIndex === 0)) {\n\t\t\t\t\t// empty line or line with no leading whitespace => nothing to do\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (!shouldIndentEmptyLines && !this._opts.isUnshift && lineText.length === 0) {\n\t\t\t\t\t// do not indent empty lines => nothing to do\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (indentationEndIndex === -1) {\n\t\t\t\t\t// the entire line is whitespace\n\t\t\t\t\tindentationEndIndex = lineText.length;\n\t\t\t\t}\n\n\t\t\t\tif (lineNumber > 1) {\n\t\t\t\t\tconst contentStartVisibleColumn = CursorColumns.visibleColumnFromColumn(lineText, indentationEndIndex + 1, tabSize);\n\t\t\t\t\tif (contentStartVisibleColumn % indentSize !== 0) {\n\t\t\t\t\t\t// The current line is \"miss-aligned\", so let's see if this is expected...\n\t\t\t\t\t\t// This can only happen when it has trailing commas in the indent\n\t\t\t\t\t\tif (model.tokenization.isCheapToTokenize(lineNumber - 1)) {\n\t\t\t\t\t\t\tconst enterAction = getEnterAction(this._opts.autoIndent, model, new Range(lineNumber - 1, model.getLineMaxColumn(lineNumber - 1), lineNumber - 1, model.getLineMaxColumn(lineNumber - 1)), this._languageConfigurationService);\n\t\t\t\t\t\t\tif (enterAction) {\n\t\t\t\t\t\t\t\textraSpaces = previousLineExtraSpaces;\n\t\t\t\t\t\t\t\tif (enterAction.appendText) {\n\t\t\t\t\t\t\t\t\tfor (let j = 0, lenJ = enterAction.appendText.length; j < lenJ && extraSpaces < indentSize; j++) {\n\t\t\t\t\t\t\t\t\t\tif (enterAction.appendText.charCodeAt(j) === CharCode.Space) {\n\t\t\t\t\t\t\t\t\t\t\textraSpaces++;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (enterAction.removeText) {\n\t\t\t\t\t\t\t\t\textraSpaces = Math.max(0, extraSpaces - enterAction.removeText);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Act as if `prefixSpaces` is not part of the indentation\n\t\t\t\t\t\t\t\tfor (let j = 0; j < extraSpaces; j++) {\n\t\t\t\t\t\t\t\t\tif (indentationEndIndex === 0 || lineText.charCodeAt(indentationEndIndex - 1) !== CharCode.Space) {\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tindentationEndIndex--;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\n\t\t\t\tif (this._opts.isUnshift && indentationEndIndex === 0) {\n\t\t\t\t\t// line with no leading whitespace => nothing to do\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tlet desiredIndent: string;\n\t\t\t\tif (this._opts.isUnshift) {\n\t\t\t\t\tdesiredIndent = ShiftCommand.unshiftIndent(lineText, indentationEndIndex + 1, tabSize, indentSize, insertSpaces);\n\t\t\t\t} else {\n\t\t\t\t\tdesiredIndent = ShiftCommand.shiftIndent(lineText, indentationEndIndex + 1, tabSize, indentSize, insertSpaces);\n\t\t\t\t}\n\n\t\t\t\tthis._addEditOperation(builder, new Range(lineNumber, 1, lineNumber, indentationEndIndex + 1), desiredIndent);\n\t\t\t\tif (lineNumber === startLine && !this._selection.isEmpty()) {\n\t\t\t\t\t// Force the startColumn to stay put because we're inserting after it\n\t\t\t\t\tthis._selectionStartColumnStaysPut = (this._selection.startColumn <= indentationEndIndex + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\n\t\t\t// if indenting or outdenting on a whitespace only line\n\t\t\tif (!this._opts.isUnshift && this._selection.isEmpty() && model.getLineLength(startLine) === 0) {\n\t\t\t\tthis._useLastEditRangeForCursorEndPosition = true;\n\t\t\t}\n\n\t\t\tconst oneIndent = (insertSpaces ? cachedStringRepeat(' ', indentSize) : '\\t');\n\n\t\t\tfor (let lineNumber = startLine; lineNumber <= endLine; lineNumber++) {\n\t\t\t\tconst lineText = model.getLineContent(lineNumber);\n\t\t\t\tlet indentationEndIndex = strings.firstNonWhitespaceIndex(lineText);\n\n\t\t\t\tif (this._opts.isUnshift && (lineText.length === 0 || indentationEndIndex === 0)) {\n\t\t\t\t\t// empty line or line with no leading whitespace => nothing to do\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (!shouldIndentEmptyLines && !this._opts.isUnshift && lineText.length === 0) {\n\t\t\t\t\t// do not indent empty lines => nothing to do\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (indentationEndIndex === -1) {\n\t\t\t\t\t// the entire line is whitespace\n\t\t\t\t\tindentationEndIndex = lineText.length;\n\t\t\t\t}\n\n\t\t\t\tif (this._opts.isUnshift && indentationEndIndex === 0) {\n\t\t\t\t\t// line with no leading whitespace => nothing to do\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (this._opts.isUnshift) {\n\n\t\t\t\t\tindentationEndIndex = Math.min(indentationEndIndex, indentSize);\n\t\t\t\t\tfor (let i = 0; i < indentationEndIndex; i++) {\n\t\t\t\t\t\tconst chr = lineText.charCodeAt(i);\n\t\t\t\t\t\tif (chr === CharCode.Tab) {\n\t\t\t\t\t\t\tindentationEndIndex = i + 1;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._addEditOperation(builder, new Range(lineNumber, 1, lineNumber, indentationEndIndex + 1), '');\n\t\t\t\t} else {\n\t\t\t\t\tthis._addEditOperation(builder, new Range(lineNumber, 1, lineNumber, 1), oneIndent);\n\t\t\t\t\tif (lineNumber === startLine && !this._selection.isEmpty()) {\n\t\t\t\t\t\t// Force the startColumn to stay put because we're inserting after it\n\t\t\t\t\t\tthis._selectionStartColumnStaysPut = (this._selection.startColumn === 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._selectionId = builder.trackSelection(this._selection);\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\tif (this._useLastEditRangeForCursorEndPosition) {\n\t\t\tconst lastOp = helper.getInverseEditOperations()[0];\n\t\t\treturn new Selection(lastOp.range.endLineNumber, lastOp.range.endColumn, lastOp.range.endLineNumber, lastOp.range.endColumn);\n\t\t}\n\t\tconst result = helper.getTrackedSelection(this._selectionId!);\n\n\t\tif (this._selectionStartColumnStaysPut) {\n\t\t\t// The selection start should not move\n\t\t\tconst initialStartColumn = this._selection.startColumn;\n\t\t\tconst resultStartColumn = result.startColumn;\n\t\t\tif (resultStartColumn <= initialStartColumn) {\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\tif (result.getDirection() === SelectionDirection.LTR) {\n\t\t\t\treturn new Selection(result.startLineNumber, initialStartColumn, result.endLineNumber, result.endColumn);\n\t\t\t}\n\t\t\treturn new Selection(result.endLineNumber, result.endColumn, result.startLineNumber, initialStartColumn);\n\t\t}\n\n\t\treturn result;\n\t}\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 693, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/monaco-editor/esm/vs/editor/common/commands/surroundSelectionCommand.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/commands/file%3A/mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/commands/surroundSelectionCommand.ts","file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/commands/vs/editor/common/commands/surroundSelectionCommand.ts"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Range } from '../core/range.js';\nimport { Position } from '../core/position.js';\nimport { Selection } from '../core/selection.js';\nimport { ICommand, ICursorStateComputerData, IEditOperationBuilder } from '../editorCommon.js';\nimport { ITextModel } from '../model.js';\n\nexport class SurroundSelectionCommand implements ICommand {\n\tprivate readonly _range: Selection;\n\tprivate readonly _charBeforeSelection: string;\n\tprivate readonly _charAfterSelection: string;\n\n\tconstructor(range: Selection, charBeforeSelection: string, charAfterSelection: string) {\n\t\tthis._range = range;\n\t\tthis._charBeforeSelection = charBeforeSelection;\n\t\tthis._charAfterSelection = charAfterSelection;\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tbuilder.addTrackedEditOperation(new Range(\n\t\t\tthis._range.startLineNumber,\n\t\t\tthis._range.startColumn,\n\t\t\tthis._range.startLineNumber,\n\t\t\tthis._range.startColumn\n\t\t), this._charBeforeSelection);\n\n\t\tbuilder.addTrackedEditOperation(new Range(\n\t\t\tthis._range.endLineNumber,\n\t\t\tthis._range.endColumn,\n\t\t\tthis._range.endLineNumber,\n\t\t\tthis._range.endColumn\n\t\t), this._charAfterSelection || null); // addTrackedEditOperation() ignores us if the text == ''. Causing a chain of errors in computeCursorState()\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\tconst inverseEditOperations = helper.getInverseEditOperations();\n\t\tconst firstOperationRange = inverseEditOperations[0].range;\n\t\tconst secondOperationRange = inverseEditOperations[1].range;\n\n\t\treturn new Selection(\n\t\t\tfirstOperationRange.endLineNumber,\n\t\t\tfirstOperationRange.endColumn,\n\t\t\tsecondOperationRange.endLineNumber,\n\t\t\tsecondOperationRange.endColumn - this._charAfterSelection.length\n\t\t);\n\t}\n}\n\n/**\n * A surround selection command that runs after composition finished.\n */\nexport class CompositionSurroundSelectionCommand implements ICommand {\n\n\tconstructor(\n\t\tprivate readonly _position: Position,\n\t\tprivate readonly _text: string,\n\t\tprivate readonly _charAfter: string\n\t) { }\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tbuilder.addTrackedEditOperation(new Range(\n\t\t\tthis._position.lineNumber,\n\t\t\tthis._position.column,\n\t\t\tthis._position.lineNumber,\n\t\t\tthis._position.column\n\t\t), this._text + this._charAfter);\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\tconst inverseEditOperations = helper.getInverseEditOperations();\n\t\tconst opRange = inverseEditOperations[0].range;\n\n\t\treturn new Selection(\n\t\t\topRange.endLineNumber,\n\t\t\topRange.startColumn,\n\t\t\topRange.endLineNumber,\n\t\t\topRange.endColumn - this._charAfter.length\n\t\t);\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Range } from '../core/range.js';\nimport { Position } from '../core/position.js';\nimport { Selection } from '../core/selection.js';\nimport { ICommand, ICursorStateComputerData, IEditOperationBuilder } from '../editorCommon.js';\nimport { ITextModel } from '../model.js';\n\nexport class SurroundSelectionCommand implements ICommand {\n\tprivate readonly _range: Selection;\n\tprivate readonly _charBeforeSelection: string;\n\tprivate readonly _charAfterSelection: string;\n\n\tconstructor(range: Selection, charBeforeSelection: string, charAfterSelection: string) {\n\t\tthis._range = range;\n\t\tthis._charBeforeSelection = charBeforeSelection;\n\t\tthis._charAfterSelection = charAfterSelection;\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tbuilder.addTrackedEditOperation(new Range(\n\t\t\tthis._range.startLineNumber,\n\t\t\tthis._range.startColumn,\n\t\t\tthis._range.startLineNumber,\n\t\t\tthis._range.startColumn\n\t\t), this._charBeforeSelection);\n\n\t\tbuilder.addTrackedEditOperation(new Range(\n\t\t\tthis._range.endLineNumber,\n\t\t\tthis._range.endColumn,\n\t\t\tthis._range.endLineNumber,\n\t\t\tthis._range.endColumn\n\t\t), this._charAfterSelection || null); // addTrackedEditOperation() ignores us if the text == ''. Causing a chain of errors in computeCursorState()\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\tconst inverseEditOperations = helper.getInverseEditOperations();\n\t\tconst firstOperationRange = inverseEditOperations[0].range;\n\t\tconst secondOperationRange = inverseEditOperations[1].range;\n\n\t\treturn new Selection(\n\t\t\tfirstOperationRange.endLineNumber,\n\t\t\tfirstOperationRange.endColumn,\n\t\t\tsecondOperationRange.endLineNumber,\n\t\t\tsecondOperationRange.endColumn - this._charAfterSelection.length\n\t\t);\n\t}\n}\n\n/**\n * A surround selection command that runs after composition finished.\n */\nexport class CompositionSurroundSelectionCommand implements ICommand {\n\n\tconstructor(\n\t\tprivate readonly _position: Position,\n\t\tprivate readonly _text: string,\n\t\tprivate readonly _charAfter: string\n\t) { }\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tbuilder.addTrackedEditOperation(new Range(\n\t\t\tthis._position.lineNumber,\n\t\t\tthis._position.column,\n\t\t\tthis._position.lineNumber,\n\t\t\tthis._position.column\n\t\t), this._text + this._charAfter);\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\tconst inverseEditOperations = helper.getInverseEditOperations();\n\t\tconst opRange = inverseEditOperations[0].range;\n\n\t\treturn new Selection(\n\t\t\topRange.endLineNumber,\n\t\t\topRange.startColumn,\n\t\t\topRange.endLineNumber,\n\t\t\topRange.endColumn - this._charAfter.length\n\t\t);\n\t}\n}\n"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;AAEhG,OAAO,EAAE,KAAK,EAAE,MAAM,kBAAkB,CAAC;AAEzC,OAAO,EAAE,SAAS,EAAE,MAAM,sBAAsB,CAAC;;;AAI3C,MAAO,wBAAwB;IAKpC,YAAY,KAAgB,EAAE,mBAA2B,EAAE,kBAA0B,CAAA;QACpF,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,oBAAoB,GAAG,mBAAmB,CAAC;QAChD,IAAI,CAAC,mBAAmB,GAAG,kBAAkB,CAAC;IAC/C,CAAC;IAEM,iBAAiB,CAAC,KAAiB,EAAE,OAA8B,EAAA;QACzE,OAAO,CAAC,uBAAuB,CAAC,IAAI,2LAAK,CACxC,IAAI,CAAC,MAAM,CAAC,eAAe,EAC3B,IAAI,CAAC,MAAM,CAAC,WAAW,EACvB,IAAI,CAAC,MAAM,CAAC,eAAe,EAC3B,IAAI,CAAC,MAAM,CAAC,WAAW,CACvB,EAAE,IAAI,CAAC,oBAAoB,CAAC,CAAC;QAE9B,OAAO,CAAC,uBAAuB,CAAC,IAAI,2LAAK,CACxC,IAAI,CAAC,MAAM,CAAC,aAAa,EACzB,IAAI,CAAC,MAAM,CAAC,SAAS,EACrB,IAAI,CAAC,MAAM,CAAC,aAAa,EACzB,IAAI,CAAC,MAAM,CAAC,SAAS,CACrB,EAAE,IAAI,CAAC,mBAAmB,IAAI,IAAI,CAAC,CAAC,CAAC,4GAA4G;IACnJ,CAAC;IAEM,kBAAkB,CAAC,KAAiB,EAAE,MAAgC,EAAA;QAC5E,MAAM,qBAAqB,GAAG,MAAM,CAAC,wBAAwB,EAAE,CAAC;QAChE,MAAM,mBAAmB,GAAG,qBAAqB,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;QAC3D,MAAM,oBAAoB,GAAG,qBAAqB,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;QAE5D,OAAO,IAAI,mMAAS,CACnB,mBAAmB,CAAC,aAAa,EACjC,mBAAmB,CAAC,SAAS,EAC7B,oBAAoB,CAAC,aAAa,EAClC,oBAAoB,CAAC,SAAS,GAAG,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAChE,CAAC;IACH,CAAC;CACD;AAKK,MAAO,mCAAmC;IAE/C,YACkB,SAAmB,EACnB,KAAa,EACb,UAAkB,CAAA;QAFlB,IAAA,CAAA,SAAS,GAAT,SAAS,CAAU;QACnB,IAAA,CAAA,KAAK,GAAL,KAAK,CAAQ;QACb,IAAA,CAAA,UAAU,GAAV,UAAU,CAAQ;IAChC,CAAC;IAEE,iBAAiB,CAAC,KAAiB,EAAE,OAA8B,EAAA;QACzE,OAAO,CAAC,uBAAuB,CAAC,IAAI,2LAAK,CACxC,IAAI,CAAC,SAAS,CAAC,UAAU,EACzB,IAAI,CAAC,SAAS,CAAC,MAAM,EACrB,IAAI,CAAC,SAAS,CAAC,UAAU,EACzB,IAAI,CAAC,SAAS,CAAC,MAAM,CACrB,EAAE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC;IAClC,CAAC;IAEM,kBAAkB,CAAC,KAAiB,EAAE,MAAgC,EAAA;QAC5E,MAAM,qBAAqB,GAAG,MAAM,CAAC,wBAAwB,EAAE,CAAC;QAChE,MAAM,OAAO,GAAG,qBAAqB,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;QAE/C,OAAO,IAAI,mMAAS,CACnB,OAAO,CAAC,aAAa,EACrB,OAAO,CAAC,WAAW,EACnB,OAAO,CAAC,aAAa,EACrB,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAC1C,CAAC;IACH,CAAC;CACD","debugId":null}},
    {"offset": {"line": 742, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/monaco-editor/esm/vs/editor/common/commands/trimTrailingWhitespaceCommand.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/commands/file%3A/mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/commands/trimTrailingWhitespaceCommand.ts","file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/commands/vs/editor/common/commands/trimTrailingWhitespaceCommand.ts"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as strings from '../../../base/common/strings.js';\nimport { EditOperation, ISingleEditOperation } from '../core/editOperation.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nimport { ICommand, ICursorStateComputerData, IEditOperationBuilder } from '../editorCommon.js';\nimport { StandardTokenType } from '../encodedTokenAttributes.js';\nimport { ITextModel } from '../model.js';\n\nexport class TrimTrailingWhitespaceCommand implements ICommand {\n\n\tprivate readonly _selection: Selection;\n\tprivate _selectionId: string | null;\n\tprivate readonly _cursors: Position[];\n\tprivate readonly _trimInRegexesAndStrings: boolean;\n\n\tconstructor(selection: Selection, cursors: Position[], trimInRegexesAndStrings: boolean) {\n\t\tthis._selection = selection;\n\t\tthis._cursors = cursors;\n\t\tthis._selectionId = null;\n\t\tthis._trimInRegexesAndStrings = trimInRegexesAndStrings;\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tconst ops = trimTrailingWhitespace(model, this._cursors, this._trimInRegexesAndStrings);\n\t\tfor (let i = 0, len = ops.length; i < len; i++) {\n\t\t\tconst op = ops[i];\n\n\t\t\tbuilder.addEditOperation(op.range, op.text);\n\t\t}\n\n\t\tthis._selectionId = builder.trackSelection(this._selection);\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\treturn helper.getTrackedSelection(this._selectionId!);\n\t}\n}\n\n/**\n * Generate commands for trimming trailing whitespace on a model and ignore lines on which cursors are sitting.\n */\nexport function trimTrailingWhitespace(model: ITextModel, cursors: Position[], trimInRegexesAndStrings: boolean): ISingleEditOperation[] {\n\t// Sort cursors ascending\n\tcursors.sort((a, b) => {\n\t\tif (a.lineNumber === b.lineNumber) {\n\t\t\treturn a.column - b.column;\n\t\t}\n\t\treturn a.lineNumber - b.lineNumber;\n\t});\n\n\t// Reduce multiple cursors on the same line and only keep the last one on the line\n\tfor (let i = cursors.length - 2; i >= 0; i--) {\n\t\tif (cursors[i].lineNumber === cursors[i + 1].lineNumber) {\n\t\t\t// Remove cursor at `i`\n\t\t\tcursors.splice(i, 1);\n\t\t}\n\t}\n\n\tconst r: ISingleEditOperation[] = [];\n\tlet rLen = 0;\n\tlet cursorIndex = 0;\n\tconst cursorLen = cursors.length;\n\n\tfor (let lineNumber = 1, lineCount = model.getLineCount(); lineNumber <= lineCount; lineNumber++) {\n\t\tconst lineContent = model.getLineContent(lineNumber);\n\t\tconst maxLineColumn = lineContent.length + 1;\n\t\tlet minEditColumn = 0;\n\n\t\tif (cursorIndex < cursorLen && cursors[cursorIndex].lineNumber === lineNumber) {\n\t\t\tminEditColumn = cursors[cursorIndex].column;\n\t\t\tcursorIndex++;\n\t\t\tif (minEditColumn === maxLineColumn) {\n\t\t\t\t// The cursor is at the end of the line => no edits for sure on this line\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\tif (lineContent.length === 0) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst lastNonWhitespaceIndex = strings.lastNonWhitespaceIndex(lineContent);\n\n\t\tlet fromColumn = 0;\n\t\tif (lastNonWhitespaceIndex === -1) {\n\t\t\t// Entire line is whitespace\n\t\t\tfromColumn = 1;\n\t\t} else if (lastNonWhitespaceIndex !== lineContent.length - 1) {\n\t\t\t// There is trailing whitespace\n\t\t\tfromColumn = lastNonWhitespaceIndex + 2;\n\t\t} else {\n\t\t\t// There is no trailing whitespace\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!trimInRegexesAndStrings) {\n\t\t\tif (!model.tokenization.hasAccurateTokensForLine(lineNumber)) {\n\t\t\t\t// We don't want to force line tokenization, as that can be expensive, but we also don't want to trim\n\t\t\t\t// trailing whitespace in lines that are not tokenized yet, as that can be wrong and trim whitespace from\n\t\t\t\t// lines that the user requested we don't. So we bail out if the tokens are not accurate for this line.\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst lineTokens = model.tokenization.getLineTokens(lineNumber);\n\t\t\tconst fromColumnType = lineTokens.getStandardTokenType(lineTokens.findTokenIndexAtOffset(fromColumn));\n\n\t\t\tif (fromColumnType === StandardTokenType.String || fromColumnType === StandardTokenType.RegEx) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\tfromColumn = Math.max(minEditColumn, fromColumn);\n\t\tr[rLen++] = EditOperation.delete(new Range(\n\t\t\tlineNumber, fromColumn,\n\t\t\tlineNumber, maxLineColumn\n\t\t));\n\t}\n\n\treturn r;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as strings from '../../../base/common/strings.js';\nimport { EditOperation, ISingleEditOperation } from '../core/editOperation.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nimport { ICommand, ICursorStateComputerData, IEditOperationBuilder } from '../editorCommon.js';\nimport { StandardTokenType } from '../encodedTokenAttributes.js';\nimport { ITextModel } from '../model.js';\n\nexport class TrimTrailingWhitespaceCommand implements ICommand {\n\n\tprivate readonly _selection: Selection;\n\tprivate _selectionId: string | null;\n\tprivate readonly _cursors: Position[];\n\tprivate readonly _trimInRegexesAndStrings: boolean;\n\n\tconstructor(selection: Selection, cursors: Position[], trimInRegexesAndStrings: boolean) {\n\t\tthis._selection = selection;\n\t\tthis._cursors = cursors;\n\t\tthis._selectionId = null;\n\t\tthis._trimInRegexesAndStrings = trimInRegexesAndStrings;\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tconst ops = trimTrailingWhitespace(model, this._cursors, this._trimInRegexesAndStrings);\n\t\tfor (let i = 0, len = ops.length; i < len; i++) {\n\t\t\tconst op = ops[i];\n\n\t\t\tbuilder.addEditOperation(op.range, op.text);\n\t\t}\n\n\t\tthis._selectionId = builder.trackSelection(this._selection);\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\treturn helper.getTrackedSelection(this._selectionId!);\n\t}\n}\n\n/**\n * Generate commands for trimming trailing whitespace on a model and ignore lines on which cursors are sitting.\n */\nexport function trimTrailingWhitespace(model: ITextModel, cursors: Position[], trimInRegexesAndStrings: boolean): ISingleEditOperation[] {\n\t// Sort cursors ascending\n\tcursors.sort((a, b) => {\n\t\tif (a.lineNumber === b.lineNumber) {\n\t\t\treturn a.column - b.column;\n\t\t}\n\t\treturn a.lineNumber - b.lineNumber;\n\t});\n\n\t// Reduce multiple cursors on the same line and only keep the last one on the line\n\tfor (let i = cursors.length - 2; i >= 0; i--) {\n\t\tif (cursors[i].lineNumber === cursors[i + 1].lineNumber) {\n\t\t\t// Remove cursor at `i`\n\t\t\tcursors.splice(i, 1);\n\t\t}\n\t}\n\n\tconst r: ISingleEditOperation[] = [];\n\tlet rLen = 0;\n\tlet cursorIndex = 0;\n\tconst cursorLen = cursors.length;\n\n\tfor (let lineNumber = 1, lineCount = model.getLineCount(); lineNumber <= lineCount; lineNumber++) {\n\t\tconst lineContent = model.getLineContent(lineNumber);\n\t\tconst maxLineColumn = lineContent.length + 1;\n\t\tlet minEditColumn = 0;\n\n\t\tif (cursorIndex < cursorLen && cursors[cursorIndex].lineNumber === lineNumber) {\n\t\t\tminEditColumn = cursors[cursorIndex].column;\n\t\t\tcursorIndex++;\n\t\t\tif (minEditColumn === maxLineColumn) {\n\t\t\t\t// The cursor is at the end of the line => no edits for sure on this line\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\tif (lineContent.length === 0) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst lastNonWhitespaceIndex = strings.lastNonWhitespaceIndex(lineContent);\n\n\t\tlet fromColumn = 0;\n\t\tif (lastNonWhitespaceIndex === -1) {\n\t\t\t// Entire line is whitespace\n\t\t\tfromColumn = 1;\n\t\t} else if (lastNonWhitespaceIndex !== lineContent.length - 1) {\n\t\t\t// There is trailing whitespace\n\t\t\tfromColumn = lastNonWhitespaceIndex + 2;\n\t\t} else {\n\t\t\t// There is no trailing whitespace\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!trimInRegexesAndStrings) {\n\t\t\tif (!model.tokenization.hasAccurateTokensForLine(lineNumber)) {\n\t\t\t\t// We don't want to force line tokenization, as that can be expensive, but we also don't want to trim\n\t\t\t\t// trailing whitespace in lines that are not tokenized yet, as that can be wrong and trim whitespace from\n\t\t\t\t// lines that the user requested we don't. So we bail out if the tokens are not accurate for this line.\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst lineTokens = model.tokenization.getLineTokens(lineNumber);\n\t\t\tconst fromColumnType = lineTokens.getStandardTokenType(lineTokens.findTokenIndexAtOffset(fromColumn));\n\n\t\t\tif (fromColumnType === StandardTokenType.String || fromColumnType === StandardTokenType.RegEx) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\tfromColumn = Math.max(minEditColumn, fromColumn);\n\t\tr[rLen++] = EditOperation.delete(new Range(\n\t\t\tlineNumber, fromColumn,\n\t\t\tlineNumber, maxLineColumn\n\t\t));\n\t}\n\n\treturn r;\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 839, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/monaco-editor/esm/vs/editor/common/model.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/file%3A/mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/model.ts","file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/vs/editor/common/model.ts"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from '../../base/common/event.js';\nimport { IMarkdownString } from '../../base/common/htmlContent.js';\nimport { IDisposable } from '../../base/common/lifecycle.js';\nimport { equals } from '../../base/common/objects.js';\nimport { ThemeColor } from '../../base/common/themables.js';\nimport { URI } from '../../base/common/uri.js';\nimport { ISingleEditOperation } from './core/editOperation.js';\nimport { IPosition, Position } from './core/position.js';\nimport { IRange, Range } from './core/range.js';\nimport { Selection } from './core/selection.js';\nimport { TextChange } from './core/textChange.js';\nimport { WordCharacterClassifier } from './core/wordCharacterClassifier.js';\nimport { IWordAtPosition } from './core/wordHelper.js';\nimport { FormattingOptions } from './languages.js';\nimport { ILanguageSelection } from './languages/language.js';\nimport { IBracketPairsTextModelPart } from './textModelBracketPairs.js';\nimport { IModelContentChangedEvent, IModelDecorationsChangedEvent, IModelLanguageChangedEvent, IModelLanguageConfigurationChangedEvent, IModelOptionsChangedEvent, IModelTokensChangedEvent, InternalModelContentChangeEvent, ModelFontChangedEvent, ModelInjectedTextChangedEvent, ModelLineHeightChangedEvent } from './textModelEvents.js';\nimport { IModelContentChange } from './model/mirrorTextModel.js';\nimport { IGuidesTextModelPart } from './textModelGuides.js';\nimport { ITokenizationTextModelPart } from './tokenizationTextModelPart.js';\nimport { UndoRedoGroup } from '../../platform/undoRedo/common/undoRedo.js';\nimport { TokenArray } from './tokens/lineTokens.js';\nimport { TextModelEditSource } from './textModelEditSource.js';\n\n/**\n * Vertical Lane in the overview ruler of the editor.\n */\nexport enum OverviewRulerLane {\n\tLeft = 1,\n\tCenter = 2,\n\tRight = 4,\n\tFull = 7\n}\n\n/**\n * Vertical Lane in the glyph margin of the editor.\n */\nexport enum GlyphMarginLane {\n\tLeft = 1,\n\tCenter = 2,\n\tRight = 3,\n}\n\nexport interface IGlyphMarginLanesModel {\n\t/**\n\t * The number of lanes that should be rendered in the editor.\n\t */\n\treadonly requiredLanes: number;\n\n\t/**\n\t * Gets the lanes that should be rendered starting at a given line number.\n\t */\n\tgetLanesAtLine(lineNumber: number): GlyphMarginLane[];\n\n\t/**\n\t * Resets the model and ensures it can contain at least `maxLine` lines.\n\t */\n\treset(maxLine: number): void;\n\n\t/**\n\t * Registers that a lane should be visible at the Range in the model.\n\t * @param persist - if true, notes that the lane should always be visible,\n\t * even on lines where there's no specific request for that lane.\n\t */\n\tpush(lane: GlyphMarginLane, range: Range, persist?: boolean): void;\n}\n\n/**\n * Position in the minimap to render the decoration.\n */\nexport const enum MinimapPosition {\n\tInline = 1,\n\tGutter = 2\n}\n\n/**\n * Section header style.\n */\nexport const enum MinimapSectionHeaderStyle {\n\tNormal = 1,\n\tUnderlined = 2\n}\n\nexport interface IDecorationOptions {\n\t/**\n\t * CSS color to render.\n\t * e.g.: rgba(100, 100, 100, 0.5) or a color from the color registry\n\t */\n\tcolor: string | ThemeColor | undefined;\n\t/**\n\t * CSS color to render.\n\t * e.g.: rgba(100, 100, 100, 0.5) or a color from the color registry\n\t */\n\tdarkColor?: string | ThemeColor;\n}\n\nexport interface IModelDecorationGlyphMarginOptions {\n\t/**\n\t * The position in the glyph margin.\n\t */\n\tposition: GlyphMarginLane;\n\n\t/**\n\t * Whether the glyph margin lane in {@link position} should be rendered even\n\t * outside of this decoration's range.\n\t */\n\tpersistLane?: boolean;\n}\n\n/**\n * Options for rendering a model decoration in the overview ruler.\n */\nexport interface IModelDecorationOverviewRulerOptions extends IDecorationOptions {\n\t/**\n\t * The position in the overview ruler.\n\t */\n\tposition: OverviewRulerLane;\n}\n\n/**\n * Options for rendering a model decoration in the minimap.\n */\nexport interface IModelDecorationMinimapOptions extends IDecorationOptions {\n\t/**\n\t * The position in the minimap.\n\t */\n\tposition: MinimapPosition;\n\t/**\n\t * If the decoration is for a section header, which header style.\n\t */\n\tsectionHeaderStyle?: MinimapSectionHeaderStyle | null;\n\t/**\n\t * If the decoration is for a section header, the header text.\n\t */\n\tsectionHeaderText?: string | null;\n}\n\n/**\n * Options for a model decoration.\n */\nexport interface IModelDecorationOptions {\n\t/**\n\t * A debug description that can be used for inspecting model decorations.\n\t * @internal\n\t */\n\tdescription: string;\n\t/**\n\t * Customize the growing behavior of the decoration when typing at the edges of the decoration.\n\t * Defaults to TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges\n\t */\n\tstickiness?: TrackedRangeStickiness;\n\t/**\n\t * CSS class name describing the decoration.\n\t */\n\tclassName?: string | null;\n\t/**\n\t * Indicates whether the decoration should span across the entire line when it continues onto the next line.\n\t */\n\tshouldFillLineOnLineBreak?: boolean | null;\n\tblockClassName?: string | null;\n\t/**\n\t * Indicates if this block should be rendered after the last line.\n\t * In this case, the range must be empty and set to the last line.\n\t */\n\tblockIsAfterEnd?: boolean | null;\n\tblockDoesNotCollapse?: boolean | null;\n\tblockPadding?: [top: number, right: number, bottom: number, left: number] | null;\n\n\t/**\n\t * Message to be rendered when hovering over the glyph margin decoration.\n\t */\n\tglyphMarginHoverMessage?: IMarkdownString | IMarkdownString[] | null;\n\t/**\n\t * Array of MarkdownString to render as the decoration message.\n\t */\n\thoverMessage?: IMarkdownString | IMarkdownString[] | null;\n\t/**\n\t * Array of MarkdownString to render as the line number message.\n\t */\n\tlineNumberHoverMessage?: IMarkdownString | IMarkdownString[] | null;\n\t/**\n\t * Should the decoration expand to encompass a whole line.\n\t */\n\tisWholeLine?: boolean;\n\t/**\n\t * Always render the decoration (even when the range it encompasses is collapsed).\n\t */\n\tshowIfCollapsed?: boolean;\n\t/**\n\t * Collapse the decoration if its entire range is being replaced via an edit.\n\t * @internal\n\t */\n\tcollapseOnReplaceEdit?: boolean;\n\t/**\n\t * Specifies the stack order of a decoration.\n\t * A decoration with greater stack order is always in front of a decoration with\n\t * a lower stack order when the decorations are on the same line.\n\t */\n\tzIndex?: number;\n\t/**\n\t * If set, render this decoration in the overview ruler.\n\t */\n\toverviewRuler?: IModelDecorationOverviewRulerOptions | null;\n\t/**\n\t * If set, render this decoration in the minimap.\n\t */\n\tminimap?: IModelDecorationMinimapOptions | null;\n\t/**\n\t * If set, the decoration will be rendered in the glyph margin with this CSS class name.\n\t */\n\tglyphMarginClassName?: string | null;\n\t/**\n\t * If set and the decoration has {@link glyphMarginClassName} set, render this decoration\n\t * with the specified {@link IModelDecorationGlyphMarginOptions} in the glyph margin.\n\t */\n\tglyphMargin?: IModelDecorationGlyphMarginOptions | null;\n\t/**\n\t * If set, the decoration will override the line height of the lines it spans. Maximum value is 300px.\n\t */\n\tlineHeight?: number | null;\n\t/**\n\t * Font family\n\t */\n\tfontFamily?: string | null;\n\t/**\n\t * Font size\n\t */\n\tfontSize?: string | null;\n\t/**\n\t * Font weight\n\t */\n\tfontWeight?: string | null;\n\t/**\n\t * Font style\n\t */\n\tfontStyle?: string | null;\n\t/**\n\t * If set, the decoration will be rendered in the lines decorations with this CSS class name.\n\t */\n\tlinesDecorationsClassName?: string | null;\n\t/**\n\t * Controls the tooltip text of the line decoration.\n\t */\n\tlinesDecorationsTooltip?: string | null;\n\t/**\n\t * If set, the decoration will be rendered on the line number.\n\t */\n\tlineNumberClassName?: string | null;\n\t/**\n\t * If set, the decoration will be rendered in the lines decorations with this CSS class name, but only for the first line in case of line wrapping.\n\t */\n\tfirstLineDecorationClassName?: string | null;\n\t/**\n\t * If set, the decoration will be rendered in the margin (covering its full width) with this CSS class name.\n\t */\n\tmarginClassName?: string | null;\n\t/**\n\t * If set, the decoration will be rendered inline with the text with this CSS class name.\n\t * Please use this only for CSS rules that must impact the text. For example, use `className`\n\t * to have a background color decoration.\n\t */\n\tinlineClassName?: string | null;\n\t/**\n\t * If there is an `inlineClassName` which affects letter spacing.\n\t */\n\tinlineClassNameAffectsLetterSpacing?: boolean;\n\t/**\n\t * If set, the decoration will be rendered before the text with this CSS class name.\n\t */\n\tbeforeContentClassName?: string | null;\n\t/**\n\t * If set, the decoration will be rendered after the text with this CSS class name.\n\t */\n\tafterContentClassName?: string | null;\n\t/**\n\t * If set, text will be injected in the view after the range.\n\t */\n\tafter?: InjectedTextOptions | null;\n\n\t/**\n\t * If set, text will be injected in the view before the range.\n\t */\n\tbefore?: InjectedTextOptions | null;\n\n\t/**\n\t * If set, this decoration will not be rendered for comment tokens.\n\t * @internal\n\t*/\n\thideInCommentTokens?: boolean | null;\n\n\t/**\n\t * If set, this decoration will not be rendered for string tokens.\n\t * @internal\n\t*/\n\thideInStringTokens?: boolean | null;\n\n\t/**\n\t * Whether the decoration affects the font.\n\t * @internal\n\t */\n\taffectsFont?: boolean | null;\n\n\t/**\n\t * The text direction of the decoration.\n\t */\n\ttextDirection?: TextDirection | null;\n}\n\n/**\n * Text Direction for a decoration.\n */\nexport enum TextDirection {\n\tLTR = 0,\n\n\tRTL = 1,\n}\n\n/**\n * Configures text that is injected into the view without changing the underlying document.\n*/\nexport interface InjectedTextOptions {\n\t/**\n\t * Sets the text to inject. Must be a single line.\n\t */\n\treadonly content: string;\n\n\t/**\n\t * @internal\n\t*/\n\treadonly tokens?: TokenArray | null;\n\n\t/**\n\t * If set, the decoration will be rendered inline with the text with this CSS class name.\n\t */\n\treadonly inlineClassName?: string | null;\n\n\t/**\n\t * If there is an `inlineClassName` which affects letter spacing.\n\t */\n\treadonly inlineClassNameAffectsLetterSpacing?: boolean;\n\n\t/**\n\t * This field allows to attach data to this injected text.\n\t * The data can be read when injected texts at a given position are queried.\n\t */\n\treadonly attachedData?: unknown;\n\n\t/**\n\t * Configures cursor stops around injected text.\n\t * Defaults to {@link InjectedTextCursorStops.Both}.\n\t*/\n\treadonly cursorStops?: InjectedTextCursorStops | null;\n}\n\nexport enum InjectedTextCursorStops {\n\tBoth,\n\tRight,\n\tLeft,\n\tNone\n}\n\n/**\n * New model decorations.\n */\nexport interface IModelDeltaDecoration {\n\t/**\n\t * Range that this decoration covers.\n\t */\n\trange: IRange;\n\t/**\n\t * Options associated with this decoration.\n\t */\n\toptions: IModelDecorationOptions;\n}\n\n/**\n * A decoration in the model.\n */\nexport interface IModelDecoration {\n\t/**\n\t * Identifier for a decoration.\n\t */\n\treadonly id: string;\n\t/**\n\t * Identifier for a decoration's owner.\n\t */\n\treadonly ownerId: number;\n\t/**\n\t * Range that this decoration covers.\n\t */\n\treadonly range: Range;\n\t/**\n\t * Options associated with this decoration.\n\t */\n\treadonly options: IModelDecorationOptions;\n}\n\n/**\n * An accessor that can add, change or remove model decorations.\n * @internal\n */\nexport interface IModelDecorationsChangeAccessor {\n\t/**\n\t * Add a new decoration.\n\t * @param range Range that this decoration covers.\n\t * @param options Options associated with this decoration.\n\t * @return An unique identifier associated with this decoration.\n\t */\n\taddDecoration(range: IRange, options: IModelDecorationOptions): string;\n\t/**\n\t * Change the range that an existing decoration covers.\n\t * @param id The unique identifier associated with the decoration.\n\t * @param newRange The new range that this decoration covers.\n\t */\n\tchangeDecoration(id: string, newRange: IRange): void;\n\t/**\n\t * Change the options associated with an existing decoration.\n\t * @param id The unique identifier associated with the decoration.\n\t * @param newOptions The new options associated with this decoration.\n\t */\n\tchangeDecorationOptions(id: string, newOptions: IModelDecorationOptions): void;\n\t/**\n\t * Remove an existing decoration.\n\t * @param id The unique identifier associated with the decoration.\n\t */\n\tremoveDecoration(id: string): void;\n\t/**\n\t * Perform a minimum amount of operations, in order to transform the decorations\n\t * identified by `oldDecorations` to the decorations described by `newDecorations`\n\t * and returns the new identifiers associated with the resulting decorations.\n\t *\n\t * @param oldDecorations Array containing previous decorations identifiers.\n\t * @param newDecorations Array describing what decorations should result after the call.\n\t * @return An array containing the new decorations identifiers.\n\t */\n\tdeltaDecorations(oldDecorations: readonly string[], newDecorations: readonly IModelDeltaDecoration[]): string[];\n}\n\n/**\n * End of line character preference.\n */\nexport const enum EndOfLinePreference {\n\t/**\n\t * Use the end of line character identified in the text buffer.\n\t */\n\tTextDefined = 0,\n\t/**\n\t * Use line feed (\\n) as the end of line character.\n\t */\n\tLF = 1,\n\t/**\n\t * Use carriage return and line feed (\\r\\n) as the end of line character.\n\t */\n\tCRLF = 2\n}\n\n/**\n * The default end of line to use when instantiating models.\n */\nexport const enum DefaultEndOfLine {\n\t/**\n\t * Use line feed (\\n) as the end of line character.\n\t */\n\tLF = 1,\n\t/**\n\t * Use carriage return and line feed (\\r\\n) as the end of line character.\n\t */\n\tCRLF = 2\n}\n\n/**\n * End of line character preference.\n */\nexport const enum EndOfLineSequence {\n\t/**\n\t * Use line feed (\\n) as the end of line character.\n\t */\n\tLF = 0,\n\t/**\n\t * Use carriage return and line feed (\\r\\n) as the end of line character.\n\t */\n\tCRLF = 1\n}\n\n/**\n * An identifier for a single edit operation.\n * @internal\n */\nexport interface ISingleEditOperationIdentifier {\n\t/**\n\t * Identifier major\n\t */\n\tmajor: number;\n\t/**\n\t * Identifier minor\n\t */\n\tminor: number;\n}\n\n/**\n * A single edit operation, that has an identifier.\n */\nexport interface IIdentifiedSingleEditOperation extends ISingleEditOperation {\n\t/**\n\t * An identifier associated with this single edit operation.\n\t * @internal\n\t */\n\tidentifier?: ISingleEditOperationIdentifier | null;\n\t/**\n\t * This indicates that this operation is inserting automatic whitespace\n\t * that can be removed on next model edit operation if `config.trimAutoWhitespace` is true.\n\t * @internal\n\t */\n\tisAutoWhitespaceEdit?: boolean;\n\t/**\n\t * This indicates that this operation is in a set of operations that are tracked and should not be \"simplified\".\n\t * @internal\n\t */\n\t_isTracked?: boolean;\n}\n\nexport interface IValidEditOperation {\n\t/**\n\t * An identifier associated with this single edit operation.\n\t * @internal\n\t */\n\tidentifier: ISingleEditOperationIdentifier | null;\n\t/**\n\t * The range to replace. This can be empty to emulate a simple insert.\n\t */\n\trange: Range;\n\t/**\n\t * The text to replace with. This can be empty to emulate a simple delete.\n\t */\n\ttext: string;\n\t/**\n\t * @internal\n\t */\n\ttextChange: TextChange;\n}\n\n/**\n * A callback that can compute the cursor state after applying a series of edit operations.\n */\nexport interface ICursorStateComputer {\n\t/**\n\t * A callback that can compute the resulting cursors state after some edit operations have been executed.\n\t */\n\t(inverseEditOperations: IValidEditOperation[]): Selection[] | null;\n}\n\nexport class TextModelResolvedOptions {\n\t_textModelResolvedOptionsBrand: void = undefined;\n\n\treadonly tabSize: number;\n\treadonly indentSize: number;\n\tprivate readonly _indentSizeIsTabSize: boolean;\n\treadonly insertSpaces: boolean;\n\treadonly defaultEOL: DefaultEndOfLine;\n\treadonly trimAutoWhitespace: boolean;\n\treadonly bracketPairColorizationOptions: BracketPairColorizationOptions;\n\n\tpublic get originalIndentSize(): number | 'tabSize' {\n\t\treturn this._indentSizeIsTabSize ? 'tabSize' : this.indentSize;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tconstructor(src: {\n\t\ttabSize: number;\n\t\tindentSize: number | 'tabSize';\n\t\tinsertSpaces: boolean;\n\t\tdefaultEOL: DefaultEndOfLine;\n\t\ttrimAutoWhitespace: boolean;\n\t\tbracketPairColorizationOptions: BracketPairColorizationOptions;\n\t}) {\n\t\tthis.tabSize = Math.max(1, src.tabSize | 0);\n\t\tif (src.indentSize === 'tabSize') {\n\t\t\tthis.indentSize = this.tabSize;\n\t\t\tthis._indentSizeIsTabSize = true;\n\t\t} else {\n\t\t\tthis.indentSize = Math.max(1, src.indentSize | 0);\n\t\t\tthis._indentSizeIsTabSize = false;\n\t\t}\n\t\tthis.insertSpaces = Boolean(src.insertSpaces);\n\t\tthis.defaultEOL = src.defaultEOL | 0;\n\t\tthis.trimAutoWhitespace = Boolean(src.trimAutoWhitespace);\n\t\tthis.bracketPairColorizationOptions = src.bracketPairColorizationOptions;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tpublic equals(other: TextModelResolvedOptions): boolean {\n\t\treturn (\n\t\t\tthis.tabSize === other.tabSize\n\t\t\t&& this._indentSizeIsTabSize === other._indentSizeIsTabSize\n\t\t\t&& this.indentSize === other.indentSize\n\t\t\t&& this.insertSpaces === other.insertSpaces\n\t\t\t&& this.defaultEOL === other.defaultEOL\n\t\t\t&& this.trimAutoWhitespace === other.trimAutoWhitespace\n\t\t\t&& equals(this.bracketPairColorizationOptions, other.bracketPairColorizationOptions)\n\t\t);\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tpublic createChangeEvent(newOpts: TextModelResolvedOptions): IModelOptionsChangedEvent {\n\t\treturn {\n\t\t\ttabSize: this.tabSize !== newOpts.tabSize,\n\t\t\tindentSize: this.indentSize !== newOpts.indentSize,\n\t\t\tinsertSpaces: this.insertSpaces !== newOpts.insertSpaces,\n\t\t\ttrimAutoWhitespace: this.trimAutoWhitespace !== newOpts.trimAutoWhitespace,\n\t\t};\n\t}\n}\n\n/**\n * @internal\n */\nexport interface ITextModelCreationOptions {\n\ttabSize: number;\n\tindentSize: number | 'tabSize';\n\tinsertSpaces: boolean;\n\tdetectIndentation: boolean;\n\ttrimAutoWhitespace: boolean;\n\tdefaultEOL: DefaultEndOfLine;\n\tisForSimpleWidget: boolean;\n\tlargeFileOptimizations: boolean;\n\tbracketPairColorizationOptions: BracketPairColorizationOptions;\n}\n\nexport interface BracketPairColorizationOptions {\n\tenabled: boolean;\n\tindependentColorPoolPerBracketType: boolean;\n}\n\nexport interface ITextModelUpdateOptions {\n\ttabSize?: number;\n\tindentSize?: number | 'tabSize';\n\tinsertSpaces?: boolean;\n\ttrimAutoWhitespace?: boolean;\n\tbracketColorizationOptions?: BracketPairColorizationOptions;\n}\n\nexport class FindMatch {\n\t_findMatchBrand: void = undefined;\n\n\tpublic readonly range: Range;\n\tpublic readonly matches: string[] | null;\n\n\t/**\n\t * @internal\n\t */\n\tconstructor(range: Range, matches: string[] | null) {\n\t\tthis.range = range;\n\t\tthis.matches = matches;\n\t}\n}\n\n/**\n * Describes the behavior of decorations when typing/editing near their edges.\n * Note: Please do not edit the values, as they very carefully match `DecorationRangeBehavior`\n */\nexport const enum TrackedRangeStickiness {\n\tAlwaysGrowsWhenTypingAtEdges = 0,\n\tNeverGrowsWhenTypingAtEdges = 1,\n\tGrowsOnlyWhenTypingBefore = 2,\n\tGrowsOnlyWhenTypingAfter = 3,\n}\n\n/**\n * Text snapshot that works like an iterator.\n * Will try to return chunks of roughly ~64KB size.\n * Will return null when finished.\n */\nexport interface ITextSnapshot {\n\tread(): string | null;\n}\n\n/**\n * @internal\n */\nexport function isITextSnapshot(obj: any): obj is ITextSnapshot {\n\treturn (obj && typeof obj.read === 'function');\n}\n\n/**\n * A model.\n */\nexport interface ITextModel {\n\n\t/**\n\t * Gets the resource associated with this editor model.\n\t */\n\treadonly uri: URI;\n\n\t/**\n\t * A unique identifier associated with this model.\n\t */\n\treadonly id: string;\n\n\t/**\n\t * This model is constructed for a simple widget code editor.\n\t * @internal\n\t */\n\treadonly isForSimpleWidget: boolean;\n\n\t/**\n\t * If true, the text model might contain RTL.\n\t * If false, the text model **contains only** contain LTR.\n\t * @internal\n\t */\n\tmightContainRTL(): boolean;\n\n\t/**\n\t * If true, the text model might contain LINE SEPARATOR (LS), PARAGRAPH SEPARATOR (PS).\n\t * If false, the text model definitely does not contain these.\n\t * @internal\n\t */\n\tmightContainUnusualLineTerminators(): boolean;\n\n\t/**\n\t * @internal\n\t */\n\tremoveUnusualLineTerminators(selections?: Selection[]): void;\n\n\t/**\n\t * If true, the text model might contain non basic ASCII.\n\t * If false, the text model **contains only** basic ASCII.\n\t * @internal\n\t */\n\tmightContainNonBasicASCII(): boolean;\n\n\t/**\n\t * Get the resolved options for this model.\n\t */\n\tgetOptions(): TextModelResolvedOptions;\n\n\t/**\n\t * Get the formatting options for this model.\n\t * @internal\n\t */\n\tgetFormattingOptions(): FormattingOptions;\n\n\t/**\n\t * Get the current version id of the model.\n\t * Anytime a change happens to the model (even undo/redo),\n\t * the version id is incremented.\n\t */\n\tgetVersionId(): number;\n\n\t/**\n\t * Get the alternative version id of the model.\n\t * This alternative version id is not always incremented,\n\t * it will return the same values in the case of undo-redo.\n\t */\n\tgetAlternativeVersionId(): number;\n\n\t/**\n\t * Replace the entire text buffer value contained in this model.\n\t */\n\tsetValue(newValue: string | ITextSnapshot): void;\n\n\t/**\n\t * Get the text stored in this model.\n\t * @param eol The end of line character preference. Defaults to `EndOfLinePreference.TextDefined`.\n\t * @param preserverBOM Preserve a BOM character if it was detected when the model was constructed.\n\t * @return The text.\n\t */\n\tgetValue(eol?: EndOfLinePreference, preserveBOM?: boolean): string;\n\n\t/**\n\t * Get the text stored in this model.\n\t * @param preserverBOM Preserve a BOM character if it was detected when the model was constructed.\n\t * @return The text snapshot (it is safe to consume it asynchronously).\n\t */\n\tcreateSnapshot(preserveBOM?: boolean): ITextSnapshot;\n\n\t/**\n\t * Get the length of the text stored in this model.\n\t */\n\tgetValueLength(eol?: EndOfLinePreference, preserveBOM?: boolean): number;\n\n\t/**\n\t * Get the text in a certain range.\n\t * @param range The range describing what text to get.\n\t * @param eol The end of line character preference. This will only be used for multiline ranges. Defaults to `EndOfLinePreference.TextDefined`.\n\t * @return The text.\n\t */\n\tgetValueInRange(range: IRange, eol?: EndOfLinePreference): string;\n\n\t/**\n\t * Get the length of text in a certain range.\n\t * @param range The range describing what text length to get.\n\t * @return The text length.\n\t */\n\tgetValueLengthInRange(range: IRange, eol?: EndOfLinePreference): number;\n\n\t/**\n\t * Get the character count of text in a certain range.\n\t * @param range The range describing what text length to get.\n\t */\n\tgetCharacterCountInRange(range: IRange, eol?: EndOfLinePreference): number;\n\n\t/**\n\t * Splits characters in two buckets. First bucket (A) is of characters that\n\t * sit in lines with length < `LONG_LINE_BOUNDARY`. Second bucket (B) is of\n\t * characters that sit in lines with length >= `LONG_LINE_BOUNDARY`.\n\t * If count(B) > count(A) return true. Returns false otherwise.\n\t * @internal\n\t */\n\tisDominatedByLongLines(): boolean;\n\n\t/**\n\t * Get the number of lines in the model.\n\t */\n\tgetLineCount(): number;\n\n\t/**\n\t * Get the text for a certain line.\n\t */\n\tgetLineContent(lineNumber: number): string;\n\n\t/**\n\t * Get the text length for a certain line.\n\t */\n\tgetLineLength(lineNumber: number): number;\n\n\t/**\n\t * Get the text for all lines.\n\t */\n\tgetLinesContent(): string[];\n\n\t/**\n\t * Get the end of line sequence predominantly used in the text buffer.\n\t * @return EOL char sequence (e.g.: '\\n' or '\\r\\n').\n\t */\n\tgetEOL(): string;\n\n\t/**\n\t * Get the end of line sequence predominantly used in the text buffer.\n\t */\n\tgetEndOfLineSequence(): EndOfLineSequence;\n\n\t/**\n\t * Get the minimum legal column for line at `lineNumber`\n\t */\n\tgetLineMinColumn(lineNumber: number): number;\n\n\t/**\n\t * Get the maximum legal column for line at `lineNumber`\n\t */\n\tgetLineMaxColumn(lineNumber: number): number;\n\n\t/**\n\t * Returns the column before the first non whitespace character for line at `lineNumber`.\n\t * Returns 0 if line is empty or contains only whitespace.\n\t */\n\tgetLineFirstNonWhitespaceColumn(lineNumber: number): number;\n\n\t/**\n\t * Returns the column after the last non whitespace character for line at `lineNumber`.\n\t * Returns 0 if line is empty or contains only whitespace.\n\t */\n\tgetLineLastNonWhitespaceColumn(lineNumber: number): number;\n\n\t/**\n\t * Create a valid position.\n\t */\n\tvalidatePosition(position: IPosition): Position;\n\n\t/**\n\t * Advances the given position by the given offset (negative offsets are also accepted)\n\t * and returns it as a new valid position.\n\t *\n\t * If the offset and position are such that their combination goes beyond the beginning or\n\t * end of the model, throws an exception.\n\t *\n\t * If the offset is such that the new position would be in the middle of a multi-byte\n\t * line terminator, throws an exception.\n\t */\n\tmodifyPosition(position: IPosition, offset: number): Position;\n\n\t/**\n\t * Create a valid range.\n\t */\n\tvalidateRange(range: IRange): Range;\n\n\t/**\n\t * Verifies the range is valid.\n\t */\n\tisValidRange(range: IRange): boolean;\n\n\t/**\n\t * Converts the position to a zero-based offset.\n\t *\n\t * The position will be [adjusted](#TextDocument.validatePosition).\n\t *\n\t * @param position A position.\n\t * @return A valid zero-based offset.\n\t */\n\tgetOffsetAt(position: IPosition): number;\n\n\t/**\n\t * Converts a zero-based offset to a position.\n\t *\n\t * @param offset A zero-based offset.\n\t * @return A valid [position](#Position).\n\t */\n\tgetPositionAt(offset: number): Position;\n\n\t/**\n\t * Get a range covering the entire model.\n\t */\n\tgetFullModelRange(): Range;\n\n\t/**\n\t * Returns if the model was disposed or not.\n\t */\n\tisDisposed(): boolean;\n\n\t/**\n\t * This model is so large that it would not be a good idea to sync it over\n\t * to web workers or other places.\n\t * @internal\n\t */\n\tisTooLargeForSyncing(): boolean;\n\n\t/**\n\t * The file is so large, that even tokenization is disabled.\n\t * @internal\n\t */\n\tisTooLargeForTokenization(): boolean;\n\n\t/**\n\t * The file is so large, that operations on it might be too large for heap\n\t * and can lead to OOM crashes so they should be disabled.\n\t * @internal\n\t */\n\tisTooLargeForHeapOperation(): boolean;\n\n\t/**\n\t * Search the model.\n\t * @param searchString The string used to search. If it is a regular expression, set `isRegex` to true.\n\t * @param searchOnlyEditableRange Limit the searching to only search inside the editable range of the model.\n\t * @param isRegex Used to indicate that `searchString` is a regular expression.\n\t * @param matchCase Force the matching to match lower/upper case exactly.\n\t * @param wordSeparators Force the matching to match entire words only. Pass null otherwise.\n\t * @param captureMatches The result will contain the captured groups.\n\t * @param limitResultCount Limit the number of results\n\t * @return The ranges where the matches are. It is empty if not matches have been found.\n\t */\n\tfindMatches(searchString: string, searchOnlyEditableRange: boolean, isRegex: boolean, matchCase: boolean, wordSeparators: string | null, captureMatches: boolean, limitResultCount?: number): FindMatch[];\n\t/**\n\t * Search the model.\n\t * @param searchString The string used to search. If it is a regular expression, set `isRegex` to true.\n\t * @param searchScope Limit the searching to only search inside these ranges.\n\t * @param isRegex Used to indicate that `searchString` is a regular expression.\n\t * @param matchCase Force the matching to match lower/upper case exactly.\n\t * @param wordSeparators Force the matching to match entire words only. Pass null otherwise.\n\t * @param captureMatches The result will contain the captured groups.\n\t * @param limitResultCount Limit the number of results\n\t * @return The ranges where the matches are. It is empty if no matches have been found.\n\t */\n\tfindMatches(searchString: string, searchScope: IRange | IRange[], isRegex: boolean, matchCase: boolean, wordSeparators: string | null, captureMatches: boolean, limitResultCount?: number): FindMatch[];\n\t/**\n\t * Search the model for the next match. Loops to the beginning of the model if needed.\n\t * @param searchString The string used to search. If it is a regular expression, set `isRegex` to true.\n\t * @param searchStart Start the searching at the specified position.\n\t * @param isRegex Used to indicate that `searchString` is a regular expression.\n\t * @param matchCase Force the matching to match lower/upper case exactly.\n\t * @param wordSeparators Force the matching to match entire words only. Pass null otherwise.\n\t * @param captureMatches The result will contain the captured groups.\n\t * @return The range where the next match is. It is null if no next match has been found.\n\t */\n\tfindNextMatch(searchString: string, searchStart: IPosition, isRegex: boolean, matchCase: boolean, wordSeparators: string | null, captureMatches: boolean): FindMatch | null;\n\t/**\n\t * Search the model for the previous match. Loops to the end of the model if needed.\n\t * @param searchString The string used to search. If it is a regular expression, set `isRegex` to true.\n\t * @param searchStart Start the searching at the specified position.\n\t * @param isRegex Used to indicate that `searchString` is a regular expression.\n\t * @param matchCase Force the matching to match lower/upper case exactly.\n\t * @param wordSeparators Force the matching to match entire words only. Pass null otherwise.\n\t * @param captureMatches The result will contain the captured groups.\n\t * @return The range where the previous match is. It is null if no previous match has been found.\n\t */\n\tfindPreviousMatch(searchString: string, searchStart: IPosition, isRegex: boolean, matchCase: boolean, wordSeparators: string | null, captureMatches: boolean): FindMatch | null;\n\n\n\t/**\n\t * Get the language associated with this model.\n\t */\n\tgetLanguageId(): string;\n\n\t/**\n\t * Set the current language mode associated with the model.\n\t * @param languageId The new language.\n\t * @param source The source of the call that set the language.\n\t * @internal\n\t */\n\tsetLanguage(languageId: string, source?: string): void;\n\n\t/**\n\t * Set the current language mode associated with the model.\n\t * @param languageSelection The new language selection.\n\t * @param source The source of the call that set the language.\n\t * @internal\n\t */\n\tsetLanguage(languageSelection: ILanguageSelection, source?: string): void;\n\n\t/**\n\t * Returns the real (inner-most) language mode at a given position.\n\t * The result might be inaccurate. Use `forceTokenization` to ensure accurate tokens.\n\t * @internal\n\t */\n\tgetLanguageIdAtPosition(lineNumber: number, column: number): string;\n\n\t/**\n\t * Get the word under or besides `position`.\n\t * @param position The position to look for a word.\n\t * @return The word under or besides `position`. Might be null.\n\t */\n\tgetWordAtPosition(position: IPosition): IWordAtPosition | null;\n\n\t/**\n\t * Get the word under or besides `position` trimmed to `position`.column\n\t * @param position The position to look for a word.\n\t * @return The word under or besides `position`. Will never be null.\n\t */\n\tgetWordUntilPosition(position: IPosition): IWordAtPosition;\n\n\t/**\n\t * Change the decorations. The callback will be called with a change accessor\n\t * that becomes invalid as soon as the callback finishes executing.\n\t * This allows for all events to be queued up until the change\n\t * is completed. Returns whatever the callback returns.\n\t * @param ownerId Identifies the editor id in which these decorations should appear. If no `ownerId` is provided, the decorations will appear in all editors that attach this model.\n\t * @internal\n\t */\n\tchangeDecorations<T>(callback: (changeAccessor: IModelDecorationsChangeAccessor) => T, ownerId?: number): T | null;\n\n\t/**\n\t * Perform a minimum amount of operations, in order to transform the decorations\n\t * identified by `oldDecorations` to the decorations described by `newDecorations`\n\t * and returns the new identifiers associated with the resulting decorations.\n\t *\n\t * @param oldDecorations Array containing previous decorations identifiers.\n\t * @param newDecorations Array describing what decorations should result after the call.\n\t * @param ownerId Identifies the editor id in which these decorations should appear. If no `ownerId` is provided, the decorations will appear in all editors that attach this model.\n\t * @return An array containing the new decorations identifiers.\n\t */\n\tdeltaDecorations(oldDecorations: string[], newDecorations: IModelDeltaDecoration[], ownerId?: number): string[];\n\n\t/**\n\t * Remove all decorations that have been added with this specific ownerId.\n\t * @param ownerId The owner id to search for.\n\t * @internal\n\t */\n\tremoveAllDecorationsWithOwnerId(ownerId: number): void;\n\n\t/**\n\t * Get the options associated with a decoration.\n\t * @param id The decoration id.\n\t * @return The decoration options or null if the decoration was not found.\n\t */\n\tgetDecorationOptions(id: string): IModelDecorationOptions | null;\n\n\t/**\n\t * Get the range associated with a decoration.\n\t * @param id The decoration id.\n\t * @return The decoration range or null if the decoration was not found.\n\t */\n\tgetDecorationRange(id: string): Range | null;\n\n\t/**\n\t * Gets all the decorations for the line `lineNumber` as an array.\n\t * @param lineNumber The line number\n\t * @param ownerId If set, it will ignore decorations belonging to other owners.\n\t * @param filterOutValidation If set, it will ignore decorations specific to validation (i.e. warnings, errors).\n\t * @param filterFontDecorations If set, it will ignore font decorations.\n\t * @return An array with the decorations\n\t */\n\tgetLineDecorations(lineNumber: number, ownerId?: number, filterOutValidation?: boolean, filterFontDecorations?: boolean): IModelDecoration[];\n\n\t/**\n\t * Gets all the font decorations for the line `lineNumber` as an array.\n\t * @param ownerId If set, it will ignore decorations belonging to other owners.\n\t * @internal\n\t */\n\tgetFontDecorationsInRange(range: IRange, ownerId?: number): IModelDecoration[];\n\n\t/**\n\t * Gets all the decorations for the lines between `startLineNumber` and `endLineNumber` as an array.\n\t * @param startLineNumber The start line number\n\t * @param endLineNumber The end line number\n\t * @param ownerId If set, it will ignore decorations belonging to other owners.\n\t * @param filterOutValidation If set, it will ignore decorations specific to validation (i.e. warnings, errors).\n\t * @param filterFontDecorations If set, it will ignore font decorations.\n\t * @return An array with the decorations\n\t */\n\tgetLinesDecorations(startLineNumber: number, endLineNumber: number, ownerId?: number, filterOutValidation?: boolean, filterFontDecorations?: boolean): IModelDecoration[];\n\n\t/**\n\t * Gets all the decorations in a range as an array. Only `startLineNumber` and `endLineNumber` from `range` are used for filtering.\n\t * So for now it returns all the decorations on the same line as `range`.\n\t * @param range The range to search in\n\t * @param ownerId If set, it will ignore decorations belonging to other owners.\n\t * @param filterOutValidation If set, it will ignore decorations specific to validation (i.e. warnings, errors).\n\t * @param filterFontDecorations If set, it will ignore font decorations.\n\t * @param onlyMinimapDecorations If set, it will return only decorations that render in the minimap.\n\t * @param onlyMarginDecorations If set, it will return only decorations that render in the glyph margin.\n\t * @return An array with the decorations\n\t */\n\tgetDecorationsInRange(range: IRange, ownerId?: number, filterOutValidation?: boolean, filterFontDecorations?: boolean, onlyMinimapDecorations?: boolean, onlyMarginDecorations?: boolean): IModelDecoration[];\n\n\t/**\n\t * Gets all the decorations as an array.\n\t * @param ownerId If set, it will ignore decorations belonging to other owners.\n\t * @param filterOutValidation If set, it will ignore decorations specific to validation (i.e. warnings, errors).\n\t * @param filterFontDecorations If set, it will ignore font decorations.\n\t */\n\tgetAllDecorations(ownerId?: number, filterOutValidation?: boolean, filterFontDecorations?: boolean): IModelDecoration[];\n\n\t/**\n\t * Gets all decorations that render in the glyph margin as an array.\n\t * @param ownerId If set, it will ignore decorations belonging to other owners.\n\t */\n\tgetAllMarginDecorations(ownerId?: number): IModelDecoration[];\n\n\t/**\n\t * Gets all the decorations that should be rendered in the overview ruler as an array.\n\t * @param ownerId If set, it will ignore decorations belonging to other owners.\n\t * @param filterOutValidation If set, it will ignore decorations specific to validation (i.e. warnings, errors).\n\t * @param filterFontDecorations If set, it will ignore font decorations.\n\t */\n\tgetOverviewRulerDecorations(ownerId?: number, filterOutValidation?: boolean, filterFontDecorations?: boolean): IModelDecoration[];\n\n\t/**\n\t * Gets all the decorations that contain injected text.\n\t * @param ownerId If set, it will ignore decorations belonging to other owners.\n\t */\n\tgetInjectedTextDecorations(ownerId?: number): IModelDecoration[];\n\n\t/**\n\t * Gets all the decorations that contain custom line heights.\n\t * @param ownerId If set, it will ignore decorations belonging to other owners.\n\t */\n\tgetCustomLineHeightsDecorations(ownerId?: number): IModelDecoration[];\n\n\t/**\n\t * @internal\n\t */\n\t_getTrackedRange(id: string): Range | null;\n\n\t/**\n\t * @internal\n\t */\n\t_setTrackedRange(id: string | null, newRange: null, newStickiness: TrackedRangeStickiness): null;\n\t/**\n\t * @internal\n\t */\n\t_setTrackedRange(id: string | null, newRange: Range, newStickiness: TrackedRangeStickiness): string;\n\n\t/**\n\t * Normalize a string containing whitespace according to indentation rules (converts to spaces or to tabs).\n\t */\n\tnormalizeIndentation(str: string): string;\n\n\t/**\n\t * Change the options of this model.\n\t */\n\tupdateOptions(newOpts: ITextModelUpdateOptions): void;\n\n\t/**\n\t * Detect the indentation options for this model from its content.\n\t */\n\tdetectIndentation(defaultInsertSpaces: boolean, defaultTabSize: number): void;\n\n\t/**\n\t * Close the current undo-redo element.\n\t * This offers a way to create an undo/redo stop point.\n\t */\n\tpushStackElement(): void;\n\n\t/**\n\t * Open the current undo-redo element.\n\t * This offers a way to remove the current undo/redo stop point.\n\t */\n\tpopStackElement(): void;\n\n\t/**\n\t * Push edit operations, basically editing the model. This is the preferred way\n\t * of editing the model. The edit operations will land on the undo stack.\n\t * @param beforeCursorState The cursor state before the edit operations. This cursor state will be returned when `undo` or `redo` are invoked.\n\t * @param editOperations The edit operations.\n\t * @param cursorStateComputer A callback that can compute the resulting cursors state after the edit operations have been executed.\n\t * @return The cursor state returned by the `cursorStateComputer`.\n\t */\n\tpushEditOperations(beforeCursorState: Selection[] | null, editOperations: IIdentifiedSingleEditOperation[], cursorStateComputer: ICursorStateComputer): Selection[] | null;\n\t/**\n\t * @internal\n\t */\n\tpushEditOperations(beforeCursorState: Selection[] | null, editOperations: IIdentifiedSingleEditOperation[], cursorStateComputer: ICursorStateComputer, group?: UndoRedoGroup, reason?: TextModelEditSource): Selection[] | null;\n\n\t/**\n\t * Change the end of line sequence. This is the preferred way of\n\t * changing the eol sequence. This will land on the undo stack.\n\t */\n\tpushEOL(eol: EndOfLineSequence): void;\n\n\t/**\n\t * Edit the model without adding the edits to the undo stack.\n\t * This can have dire consequences on the undo stack! See @pushEditOperations for the preferred way.\n\t * @param operations The edit operations.\n\t * @return If desired, the inverse edit operations, that, when applied, will bring the model back to the previous state.\n\t */\n\tapplyEdits(operations: readonly IIdentifiedSingleEditOperation[]): void;\n\t/** @internal */\n\tapplyEdits(operations: readonly IIdentifiedSingleEditOperation[], reason: TextModelEditSource): void;\n\tapplyEdits(operations: readonly IIdentifiedSingleEditOperation[], computeUndoEdits: false): void;\n\tapplyEdits(operations: readonly IIdentifiedSingleEditOperation[], computeUndoEdits: true): IValidEditOperation[];\n\n\t/**\n\t * Change the end of line sequence without recording in the undo stack.\n\t * This can have dire consequences on the undo stack! See @pushEOL for the preferred way.\n\t */\n\tsetEOL(eol: EndOfLineSequence): void;\n\n\t/**\n\t * @internal\n\t */\n\t_applyUndo(changes: TextChange[], eol: EndOfLineSequence, resultingAlternativeVersionId: number, resultingSelection: Selection[] | null): void;\n\n\t/**\n\t * @internal\n\t */\n\t_applyRedo(changes: TextChange[], eol: EndOfLineSequence, resultingAlternativeVersionId: number, resultingSelection: Selection[] | null): void;\n\n\t/**\n\t * Undo edit operations until the previous undo/redo point.\n\t * The inverse edit operations will be pushed on the redo stack.\n\t */\n\tundo(): void | Promise<void>;\n\n\t/**\n\t * Is there anything in the undo stack?\n\t */\n\tcanUndo(): boolean;\n\n\t/**\n\t * Redo edit operations until the next undo/redo point.\n\t * The inverse edit operations will be pushed on the undo stack.\n\t */\n\tredo(): void | Promise<void>;\n\n\t/**\n\t * Is there anything in the redo stack?\n\t */\n\tcanRedo(): boolean;\n\n\t/**\n\t * @deprecated Please use `onDidChangeContent` instead.\n\t * An event emitted when the contents of the model have changed.\n\t * @internal\n\t * @event\n\t */\n\treadonly onDidChangeContentOrInjectedText: Event<InternalModelContentChangeEvent | ModelInjectedTextChangedEvent>;\n\t/**\n\t * An event emitted when the contents of the model have changed.\n\t * @event\n\t */\n\tonDidChangeContent(listener: (e: IModelContentChangedEvent) => void): IDisposable;\n\t/**\n\t * An event emitted when decorations of the model have changed.\n\t * @event\n\t */\n\treadonly onDidChangeDecorations: Event<IModelDecorationsChangedEvent>;\n\t/**\n\t * An event emitted when line heights from decorations changes.\n\t * This event is emitted only when adding, removing or changing a decoration\n\t * and not when doing edits in the model (i.e. when decoration ranges change)\n\t * @internal\n\t * @event\n\t */\n\treadonly onDidChangeLineHeight: Event<ModelLineHeightChangedEvent>;\n\t/**\n\t* An event emitted when the font from decorations changes.\n\t* This event is emitted only when adding, removing or changing a decoration\n\t* and not when doing edits in the model (i.e. when decoration ranges change)\n\t* @internal\n\t* @event\n\t*/\n\treadonly onDidChangeFont: Event<ModelFontChangedEvent>;\n\t/**\n\t * An event emitted when the model options have changed.\n\t * @event\n\t */\n\treadonly onDidChangeOptions: Event<IModelOptionsChangedEvent>;\n\t/**\n\t * An event emitted when the language associated with the model has changed.\n\t * @event\n\t */\n\treadonly onDidChangeLanguage: Event<IModelLanguageChangedEvent>;\n\t/**\n\t * An event emitted when the language configuration associated with the model has changed.\n\t * @event\n\t */\n\treadonly onDidChangeLanguageConfiguration: Event<IModelLanguageConfigurationChangedEvent>;\n\t/**\n\t * An event emitted when the tokens associated with the model have changed.\n\t * @event\n\t * @internal\n\t */\n\treadonly onDidChangeTokens: Event<IModelTokensChangedEvent>;\n\t/**\n\t * An event emitted when the model has been attached to the first editor or detached from the last editor.\n\t * @event\n\t */\n\treadonly onDidChangeAttached: Event<void>;\n\t/**\n\t * An event emitted right before disposing the model.\n\t * @event\n\t */\n\treadonly onWillDispose: Event<void>;\n\n\t/**\n\t * Destroy this model.\n\t */\n\tdispose(): void;\n\n\t/**\n\t * @internal\n\t */\n\tonBeforeAttached(): IAttachedView;\n\n\t/**\n\t * @internal\n\t */\n\tonBeforeDetached(view: IAttachedView): void;\n\n\t/**\n\t * Returns if this model is attached to an editor or not.\n\t */\n\tisAttachedToEditor(): boolean;\n\n\t/**\n\t * Returns the count of editors this model is attached to.\n\t * @internal\n\t */\n\tgetAttachedEditorCount(): number;\n\n\t/**\n\t * Among all positions that are projected to the same position in the underlying text model as\n\t * the given position, select a unique position as indicated by the affinity.\n\t *\n\t * PositionAffinity.Left:\n\t * The normalized position must be equal or left to the requested position.\n\t *\n\t * PositionAffinity.Right:\n\t * The normalized position must be equal or right to the requested position.\n\t *\n\t * @internal\n\t */\n\tnormalizePosition(position: Position, affinity: PositionAffinity): Position;\n\n\t/**\n\t * Gets the column at which indentation stops at a given line.\n\t * @internal\n\t*/\n\tgetLineIndentColumn(lineNumber: number): number;\n\n\t/**\n\t * Returns an object that can be used to query brackets.\n\t * @internal\n\t*/\n\treadonly bracketPairs: IBracketPairsTextModelPart;\n\n\t/**\n\t * Returns an object that can be used to query indent guides.\n\t * @internal\n\t*/\n\treadonly guides: IGuidesTextModelPart;\n\n\t/**\n\t * @internal\n\t */\n\treadonly tokenization: ITokenizationTextModelPart;\n}\n\n/**\n * @internal\n */\nexport interface IAttachedView {\n\t/**\n\t * @param stabilized Indicates if the visible lines are probably going to change soon or can be considered stable.\n\t * Is true on reveal range and false on scroll.\n\t * Tokenizers should tokenize synchronously if stabilized is true.\n\t */\n\tsetVisibleLines(visibleLines: { startLineNumber: number; endLineNumber: number }[], stabilized: boolean): void;\n}\n\nexport const enum PositionAffinity {\n\t/**\n\t * Prefers the left most position.\n\t*/\n\tLeft = 0,\n\n\t/**\n\t * Prefers the right most position.\n\t*/\n\tRight = 1,\n\n\t/**\n\t * No preference.\n\t*/\n\tNone = 2,\n\n\t/**\n\t * If the given position is on injected text, prefers the position left of it.\n\t*/\n\tLeftOfInjectedText = 3,\n\n\t/**\n\t * If the given position is on injected text, prefers the position right of it.\n\t*/\n\tRightOfInjectedText = 4,\n}\n\n/**\n * @internal\n */\nexport interface ITextBufferBuilder {\n}\n\n/**\n * @internal\n */\nexport interface ITextBufferFactory {\n\tcreate(defaultEOL: DefaultEndOfLine): { textBuffer: ITextBuffer; disposable: IDisposable };\n}\n\n/**\n * @internal\n */\nexport class ValidAnnotatedEditOperation implements IIdentifiedSingleEditOperation {\n\tconstructor(\n\t\tpublic readonly identifier: ISingleEditOperationIdentifier | null,\n\t\tpublic readonly range: Range,\n\t\tpublic readonly text: string | null,\n\t\tpublic readonly forceMoveMarkers: boolean,\n\t\tpublic readonly isAutoWhitespaceEdit: boolean,\n\t\tpublic readonly _isTracked: boolean,\n\t) { }\n}\n\n/**\n * @internal\n *\n * `lineNumber` is 1 based.\n */\nexport interface IReadonlyTextBuffer {\n\tmightContainRTL(): boolean;\n\tmightContainUnusualLineTerminators(): boolean;\n\tresetMightContainUnusualLineTerminators(): void;\n\tmightContainNonBasicASCII(): boolean;\n\tgetBOM(): string;\n\tgetEOL(): string;\n\n\tgetOffsetAt(lineNumber: number, column: number): number;\n\tgetPositionAt(offset: number): Position;\n\tgetRangeAt(offset: number, length: number): Range;\n\n\tgetValueInRange(range: Range, eol: EndOfLinePreference): string;\n\tcreateSnapshot(preserveBOM: boolean): ITextSnapshot;\n\tgetValueLengthInRange(range: Range, eol: EndOfLinePreference): number;\n\tgetCharacterCountInRange(range: Range, eol: EndOfLinePreference): number;\n\tgetLength(): number;\n\tgetLineCount(): number;\n\tgetLinesContent(): string[];\n\tgetLineContent(lineNumber: number): string;\n\tgetLineCharCode(lineNumber: number, index: number): number;\n\tgetLineLength(lineNumber: number): number;\n\tgetLineFirstNonWhitespaceColumn(lineNumber: number): number;\n\tgetLineLastNonWhitespaceColumn(lineNumber: number): number;\n\tfindMatchesLineByLine(searchRange: Range, searchData: SearchData, captureMatches: boolean, limitResultCount: number): FindMatch[];\n\n\t/**\n\t * Get nearest chunk of text after `offset` in the text buffer.\n\t */\n\tgetNearestChunk(offset: number): string;\n}\n\n/**\n * @internal\n */\nexport class SearchData {\n\n\t/**\n\t * The regex to search for. Always defined.\n\t */\n\tpublic readonly regex: RegExp;\n\t/**\n\t * The word separator classifier.\n\t */\n\tpublic readonly wordSeparators: WordCharacterClassifier | null;\n\t/**\n\t * The simple string to search for (if possible).\n\t */\n\tpublic readonly simpleSearch: string | null;\n\n\tconstructor(regex: RegExp, wordSeparators: WordCharacterClassifier | null, simpleSearch: string | null) {\n\t\tthis.regex = regex;\n\t\tthis.wordSeparators = wordSeparators;\n\t\tthis.simpleSearch = simpleSearch;\n\t}\n}\n\n/**\n * @internal\n */\nexport interface ITextBuffer extends IReadonlyTextBuffer, IDisposable {\n\tsetEOL(newEOL: '\\r\\n' | '\\n'): void;\n\tapplyEdits(rawOperations: ValidAnnotatedEditOperation[], recordTrimAutoWhitespace: boolean, computeUndoEdits: boolean): ApplyEditsResult;\n}\n\n/**\n * @internal\n */\nexport class ApplyEditsResult {\n\n\tconstructor(\n\t\tpublic readonly reverseEdits: IValidEditOperation[] | null,\n\t\tpublic readonly changes: IInternalModelContentChange[],\n\t\tpublic readonly trimAutoWhitespaceLineNumbers: number[] | null\n\t) { }\n\n}\n\n/**\n * @internal\n */\nexport interface IInternalModelContentChange extends IModelContentChange {\n\trange: Range;\n\tforceMoveMarkers: boolean;\n}\n\n/**\n * @internal\n */\nexport function shouldSynchronizeModel(model: ITextModel): boolean {\n\treturn (\n\t\t!model.isTooLargeForSyncing() && !model.isForSimpleWidget\n\t);\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from '../../base/common/event.js';\nimport { IMarkdownString } from '../../base/common/htmlContent.js';\nimport { IDisposable } from '../../base/common/lifecycle.js';\nimport { equals } from '../../base/common/objects.js';\nimport { ThemeColor } from '../../base/common/themables.js';\nimport { URI } from '../../base/common/uri.js';\nimport { ISingleEditOperation } from './core/editOperation.js';\nimport { IPosition, Position } from './core/position.js';\nimport { IRange, Range } from './core/range.js';\nimport { Selection } from './core/selection.js';\nimport { TextChange } from './core/textChange.js';\nimport { WordCharacterClassifier } from './core/wordCharacterClassifier.js';\nimport { IWordAtPosition } from './core/wordHelper.js';\nimport { FormattingOptions } from './languages.js';\nimport { ILanguageSelection } from './languages/language.js';\nimport { IBracketPairsTextModelPart } from './textModelBracketPairs.js';\nimport { IModelContentChangedEvent, IModelDecorationsChangedEvent, IModelLanguageChangedEvent, IModelLanguageConfigurationChangedEvent, IModelOptionsChangedEvent, IModelTokensChangedEvent, InternalModelContentChangeEvent, ModelFontChangedEvent, ModelInjectedTextChangedEvent, ModelLineHeightChangedEvent } from './textModelEvents.js';\nimport { IModelContentChange } from './model/mirrorTextModel.js';\nimport { IGuidesTextModelPart } from './textModelGuides.js';\nimport { ITokenizationTextModelPart } from './tokenizationTextModelPart.js';\nimport { UndoRedoGroup } from '../../platform/undoRedo/common/undoRedo.js';\nimport { TokenArray } from './tokens/lineTokens.js';\nimport { TextModelEditSource } from './textModelEditSource.js';\n\n/**\n * Vertical Lane in the overview ruler of the editor.\n */\nexport enum OverviewRulerLane {\n\tLeft = 1,\n\tCenter = 2,\n\tRight = 4,\n\tFull = 7\n}\n\n/**\n * Vertical Lane in the glyph margin of the editor.\n */\nexport enum GlyphMarginLane {\n\tLeft = 1,\n\tCenter = 2,\n\tRight = 3,\n}\n\nexport interface IGlyphMarginLanesModel {\n\t/**\n\t * The number of lanes that should be rendered in the editor.\n\t */\n\treadonly requiredLanes: number;\n\n\t/**\n\t * Gets the lanes that should be rendered starting at a given line number.\n\t */\n\tgetLanesAtLine(lineNumber: number): GlyphMarginLane[];\n\n\t/**\n\t * Resets the model and ensures it can contain at least `maxLine` lines.\n\t */\n\treset(maxLine: number): void;\n\n\t/**\n\t * Registers that a lane should be visible at the Range in the model.\n\t * @param persist - if true, notes that the lane should always be visible,\n\t * even on lines where there's no specific request for that lane.\n\t */\n\tpush(lane: GlyphMarginLane, range: Range, persist?: boolean): void;\n}\n\n/**\n * Position in the minimap to render the decoration.\n */\nexport const enum MinimapPosition {\n\tInline = 1,\n\tGutter = 2\n}\n\n/**\n * Section header style.\n */\nexport const enum MinimapSectionHeaderStyle {\n\tNormal = 1,\n\tUnderlined = 2\n}\n\nexport interface IDecorationOptions {\n\t/**\n\t * CSS color to render.\n\t * e.g.: rgba(100, 100, 100, 0.5) or a color from the color registry\n\t */\n\tcolor: string | ThemeColor | undefined;\n\t/**\n\t * CSS color to render.\n\t * e.g.: rgba(100, 100, 100, 0.5) or a color from the color registry\n\t */\n\tdarkColor?: string | ThemeColor;\n}\n\nexport interface IModelDecorationGlyphMarginOptions {\n\t/**\n\t * The position in the glyph margin.\n\t */\n\tposition: GlyphMarginLane;\n\n\t/**\n\t * Whether the glyph margin lane in {@link position} should be rendered even\n\t * outside of this decoration's range.\n\t */\n\tpersistLane?: boolean;\n}\n\n/**\n * Options for rendering a model decoration in the overview ruler.\n */\nexport interface IModelDecorationOverviewRulerOptions extends IDecorationOptions {\n\t/**\n\t * The position in the overview ruler.\n\t */\n\tposition: OverviewRulerLane;\n}\n\n/**\n * Options for rendering a model decoration in the minimap.\n */\nexport interface IModelDecorationMinimapOptions extends IDecorationOptions {\n\t/**\n\t * The position in the minimap.\n\t */\n\tposition: MinimapPosition;\n\t/**\n\t * If the decoration is for a section header, which header style.\n\t */\n\tsectionHeaderStyle?: MinimapSectionHeaderStyle | null;\n\t/**\n\t * If the decoration is for a section header, the header text.\n\t */\n\tsectionHeaderText?: string | null;\n}\n\n/**\n * Options for a model decoration.\n */\nexport interface IModelDecorationOptions {\n\t/**\n\t * A debug description that can be used for inspecting model decorations.\n\t * @internal\n\t */\n\tdescription: string;\n\t/**\n\t * Customize the growing behavior of the decoration when typing at the edges of the decoration.\n\t * Defaults to TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges\n\t */\n\tstickiness?: TrackedRangeStickiness;\n\t/**\n\t * CSS class name describing the decoration.\n\t */\n\tclassName?: string | null;\n\t/**\n\t * Indicates whether the decoration should span across the entire line when it continues onto the next line.\n\t */\n\tshouldFillLineOnLineBreak?: boolean | null;\n\tblockClassName?: string | null;\n\t/**\n\t * Indicates if this block should be rendered after the last line.\n\t * In this case, the range must be empty and set to the last line.\n\t */\n\tblockIsAfterEnd?: boolean | null;\n\tblockDoesNotCollapse?: boolean | null;\n\tblockPadding?: [top: number, right: number, bottom: number, left: number] | null;\n\n\t/**\n\t * Message to be rendered when hovering over the glyph margin decoration.\n\t */\n\tglyphMarginHoverMessage?: IMarkdownString | IMarkdownString[] | null;\n\t/**\n\t * Array of MarkdownString to render as the decoration message.\n\t */\n\thoverMessage?: IMarkdownString | IMarkdownString[] | null;\n\t/**\n\t * Array of MarkdownString to render as the line number message.\n\t */\n\tlineNumberHoverMessage?: IMarkdownString | IMarkdownString[] | null;\n\t/**\n\t * Should the decoration expand to encompass a whole line.\n\t */\n\tisWholeLine?: boolean;\n\t/**\n\t * Always render the decoration (even when the range it encompasses is collapsed).\n\t */\n\tshowIfCollapsed?: boolean;\n\t/**\n\t * Collapse the decoration if its entire range is being replaced via an edit.\n\t * @internal\n\t */\n\tcollapseOnReplaceEdit?: boolean;\n\t/**\n\t * Specifies the stack order of a decoration.\n\t * A decoration with greater stack order is always in front of a decoration with\n\t * a lower stack order when the decorations are on the same line.\n\t */\n\tzIndex?: number;\n\t/**\n\t * If set, render this decoration in the overview ruler.\n\t */\n\toverviewRuler?: IModelDecorationOverviewRulerOptions | null;\n\t/**\n\t * If set, render this decoration in the minimap.\n\t */\n\tminimap?: IModelDecorationMinimapOptions | null;\n\t/**\n\t * If set, the decoration will be rendered in the glyph margin with this CSS class name.\n\t */\n\tglyphMarginClassName?: string | null;\n\t/**\n\t * If set and the decoration has {@link glyphMarginClassName} set, render this decoration\n\t * with the specified {@link IModelDecorationGlyphMarginOptions} in the glyph margin.\n\t */\n\tglyphMargin?: IModelDecorationGlyphMarginOptions | null;\n\t/**\n\t * If set, the decoration will override the line height of the lines it spans. Maximum value is 300px.\n\t */\n\tlineHeight?: number | null;\n\t/**\n\t * Font family\n\t */\n\tfontFamily?: string | null;\n\t/**\n\t * Font size\n\t */\n\tfontSize?: string | null;\n\t/**\n\t * Font weight\n\t */\n\tfontWeight?: string | null;\n\t/**\n\t * Font style\n\t */\n\tfontStyle?: string | null;\n\t/**\n\t * If set, the decoration will be rendered in the lines decorations with this CSS class name.\n\t */\n\tlinesDecorationsClassName?: string | null;\n\t/**\n\t * Controls the tooltip text of the line decoration.\n\t */\n\tlinesDecorationsTooltip?: string | null;\n\t/**\n\t * If set, the decoration will be rendered on the line number.\n\t */\n\tlineNumberClassName?: string | null;\n\t/**\n\t * If set, the decoration will be rendered in the lines decorations with this CSS class name, but only for the first line in case of line wrapping.\n\t */\n\tfirstLineDecorationClassName?: string | null;\n\t/**\n\t * If set, the decoration will be rendered in the margin (covering its full width) with this CSS class name.\n\t */\n\tmarginClassName?: string | null;\n\t/**\n\t * If set, the decoration will be rendered inline with the text with this CSS class name.\n\t * Please use this only for CSS rules that must impact the text. For example, use `className`\n\t * to have a background color decoration.\n\t */\n\tinlineClassName?: string | null;\n\t/**\n\t * If there is an `inlineClassName` which affects letter spacing.\n\t */\n\tinlineClassNameAffectsLetterSpacing?: boolean;\n\t/**\n\t * If set, the decoration will be rendered before the text with this CSS class name.\n\t */\n\tbeforeContentClassName?: string | null;\n\t/**\n\t * If set, the decoration will be rendered after the text with this CSS class name.\n\t */\n\tafterContentClassName?: string | null;\n\t/**\n\t * If set, text will be injected in the view after the range.\n\t */\n\tafter?: InjectedTextOptions | null;\n\n\t/**\n\t * If set, text will be injected in the view before the range.\n\t */\n\tbefore?: InjectedTextOptions | null;\n\n\t/**\n\t * If set, this decoration will not be rendered for comment tokens.\n\t * @internal\n\t*/\n\thideInCommentTokens?: boolean | null;\n\n\t/**\n\t * If set, this decoration will not be rendered for string tokens.\n\t * @internal\n\t*/\n\thideInStringTokens?: boolean | null;\n\n\t/**\n\t * Whether the decoration affects the font.\n\t * @internal\n\t */\n\taffectsFont?: boolean | null;\n\n\t/**\n\t * The text direction of the decoration.\n\t */\n\ttextDirection?: TextDirection | null;\n}\n\n/**\n * Text Direction for a decoration.\n */\nexport enum TextDirection {\n\tLTR = 0,\n\n\tRTL = 1,\n}\n\n/**\n * Configures text that is injected into the view without changing the underlying document.\n*/\nexport interface InjectedTextOptions {\n\t/**\n\t * Sets the text to inject. Must be a single line.\n\t */\n\treadonly content: string;\n\n\t/**\n\t * @internal\n\t*/\n\treadonly tokens?: TokenArray | null;\n\n\t/**\n\t * If set, the decoration will be rendered inline with the text with this CSS class name.\n\t */\n\treadonly inlineClassName?: string | null;\n\n\t/**\n\t * If there is an `inlineClassName` which affects letter spacing.\n\t */\n\treadonly inlineClassNameAffectsLetterSpacing?: boolean;\n\n\t/**\n\t * This field allows to attach data to this injected text.\n\t * The data can be read when injected texts at a given position are queried.\n\t */\n\treadonly attachedData?: unknown;\n\n\t/**\n\t * Configures cursor stops around injected text.\n\t * Defaults to {@link InjectedTextCursorStops.Both}.\n\t*/\n\treadonly cursorStops?: InjectedTextCursorStops | null;\n}\n\nexport enum InjectedTextCursorStops {\n\tBoth,\n\tRight,\n\tLeft,\n\tNone\n}\n\n/**\n * New model decorations.\n */\nexport interface IModelDeltaDecoration {\n\t/**\n\t * Range that this decoration covers.\n\t */\n\trange: IRange;\n\t/**\n\t * Options associated with this decoration.\n\t */\n\toptions: IModelDecorationOptions;\n}\n\n/**\n * A decoration in the model.\n */\nexport interface IModelDecoration {\n\t/**\n\t * Identifier for a decoration.\n\t */\n\treadonly id: string;\n\t/**\n\t * Identifier for a decoration's owner.\n\t */\n\treadonly ownerId: number;\n\t/**\n\t * Range that this decoration covers.\n\t */\n\treadonly range: Range;\n\t/**\n\t * Options associated with this decoration.\n\t */\n\treadonly options: IModelDecorationOptions;\n}\n\n/**\n * An accessor that can add, change or remove model decorations.\n * @internal\n */\nexport interface IModelDecorationsChangeAccessor {\n\t/**\n\t * Add a new decoration.\n\t * @param range Range that this decoration covers.\n\t * @param options Options associated with this decoration.\n\t * @return An unique identifier associated with this decoration.\n\t */\n\taddDecoration(range: IRange, options: IModelDecorationOptions): string;\n\t/**\n\t * Change the range that an existing decoration covers.\n\t * @param id The unique identifier associated with the decoration.\n\t * @param newRange The new range that this decoration covers.\n\t */\n\tchangeDecoration(id: string, newRange: IRange): void;\n\t/**\n\t * Change the options associated with an existing decoration.\n\t * @param id The unique identifier associated with the decoration.\n\t * @param newOptions The new options associated with this decoration.\n\t */\n\tchangeDecorationOptions(id: string, newOptions: IModelDecorationOptions): void;\n\t/**\n\t * Remove an existing decoration.\n\t * @param id The unique identifier associated with the decoration.\n\t */\n\tremoveDecoration(id: string): void;\n\t/**\n\t * Perform a minimum amount of operations, in order to transform the decorations\n\t * identified by `oldDecorations` to the decorations described by `newDecorations`\n\t * and returns the new identifiers associated with the resulting decorations.\n\t *\n\t * @param oldDecorations Array containing previous decorations identifiers.\n\t * @param newDecorations Array describing what decorations should result after the call.\n\t * @return An array containing the new decorations identifiers.\n\t */\n\tdeltaDecorations(oldDecorations: readonly string[], newDecorations: readonly IModelDeltaDecoration[]): string[];\n}\n\n/**\n * End of line character preference.\n */\nexport const enum EndOfLinePreference {\n\t/**\n\t * Use the end of line character identified in the text buffer.\n\t */\n\tTextDefined = 0,\n\t/**\n\t * Use line feed (\\n) as the end of line character.\n\t */\n\tLF = 1,\n\t/**\n\t * Use carriage return and line feed (\\r\\n) as the end of line character.\n\t */\n\tCRLF = 2\n}\n\n/**\n * The default end of line to use when instantiating models.\n */\nexport const enum DefaultEndOfLine {\n\t/**\n\t * Use line feed (\\n) as the end of line character.\n\t */\n\tLF = 1,\n\t/**\n\t * Use carriage return and line feed (\\r\\n) as the end of line character.\n\t */\n\tCRLF = 2\n}\n\n/**\n * End of line character preference.\n */\nexport const enum EndOfLineSequence {\n\t/**\n\t * Use line feed (\\n) as the end of line character.\n\t */\n\tLF = 0,\n\t/**\n\t * Use carriage return and line feed (\\r\\n) as the end of line character.\n\t */\n\tCRLF = 1\n}\n\n/**\n * An identifier for a single edit operation.\n * @internal\n */\nexport interface ISingleEditOperationIdentifier {\n\t/**\n\t * Identifier major\n\t */\n\tmajor: number;\n\t/**\n\t * Identifier minor\n\t */\n\tminor: number;\n}\n\n/**\n * A single edit operation, that has an identifier.\n */\nexport interface IIdentifiedSingleEditOperation extends ISingleEditOperation {\n\t/**\n\t * An identifier associated with this single edit operation.\n\t * @internal\n\t */\n\tidentifier?: ISingleEditOperationIdentifier | null;\n\t/**\n\t * This indicates that this operation is inserting automatic whitespace\n\t * that can be removed on next model edit operation if `config.trimAutoWhitespace` is true.\n\t * @internal\n\t */\n\tisAutoWhitespaceEdit?: boolean;\n\t/**\n\t * This indicates that this operation is in a set of operations that are tracked and should not be \"simplified\".\n\t * @internal\n\t */\n\t_isTracked?: boolean;\n}\n\nexport interface IValidEditOperation {\n\t/**\n\t * An identifier associated with this single edit operation.\n\t * @internal\n\t */\n\tidentifier: ISingleEditOperationIdentifier | null;\n\t/**\n\t * The range to replace. This can be empty to emulate a simple insert.\n\t */\n\trange: Range;\n\t/**\n\t * The text to replace with. This can be empty to emulate a simple delete.\n\t */\n\ttext: string;\n\t/**\n\t * @internal\n\t */\n\ttextChange: TextChange;\n}\n\n/**\n * A callback that can compute the cursor state after applying a series of edit operations.\n */\nexport interface ICursorStateComputer {\n\t/**\n\t * A callback that can compute the resulting cursors state after some edit operations have been executed.\n\t */\n\t(inverseEditOperations: IValidEditOperation[]): Selection[] | null;\n}\n\nexport class TextModelResolvedOptions {\n\t_textModelResolvedOptionsBrand: void = undefined;\n\n\treadonly tabSize: number;\n\treadonly indentSize: number;\n\tprivate readonly _indentSizeIsTabSize: boolean;\n\treadonly insertSpaces: boolean;\n\treadonly defaultEOL: DefaultEndOfLine;\n\treadonly trimAutoWhitespace: boolean;\n\treadonly bracketPairColorizationOptions: BracketPairColorizationOptions;\n\n\tpublic get originalIndentSize(): number | 'tabSize' {\n\t\treturn this._indentSizeIsTabSize ? 'tabSize' : this.indentSize;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tconstructor(src: {\n\t\ttabSize: number;\n\t\tindentSize: number | 'tabSize';\n\t\tinsertSpaces: boolean;\n\t\tdefaultEOL: DefaultEndOfLine;\n\t\ttrimAutoWhitespace: boolean;\n\t\tbracketPairColorizationOptions: BracketPairColorizationOptions;\n\t}) {\n\t\tthis.tabSize = Math.max(1, src.tabSize | 0);\n\t\tif (src.indentSize === 'tabSize') {\n\t\t\tthis.indentSize = this.tabSize;\n\t\t\tthis._indentSizeIsTabSize = true;\n\t\t} else {\n\t\t\tthis.indentSize = Math.max(1, src.indentSize | 0);\n\t\t\tthis._indentSizeIsTabSize = false;\n\t\t}\n\t\tthis.insertSpaces = Boolean(src.insertSpaces);\n\t\tthis.defaultEOL = src.defaultEOL | 0;\n\t\tthis.trimAutoWhitespace = Boolean(src.trimAutoWhitespace);\n\t\tthis.bracketPairColorizationOptions = src.bracketPairColorizationOptions;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tpublic equals(other: TextModelResolvedOptions): boolean {\n\t\treturn (\n\t\t\tthis.tabSize === other.tabSize\n\t\t\t&& this._indentSizeIsTabSize === other._indentSizeIsTabSize\n\t\t\t&& this.indentSize === other.indentSize\n\t\t\t&& this.insertSpaces === other.insertSpaces\n\t\t\t&& this.defaultEOL === other.defaultEOL\n\t\t\t&& this.trimAutoWhitespace === other.trimAutoWhitespace\n\t\t\t&& equals(this.bracketPairColorizationOptions, other.bracketPairColorizationOptions)\n\t\t);\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tpublic createChangeEvent(newOpts: TextModelResolvedOptions): IModelOptionsChangedEvent {\n\t\treturn {\n\t\t\ttabSize: this.tabSize !== newOpts.tabSize,\n\t\t\tindentSize: this.indentSize !== newOpts.indentSize,\n\t\t\tinsertSpaces: this.insertSpaces !== newOpts.insertSpaces,\n\t\t\ttrimAutoWhitespace: this.trimAutoWhitespace !== newOpts.trimAutoWhitespace,\n\t\t};\n\t}\n}\n\n/**\n * @internal\n */\nexport interface ITextModelCreationOptions {\n\ttabSize: number;\n\tindentSize: number | 'tabSize';\n\tinsertSpaces: boolean;\n\tdetectIndentation: boolean;\n\ttrimAutoWhitespace: boolean;\n\tdefaultEOL: DefaultEndOfLine;\n\tisForSimpleWidget: boolean;\n\tlargeFileOptimizations: boolean;\n\tbracketPairColorizationOptions: BracketPairColorizationOptions;\n}\n\nexport interface BracketPairColorizationOptions {\n\tenabled: boolean;\n\tindependentColorPoolPerBracketType: boolean;\n}\n\nexport interface ITextModelUpdateOptions {\n\ttabSize?: number;\n\tindentSize?: number | 'tabSize';\n\tinsertSpaces?: boolean;\n\ttrimAutoWhitespace?: boolean;\n\tbracketColorizationOptions?: BracketPairColorizationOptions;\n}\n\nexport class FindMatch {\n\t_findMatchBrand: void = undefined;\n\n\tpublic readonly range: Range;\n\tpublic readonly matches: string[] | null;\n\n\t/**\n\t * @internal\n\t */\n\tconstructor(range: Range, matches: string[] | null) {\n\t\tthis.range = range;\n\t\tthis.matches = matches;\n\t}\n}\n\n/**\n * Describes the behavior of decorations when typing/editing near their edges.\n * Note: Please do not edit the values, as they very carefully match `DecorationRangeBehavior`\n */\nexport const enum TrackedRangeStickiness {\n\tAlwaysGrowsWhenTypingAtEdges = 0,\n\tNeverGrowsWhenTypingAtEdges = 1,\n\tGrowsOnlyWhenTypingBefore = 2,\n\tGrowsOnlyWhenTypingAfter = 3,\n}\n\n/**\n * Text snapshot that works like an iterator.\n * Will try to return chunks of roughly ~64KB size.\n * Will return null when finished.\n */\nexport interface ITextSnapshot {\n\tread(): string | null;\n}\n\n/**\n * @internal\n */\nexport function isITextSnapshot(obj: any): obj is ITextSnapshot {\n\treturn (obj && typeof obj.read === 'function');\n}\n\n/**\n * A model.\n */\nexport interface ITextModel {\n\n\t/**\n\t * Gets the resource associated with this editor model.\n\t */\n\treadonly uri: URI;\n\n\t/**\n\t * A unique identifier associated with this model.\n\t */\n\treadonly id: string;\n\n\t/**\n\t * This model is constructed for a simple widget code editor.\n\t * @internal\n\t */\n\treadonly isForSimpleWidget: boolean;\n\n\t/**\n\t * If true, the text model might contain RTL.\n\t * If false, the text model **contains only** contain LTR.\n\t * @internal\n\t */\n\tmightContainRTL(): boolean;\n\n\t/**\n\t * If true, the text model might contain LINE SEPARATOR (LS), PARAGRAPH SEPARATOR (PS).\n\t * If false, the text model definitely does not contain these.\n\t * @internal\n\t */\n\tmightContainUnusualLineTerminators(): boolean;\n\n\t/**\n\t * @internal\n\t */\n\tremoveUnusualLineTerminators(selections?: Selection[]): void;\n\n\t/**\n\t * If true, the text model might contain non basic ASCII.\n\t * If false, the text model **contains only** basic ASCII.\n\t * @internal\n\t */\n\tmightContainNonBasicASCII(): boolean;\n\n\t/**\n\t * Get the resolved options for this model.\n\t */\n\tgetOptions(): TextModelResolvedOptions;\n\n\t/**\n\t * Get the formatting options for this model.\n\t * @internal\n\t */\n\tgetFormattingOptions(): FormattingOptions;\n\n\t/**\n\t * Get the current version id of the model.\n\t * Anytime a change happens to the model (even undo/redo),\n\t * the version id is incremented.\n\t */\n\tgetVersionId(): number;\n\n\t/**\n\t * Get the alternative version id of the model.\n\t * This alternative version id is not always incremented,\n\t * it will return the same values in the case of undo-redo.\n\t */\n\tgetAlternativeVersionId(): number;\n\n\t/**\n\t * Replace the entire text buffer value contained in this model.\n\t */\n\tsetValue(newValue: string | ITextSnapshot): void;\n\n\t/**\n\t * Get the text stored in this model.\n\t * @param eol The end of line character preference. Defaults to `EndOfLinePreference.TextDefined`.\n\t * @param preserverBOM Preserve a BOM character if it was detected when the model was constructed.\n\t * @return The text.\n\t */\n\tgetValue(eol?: EndOfLinePreference, preserveBOM?: boolean): string;\n\n\t/**\n\t * Get the text stored in this model.\n\t * @param preserverBOM Preserve a BOM character if it was detected when the model was constructed.\n\t * @return The text snapshot (it is safe to consume it asynchronously).\n\t */\n\tcreateSnapshot(preserveBOM?: boolean): ITextSnapshot;\n\n\t/**\n\t * Get the length of the text stored in this model.\n\t */\n\tgetValueLength(eol?: EndOfLinePreference, preserveBOM?: boolean): number;\n\n\t/**\n\t * Get the text in a certain range.\n\t * @param range The range describing what text to get.\n\t * @param eol The end of line character preference. This will only be used for multiline ranges. Defaults to `EndOfLinePreference.TextDefined`.\n\t * @return The text.\n\t */\n\tgetValueInRange(range: IRange, eol?: EndOfLinePreference): string;\n\n\t/**\n\t * Get the length of text in a certain range.\n\t * @param range The range describing what text length to get.\n\t * @return The text length.\n\t */\n\tgetValueLengthInRange(range: IRange, eol?: EndOfLinePreference): number;\n\n\t/**\n\t * Get the character count of text in a certain range.\n\t * @param range The range describing what text length to get.\n\t */\n\tgetCharacterCountInRange(range: IRange, eol?: EndOfLinePreference): number;\n\n\t/**\n\t * Splits characters in two buckets. First bucket (A) is of characters that\n\t * sit in lines with length < `LONG_LINE_BOUNDARY`. Second bucket (B) is of\n\t * characters that sit in lines with length >= `LONG_LINE_BOUNDARY`.\n\t * If count(B) > count(A) return true. Returns false otherwise.\n\t * @internal\n\t */\n\tisDominatedByLongLines(): boolean;\n\n\t/**\n\t * Get the number of lines in the model.\n\t */\n\tgetLineCount(): number;\n\n\t/**\n\t * Get the text for a certain line.\n\t */\n\tgetLineContent(lineNumber: number): string;\n\n\t/**\n\t * Get the text length for a certain line.\n\t */\n\tgetLineLength(lineNumber: number): number;\n\n\t/**\n\t * Get the text for all lines.\n\t */\n\tgetLinesContent(): string[];\n\n\t/**\n\t * Get the end of line sequence predominantly used in the text buffer.\n\t * @return EOL char sequence (e.g.: '\\n' or '\\r\\n').\n\t */\n\tgetEOL(): string;\n\n\t/**\n\t * Get the end of line sequence predominantly used in the text buffer.\n\t */\n\tgetEndOfLineSequence(): EndOfLineSequence;\n\n\t/**\n\t * Get the minimum legal column for line at `lineNumber`\n\t */\n\tgetLineMinColumn(lineNumber: number): number;\n\n\t/**\n\t * Get the maximum legal column for line at `lineNumber`\n\t */\n\tgetLineMaxColumn(lineNumber: number): number;\n\n\t/**\n\t * Returns the column before the first non whitespace character for line at `lineNumber`.\n\t * Returns 0 if line is empty or contains only whitespace.\n\t */\n\tgetLineFirstNonWhitespaceColumn(lineNumber: number): number;\n\n\t/**\n\t * Returns the column after the last non whitespace character for line at `lineNumber`.\n\t * Returns 0 if line is empty or contains only whitespace.\n\t */\n\tgetLineLastNonWhitespaceColumn(lineNumber: number): number;\n\n\t/**\n\t * Create a valid position.\n\t */\n\tvalidatePosition(position: IPosition): Position;\n\n\t/**\n\t * Advances the given position by the given offset (negative offsets are also accepted)\n\t * and returns it as a new valid position.\n\t *\n\t * If the offset and position are such that their combination goes beyond the beginning or\n\t * end of the model, throws an exception.\n\t *\n\t * If the offset is such that the new position would be in the middle of a multi-byte\n\t * line terminator, throws an exception.\n\t */\n\tmodifyPosition(position: IPosition, offset: number): Position;\n\n\t/**\n\t * Create a valid range.\n\t */\n\tvalidateRange(range: IRange): Range;\n\n\t/**\n\t * Verifies the range is valid.\n\t */\n\tisValidRange(range: IRange): boolean;\n\n\t/**\n\t * Converts the position to a zero-based offset.\n\t *\n\t * The position will be [adjusted](#TextDocument.validatePosition).\n\t *\n\t * @param position A position.\n\t * @return A valid zero-based offset.\n\t */\n\tgetOffsetAt(position: IPosition): number;\n\n\t/**\n\t * Converts a zero-based offset to a position.\n\t *\n\t * @param offset A zero-based offset.\n\t * @return A valid [position](#Position).\n\t */\n\tgetPositionAt(offset: number): Position;\n\n\t/**\n\t * Get a range covering the entire model.\n\t */\n\tgetFullModelRange(): Range;\n\n\t/**\n\t * Returns if the model was disposed or not.\n\t */\n\tisDisposed(): boolean;\n\n\t/**\n\t * This model is so large that it would not be a good idea to sync it over\n\t * to web workers or other places.\n\t * @internal\n\t */\n\tisTooLargeForSyncing(): boolean;\n\n\t/**\n\t * The file is so large, that even tokenization is disabled.\n\t * @internal\n\t */\n\tisTooLargeForTokenization(): boolean;\n\n\t/**\n\t * The file is so large, that operations on it might be too large for heap\n\t * and can lead to OOM crashes so they should be disabled.\n\t * @internal\n\t */\n\tisTooLargeForHeapOperation(): boolean;\n\n\t/**\n\t * Search the model.\n\t * @param searchString The string used to search. If it is a regular expression, set `isRegex` to true.\n\t * @param searchOnlyEditableRange Limit the searching to only search inside the editable range of the model.\n\t * @param isRegex Used to indicate that `searchString` is a regular expression.\n\t * @param matchCase Force the matching to match lower/upper case exactly.\n\t * @param wordSeparators Force the matching to match entire words only. Pass null otherwise.\n\t * @param captureMatches The result will contain the captured groups.\n\t * @param limitResultCount Limit the number of results\n\t * @return The ranges where the matches are. It is empty if not matches have been found.\n\t */\n\tfindMatches(searchString: string, searchOnlyEditableRange: boolean, isRegex: boolean, matchCase: boolean, wordSeparators: string | null, captureMatches: boolean, limitResultCount?: number): FindMatch[];\n\t/**\n\t * Search the model.\n\t * @param searchString The string used to search. If it is a regular expression, set `isRegex` to true.\n\t * @param searchScope Limit the searching to only search inside these ranges.\n\t * @param isRegex Used to indicate that `searchString` is a regular expression.\n\t * @param matchCase Force the matching to match lower/upper case exactly.\n\t * @param wordSeparators Force the matching to match entire words only. Pass null otherwise.\n\t * @param captureMatches The result will contain the captured groups.\n\t * @param limitResultCount Limit the number of results\n\t * @return The ranges where the matches are. It is empty if no matches have been found.\n\t */\n\tfindMatches(searchString: string, searchScope: IRange | IRange[], isRegex: boolean, matchCase: boolean, wordSeparators: string | null, captureMatches: boolean, limitResultCount?: number): FindMatch[];\n\t/**\n\t * Search the model for the next match. Loops to the beginning of the model if needed.\n\t * @param searchString The string used to search. If it is a regular expression, set `isRegex` to true.\n\t * @param searchStart Start the searching at the specified position.\n\t * @param isRegex Used to indicate that `searchString` is a regular expression.\n\t * @param matchCase Force the matching to match lower/upper case exactly.\n\t * @param wordSeparators Force the matching to match entire words only. Pass null otherwise.\n\t * @param captureMatches The result will contain the captured groups.\n\t * @return The range where the next match is. It is null if no next match has been found.\n\t */\n\tfindNextMatch(searchString: string, searchStart: IPosition, isRegex: boolean, matchCase: boolean, wordSeparators: string | null, captureMatches: boolean): FindMatch | null;\n\t/**\n\t * Search the model for the previous match. Loops to the end of the model if needed.\n\t * @param searchString The string used to search. If it is a regular expression, set `isRegex` to true.\n\t * @param searchStart Start the searching at the specified position.\n\t * @param isRegex Used to indicate that `searchString` is a regular expression.\n\t * @param matchCase Force the matching to match lower/upper case exactly.\n\t * @param wordSeparators Force the matching to match entire words only. Pass null otherwise.\n\t * @param captureMatches The result will contain the captured groups.\n\t * @return The range where the previous match is. It is null if no previous match has been found.\n\t */\n\tfindPreviousMatch(searchString: string, searchStart: IPosition, isRegex: boolean, matchCase: boolean, wordSeparators: string | null, captureMatches: boolean): FindMatch | null;\n\n\n\t/**\n\t * Get the language associated with this model.\n\t */\n\tgetLanguageId(): string;\n\n\t/**\n\t * Set the current language mode associated with the model.\n\t * @param languageId The new language.\n\t * @param source The source of the call that set the language.\n\t * @internal\n\t */\n\tsetLanguage(languageId: string, source?: string): void;\n\n\t/**\n\t * Set the current language mode associated with the model.\n\t * @param languageSelection The new language selection.\n\t * @param source The source of the call that set the language.\n\t * @internal\n\t */\n\tsetLanguage(languageSelection: ILanguageSelection, source?: string): void;\n\n\t/**\n\t * Returns the real (inner-most) language mode at a given position.\n\t * The result might be inaccurate. Use `forceTokenization` to ensure accurate tokens.\n\t * @internal\n\t */\n\tgetLanguageIdAtPosition(lineNumber: number, column: number): string;\n\n\t/**\n\t * Get the word under or besides `position`.\n\t * @param position The position to look for a word.\n\t * @return The word under or besides `position`. Might be null.\n\t */\n\tgetWordAtPosition(position: IPosition): IWordAtPosition | null;\n\n\t/**\n\t * Get the word under or besides `position` trimmed to `position`.column\n\t * @param position The position to look for a word.\n\t * @return The word under or besides `position`. Will never be null.\n\t */\n\tgetWordUntilPosition(position: IPosition): IWordAtPosition;\n\n\t/**\n\t * Change the decorations. The callback will be called with a change accessor\n\t * that becomes invalid as soon as the callback finishes executing.\n\t * This allows for all events to be queued up until the change\n\t * is completed. Returns whatever the callback returns.\n\t * @param ownerId Identifies the editor id in which these decorations should appear. If no `ownerId` is provided, the decorations will appear in all editors that attach this model.\n\t * @internal\n\t */\n\tchangeDecorations<T>(callback: (changeAccessor: IModelDecorationsChangeAccessor) => T, ownerId?: number): T | null;\n\n\t/**\n\t * Perform a minimum amount of operations, in order to transform the decorations\n\t * identified by `oldDecorations` to the decorations described by `newDecorations`\n\t * and returns the new identifiers associated with the resulting decorations.\n\t *\n\t * @param oldDecorations Array containing previous decorations identifiers.\n\t * @param newDecorations Array describing what decorations should result after the call.\n\t * @param ownerId Identifies the editor id in which these decorations should appear. If no `ownerId` is provided, the decorations will appear in all editors that attach this model.\n\t * @return An array containing the new decorations identifiers.\n\t */\n\tdeltaDecorations(oldDecorations: string[], newDecorations: IModelDeltaDecoration[], ownerId?: number): string[];\n\n\t/**\n\t * Remove all decorations that have been added with this specific ownerId.\n\t * @param ownerId The owner id to search for.\n\t * @internal\n\t */\n\tremoveAllDecorationsWithOwnerId(ownerId: number): void;\n\n\t/**\n\t * Get the options associated with a decoration.\n\t * @param id The decoration id.\n\t * @return The decoration options or null if the decoration was not found.\n\t */\n\tgetDecorationOptions(id: string): IModelDecorationOptions | null;\n\n\t/**\n\t * Get the range associated with a decoration.\n\t * @param id The decoration id.\n\t * @return The decoration range or null if the decoration was not found.\n\t */\n\tgetDecorationRange(id: string): Range | null;\n\n\t/**\n\t * Gets all the decorations for the line `lineNumber` as an array.\n\t * @param lineNumber The line number\n\t * @param ownerId If set, it will ignore decorations belonging to other owners.\n\t * @param filterOutValidation If set, it will ignore decorations specific to validation (i.e. warnings, errors).\n\t * @param filterFontDecorations If set, it will ignore font decorations.\n\t * @return An array with the decorations\n\t */\n\tgetLineDecorations(lineNumber: number, ownerId?: number, filterOutValidation?: boolean, filterFontDecorations?: boolean): IModelDecoration[];\n\n\t/**\n\t * Gets all the font decorations for the line `lineNumber` as an array.\n\t * @param ownerId If set, it will ignore decorations belonging to other owners.\n\t * @internal\n\t */\n\tgetFontDecorationsInRange(range: IRange, ownerId?: number): IModelDecoration[];\n\n\t/**\n\t * Gets all the decorations for the lines between `startLineNumber` and `endLineNumber` as an array.\n\t * @param startLineNumber The start line number\n\t * @param endLineNumber The end line number\n\t * @param ownerId If set, it will ignore decorations belonging to other owners.\n\t * @param filterOutValidation If set, it will ignore decorations specific to validation (i.e. warnings, errors).\n\t * @param filterFontDecorations If set, it will ignore font decorations.\n\t * @return An array with the decorations\n\t */\n\tgetLinesDecorations(startLineNumber: number, endLineNumber: number, ownerId?: number, filterOutValidation?: boolean, filterFontDecorations?: boolean): IModelDecoration[];\n\n\t/**\n\t * Gets all the decorations in a range as an array. Only `startLineNumber` and `endLineNumber` from `range` are used for filtering.\n\t * So for now it returns all the decorations on the same line as `range`.\n\t * @param range The range to search in\n\t * @param ownerId If set, it will ignore decorations belonging to other owners.\n\t * @param filterOutValidation If set, it will ignore decorations specific to validation (i.e. warnings, errors).\n\t * @param filterFontDecorations If set, it will ignore font decorations.\n\t * @param onlyMinimapDecorations If set, it will return only decorations that render in the minimap.\n\t * @param onlyMarginDecorations If set, it will return only decorations that render in the glyph margin.\n\t * @return An array with the decorations\n\t */\n\tgetDecorationsInRange(range: IRange, ownerId?: number, filterOutValidation?: boolean, filterFontDecorations?: boolean, onlyMinimapDecorations?: boolean, onlyMarginDecorations?: boolean): IModelDecoration[];\n\n\t/**\n\t * Gets all the decorations as an array.\n\t * @param ownerId If set, it will ignore decorations belonging to other owners.\n\t * @param filterOutValidation If set, it will ignore decorations specific to validation (i.e. warnings, errors).\n\t * @param filterFontDecorations If set, it will ignore font decorations.\n\t */\n\tgetAllDecorations(ownerId?: number, filterOutValidation?: boolean, filterFontDecorations?: boolean): IModelDecoration[];\n\n\t/**\n\t * Gets all decorations that render in the glyph margin as an array.\n\t * @param ownerId If set, it will ignore decorations belonging to other owners.\n\t */\n\tgetAllMarginDecorations(ownerId?: number): IModelDecoration[];\n\n\t/**\n\t * Gets all the decorations that should be rendered in the overview ruler as an array.\n\t * @param ownerId If set, it will ignore decorations belonging to other owners.\n\t * @param filterOutValidation If set, it will ignore decorations specific to validation (i.e. warnings, errors).\n\t * @param filterFontDecorations If set, it will ignore font decorations.\n\t */\n\tgetOverviewRulerDecorations(ownerId?: number, filterOutValidation?: boolean, filterFontDecorations?: boolean): IModelDecoration[];\n\n\t/**\n\t * Gets all the decorations that contain injected text.\n\t * @param ownerId If set, it will ignore decorations belonging to other owners.\n\t */\n\tgetInjectedTextDecorations(ownerId?: number): IModelDecoration[];\n\n\t/**\n\t * Gets all the decorations that contain custom line heights.\n\t * @param ownerId If set, it will ignore decorations belonging to other owners.\n\t */\n\tgetCustomLineHeightsDecorations(ownerId?: number): IModelDecoration[];\n\n\t/**\n\t * @internal\n\t */\n\t_getTrackedRange(id: string): Range | null;\n\n\t/**\n\t * @internal\n\t */\n\t_setTrackedRange(id: string | null, newRange: null, newStickiness: TrackedRangeStickiness): null;\n\t/**\n\t * @internal\n\t */\n\t_setTrackedRange(id: string | null, newRange: Range, newStickiness: TrackedRangeStickiness): string;\n\n\t/**\n\t * Normalize a string containing whitespace according to indentation rules (converts to spaces or to tabs).\n\t */\n\tnormalizeIndentation(str: string): string;\n\n\t/**\n\t * Change the options of this model.\n\t */\n\tupdateOptions(newOpts: ITextModelUpdateOptions): void;\n\n\t/**\n\t * Detect the indentation options for this model from its content.\n\t */\n\tdetectIndentation(defaultInsertSpaces: boolean, defaultTabSize: number): void;\n\n\t/**\n\t * Close the current undo-redo element.\n\t * This offers a way to create an undo/redo stop point.\n\t */\n\tpushStackElement(): void;\n\n\t/**\n\t * Open the current undo-redo element.\n\t * This offers a way to remove the current undo/redo stop point.\n\t */\n\tpopStackElement(): void;\n\n\t/**\n\t * Push edit operations, basically editing the model. This is the preferred way\n\t * of editing the model. The edit operations will land on the undo stack.\n\t * @param beforeCursorState The cursor state before the edit operations. This cursor state will be returned when `undo` or `redo` are invoked.\n\t * @param editOperations The edit operations.\n\t * @param cursorStateComputer A callback that can compute the resulting cursors state after the edit operations have been executed.\n\t * @return The cursor state returned by the `cursorStateComputer`.\n\t */\n\tpushEditOperations(beforeCursorState: Selection[] | null, editOperations: IIdentifiedSingleEditOperation[], cursorStateComputer: ICursorStateComputer): Selection[] | null;\n\t/**\n\t * @internal\n\t */\n\tpushEditOperations(beforeCursorState: Selection[] | null, editOperations: IIdentifiedSingleEditOperation[], cursorStateComputer: ICursorStateComputer, group?: UndoRedoGroup, reason?: TextModelEditSource): Selection[] | null;\n\n\t/**\n\t * Change the end of line sequence. This is the preferred way of\n\t * changing the eol sequence. This will land on the undo stack.\n\t */\n\tpushEOL(eol: EndOfLineSequence): void;\n\n\t/**\n\t * Edit the model without adding the edits to the undo stack.\n\t * This can have dire consequences on the undo stack! See @pushEditOperations for the preferred way.\n\t * @param operations The edit operations.\n\t * @return If desired, the inverse edit operations, that, when applied, will bring the model back to the previous state.\n\t */\n\tapplyEdits(operations: readonly IIdentifiedSingleEditOperation[]): void;\n\t/** @internal */\n\tapplyEdits(operations: readonly IIdentifiedSingleEditOperation[], reason: TextModelEditSource): void;\n\tapplyEdits(operations: readonly IIdentifiedSingleEditOperation[], computeUndoEdits: false): void;\n\tapplyEdits(operations: readonly IIdentifiedSingleEditOperation[], computeUndoEdits: true): IValidEditOperation[];\n\n\t/**\n\t * Change the end of line sequence without recording in the undo stack.\n\t * This can have dire consequences on the undo stack! See @pushEOL for the preferred way.\n\t */\n\tsetEOL(eol: EndOfLineSequence): void;\n\n\t/**\n\t * @internal\n\t */\n\t_applyUndo(changes: TextChange[], eol: EndOfLineSequence, resultingAlternativeVersionId: number, resultingSelection: Selection[] | null): void;\n\n\t/**\n\t * @internal\n\t */\n\t_applyRedo(changes: TextChange[], eol: EndOfLineSequence, resultingAlternativeVersionId: number, resultingSelection: Selection[] | null): void;\n\n\t/**\n\t * Undo edit operations until the previous undo/redo point.\n\t * The inverse edit operations will be pushed on the redo stack.\n\t */\n\tundo(): void | Promise<void>;\n\n\t/**\n\t * Is there anything in the undo stack?\n\t */\n\tcanUndo(): boolean;\n\n\t/**\n\t * Redo edit operations until the next undo/redo point.\n\t * The inverse edit operations will be pushed on the undo stack.\n\t */\n\tredo(): void | Promise<void>;\n\n\t/**\n\t * Is there anything in the redo stack?\n\t */\n\tcanRedo(): boolean;\n\n\t/**\n\t * @deprecated Please use `onDidChangeContent` instead.\n\t * An event emitted when the contents of the model have changed.\n\t * @internal\n\t * @event\n\t */\n\treadonly onDidChangeContentOrInjectedText: Event<InternalModelContentChangeEvent | ModelInjectedTextChangedEvent>;\n\t/**\n\t * An event emitted when the contents of the model have changed.\n\t * @event\n\t */\n\tonDidChangeContent(listener: (e: IModelContentChangedEvent) => void): IDisposable;\n\t/**\n\t * An event emitted when decorations of the model have changed.\n\t * @event\n\t */\n\treadonly onDidChangeDecorations: Event<IModelDecorationsChangedEvent>;\n\t/**\n\t * An event emitted when line heights from decorations changes.\n\t * This event is emitted only when adding, removing or changing a decoration\n\t * and not when doing edits in the model (i.e. when decoration ranges change)\n\t * @internal\n\t * @event\n\t */\n\treadonly onDidChangeLineHeight: Event<ModelLineHeightChangedEvent>;\n\t/**\n\t* An event emitted when the font from decorations changes.\n\t* This event is emitted only when adding, removing or changing a decoration\n\t* and not when doing edits in the model (i.e. when decoration ranges change)\n\t* @internal\n\t* @event\n\t*/\n\treadonly onDidChangeFont: Event<ModelFontChangedEvent>;\n\t/**\n\t * An event emitted when the model options have changed.\n\t * @event\n\t */\n\treadonly onDidChangeOptions: Event<IModelOptionsChangedEvent>;\n\t/**\n\t * An event emitted when the language associated with the model has changed.\n\t * @event\n\t */\n\treadonly onDidChangeLanguage: Event<IModelLanguageChangedEvent>;\n\t/**\n\t * An event emitted when the language configuration associated with the model has changed.\n\t * @event\n\t */\n\treadonly onDidChangeLanguageConfiguration: Event<IModelLanguageConfigurationChangedEvent>;\n\t/**\n\t * An event emitted when the tokens associated with the model have changed.\n\t * @event\n\t * @internal\n\t */\n\treadonly onDidChangeTokens: Event<IModelTokensChangedEvent>;\n\t/**\n\t * An event emitted when the model has been attached to the first editor or detached from the last editor.\n\t * @event\n\t */\n\treadonly onDidChangeAttached: Event<void>;\n\t/**\n\t * An event emitted right before disposing the model.\n\t * @event\n\t */\n\treadonly onWillDispose: Event<void>;\n\n\t/**\n\t * Destroy this model.\n\t */\n\tdispose(): void;\n\n\t/**\n\t * @internal\n\t */\n\tonBeforeAttached(): IAttachedView;\n\n\t/**\n\t * @internal\n\t */\n\tonBeforeDetached(view: IAttachedView): void;\n\n\t/**\n\t * Returns if this model is attached to an editor or not.\n\t */\n\tisAttachedToEditor(): boolean;\n\n\t/**\n\t * Returns the count of editors this model is attached to.\n\t * @internal\n\t */\n\tgetAttachedEditorCount(): number;\n\n\t/**\n\t * Among all positions that are projected to the same position in the underlying text model as\n\t * the given position, select a unique position as indicated by the affinity.\n\t *\n\t * PositionAffinity.Left:\n\t * The normalized position must be equal or left to the requested position.\n\t *\n\t * PositionAffinity.Right:\n\t * The normalized position must be equal or right to the requested position.\n\t *\n\t * @internal\n\t */\n\tnormalizePosition(position: Position, affinity: PositionAffinity): Position;\n\n\t/**\n\t * Gets the column at which indentation stops at a given line.\n\t * @internal\n\t*/\n\tgetLineIndentColumn(lineNumber: number): number;\n\n\t/**\n\t * Returns an object that can be used to query brackets.\n\t * @internal\n\t*/\n\treadonly bracketPairs: IBracketPairsTextModelPart;\n\n\t/**\n\t * Returns an object that can be used to query indent guides.\n\t * @internal\n\t*/\n\treadonly guides: IGuidesTextModelPart;\n\n\t/**\n\t * @internal\n\t */\n\treadonly tokenization: ITokenizationTextModelPart;\n}\n\n/**\n * @internal\n */\nexport interface IAttachedView {\n\t/**\n\t * @param stabilized Indicates if the visible lines are probably going to change soon or can be considered stable.\n\t * Is true on reveal range and false on scroll.\n\t * Tokenizers should tokenize synchronously if stabilized is true.\n\t */\n\tsetVisibleLines(visibleLines: { startLineNumber: number; endLineNumber: number }[], stabilized: boolean): void;\n}\n\nexport const enum PositionAffinity {\n\t/**\n\t * Prefers the left most position.\n\t*/\n\tLeft = 0,\n\n\t/**\n\t * Prefers the right most position.\n\t*/\n\tRight = 1,\n\n\t/**\n\t * No preference.\n\t*/\n\tNone = 2,\n\n\t/**\n\t * If the given position is on injected text, prefers the position left of it.\n\t*/\n\tLeftOfInjectedText = 3,\n\n\t/**\n\t * If the given position is on injected text, prefers the position right of it.\n\t*/\n\tRightOfInjectedText = 4,\n}\n\n/**\n * @internal\n */\nexport interface ITextBufferBuilder {\n}\n\n/**\n * @internal\n */\nexport interface ITextBufferFactory {\n\tcreate(defaultEOL: DefaultEndOfLine): { textBuffer: ITextBuffer; disposable: IDisposable };\n}\n\n/**\n * @internal\n */\nexport class ValidAnnotatedEditOperation implements IIdentifiedSingleEditOperation {\n\tconstructor(\n\t\tpublic readonly identifier: ISingleEditOperationIdentifier | null,\n\t\tpublic readonly range: Range,\n\t\tpublic readonly text: string | null,\n\t\tpublic readonly forceMoveMarkers: boolean,\n\t\tpublic readonly isAutoWhitespaceEdit: boolean,\n\t\tpublic readonly _isTracked: boolean,\n\t) { }\n}\n\n/**\n * @internal\n *\n * `lineNumber` is 1 based.\n */\nexport interface IReadonlyTextBuffer {\n\tmightContainRTL(): boolean;\n\tmightContainUnusualLineTerminators(): boolean;\n\tresetMightContainUnusualLineTerminators(): void;\n\tmightContainNonBasicASCII(): boolean;\n\tgetBOM(): string;\n\tgetEOL(): string;\n\n\tgetOffsetAt(lineNumber: number, column: number): number;\n\tgetPositionAt(offset: number): Position;\n\tgetRangeAt(offset: number, length: number): Range;\n\n\tgetValueInRange(range: Range, eol: EndOfLinePreference): string;\n\tcreateSnapshot(preserveBOM: boolean): ITextSnapshot;\n\tgetValueLengthInRange(range: Range, eol: EndOfLinePreference): number;\n\tgetCharacterCountInRange(range: Range, eol: EndOfLinePreference): number;\n\tgetLength(): number;\n\tgetLineCount(): number;\n\tgetLinesContent(): string[];\n\tgetLineContent(lineNumber: number): string;\n\tgetLineCharCode(lineNumber: number, index: number): number;\n\tgetLineLength(lineNumber: number): number;\n\tgetLineFirstNonWhitespaceColumn(lineNumber: number): number;\n\tgetLineLastNonWhitespaceColumn(lineNumber: number): number;\n\tfindMatchesLineByLine(searchRange: Range, searchData: SearchData, captureMatches: boolean, limitResultCount: number): FindMatch[];\n\n\t/**\n\t * Get nearest chunk of text after `offset` in the text buffer.\n\t */\n\tgetNearestChunk(offset: number): string;\n}\n\n/**\n * @internal\n */\nexport class SearchData {\n\n\t/**\n\t * The regex to search for. Always defined.\n\t */\n\tpublic readonly regex: RegExp;\n\t/**\n\t * The word separator classifier.\n\t */\n\tpublic readonly wordSeparators: WordCharacterClassifier | null;\n\t/**\n\t * The simple string to search for (if possible).\n\t */\n\tpublic readonly simpleSearch: string | null;\n\n\tconstructor(regex: RegExp, wordSeparators: WordCharacterClassifier | null, simpleSearch: string | null) {\n\t\tthis.regex = regex;\n\t\tthis.wordSeparators = wordSeparators;\n\t\tthis.simpleSearch = simpleSearch;\n\t}\n}\n\n/**\n * @internal\n */\nexport interface ITextBuffer extends IReadonlyTextBuffer, IDisposable {\n\tsetEOL(newEOL: '\\r\\n' | '\\n'): void;\n\tapplyEdits(rawOperations: ValidAnnotatedEditOperation[], recordTrimAutoWhitespace: boolean, computeUndoEdits: boolean): ApplyEditsResult;\n}\n\n/**\n * @internal\n */\nexport class ApplyEditsResult {\n\n\tconstructor(\n\t\tpublic readonly reverseEdits: IValidEditOperation[] | null,\n\t\tpublic readonly changes: IInternalModelContentChange[],\n\t\tpublic readonly trimAutoWhitespaceLineNumbers: number[] | null\n\t) { }\n\n}\n\n/**\n * @internal\n */\nexport interface IInternalModelContentChange extends IModelContentChange {\n\trange: Range;\n\tforceMoveMarkers: boolean;\n}\n\n/**\n * @internal\n */\nexport function shouldSynchronizeModel(model: ITextModel): boolean {\n\treturn (\n\t\t!model.isTooLargeForSyncing() && !model.isForSimpleWidget\n\t);\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 973, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/monaco-editor/esm/vs/editor/common/encodedTokenAttributes.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/file%3A/mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/encodedTokenAttributes.ts","file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/vs/editor/common/encodedTokenAttributes.ts"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/**\n * Open ended enum at runtime\n */\nexport const enum LanguageId {\n\tNull = 0,\n\tPlainText = 1\n}\n\n/**\n * A font style. Values are 2^x such that a bit mask can be used.\n */\nexport const enum FontStyle {\n\tNotSet = -1,\n\tNone = 0,\n\tItalic = 1,\n\tBold = 2,\n\tUnderline = 4,\n\tStrikethrough = 8,\n}\n\n/**\n * Open ended enum at runtime\n */\nexport const enum ColorId {\n\tNone = 0,\n\tDefaultForeground = 1,\n\tDefaultBackground = 2\n}\n\n/**\n * A standard token type.\n */\nexport const enum StandardTokenType {\n\tOther = 0,\n\tComment = 1,\n\tString = 2,\n\tRegEx = 3\n}\n\n/**\n * Helpers to manage the \"collapsed\" metadata of an entire StackElement stack.\n * The following assumptions have been made:\n *  - languageId < 256 => needs 8 bits\n *  - unique color count < 512 => needs 9 bits\n *\n * The binary format is:\n * - -------------------------------------------\n *     3322 2222 2222 1111 1111 1100 0000 0000\n *     1098 7654 3210 9876 5432 1098 7654 3210\n * - -------------------------------------------\n *     xxxx xxxx xxxx xxxx xxxx xxxx xxxx xxxx\n *     bbbb bbbb ffff ffff fFFF FBTT LLLL LLLL\n * - -------------------------------------------\n *  - L = LanguageId (8 bits)\n *  - T = StandardTokenType (2 bits)\n *  - B = Balanced bracket (1 bit)\n *  - F = FontStyle (4 bits)\n *  - f = foreground color (9 bits)\n *  - b = background color (8 bits)\n *\n */\nexport const enum MetadataConsts {\n\tLANGUAGEID_MASK /*            */ = 0b00000000_00000000_00000000_11111111,\n\tTOKEN_TYPE_MASK /*            */ = 0b00000000_00000000_00000011_00000000,\n\tBALANCED_BRACKETS_MASK /*     */ = 0b00000000_00000000_00000100_00000000,\n\tFONT_STYLE_MASK /*            */ = 0b00000000_00000000_01111000_00000000,\n\tFOREGROUND_MASK /*            */ = 0b00000000_11111111_10000000_00000000,\n\tBACKGROUND_MASK /*            */ = 0b11111111_00000000_00000000_00000000,\n\n\tITALIC_MASK /*                */ = 0b00000000_00000000_00001000_00000000,\n\tBOLD_MASK /*                  */ = 0b00000000_00000000_00010000_00000000,\n\tUNDERLINE_MASK /*             */ = 0b00000000_00000000_00100000_00000000,\n\tSTRIKETHROUGH_MASK /*         */ = 0b00000000_00000000_01000000_00000000,\n\n\t// Semantic tokens cannot set the language id, so we can\n\t// use the first 8 bits for control purposes\n\tSEMANTIC_USE_ITALIC /*        */ = 0b00000000_00000000_00000000_00000001,\n\tSEMANTIC_USE_BOLD /*          */ = 0b00000000_00000000_00000000_00000010,\n\tSEMANTIC_USE_UNDERLINE  /*    */ = 0b00000000_00000000_00000000_00000100,\n\tSEMANTIC_USE_STRIKETHROUGH /* */ = 0b00000000_00000000_00000000_00001000,\n\tSEMANTIC_USE_FOREGROUND /*    */ = 0b00000000_00000000_00000000_00010000,\n\tSEMANTIC_USE_BACKGROUND /*    */ = 0b00000000_00000000_00000000_00100000,\n\n\tLANGUAGEID_OFFSET = 0,\n\tTOKEN_TYPE_OFFSET = 8,\n\tBALANCED_BRACKETS_OFFSET = 10,\n\tFONT_STYLE_OFFSET = 11,\n\tFOREGROUND_OFFSET = 15,\n\tBACKGROUND_OFFSET = 24\n}\n\n/**\n */\nexport class TokenMetadata {\n\n\tpublic static getLanguageId(metadata: number): LanguageId {\n\t\treturn (metadata & MetadataConsts.LANGUAGEID_MASK) >>> MetadataConsts.LANGUAGEID_OFFSET;\n\t}\n\n\tpublic static getTokenType(metadata: number): StandardTokenType {\n\t\treturn (metadata & MetadataConsts.TOKEN_TYPE_MASK) >>> MetadataConsts.TOKEN_TYPE_OFFSET;\n\t}\n\n\tpublic static containsBalancedBrackets(metadata: number): boolean {\n\t\treturn (metadata & MetadataConsts.BALANCED_BRACKETS_MASK) !== 0;\n\t}\n\n\tpublic static getFontStyle(metadata: number): FontStyle {\n\t\treturn (metadata & MetadataConsts.FONT_STYLE_MASK) >>> MetadataConsts.FONT_STYLE_OFFSET;\n\t}\n\n\tpublic static getForeground(metadata: number): ColorId {\n\t\treturn (metadata & MetadataConsts.FOREGROUND_MASK) >>> MetadataConsts.FOREGROUND_OFFSET;\n\t}\n\n\tpublic static getBackground(metadata: number): ColorId {\n\t\treturn (metadata & MetadataConsts.BACKGROUND_MASK) >>> MetadataConsts.BACKGROUND_OFFSET;\n\t}\n\n\tpublic static getClassNameFromMetadata(metadata: number): string {\n\t\tconst foreground = this.getForeground(metadata);\n\t\tlet className = 'mtk' + foreground;\n\n\t\tconst fontStyle = this.getFontStyle(metadata);\n\t\tif (fontStyle & FontStyle.Italic) {\n\t\t\tclassName += ' mtki';\n\t\t}\n\t\tif (fontStyle & FontStyle.Bold) {\n\t\t\tclassName += ' mtkb';\n\t\t}\n\t\tif (fontStyle & FontStyle.Underline) {\n\t\t\tclassName += ' mtku';\n\t\t}\n\t\tif (fontStyle & FontStyle.Strikethrough) {\n\t\t\tclassName += ' mtks';\n\t\t}\n\n\t\treturn className;\n\t}\n\n\tpublic static getInlineStyleFromMetadata(metadata: number, colorMap: string[]): string {\n\t\tconst foreground = this.getForeground(metadata);\n\t\tconst fontStyle = this.getFontStyle(metadata);\n\n\t\tlet result = `color: ${colorMap[foreground]};`;\n\t\tif (fontStyle & FontStyle.Italic) {\n\t\t\tresult += 'font-style: italic;';\n\t\t}\n\t\tif (fontStyle & FontStyle.Bold) {\n\t\t\tresult += 'font-weight: bold;';\n\t\t}\n\t\tlet textDecoration = '';\n\t\tif (fontStyle & FontStyle.Underline) {\n\t\t\ttextDecoration += ' underline';\n\t\t}\n\t\tif (fontStyle & FontStyle.Strikethrough) {\n\t\t\ttextDecoration += ' line-through';\n\t\t}\n\t\tif (textDecoration) {\n\t\t\tresult += `text-decoration:${textDecoration};`;\n\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic static getPresentationFromMetadata(metadata: number): ITokenPresentation {\n\t\tconst foreground = this.getForeground(metadata);\n\t\tconst fontStyle = this.getFontStyle(metadata);\n\n\t\treturn {\n\t\t\tforeground: foreground,\n\t\t\titalic: Boolean(fontStyle & FontStyle.Italic),\n\t\t\tbold: Boolean(fontStyle & FontStyle.Bold),\n\t\t\tunderline: Boolean(fontStyle & FontStyle.Underline),\n\t\t\tstrikethrough: Boolean(fontStyle & FontStyle.Strikethrough),\n\t\t};\n\t}\n}\n\n/**\n */\nexport interface ITokenPresentation {\n\tforeground: ColorId;\n\titalic: boolean;\n\tbold: boolean;\n\tunderline: boolean;\n\tstrikethrough: boolean;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/**\n * Open ended enum at runtime\n */\nexport const enum LanguageId {\n\tNull = 0,\n\tPlainText = 1\n}\n\n/**\n * A font style. Values are 2^x such that a bit mask can be used.\n */\nexport const enum FontStyle {\n\tNotSet = -1,\n\tNone = 0,\n\tItalic = 1,\n\tBold = 2,\n\tUnderline = 4,\n\tStrikethrough = 8,\n}\n\n/**\n * Open ended enum at runtime\n */\nexport const enum ColorId {\n\tNone = 0,\n\tDefaultForeground = 1,\n\tDefaultBackground = 2\n}\n\n/**\n * A standard token type.\n */\nexport const enum StandardTokenType {\n\tOther = 0,\n\tComment = 1,\n\tString = 2,\n\tRegEx = 3\n}\n\n/**\n * Helpers to manage the \"collapsed\" metadata of an entire StackElement stack.\n * The following assumptions have been made:\n *  - languageId < 256 => needs 8 bits\n *  - unique color count < 512 => needs 9 bits\n *\n * The binary format is:\n * - -------------------------------------------\n *     3322 2222 2222 1111 1111 1100 0000 0000\n *     1098 7654 3210 9876 5432 1098 7654 3210\n * - -------------------------------------------\n *     xxxx xxxx xxxx xxxx xxxx xxxx xxxx xxxx\n *     bbbb bbbb ffff ffff fFFF FBTT LLLL LLLL\n * - -------------------------------------------\n *  - L = LanguageId (8 bits)\n *  - T = StandardTokenType (2 bits)\n *  - B = Balanced bracket (1 bit)\n *  - F = FontStyle (4 bits)\n *  - f = foreground color (9 bits)\n *  - b = background color (8 bits)\n *\n */\nexport const enum MetadataConsts {\n\tLANGUAGEID_MASK /*            */ = 0b00000000_00000000_00000000_11111111,\n\tTOKEN_TYPE_MASK /*            */ = 0b00000000_00000000_00000011_00000000,\n\tBALANCED_BRACKETS_MASK /*     */ = 0b00000000_00000000_00000100_00000000,\n\tFONT_STYLE_MASK /*            */ = 0b00000000_00000000_01111000_00000000,\n\tFOREGROUND_MASK /*            */ = 0b00000000_11111111_10000000_00000000,\n\tBACKGROUND_MASK /*            */ = 0b11111111_00000000_00000000_00000000,\n\n\tITALIC_MASK /*                */ = 0b00000000_00000000_00001000_00000000,\n\tBOLD_MASK /*                  */ = 0b00000000_00000000_00010000_00000000,\n\tUNDERLINE_MASK /*             */ = 0b00000000_00000000_00100000_00000000,\n\tSTRIKETHROUGH_MASK /*         */ = 0b00000000_00000000_01000000_00000000,\n\n\t// Semantic tokens cannot set the language id, so we can\n\t// use the first 8 bits for control purposes\n\tSEMANTIC_USE_ITALIC /*        */ = 0b00000000_00000000_00000000_00000001,\n\tSEMANTIC_USE_BOLD /*          */ = 0b00000000_00000000_00000000_00000010,\n\tSEMANTIC_USE_UNDERLINE  /*    */ = 0b00000000_00000000_00000000_00000100,\n\tSEMANTIC_USE_STRIKETHROUGH /* */ = 0b00000000_00000000_00000000_00001000,\n\tSEMANTIC_USE_FOREGROUND /*    */ = 0b00000000_00000000_00000000_00010000,\n\tSEMANTIC_USE_BACKGROUND /*    */ = 0b00000000_00000000_00000000_00100000,\n\n\tLANGUAGEID_OFFSET = 0,\n\tTOKEN_TYPE_OFFSET = 8,\n\tBALANCED_BRACKETS_OFFSET = 10,\n\tFONT_STYLE_OFFSET = 11,\n\tFOREGROUND_OFFSET = 15,\n\tBACKGROUND_OFFSET = 24\n}\n\n/**\n */\nexport class TokenMetadata {\n\n\tpublic static getLanguageId(metadata: number): LanguageId {\n\t\treturn (metadata & MetadataConsts.LANGUAGEID_MASK) >>> MetadataConsts.LANGUAGEID_OFFSET;\n\t}\n\n\tpublic static getTokenType(metadata: number): StandardTokenType {\n\t\treturn (metadata & MetadataConsts.TOKEN_TYPE_MASK) >>> MetadataConsts.TOKEN_TYPE_OFFSET;\n\t}\n\n\tpublic static containsBalancedBrackets(metadata: number): boolean {\n\t\treturn (metadata & MetadataConsts.BALANCED_BRACKETS_MASK) !== 0;\n\t}\n\n\tpublic static getFontStyle(metadata: number): FontStyle {\n\t\treturn (metadata & MetadataConsts.FONT_STYLE_MASK) >>> MetadataConsts.FONT_STYLE_OFFSET;\n\t}\n\n\tpublic static getForeground(metadata: number): ColorId {\n\t\treturn (metadata & MetadataConsts.FOREGROUND_MASK) >>> MetadataConsts.FOREGROUND_OFFSET;\n\t}\n\n\tpublic static getBackground(metadata: number): ColorId {\n\t\treturn (metadata & MetadataConsts.BACKGROUND_MASK) >>> MetadataConsts.BACKGROUND_OFFSET;\n\t}\n\n\tpublic static getClassNameFromMetadata(metadata: number): string {\n\t\tconst foreground = this.getForeground(metadata);\n\t\tlet className = 'mtk' + foreground;\n\n\t\tconst fontStyle = this.getFontStyle(metadata);\n\t\tif (fontStyle & FontStyle.Italic) {\n\t\t\tclassName += ' mtki';\n\t\t}\n\t\tif (fontStyle & FontStyle.Bold) {\n\t\t\tclassName += ' mtkb';\n\t\t}\n\t\tif (fontStyle & FontStyle.Underline) {\n\t\t\tclassName += ' mtku';\n\t\t}\n\t\tif (fontStyle & FontStyle.Strikethrough) {\n\t\t\tclassName += ' mtks';\n\t\t}\n\n\t\treturn className;\n\t}\n\n\tpublic static getInlineStyleFromMetadata(metadata: number, colorMap: string[]): string {\n\t\tconst foreground = this.getForeground(metadata);\n\t\tconst fontStyle = this.getFontStyle(metadata);\n\n\t\tlet result = `color: ${colorMap[foreground]};`;\n\t\tif (fontStyle & FontStyle.Italic) {\n\t\t\tresult += 'font-style: italic;';\n\t\t}\n\t\tif (fontStyle & FontStyle.Bold) {\n\t\t\tresult += 'font-weight: bold;';\n\t\t}\n\t\tlet textDecoration = '';\n\t\tif (fontStyle & FontStyle.Underline) {\n\t\t\ttextDecoration += ' underline';\n\t\t}\n\t\tif (fontStyle & FontStyle.Strikethrough) {\n\t\t\ttextDecoration += ' line-through';\n\t\t}\n\t\tif (textDecoration) {\n\t\t\tresult += `text-decoration:${textDecoration};`;\n\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic static getPresentationFromMetadata(metadata: number): ITokenPresentation {\n\t\tconst foreground = this.getForeground(metadata);\n\t\tconst fontStyle = this.getFontStyle(metadata);\n\n\t\treturn {\n\t\t\tforeground: foreground,\n\t\t\titalic: Boolean(fontStyle & FontStyle.Italic),\n\t\t\tbold: Boolean(fontStyle & FontStyle.Bold),\n\t\t\tunderline: Boolean(fontStyle & FontStyle.Underline),\n\t\t\tstrikethrough: Boolean(fontStyle & FontStyle.Strikethrough),\n\t\t};\n\t}\n}\n\n/**\n */\nexport interface ITokenPresentation {\n\tforeground: ColorId;\n\titalic: boolean;\n\tbold: boolean;\n\tunderline: boolean;\n\tstrikethrough: boolean;\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1056, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/monaco-editor/esm/vs/editor/common/tokens/lineTokens.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/tokens/file%3A/mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/tokens/lineTokens.ts","file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/tokens/vs/editor/common/tokens/lineTokens.ts"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ILanguageIdCodec } from '../languages.js';\nimport { FontStyle, ColorId, StandardTokenType, MetadataConsts, ITokenPresentation, TokenMetadata } from '../encodedTokenAttributes.js';\nimport { IPosition } from '../core/position.js';\nimport { ITextModel } from '../model.js';\nimport { OffsetRange } from '../core/ranges/offsetRange.js';\nimport { onUnexpectedError } from '../../../base/common/errors.js';\n\n\nexport interface IViewLineTokens {\n\tlanguageIdCodec: ILanguageIdCodec;\n\tequals(other: IViewLineTokens): boolean;\n\tgetCount(): number;\n\tgetStandardTokenType(tokenIndex: number): StandardTokenType;\n\tgetForeground(tokenIndex: number): ColorId;\n\tgetEndOffset(tokenIndex: number): number;\n\tgetClassName(tokenIndex: number): string;\n\tgetInlineStyle(tokenIndex: number, colorMap: string[]): string;\n\tgetPresentation(tokenIndex: number): ITokenPresentation;\n\tfindTokenIndexAtOffset(offset: number): number;\n\tgetLineContent(): string;\n\tgetMetadata(tokenIndex: number): number;\n\tgetLanguageId(tokenIndex: number): string;\n\tgetTokenText(tokenIndex: number): string;\n\tforEach(callback: (tokenIndex: number) => void): void;\n}\n\nexport class LineTokens implements IViewLineTokens {\n\tpublic static createEmpty(lineContent: string, decoder: ILanguageIdCodec): LineTokens {\n\t\tconst defaultMetadata = LineTokens.defaultTokenMetadata;\n\n\t\tconst tokens = new Uint32Array(2);\n\t\ttokens[0] = lineContent.length;\n\t\ttokens[1] = defaultMetadata;\n\n\t\treturn new LineTokens(tokens, lineContent, decoder);\n\t}\n\n\tpublic static createFromTextAndMetadata(data: { text: string; metadata: number }[], decoder: ILanguageIdCodec): LineTokens {\n\t\tlet offset: number = 0;\n\t\tlet fullText: string = '';\n\t\tconst tokens = new Array<number>();\n\t\tfor (const { text, metadata } of data) {\n\t\t\ttokens.push(offset + text.length, metadata);\n\t\t\toffset += text.length;\n\t\t\tfullText += text;\n\t\t}\n\t\treturn new LineTokens(new Uint32Array(tokens), fullText, decoder);\n\t}\n\n\tpublic static convertToEndOffset(tokens: Uint32Array, lineTextLength: number): void {\n\t\tconst tokenCount = (tokens.length >>> 1);\n\t\tconst lastTokenIndex = tokenCount - 1;\n\t\tfor (let tokenIndex = 0; tokenIndex < lastTokenIndex; tokenIndex++) {\n\t\t\ttokens[tokenIndex << 1] = tokens[(tokenIndex + 1) << 1];\n\t\t}\n\t\ttokens[lastTokenIndex << 1] = lineTextLength;\n\t}\n\n\tpublic static findIndexInTokensArray(tokens: Uint32Array, desiredIndex: number): number {\n\t\tif (tokens.length <= 2) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet low = 0;\n\t\tlet high = (tokens.length >>> 1) - 1;\n\n\t\twhile (low < high) {\n\n\t\t\tconst mid = low + Math.floor((high - low) / 2);\n\t\t\tconst endOffset = tokens[(mid << 1)];\n\n\t\t\tif (endOffset === desiredIndex) {\n\t\t\t\treturn mid + 1;\n\t\t\t} else if (endOffset < desiredIndex) {\n\t\t\t\tlow = mid + 1;\n\t\t\t} else if (endOffset > desiredIndex) {\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\n\t\treturn low;\n\t}\n\n\t_lineTokensBrand: void = undefined;\n\n\tprivate readonly _tokens: Uint32Array;\n\tprivate readonly _tokensCount: number;\n\tprivate readonly _text: string;\n\n\tpublic readonly languageIdCodec: ILanguageIdCodec;\n\n\tpublic static defaultTokenMetadata = (\n\t\t(FontStyle.None << MetadataConsts.FONT_STYLE_OFFSET)\n\t\t| (ColorId.DefaultForeground << MetadataConsts.FOREGROUND_OFFSET)\n\t\t| (ColorId.DefaultBackground << MetadataConsts.BACKGROUND_OFFSET)\n\t) >>> 0;\n\n\tconstructor(tokens: Uint32Array, text: string, decoder: ILanguageIdCodec) {\n\t\tconst tokensLength = tokens.length > 1 ? tokens[tokens.length - 2] : 0;\n\t\tif (tokensLength !== text.length) {\n\t\t\tonUnexpectedError(new Error('Token length and text length do not match!'));\n\t\t}\n\t\tthis._tokens = tokens;\n\t\tthis._tokensCount = (this._tokens.length >>> 1);\n\t\tthis._text = text;\n\t\tthis.languageIdCodec = decoder;\n\t}\n\n\tpublic getTextLength(): number {\n\t\treturn this._text.length;\n\t}\n\n\tpublic equals(other: IViewLineTokens): boolean {\n\t\tif (other instanceof LineTokens) {\n\t\t\treturn this.slicedEquals(other, 0, this._tokensCount);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic slicedEquals(other: LineTokens, sliceFromTokenIndex: number, sliceTokenCount: number): boolean {\n\t\tif (this._text !== other._text) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this._tokensCount !== other._tokensCount) {\n\t\t\treturn false;\n\t\t}\n\t\tconst from = (sliceFromTokenIndex << 1);\n\t\tconst to = from + (sliceTokenCount << 1);\n\t\tfor (let i = from; i < to; i++) {\n\t\t\tif (this._tokens[i] !== other._tokens[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic getLineContent(): string {\n\t\treturn this._text;\n\t}\n\n\tpublic getCount(): number {\n\t\treturn this._tokensCount;\n\t}\n\n\tpublic getStartOffset(tokenIndex: number): number {\n\t\tif (tokenIndex > 0) {\n\t\t\treturn this._tokens[(tokenIndex - 1) << 1];\n\t\t}\n\t\treturn 0;\n\t}\n\n\tpublic getMetadata(tokenIndex: number): number {\n\t\tconst metadata = this._tokens[(tokenIndex << 1) + 1];\n\t\treturn metadata;\n\t}\n\n\tpublic getLanguageId(tokenIndex: number): string {\n\t\tconst metadata = this._tokens[(tokenIndex << 1) + 1];\n\t\tconst languageId = TokenMetadata.getLanguageId(metadata);\n\t\treturn this.languageIdCodec.decodeLanguageId(languageId);\n\t}\n\n\tpublic getStandardTokenType(tokenIndex: number): StandardTokenType {\n\t\tconst metadata = this._tokens[(tokenIndex << 1) + 1];\n\t\treturn TokenMetadata.getTokenType(metadata);\n\t}\n\n\tpublic getForeground(tokenIndex: number): ColorId {\n\t\tconst metadata = this._tokens[(tokenIndex << 1) + 1];\n\t\treturn TokenMetadata.getForeground(metadata);\n\t}\n\n\tpublic getClassName(tokenIndex: number): string {\n\t\tconst metadata = this._tokens[(tokenIndex << 1) + 1];\n\t\treturn TokenMetadata.getClassNameFromMetadata(metadata);\n\t}\n\n\tpublic getInlineStyle(tokenIndex: number, colorMap: string[]): string {\n\t\tconst metadata = this._tokens[(tokenIndex << 1) + 1];\n\t\treturn TokenMetadata.getInlineStyleFromMetadata(metadata, colorMap);\n\t}\n\n\tpublic getPresentation(tokenIndex: number): ITokenPresentation {\n\t\tconst metadata = this._tokens[(tokenIndex << 1) + 1];\n\t\treturn TokenMetadata.getPresentationFromMetadata(metadata);\n\t}\n\n\tpublic getEndOffset(tokenIndex: number): number {\n\t\treturn this._tokens[tokenIndex << 1];\n\t}\n\n\t/**\n\t * Find the token containing offset `offset`.\n\t * @param offset The search offset\n\t * @return The index of the token containing the offset.\n\t */\n\tpublic findTokenIndexAtOffset(offset: number): number {\n\t\treturn LineTokens.findIndexInTokensArray(this._tokens, offset);\n\t}\n\n\tpublic inflate(): IViewLineTokens {\n\t\treturn this;\n\t}\n\n\tpublic sliceAndInflate(startOffset: number, endOffset: number, deltaOffset: number): IViewLineTokens {\n\t\treturn new SliceLineTokens(this, startOffset, endOffset, deltaOffset);\n\t}\n\n\tpublic sliceZeroCopy(range: OffsetRange): IViewLineTokens {\n\t\treturn this.sliceAndInflate(range.start, range.endExclusive, 0);\n\t}\n\n\t/**\n\t * @pure\n\t * @param insertTokens Must be sorted by offset.\n\t*/\n\tpublic withInserted(insertTokens: { offset: number; text: string; tokenMetadata: number }[]): LineTokens {\n\t\tif (insertTokens.length === 0) {\n\t\t\treturn this;\n\t\t}\n\n\t\tlet nextOriginalTokenIdx = 0;\n\t\tlet nextInsertTokenIdx = 0;\n\t\tlet text = '';\n\t\tconst newTokens = new Array<number>();\n\n\t\tlet originalEndOffset = 0;\n\t\twhile (true) {\n\t\t\tconst nextOriginalTokenEndOffset = nextOriginalTokenIdx < this._tokensCount ? this._tokens[nextOriginalTokenIdx << 1] : -1;\n\t\t\tconst nextInsertToken = nextInsertTokenIdx < insertTokens.length ? insertTokens[nextInsertTokenIdx] : null;\n\n\t\t\tif (nextOriginalTokenEndOffset !== -1 && (nextInsertToken === null || nextOriginalTokenEndOffset <= nextInsertToken.offset)) {\n\t\t\t\t// original token ends before next insert token\n\t\t\t\ttext += this._text.substring(originalEndOffset, nextOriginalTokenEndOffset);\n\t\t\t\tconst metadata = this._tokens[(nextOriginalTokenIdx << 1) + 1];\n\t\t\t\tnewTokens.push(text.length, metadata);\n\t\t\t\tnextOriginalTokenIdx++;\n\t\t\t\toriginalEndOffset = nextOriginalTokenEndOffset;\n\n\t\t\t} else if (nextInsertToken) {\n\t\t\t\tif (nextInsertToken.offset > originalEndOffset) {\n\t\t\t\t\t// insert token is in the middle of the next token.\n\t\t\t\t\ttext += this._text.substring(originalEndOffset, nextInsertToken.offset);\n\t\t\t\t\tconst metadata = this._tokens[(nextOriginalTokenIdx << 1) + 1];\n\t\t\t\t\tnewTokens.push(text.length, metadata);\n\t\t\t\t\toriginalEndOffset = nextInsertToken.offset;\n\t\t\t\t}\n\n\t\t\t\ttext += nextInsertToken.text;\n\t\t\t\tnewTokens.push(text.length, nextInsertToken.tokenMetadata);\n\t\t\t\tnextInsertTokenIdx++;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn new LineTokens(new Uint32Array(newTokens), text, this.languageIdCodec);\n\t}\n\n\tpublic getTokensInRange(range: OffsetRange): TokenArray {\n\t\tconst builder = new TokenArrayBuilder();\n\n\t\tconst startTokenIndex = this.findTokenIndexAtOffset(range.start);\n\t\tconst endTokenIndex = this.findTokenIndexAtOffset(range.endExclusive);\n\n\t\tfor (let tokenIndex = startTokenIndex; tokenIndex <= endTokenIndex; tokenIndex++) {\n\t\t\tconst tokenRange = new OffsetRange(this.getStartOffset(tokenIndex), this.getEndOffset(tokenIndex));\n\t\t\tconst length = tokenRange.intersectionLength(range);\n\t\t\tif (length > 0) {\n\t\t\t\tbuilder.add(length, this.getMetadata(tokenIndex));\n\t\t\t}\n\t\t}\n\n\t\treturn builder.build();\n\t}\n\n\tpublic getTokenText(tokenIndex: number): string {\n\t\tconst startOffset = this.getStartOffset(tokenIndex);\n\t\tconst endOffset = this.getEndOffset(tokenIndex);\n\t\tconst text = this._text.substring(startOffset, endOffset);\n\t\treturn text;\n\t}\n\n\tpublic forEach(callback: (tokenIndex: number) => void): void {\n\t\tconst tokenCount = this.getCount();\n\t\tfor (let tokenIndex = 0; tokenIndex < tokenCount; tokenIndex++) {\n\t\t\tcallback(tokenIndex);\n\t\t}\n\t}\n\n\ttoString(): string {\n\t\tlet result = '';\n\t\tthis.forEach((i) => {\n\t\t\tresult += `[${this.getTokenText(i)}]{${this.getClassName(i)}}`;\n\t\t});\n\t\treturn result;\n\t}\n}\n\nclass SliceLineTokens implements IViewLineTokens {\n\n\tprivate readonly _source: LineTokens;\n\tprivate readonly _startOffset: number;\n\tprivate readonly _endOffset: number;\n\tprivate readonly _deltaOffset: number;\n\n\tprivate readonly _firstTokenIndex: number;\n\tprivate readonly _tokensCount: number;\n\n\tpublic readonly languageIdCodec: ILanguageIdCodec;\n\n\tconstructor(source: LineTokens, startOffset: number, endOffset: number, deltaOffset: number) {\n\t\tthis._source = source;\n\t\tthis._startOffset = startOffset;\n\t\tthis._endOffset = endOffset;\n\t\tthis._deltaOffset = deltaOffset;\n\t\tthis._firstTokenIndex = source.findTokenIndexAtOffset(startOffset);\n\t\tthis.languageIdCodec = source.languageIdCodec;\n\n\t\tthis._tokensCount = 0;\n\t\tfor (let i = this._firstTokenIndex, len = source.getCount(); i < len; i++) {\n\t\t\tconst tokenStartOffset = source.getStartOffset(i);\n\t\t\tif (tokenStartOffset >= endOffset) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tthis._tokensCount++;\n\t\t}\n\t}\n\n\tpublic getMetadata(tokenIndex: number): number {\n\t\treturn this._source.getMetadata(this._firstTokenIndex + tokenIndex);\n\t}\n\n\tpublic getLanguageId(tokenIndex: number): string {\n\t\treturn this._source.getLanguageId(this._firstTokenIndex + tokenIndex);\n\t}\n\n\tpublic getLineContent(): string {\n\t\treturn this._source.getLineContent().substring(this._startOffset, this._endOffset);\n\t}\n\n\tpublic equals(other: IViewLineTokens): boolean {\n\t\tif (other instanceof SliceLineTokens) {\n\t\t\treturn (\n\t\t\t\tthis._startOffset === other._startOffset\n\t\t\t\t&& this._endOffset === other._endOffset\n\t\t\t\t&& this._deltaOffset === other._deltaOffset\n\t\t\t\t&& this._source.slicedEquals(other._source, this._firstTokenIndex, this._tokensCount)\n\t\t\t);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic getCount(): number {\n\t\treturn this._tokensCount;\n\t}\n\n\tpublic getStandardTokenType(tokenIndex: number): StandardTokenType {\n\t\treturn this._source.getStandardTokenType(this._firstTokenIndex + tokenIndex);\n\t}\n\n\tpublic getForeground(tokenIndex: number): ColorId {\n\t\treturn this._source.getForeground(this._firstTokenIndex + tokenIndex);\n\t}\n\n\tpublic getEndOffset(tokenIndex: number): number {\n\t\tconst tokenEndOffset = this._source.getEndOffset(this._firstTokenIndex + tokenIndex);\n\t\treturn Math.min(this._endOffset, tokenEndOffset) - this._startOffset + this._deltaOffset;\n\t}\n\n\tpublic getClassName(tokenIndex: number): string {\n\t\treturn this._source.getClassName(this._firstTokenIndex + tokenIndex);\n\t}\n\n\tpublic getInlineStyle(tokenIndex: number, colorMap: string[]): string {\n\t\treturn this._source.getInlineStyle(this._firstTokenIndex + tokenIndex, colorMap);\n\t}\n\n\tpublic getPresentation(tokenIndex: number): ITokenPresentation {\n\t\treturn this._source.getPresentation(this._firstTokenIndex + tokenIndex);\n\t}\n\n\tpublic findTokenIndexAtOffset(offset: number): number {\n\t\treturn this._source.findTokenIndexAtOffset(offset + this._startOffset - this._deltaOffset) - this._firstTokenIndex;\n\t}\n\n\tpublic getTokenText(tokenIndex: number): string {\n\t\tconst adjustedTokenIndex = this._firstTokenIndex + tokenIndex;\n\t\tconst tokenStartOffset = this._source.getStartOffset(adjustedTokenIndex);\n\t\tconst tokenEndOffset = this._source.getEndOffset(adjustedTokenIndex);\n\t\tlet text = this._source.getTokenText(adjustedTokenIndex);\n\t\tif (tokenStartOffset < this._startOffset) {\n\t\t\ttext = text.substring(this._startOffset - tokenStartOffset);\n\t\t}\n\t\tif (tokenEndOffset > this._endOffset) {\n\t\t\ttext = text.substring(0, text.length - (tokenEndOffset - this._endOffset));\n\t\t}\n\t\treturn text;\n\t}\n\n\tpublic forEach(callback: (tokenIndex: number) => void): void {\n\t\tfor (let tokenIndex = 0; tokenIndex < this.getCount(); tokenIndex++) {\n\t\t\tcallback(tokenIndex);\n\t\t}\n\t}\n}\n\nexport function getStandardTokenTypeAtPosition(model: ITextModel, position: IPosition): StandardTokenType | undefined {\n\tconst lineNumber = position.lineNumber;\n\tif (!model.tokenization.isCheapToTokenize(lineNumber)) {\n\t\treturn undefined;\n\t}\n\tmodel.tokenization.forceTokenization(lineNumber);\n\tconst lineTokens = model.tokenization.getLineTokens(lineNumber);\n\tconst tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n\tconst tokenType = lineTokens.getStandardTokenType(tokenIndex);\n\treturn tokenType;\n}\n\n\n\n/**\n * This class represents a sequence of tokens.\n * Conceptually, each token has a length and a metadata number.\n * A token array might be used to annotate a string with metadata.\n * Use {@link TokenArrayBuilder} to efficiently create a token array.\n *\n * TODO: Make this class more efficient (e.g. by using a Int32Array).\n*/\nexport class TokenArray {\n\tpublic static fromLineTokens(lineTokens: LineTokens): TokenArray {\n\t\tconst tokenInfo: TokenInfo[] = [];\n\t\tfor (let i = 0; i < lineTokens.getCount(); i++) {\n\t\t\ttokenInfo.push(new TokenInfo(lineTokens.getEndOffset(i) - lineTokens.getStartOffset(i), lineTokens.getMetadata(i)));\n\t\t}\n\t\treturn TokenArray.create(tokenInfo);\n\t}\n\n\tpublic static create(tokenInfo: TokenInfo[]): TokenArray {\n\t\treturn new TokenArray(tokenInfo);\n\t}\n\n\tprivate constructor(\n\t\tprivate readonly _tokenInfo: TokenInfo[]\n\t) { }\n\n\tpublic toLineTokens(lineContent: string, decoder: ILanguageIdCodec): LineTokens {\n\t\treturn LineTokens.createFromTextAndMetadata(this.map((r, t) => ({ text: r.substring(lineContent), metadata: t.metadata })), decoder);\n\t}\n\n\tpublic forEach(cb: (range: OffsetRange, tokenInfo: TokenInfo) => void): void {\n\t\tlet lengthSum = 0;\n\t\tfor (const tokenInfo of this._tokenInfo) {\n\t\t\tconst range = new OffsetRange(lengthSum, lengthSum + tokenInfo.length);\n\t\t\tcb(range, tokenInfo);\n\t\t\tlengthSum += tokenInfo.length;\n\t\t}\n\t}\n\n\tpublic map<T>(cb: (range: OffsetRange, tokenInfo: TokenInfo) => T): T[] {\n\t\tconst result: T[] = [];\n\t\tlet lengthSum = 0;\n\t\tfor (const tokenInfo of this._tokenInfo) {\n\t\t\tconst range = new OffsetRange(lengthSum, lengthSum + tokenInfo.length);\n\t\t\tresult.push(cb(range, tokenInfo));\n\t\t\tlengthSum += tokenInfo.length;\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic slice(range: OffsetRange): TokenArray {\n\t\tconst result: TokenInfo[] = [];\n\t\tlet lengthSum = 0;\n\t\tfor (const tokenInfo of this._tokenInfo) {\n\t\t\tconst tokenStart = lengthSum;\n\t\t\tconst tokenEndEx = tokenStart + tokenInfo.length;\n\t\t\tif (tokenEndEx > range.start) {\n\t\t\t\tif (tokenStart >= range.endExclusive) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tconst deltaBefore = Math.max(0, range.start - tokenStart);\n\t\t\t\tconst deltaAfter = Math.max(0, tokenEndEx - range.endExclusive);\n\n\t\t\t\tresult.push(new TokenInfo(tokenInfo.length - deltaBefore - deltaAfter, tokenInfo.metadata));\n\t\t\t}\n\n\t\t\tlengthSum += tokenInfo.length;\n\t\t}\n\t\treturn TokenArray.create(result);\n\t}\n}\n\nexport type ITokenMetadata = number;\n\nexport class TokenInfo {\n\tconstructor(\n\t\tpublic readonly length: number,\n\t\tpublic readonly metadata: ITokenMetadata\n\t) { }\n}\n/**\n * TODO: Make this class more efficient (e.g. by using a Int32Array).\n*/\n\nexport class TokenArrayBuilder {\n\tprivate readonly _tokens: TokenInfo[] = [];\n\n\tpublic add(length: number, metadata: ITokenMetadata): void {\n\t\tthis._tokens.push(new TokenInfo(length, metadata));\n\t}\n\n\tpublic build(): TokenArray {\n\t\treturn TokenArray.create(this._tokens);\n\t}\n}\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ILanguageIdCodec } from '../languages.js';\nimport { FontStyle, ColorId, StandardTokenType, MetadataConsts, ITokenPresentation, TokenMetadata } from '../encodedTokenAttributes.js';\nimport { IPosition } from '../core/position.js';\nimport { ITextModel } from '../model.js';\nimport { OffsetRange } from '../core/ranges/offsetRange.js';\nimport { onUnexpectedError } from '../../../base/common/errors.js';\n\n\nexport interface IViewLineTokens {\n\tlanguageIdCodec: ILanguageIdCodec;\n\tequals(other: IViewLineTokens): boolean;\n\tgetCount(): number;\n\tgetStandardTokenType(tokenIndex: number): StandardTokenType;\n\tgetForeground(tokenIndex: number): ColorId;\n\tgetEndOffset(tokenIndex: number): number;\n\tgetClassName(tokenIndex: number): string;\n\tgetInlineStyle(tokenIndex: number, colorMap: string[]): string;\n\tgetPresentation(tokenIndex: number): ITokenPresentation;\n\tfindTokenIndexAtOffset(offset: number): number;\n\tgetLineContent(): string;\n\tgetMetadata(tokenIndex: number): number;\n\tgetLanguageId(tokenIndex: number): string;\n\tgetTokenText(tokenIndex: number): string;\n\tforEach(callback: (tokenIndex: number) => void): void;\n}\n\nexport class LineTokens implements IViewLineTokens {\n\tpublic static createEmpty(lineContent: string, decoder: ILanguageIdCodec): LineTokens {\n\t\tconst defaultMetadata = LineTokens.defaultTokenMetadata;\n\n\t\tconst tokens = new Uint32Array(2);\n\t\ttokens[0] = lineContent.length;\n\t\ttokens[1] = defaultMetadata;\n\n\t\treturn new LineTokens(tokens, lineContent, decoder);\n\t}\n\n\tpublic static createFromTextAndMetadata(data: { text: string; metadata: number }[], decoder: ILanguageIdCodec): LineTokens {\n\t\tlet offset: number = 0;\n\t\tlet fullText: string = '';\n\t\tconst tokens = new Array<number>();\n\t\tfor (const { text, metadata } of data) {\n\t\t\ttokens.push(offset + text.length, metadata);\n\t\t\toffset += text.length;\n\t\t\tfullText += text;\n\t\t}\n\t\treturn new LineTokens(new Uint32Array(tokens), fullText, decoder);\n\t}\n\n\tpublic static convertToEndOffset(tokens: Uint32Array, lineTextLength: number): void {\n\t\tconst tokenCount = (tokens.length >>> 1);\n\t\tconst lastTokenIndex = tokenCount - 1;\n\t\tfor (let tokenIndex = 0; tokenIndex < lastTokenIndex; tokenIndex++) {\n\t\t\ttokens[tokenIndex << 1] = tokens[(tokenIndex + 1) << 1];\n\t\t}\n\t\ttokens[lastTokenIndex << 1] = lineTextLength;\n\t}\n\n\tpublic static findIndexInTokensArray(tokens: Uint32Array, desiredIndex: number): number {\n\t\tif (tokens.length <= 2) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet low = 0;\n\t\tlet high = (tokens.length >>> 1) - 1;\n\n\t\twhile (low < high) {\n\n\t\t\tconst mid = low + Math.floor((high - low) / 2);\n\t\t\tconst endOffset = tokens[(mid << 1)];\n\n\t\t\tif (endOffset === desiredIndex) {\n\t\t\t\treturn mid + 1;\n\t\t\t} else if (endOffset < desiredIndex) {\n\t\t\t\tlow = mid + 1;\n\t\t\t} else if (endOffset > desiredIndex) {\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\n\t\treturn low;\n\t}\n\n\t_lineTokensBrand: void = undefined;\n\n\tprivate readonly _tokens: Uint32Array;\n\tprivate readonly _tokensCount: number;\n\tprivate readonly _text: string;\n\n\tpublic readonly languageIdCodec: ILanguageIdCodec;\n\n\tpublic static defaultTokenMetadata = (\n\t\t(FontStyle.None << MetadataConsts.FONT_STYLE_OFFSET)\n\t\t| (ColorId.DefaultForeground << MetadataConsts.FOREGROUND_OFFSET)\n\t\t| (ColorId.DefaultBackground << MetadataConsts.BACKGROUND_OFFSET)\n\t) >>> 0;\n\n\tconstructor(tokens: Uint32Array, text: string, decoder: ILanguageIdCodec) {\n\t\tconst tokensLength = tokens.length > 1 ? tokens[tokens.length - 2] : 0;\n\t\tif (tokensLength !== text.length) {\n\t\t\tonUnexpectedError(new Error('Token length and text length do not match!'));\n\t\t}\n\t\tthis._tokens = tokens;\n\t\tthis._tokensCount = (this._tokens.length >>> 1);\n\t\tthis._text = text;\n\t\tthis.languageIdCodec = decoder;\n\t}\n\n\tpublic getTextLength(): number {\n\t\treturn this._text.length;\n\t}\n\n\tpublic equals(other: IViewLineTokens): boolean {\n\t\tif (other instanceof LineTokens) {\n\t\t\treturn this.slicedEquals(other, 0, this._tokensCount);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic slicedEquals(other: LineTokens, sliceFromTokenIndex: number, sliceTokenCount: number): boolean {\n\t\tif (this._text !== other._text) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this._tokensCount !== other._tokensCount) {\n\t\t\treturn false;\n\t\t}\n\t\tconst from = (sliceFromTokenIndex << 1);\n\t\tconst to = from + (sliceTokenCount << 1);\n\t\tfor (let i = from; i < to; i++) {\n\t\t\tif (this._tokens[i] !== other._tokens[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic getLineContent(): string {\n\t\treturn this._text;\n\t}\n\n\tpublic getCount(): number {\n\t\treturn this._tokensCount;\n\t}\n\n\tpublic getStartOffset(tokenIndex: number): number {\n\t\tif (tokenIndex > 0) {\n\t\t\treturn this._tokens[(tokenIndex - 1) << 1];\n\t\t}\n\t\treturn 0;\n\t}\n\n\tpublic getMetadata(tokenIndex: number): number {\n\t\tconst metadata = this._tokens[(tokenIndex << 1) + 1];\n\t\treturn metadata;\n\t}\n\n\tpublic getLanguageId(tokenIndex: number): string {\n\t\tconst metadata = this._tokens[(tokenIndex << 1) + 1];\n\t\tconst languageId = TokenMetadata.getLanguageId(metadata);\n\t\treturn this.languageIdCodec.decodeLanguageId(languageId);\n\t}\n\n\tpublic getStandardTokenType(tokenIndex: number): StandardTokenType {\n\t\tconst metadata = this._tokens[(tokenIndex << 1) + 1];\n\t\treturn TokenMetadata.getTokenType(metadata);\n\t}\n\n\tpublic getForeground(tokenIndex: number): ColorId {\n\t\tconst metadata = this._tokens[(tokenIndex << 1) + 1];\n\t\treturn TokenMetadata.getForeground(metadata);\n\t}\n\n\tpublic getClassName(tokenIndex: number): string {\n\t\tconst metadata = this._tokens[(tokenIndex << 1) + 1];\n\t\treturn TokenMetadata.getClassNameFromMetadata(metadata);\n\t}\n\n\tpublic getInlineStyle(tokenIndex: number, colorMap: string[]): string {\n\t\tconst metadata = this._tokens[(tokenIndex << 1) + 1];\n\t\treturn TokenMetadata.getInlineStyleFromMetadata(metadata, colorMap);\n\t}\n\n\tpublic getPresentation(tokenIndex: number): ITokenPresentation {\n\t\tconst metadata = this._tokens[(tokenIndex << 1) + 1];\n\t\treturn TokenMetadata.getPresentationFromMetadata(metadata);\n\t}\n\n\tpublic getEndOffset(tokenIndex: number): number {\n\t\treturn this._tokens[tokenIndex << 1];\n\t}\n\n\t/**\n\t * Find the token containing offset `offset`.\n\t * @param offset The search offset\n\t * @return The index of the token containing the offset.\n\t */\n\tpublic findTokenIndexAtOffset(offset: number): number {\n\t\treturn LineTokens.findIndexInTokensArray(this._tokens, offset);\n\t}\n\n\tpublic inflate(): IViewLineTokens {\n\t\treturn this;\n\t}\n\n\tpublic sliceAndInflate(startOffset: number, endOffset: number, deltaOffset: number): IViewLineTokens {\n\t\treturn new SliceLineTokens(this, startOffset, endOffset, deltaOffset);\n\t}\n\n\tpublic sliceZeroCopy(range: OffsetRange): IViewLineTokens {\n\t\treturn this.sliceAndInflate(range.start, range.endExclusive, 0);\n\t}\n\n\t/**\n\t * @pure\n\t * @param insertTokens Must be sorted by offset.\n\t*/\n\tpublic withInserted(insertTokens: { offset: number; text: string; tokenMetadata: number }[]): LineTokens {\n\t\tif (insertTokens.length === 0) {\n\t\t\treturn this;\n\t\t}\n\n\t\tlet nextOriginalTokenIdx = 0;\n\t\tlet nextInsertTokenIdx = 0;\n\t\tlet text = '';\n\t\tconst newTokens = new Array<number>();\n\n\t\tlet originalEndOffset = 0;\n\t\twhile (true) {\n\t\t\tconst nextOriginalTokenEndOffset = nextOriginalTokenIdx < this._tokensCount ? this._tokens[nextOriginalTokenIdx << 1] : -1;\n\t\t\tconst nextInsertToken = nextInsertTokenIdx < insertTokens.length ? insertTokens[nextInsertTokenIdx] : null;\n\n\t\t\tif (nextOriginalTokenEndOffset !== -1 && (nextInsertToken === null || nextOriginalTokenEndOffset <= nextInsertToken.offset)) {\n\t\t\t\t// original token ends before next insert token\n\t\t\t\ttext += this._text.substring(originalEndOffset, nextOriginalTokenEndOffset);\n\t\t\t\tconst metadata = this._tokens[(nextOriginalTokenIdx << 1) + 1];\n\t\t\t\tnewTokens.push(text.length, metadata);\n\t\t\t\tnextOriginalTokenIdx++;\n\t\t\t\toriginalEndOffset = nextOriginalTokenEndOffset;\n\n\t\t\t} else if (nextInsertToken) {\n\t\t\t\tif (nextInsertToken.offset > originalEndOffset) {\n\t\t\t\t\t// insert token is in the middle of the next token.\n\t\t\t\t\ttext += this._text.substring(originalEndOffset, nextInsertToken.offset);\n\t\t\t\t\tconst metadata = this._tokens[(nextOriginalTokenIdx << 1) + 1];\n\t\t\t\t\tnewTokens.push(text.length, metadata);\n\t\t\t\t\toriginalEndOffset = nextInsertToken.offset;\n\t\t\t\t}\n\n\t\t\t\ttext += nextInsertToken.text;\n\t\t\t\tnewTokens.push(text.length, nextInsertToken.tokenMetadata);\n\t\t\t\tnextInsertTokenIdx++;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn new LineTokens(new Uint32Array(newTokens), text, this.languageIdCodec);\n\t}\n\n\tpublic getTokensInRange(range: OffsetRange): TokenArray {\n\t\tconst builder = new TokenArrayBuilder();\n\n\t\tconst startTokenIndex = this.findTokenIndexAtOffset(range.start);\n\t\tconst endTokenIndex = this.findTokenIndexAtOffset(range.endExclusive);\n\n\t\tfor (let tokenIndex = startTokenIndex; tokenIndex <= endTokenIndex; tokenIndex++) {\n\t\t\tconst tokenRange = new OffsetRange(this.getStartOffset(tokenIndex), this.getEndOffset(tokenIndex));\n\t\t\tconst length = tokenRange.intersectionLength(range);\n\t\t\tif (length > 0) {\n\t\t\t\tbuilder.add(length, this.getMetadata(tokenIndex));\n\t\t\t}\n\t\t}\n\n\t\treturn builder.build();\n\t}\n\n\tpublic getTokenText(tokenIndex: number): string {\n\t\tconst startOffset = this.getStartOffset(tokenIndex);\n\t\tconst endOffset = this.getEndOffset(tokenIndex);\n\t\tconst text = this._text.substring(startOffset, endOffset);\n\t\treturn text;\n\t}\n\n\tpublic forEach(callback: (tokenIndex: number) => void): void {\n\t\tconst tokenCount = this.getCount();\n\t\tfor (let tokenIndex = 0; tokenIndex < tokenCount; tokenIndex++) {\n\t\t\tcallback(tokenIndex);\n\t\t}\n\t}\n\n\ttoString(): string {\n\t\tlet result = '';\n\t\tthis.forEach((i) => {\n\t\t\tresult += `[${this.getTokenText(i)}]{${this.getClassName(i)}}`;\n\t\t});\n\t\treturn result;\n\t}\n}\n\nclass SliceLineTokens implements IViewLineTokens {\n\n\tprivate readonly _source: LineTokens;\n\tprivate readonly _startOffset: number;\n\tprivate readonly _endOffset: number;\n\tprivate readonly _deltaOffset: number;\n\n\tprivate readonly _firstTokenIndex: number;\n\tprivate readonly _tokensCount: number;\n\n\tpublic readonly languageIdCodec: ILanguageIdCodec;\n\n\tconstructor(source: LineTokens, startOffset: number, endOffset: number, deltaOffset: number) {\n\t\tthis._source = source;\n\t\tthis._startOffset = startOffset;\n\t\tthis._endOffset = endOffset;\n\t\tthis._deltaOffset = deltaOffset;\n\t\tthis._firstTokenIndex = source.findTokenIndexAtOffset(startOffset);\n\t\tthis.languageIdCodec = source.languageIdCodec;\n\n\t\tthis._tokensCount = 0;\n\t\tfor (let i = this._firstTokenIndex, len = source.getCount(); i < len; i++) {\n\t\t\tconst tokenStartOffset = source.getStartOffset(i);\n\t\t\tif (tokenStartOffset >= endOffset) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tthis._tokensCount++;\n\t\t}\n\t}\n\n\tpublic getMetadata(tokenIndex: number): number {\n\t\treturn this._source.getMetadata(this._firstTokenIndex + tokenIndex);\n\t}\n\n\tpublic getLanguageId(tokenIndex: number): string {\n\t\treturn this._source.getLanguageId(this._firstTokenIndex + tokenIndex);\n\t}\n\n\tpublic getLineContent(): string {\n\t\treturn this._source.getLineContent().substring(this._startOffset, this._endOffset);\n\t}\n\n\tpublic equals(other: IViewLineTokens): boolean {\n\t\tif (other instanceof SliceLineTokens) {\n\t\t\treturn (\n\t\t\t\tthis._startOffset === other._startOffset\n\t\t\t\t&& this._endOffset === other._endOffset\n\t\t\t\t&& this._deltaOffset === other._deltaOffset\n\t\t\t\t&& this._source.slicedEquals(other._source, this._firstTokenIndex, this._tokensCount)\n\t\t\t);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic getCount(): number {\n\t\treturn this._tokensCount;\n\t}\n\n\tpublic getStandardTokenType(tokenIndex: number): StandardTokenType {\n\t\treturn this._source.getStandardTokenType(this._firstTokenIndex + tokenIndex);\n\t}\n\n\tpublic getForeground(tokenIndex: number): ColorId {\n\t\treturn this._source.getForeground(this._firstTokenIndex + tokenIndex);\n\t}\n\n\tpublic getEndOffset(tokenIndex: number): number {\n\t\tconst tokenEndOffset = this._source.getEndOffset(this._firstTokenIndex + tokenIndex);\n\t\treturn Math.min(this._endOffset, tokenEndOffset) - this._startOffset + this._deltaOffset;\n\t}\n\n\tpublic getClassName(tokenIndex: number): string {\n\t\treturn this._source.getClassName(this._firstTokenIndex + tokenIndex);\n\t}\n\n\tpublic getInlineStyle(tokenIndex: number, colorMap: string[]): string {\n\t\treturn this._source.getInlineStyle(this._firstTokenIndex + tokenIndex, colorMap);\n\t}\n\n\tpublic getPresentation(tokenIndex: number): ITokenPresentation {\n\t\treturn this._source.getPresentation(this._firstTokenIndex + tokenIndex);\n\t}\n\n\tpublic findTokenIndexAtOffset(offset: number): number {\n\t\treturn this._source.findTokenIndexAtOffset(offset + this._startOffset - this._deltaOffset) - this._firstTokenIndex;\n\t}\n\n\tpublic getTokenText(tokenIndex: number): string {\n\t\tconst adjustedTokenIndex = this._firstTokenIndex + tokenIndex;\n\t\tconst tokenStartOffset = this._source.getStartOffset(adjustedTokenIndex);\n\t\tconst tokenEndOffset = this._source.getEndOffset(adjustedTokenIndex);\n\t\tlet text = this._source.getTokenText(adjustedTokenIndex);\n\t\tif (tokenStartOffset < this._startOffset) {\n\t\t\ttext = text.substring(this._startOffset - tokenStartOffset);\n\t\t}\n\t\tif (tokenEndOffset > this._endOffset) {\n\t\t\ttext = text.substring(0, text.length - (tokenEndOffset - this._endOffset));\n\t\t}\n\t\treturn text;\n\t}\n\n\tpublic forEach(callback: (tokenIndex: number) => void): void {\n\t\tfor (let tokenIndex = 0; tokenIndex < this.getCount(); tokenIndex++) {\n\t\t\tcallback(tokenIndex);\n\t\t}\n\t}\n}\n\nexport function getStandardTokenTypeAtPosition(model: ITextModel, position: IPosition): StandardTokenType | undefined {\n\tconst lineNumber = position.lineNumber;\n\tif (!model.tokenization.isCheapToTokenize(lineNumber)) {\n\t\treturn undefined;\n\t}\n\tmodel.tokenization.forceTokenization(lineNumber);\n\tconst lineTokens = model.tokenization.getLineTokens(lineNumber);\n\tconst tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n\tconst tokenType = lineTokens.getStandardTokenType(tokenIndex);\n\treturn tokenType;\n}\n\n\n\n/**\n * This class represents a sequence of tokens.\n * Conceptually, each token has a length and a metadata number.\n * A token array might be used to annotate a string with metadata.\n * Use {@link TokenArrayBuilder} to efficiently create a token array.\n *\n * TODO: Make this class more efficient (e.g. by using a Int32Array).\n*/\nexport class TokenArray {\n\tpublic static fromLineTokens(lineTokens: LineTokens): TokenArray {\n\t\tconst tokenInfo: TokenInfo[] = [];\n\t\tfor (let i = 0; i < lineTokens.getCount(); i++) {\n\t\t\ttokenInfo.push(new TokenInfo(lineTokens.getEndOffset(i) - lineTokens.getStartOffset(i), lineTokens.getMetadata(i)));\n\t\t}\n\t\treturn TokenArray.create(tokenInfo);\n\t}\n\n\tpublic static create(tokenInfo: TokenInfo[]): TokenArray {\n\t\treturn new TokenArray(tokenInfo);\n\t}\n\n\tprivate constructor(\n\t\tprivate readonly _tokenInfo: TokenInfo[]\n\t) { }\n\n\tpublic toLineTokens(lineContent: string, decoder: ILanguageIdCodec): LineTokens {\n\t\treturn LineTokens.createFromTextAndMetadata(this.map((r, t) => ({ text: r.substring(lineContent), metadata: t.metadata })), decoder);\n\t}\n\n\tpublic forEach(cb: (range: OffsetRange, tokenInfo: TokenInfo) => void): void {\n\t\tlet lengthSum = 0;\n\t\tfor (const tokenInfo of this._tokenInfo) {\n\t\t\tconst range = new OffsetRange(lengthSum, lengthSum + tokenInfo.length);\n\t\t\tcb(range, tokenInfo);\n\t\t\tlengthSum += tokenInfo.length;\n\t\t}\n\t}\n\n\tpublic map<T>(cb: (range: OffsetRange, tokenInfo: TokenInfo) => T): T[] {\n\t\tconst result: T[] = [];\n\t\tlet lengthSum = 0;\n\t\tfor (const tokenInfo of this._tokenInfo) {\n\t\t\tconst range = new OffsetRange(lengthSum, lengthSum + tokenInfo.length);\n\t\t\tresult.push(cb(range, tokenInfo));\n\t\t\tlengthSum += tokenInfo.length;\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic slice(range: OffsetRange): TokenArray {\n\t\tconst result: TokenInfo[] = [];\n\t\tlet lengthSum = 0;\n\t\tfor (const tokenInfo of this._tokenInfo) {\n\t\t\tconst tokenStart = lengthSum;\n\t\t\tconst tokenEndEx = tokenStart + tokenInfo.length;\n\t\t\tif (tokenEndEx > range.start) {\n\t\t\t\tif (tokenStart >= range.endExclusive) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tconst deltaBefore = Math.max(0, range.start - tokenStart);\n\t\t\t\tconst deltaAfter = Math.max(0, tokenEndEx - range.endExclusive);\n\n\t\t\t\tresult.push(new TokenInfo(tokenInfo.length - deltaBefore - deltaAfter, tokenInfo.metadata));\n\t\t\t}\n\n\t\t\tlengthSum += tokenInfo.length;\n\t\t}\n\t\treturn TokenArray.create(result);\n\t}\n}\n\nexport type ITokenMetadata = number;\n\nexport class TokenInfo {\n\tconstructor(\n\t\tpublic readonly length: number,\n\t\tpublic readonly metadata: ITokenMetadata\n\t) { }\n}\n/**\n * TODO: Make this class more efficient (e.g. by using a Int32Array).\n*/\n\nexport class TokenArrayBuilder {\n\tprivate readonly _tokens: TokenInfo[] = [];\n\n\tpublic add(length: number, metadata: ITokenMetadata): void {\n\t\tthis._tokens.push(new TokenInfo(length, metadata));\n\t}\n\n\tpublic build(): TokenArray {\n\t\treturn TokenArray.create(this._tokens);\n\t}\n}\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1459, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/monaco-editor/esm/vs/editor/common/tokens/contiguousMultilineTokens.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/tokens/file%3A/mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/tokens/contiguousMultilineTokens.ts","file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/tokens/vs/editor/common/tokens/contiguousMultilineTokens.ts"],"sourcesContent":["\n\n/**\n * Represents contiguous tokens over a contiguous range of lines.\n */\nexport class ContiguousMultilineTokens {\n\n\t/**\n\t * The start line number for this block of tokens.\n\t */\n\tprivate _startLineNumber: number;\n\n\t/**\n\t * The tokens are stored in a binary format. There is an element for each line,\n\t * so `tokens[index]` contains all tokens on line `startLineNumber + index`.\n\t *\n\t * On a specific line, each token occupies two array indices. For token i:\n\t *  - at offset 2*i => endOffset\n\t *  - at offset 2*i + 1 => metadata\n\t *\n\t */\n\tprivate _tokens: (Uint32Array | ArrayBuffer | null)[];\n\n\t/**\n\t * (Inclusive) start line number for these tokens.\n\t */\n\tpublic get startLineNumber(): number {\n\t\treturn this._startLineNumber;\n\t}\n\n\t/**\n\t * (Inclusive) end line number for these tokens.\n\t */\n\tpublic get endLineNumber(): number {\n\t\treturn this._startLineNumber + this._tokens.length - 1;\n\t}\n\n\tconstructor(startLineNumber: number, tokens: Uint32Array[]) {\n\t\tthis._startLineNumber = startLineNumber;\n\t\tthis._tokens = tokens;\n\t}\n\n\t/**\n\t * @see {@link _tokens}\n\t */\n\tpublic getLineTokens(lineNumber: number): Uint32Array | ArrayBuffer | null {\n\t\treturn this._tokens[lineNumber - this._startLineNumber];\n\t}\n\n\tpublic appendLineTokens(lineTokens: Uint32Array): void {\n\t\tthis._tokens.push(lineTokens);\n\t}\n}\n","\n\n/**\n * Represents contiguous tokens over a contiguous range of lines.\n */\nexport class ContiguousMultilineTokens {\n\n\t/**\n\t * The start line number for this block of tokens.\n\t */\n\tprivate _startLineNumber: number;\n\n\t/**\n\t * The tokens are stored in a binary format. There is an element for each line,\n\t * so `tokens[index]` contains all tokens on line `startLineNumber + index`.\n\t *\n\t * On a specific line, each token occupies two array indices. For token i:\n\t *  - at offset 2*i => endOffset\n\t *  - at offset 2*i + 1 => metadata\n\t *\n\t */\n\tprivate _tokens: (Uint32Array | ArrayBuffer | null)[];\n\n\t/**\n\t * (Inclusive) start line number for these tokens.\n\t */\n\tpublic get startLineNumber(): number {\n\t\treturn this._startLineNumber;\n\t}\n\n\t/**\n\t * (Inclusive) end line number for these tokens.\n\t */\n\tpublic get endLineNumber(): number {\n\t\treturn this._startLineNumber + this._tokens.length - 1;\n\t}\n\n\tconstructor(startLineNumber: number, tokens: Uint32Array[]) {\n\t\tthis._startLineNumber = startLineNumber;\n\t\tthis._tokens = tokens;\n\t}\n\n\t/**\n\t * @see {@link _tokens}\n\t */\n\tpublic getLineTokens(lineNumber: number): Uint32Array | ArrayBuffer | null {\n\t\treturn this._tokens[lineNumber - this._startLineNumber];\n\t}\n\n\tpublic appendLineTokens(lineTokens: Uint32Array): void {\n\t\tthis._tokens.push(lineTokens);\n\t}\n}\n"],"names":[],"mappings":"AAEA;;GAEG;;;;AACG,MAAO,yBAAyB;IAkBrC;;OAEG,CACH,IAAW,eAAe,GAAA;QACzB,OAAO,IAAI,CAAC,gBAAgB,CAAC;IAC9B,CAAC;IAED;;OAEG,CACH,IAAW,aAAa,GAAA;QACvB,OAAO,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;IACxD,CAAC;IAED,YAAY,eAAuB,EAAE,MAAqB,CAAA;QACzD,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;QACxC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IACvB,CAAC;IAED;;OAEG,CACI,aAAa,CAAC,UAAkB,EAAA;QACtC,OAAO,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,CAAC;IACzD,CAAC;IAEM,gBAAgB,CAAC,UAAuB,EAAA;QAC9C,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC/B,CAAC;CACD","debugId":null}},
    {"offset": {"line": 1493, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/monaco-editor/esm/vs/editor/common/tokens/contiguousMultilineTokensBuilder.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/tokens/file%3A/mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/tokens/contiguousMultilineTokensBuilder.ts","file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/tokens/vs/editor/common/tokens/contiguousMultilineTokensBuilder.ts"],"sourcesContent":["\nimport { ContiguousMultilineTokens } from './contiguousMultilineTokens.js';\n\nexport class ContiguousMultilineTokensBuilder {\n\n\tprivate readonly _tokens: ContiguousMultilineTokens[];\n\n\tconstructor() {\n\t\tthis._tokens = [];\n\t}\n\n\tpublic add(lineNumber: number, lineTokens: Uint32Array): void {\n\t\tif (this._tokens.length > 0) {\n\t\t\tconst last = this._tokens[this._tokens.length - 1];\n\t\t\tif (last.endLineNumber + 1 === lineNumber) {\n\t\t\t\t// append\n\t\t\t\tlast.appendLineTokens(lineTokens);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tthis._tokens.push(new ContiguousMultilineTokens(lineNumber, [lineTokens]));\n\t}\n\n\tpublic finalize(): ContiguousMultilineTokens[] {\n\t\treturn this._tokens;\n\t}\n}\n","\nimport { ContiguousMultilineTokens } from './contiguousMultilineTokens.js';\n\nexport class ContiguousMultilineTokensBuilder {\n\n\tprivate readonly _tokens: ContiguousMultilineTokens[];\n\n\tconstructor() {\n\t\tthis._tokens = [];\n\t}\n\n\tpublic add(lineNumber: number, lineTokens: Uint32Array): void {\n\t\tif (this._tokens.length > 0) {\n\t\t\tconst last = this._tokens[this._tokens.length - 1];\n\t\t\tif (last.endLineNumber + 1 === lineNumber) {\n\t\t\t\t// append\n\t\t\t\tlast.appendLineTokens(lineTokens);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tthis._tokens.push(new ContiguousMultilineTokens(lineNumber, [lineTokens]));\n\t}\n\n\tpublic finalize(): ContiguousMultilineTokens[] {\n\t\treturn this._tokens;\n\t}\n}\n"],"names":[],"mappings":";;;;AACA,OAAO,EAAE,yBAAyB,EAAE,MAAM,gCAAgC,CAAC;;AAErE,MAAO,gCAAgC;IAI5C,aAAA;QACC,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;IACnB,CAAC;IAEM,GAAG,CAAC,UAAkB,EAAE,UAAuB,EAAA;QACrD,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC7B,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YACnD,IAAI,IAAI,CAAC,aAAa,GAAG,CAAC,KAAK,UAAU,EAAE,CAAC;gBAC3C,SAAS;gBACT,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;gBAClC,OAAO;YACR,CAAC;QACF,CAAC;QACD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,qOAAyB,CAAC,UAAU,EAAE;YAAC,UAAU;SAAC,CAAC,CAAC,CAAC;IAC5E,CAAC;IAEM,QAAQ,GAAA;QACd,OAAO,IAAI,CAAC,OAAO,CAAC;IACrB,CAAC;CACD","debugId":null}},
    {"offset": {"line": 1524, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/monaco-editor/esm/vs/editor/common/tokens/sparseTokensStore.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/tokens/file%3A/mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/tokens/sparseTokensStore.ts","file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/tokens/vs/editor/common/tokens/sparseTokensStore.ts"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as arrays from '../../../base/common/arrays.js';\nimport { IRange, Range } from '../core/range.js';\nimport { LineTokens } from './lineTokens.js';\nimport { SparseMultilineTokens } from './sparseMultilineTokens.js';\nimport { ILanguageIdCodec } from '../languages.js';\nimport { MetadataConsts } from '../encodedTokenAttributes.js';\nimport { ITextModel } from '../model.js';\n\n/**\n * Represents sparse tokens in a text model.\n */\nexport class SparseTokensStore {\n\n\tprivate _pieces: SparseMultilineTokens[];\n\tprivate _isComplete: boolean;\n\tprivate readonly _languageIdCodec: ILanguageIdCodec;\n\n\tconstructor(languageIdCodec: ILanguageIdCodec) {\n\t\tthis._pieces = [];\n\t\tthis._isComplete = false;\n\t\tthis._languageIdCodec = languageIdCodec;\n\t}\n\n\tpublic flush(): void {\n\t\tthis._pieces = [];\n\t\tthis._isComplete = false;\n\t}\n\n\tpublic isEmpty(): boolean {\n\t\treturn (this._pieces.length === 0);\n\t}\n\n\tpublic set(pieces: SparseMultilineTokens[] | null, isComplete: boolean, textModel: ITextModel | undefined = undefined): void {\n\t\tthis._pieces = pieces || [];\n\t\tthis._isComplete = isComplete;\n\n\t\tif (textModel) {\n\t\t\tfor (const p of this._pieces) {\n\t\t\t\tp.reportIfInvalid(textModel);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic setPartial(_range: Range, pieces: SparseMultilineTokens[]): Range {\n\t\t// console.log(`setPartial ${_range} ${pieces.map(p => p.toString()).join(', ')}`);\n\n\t\tlet range = _range;\n\t\tif (pieces.length > 0) {\n\t\t\tconst _firstRange = pieces[0].getRange();\n\t\t\tconst _lastRange = pieces[pieces.length - 1].getRange();\n\t\t\tif (!_firstRange || !_lastRange) {\n\t\t\t\treturn _range;\n\t\t\t}\n\t\t\trange = _range.plusRange(_firstRange).plusRange(_lastRange);\n\t\t}\n\n\t\tlet insertPosition: { index: number } | null = null;\n\t\tfor (let i = 0, len = this._pieces.length; i < len; i++) {\n\t\t\tconst piece = this._pieces[i];\n\t\t\tif (piece.endLineNumber < range.startLineNumber) {\n\t\t\t\t// this piece is before the range\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (piece.startLineNumber > range.endLineNumber) {\n\t\t\t\t// this piece is after the range, so mark the spot before this piece\n\t\t\t\t// as a good insertion position and stop looping\n\t\t\t\tinsertPosition = insertPosition || { index: i };\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// this piece might intersect with the range\n\t\t\tpiece.removeTokens(range);\n\n\t\t\tif (piece.isEmpty()) {\n\t\t\t\t// remove the piece if it became empty\n\t\t\t\tthis._pieces.splice(i, 1);\n\t\t\t\ti--;\n\t\t\t\tlen--;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (piece.endLineNumber < range.startLineNumber) {\n\t\t\t\t// after removal, this piece is before the range\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (piece.startLineNumber > range.endLineNumber) {\n\t\t\t\t// after removal, this piece is after the range\n\t\t\t\tinsertPosition = insertPosition || { index: i };\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// after removal, this piece contains the range\n\t\t\tconst [a, b] = piece.split(range);\n\t\t\tif (a.isEmpty()) {\n\t\t\t\t// this piece is actually after the range\n\t\t\t\tinsertPosition = insertPosition || { index: i };\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (b.isEmpty()) {\n\t\t\t\t// this piece is actually before the range\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthis._pieces.splice(i, 1, a, b);\n\t\t\ti++;\n\t\t\tlen++;\n\n\t\t\tinsertPosition = insertPosition || { index: i };\n\t\t}\n\n\t\tinsertPosition = insertPosition || { index: this._pieces.length };\n\n\t\tif (pieces.length > 0) {\n\t\t\tthis._pieces = arrays.arrayInsert(this._pieces, insertPosition.index, pieces);\n\t\t}\n\n\t\t// console.log(`I HAVE ${this._pieces.length} pieces`);\n\t\t// console.log(`${this._pieces.map(p => p.toString()).join('\\n')}`);\n\n\t\treturn range;\n\t}\n\n\tpublic isComplete(): boolean {\n\t\treturn this._isComplete;\n\t}\n\n\tpublic addSparseTokens(lineNumber: number, aTokens: LineTokens): LineTokens {\n\t\tif (aTokens.getTextLength() === 0) {\n\t\t\t// Don't do anything for empty lines\n\t\t\treturn aTokens;\n\t\t}\n\n\t\tconst pieces = this._pieces;\n\n\t\tif (pieces.length === 0) {\n\t\t\treturn aTokens;\n\t\t}\n\n\t\tconst pieceIndex = SparseTokensStore._findFirstPieceWithLine(pieces, lineNumber);\n\t\tconst bTokens = pieces[pieceIndex].getLineTokens(lineNumber);\n\n\t\tif (!bTokens) {\n\t\t\treturn aTokens;\n\t\t}\n\n\t\tconst aLen = aTokens.getCount();\n\t\tconst bLen = bTokens.getCount();\n\n\t\tlet aIndex = 0;\n\t\tconst result: number[] = [];\n\t\tlet resultLen = 0;\n\t\tlet lastEndOffset = 0;\n\n\t\tconst emitToken = (endOffset: number, metadata: number) => {\n\t\t\tif (endOffset === lastEndOffset) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlastEndOffset = endOffset;\n\t\t\tresult[resultLen++] = endOffset;\n\t\t\tresult[resultLen++] = metadata;\n\t\t};\n\n\t\tfor (let bIndex = 0; bIndex < bLen; bIndex++) {\n\t\t\t// bTokens is not validated yet, but aTokens is. We want to make sure that the LineTokens we return\n\t\t\t// are valid, so we clamp the ranges to ensure that.\n\t\t\tconst bStartCharacter = Math.min(bTokens.getStartCharacter(bIndex), aTokens.getTextLength());\n\t\t\tconst bEndCharacter = Math.min(bTokens.getEndCharacter(bIndex), aTokens.getTextLength());\n\t\t\tconst bMetadata = bTokens.getMetadata(bIndex);\n\n\t\t\tconst bMask = (\n\t\t\t\t((bMetadata & MetadataConsts.SEMANTIC_USE_ITALIC) ? MetadataConsts.ITALIC_MASK : 0)\n\t\t\t\t| ((bMetadata & MetadataConsts.SEMANTIC_USE_BOLD) ? MetadataConsts.BOLD_MASK : 0)\n\t\t\t\t| ((bMetadata & MetadataConsts.SEMANTIC_USE_UNDERLINE) ? MetadataConsts.UNDERLINE_MASK : 0)\n\t\t\t\t| ((bMetadata & MetadataConsts.SEMANTIC_USE_STRIKETHROUGH) ? MetadataConsts.STRIKETHROUGH_MASK : 0)\n\t\t\t\t| ((bMetadata & MetadataConsts.SEMANTIC_USE_FOREGROUND) ? MetadataConsts.FOREGROUND_MASK : 0)\n\t\t\t\t| ((bMetadata & MetadataConsts.SEMANTIC_USE_BACKGROUND) ? MetadataConsts.BACKGROUND_MASK : 0)\n\t\t\t) >>> 0;\n\t\t\tconst aMask = (~bMask) >>> 0;\n\n\t\t\t// push any token from `a` that is before `b`\n\t\t\twhile (aIndex < aLen && aTokens.getEndOffset(aIndex) <= bStartCharacter) {\n\t\t\t\temitToken(aTokens.getEndOffset(aIndex), aTokens.getMetadata(aIndex));\n\t\t\t\taIndex++;\n\t\t\t}\n\n\t\t\t// push the token from `a` if it intersects the token from `b`\n\t\t\tif (aIndex < aLen && aTokens.getStartOffset(aIndex) < bStartCharacter) {\n\t\t\t\temitToken(bStartCharacter, aTokens.getMetadata(aIndex));\n\t\t\t}\n\n\t\t\t// skip any tokens from `a` that are contained inside `b`\n\t\t\twhile (aIndex < aLen && aTokens.getEndOffset(aIndex) < bEndCharacter) {\n\t\t\t\temitToken(aTokens.getEndOffset(aIndex), (aTokens.getMetadata(aIndex) & aMask) | (bMetadata & bMask));\n\t\t\t\taIndex++;\n\t\t\t}\n\n\t\t\tif (aIndex < aLen) {\n\t\t\t\temitToken(bEndCharacter, (aTokens.getMetadata(aIndex) & aMask) | (bMetadata & bMask));\n\t\t\t\tif (aTokens.getEndOffset(aIndex) === bEndCharacter) {\n\t\t\t\t\t// `a` ends exactly at the same spot as `b`!\n\t\t\t\t\taIndex++;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst aMergeIndex = Math.min(Math.max(0, aIndex - 1), aLen - 1);\n\n\t\t\t\t// push the token from `b`\n\t\t\t\temitToken(bEndCharacter, (aTokens.getMetadata(aMergeIndex) & aMask) | (bMetadata & bMask));\n\t\t\t}\n\t\t}\n\n\t\t// push the remaining tokens from `a`\n\t\twhile (aIndex < aLen) {\n\t\t\temitToken(aTokens.getEndOffset(aIndex), aTokens.getMetadata(aIndex));\n\t\t\taIndex++;\n\t\t}\n\n\t\treturn new LineTokens(new Uint32Array(result), aTokens.getLineContent(), this._languageIdCodec);\n\t}\n\n\tprivate static _findFirstPieceWithLine(pieces: SparseMultilineTokens[], lineNumber: number): number {\n\t\tlet low = 0;\n\t\tlet high = pieces.length - 1;\n\n\t\twhile (low < high) {\n\t\t\tlet mid = low + Math.floor((high - low) / 2);\n\n\t\t\tif (pieces[mid].endLineNumber < lineNumber) {\n\t\t\t\tlow = mid + 1;\n\t\t\t} else if (pieces[mid].startLineNumber > lineNumber) {\n\t\t\t\thigh = mid - 1;\n\t\t\t} else {\n\t\t\t\twhile (mid > low && pieces[mid - 1].startLineNumber <= lineNumber && lineNumber <= pieces[mid - 1].endLineNumber) {\n\t\t\t\t\tmid--;\n\t\t\t\t}\n\t\t\t\treturn mid;\n\t\t\t}\n\t\t}\n\n\t\treturn low;\n\t}\n\n\tpublic acceptEdit(range: IRange, eolCount: number, firstLineLength: number, lastLineLength: number, firstCharCode: number): void {\n\t\tfor (const piece of this._pieces) {\n\t\t\tpiece.acceptEdit(range, eolCount, firstLineLength, lastLineLength, firstCharCode);\n\t\t}\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as arrays from '../../../base/common/arrays.js';\nimport { IRange, Range } from '../core/range.js';\nimport { LineTokens } from './lineTokens.js';\nimport { SparseMultilineTokens } from './sparseMultilineTokens.js';\nimport { ILanguageIdCodec } from '../languages.js';\nimport { MetadataConsts } from '../encodedTokenAttributes.js';\nimport { ITextModel } from '../model.js';\n\n/**\n * Represents sparse tokens in a text model.\n */\nexport class SparseTokensStore {\n\n\tprivate _pieces: SparseMultilineTokens[];\n\tprivate _isComplete: boolean;\n\tprivate readonly _languageIdCodec: ILanguageIdCodec;\n\n\tconstructor(languageIdCodec: ILanguageIdCodec) {\n\t\tthis._pieces = [];\n\t\tthis._isComplete = false;\n\t\tthis._languageIdCodec = languageIdCodec;\n\t}\n\n\tpublic flush(): void {\n\t\tthis._pieces = [];\n\t\tthis._isComplete = false;\n\t}\n\n\tpublic isEmpty(): boolean {\n\t\treturn (this._pieces.length === 0);\n\t}\n\n\tpublic set(pieces: SparseMultilineTokens[] | null, isComplete: boolean, textModel: ITextModel | undefined = undefined): void {\n\t\tthis._pieces = pieces || [];\n\t\tthis._isComplete = isComplete;\n\n\t\tif (textModel) {\n\t\t\tfor (const p of this._pieces) {\n\t\t\t\tp.reportIfInvalid(textModel);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic setPartial(_range: Range, pieces: SparseMultilineTokens[]): Range {\n\t\t// console.log(`setPartial ${_range} ${pieces.map(p => p.toString()).join(', ')}`);\n\n\t\tlet range = _range;\n\t\tif (pieces.length > 0) {\n\t\t\tconst _firstRange = pieces[0].getRange();\n\t\t\tconst _lastRange = pieces[pieces.length - 1].getRange();\n\t\t\tif (!_firstRange || !_lastRange) {\n\t\t\t\treturn _range;\n\t\t\t}\n\t\t\trange = _range.plusRange(_firstRange).plusRange(_lastRange);\n\t\t}\n\n\t\tlet insertPosition: { index: number } | null = null;\n\t\tfor (let i = 0, len = this._pieces.length; i < len; i++) {\n\t\t\tconst piece = this._pieces[i];\n\t\t\tif (piece.endLineNumber < range.startLineNumber) {\n\t\t\t\t// this piece is before the range\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (piece.startLineNumber > range.endLineNumber) {\n\t\t\t\t// this piece is after the range, so mark the spot before this piece\n\t\t\t\t// as a good insertion position and stop looping\n\t\t\t\tinsertPosition = insertPosition || { index: i };\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// this piece might intersect with the range\n\t\t\tpiece.removeTokens(range);\n\n\t\t\tif (piece.isEmpty()) {\n\t\t\t\t// remove the piece if it became empty\n\t\t\t\tthis._pieces.splice(i, 1);\n\t\t\t\ti--;\n\t\t\t\tlen--;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (piece.endLineNumber < range.startLineNumber) {\n\t\t\t\t// after removal, this piece is before the range\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (piece.startLineNumber > range.endLineNumber) {\n\t\t\t\t// after removal, this piece is after the range\n\t\t\t\tinsertPosition = insertPosition || { index: i };\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// after removal, this piece contains the range\n\t\t\tconst [a, b] = piece.split(range);\n\t\t\tif (a.isEmpty()) {\n\t\t\t\t// this piece is actually after the range\n\t\t\t\tinsertPosition = insertPosition || { index: i };\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (b.isEmpty()) {\n\t\t\t\t// this piece is actually before the range\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthis._pieces.splice(i, 1, a, b);\n\t\t\ti++;\n\t\t\tlen++;\n\n\t\t\tinsertPosition = insertPosition || { index: i };\n\t\t}\n\n\t\tinsertPosition = insertPosition || { index: this._pieces.length };\n\n\t\tif (pieces.length > 0) {\n\t\t\tthis._pieces = arrays.arrayInsert(this._pieces, insertPosition.index, pieces);\n\t\t}\n\n\t\t// console.log(`I HAVE ${this._pieces.length} pieces`);\n\t\t// console.log(`${this._pieces.map(p => p.toString()).join('\\n')}`);\n\n\t\treturn range;\n\t}\n\n\tpublic isComplete(): boolean {\n\t\treturn this._isComplete;\n\t}\n\n\tpublic addSparseTokens(lineNumber: number, aTokens: LineTokens): LineTokens {\n\t\tif (aTokens.getTextLength() === 0) {\n\t\t\t// Don't do anything for empty lines\n\t\t\treturn aTokens;\n\t\t}\n\n\t\tconst pieces = this._pieces;\n\n\t\tif (pieces.length === 0) {\n\t\t\treturn aTokens;\n\t\t}\n\n\t\tconst pieceIndex = SparseTokensStore._findFirstPieceWithLine(pieces, lineNumber);\n\t\tconst bTokens = pieces[pieceIndex].getLineTokens(lineNumber);\n\n\t\tif (!bTokens) {\n\t\t\treturn aTokens;\n\t\t}\n\n\t\tconst aLen = aTokens.getCount();\n\t\tconst bLen = bTokens.getCount();\n\n\t\tlet aIndex = 0;\n\t\tconst result: number[] = [];\n\t\tlet resultLen = 0;\n\t\tlet lastEndOffset = 0;\n\n\t\tconst emitToken = (endOffset: number, metadata: number) => {\n\t\t\tif (endOffset === lastEndOffset) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlastEndOffset = endOffset;\n\t\t\tresult[resultLen++] = endOffset;\n\t\t\tresult[resultLen++] = metadata;\n\t\t};\n\n\t\tfor (let bIndex = 0; bIndex < bLen; bIndex++) {\n\t\t\t// bTokens is not validated yet, but aTokens is. We want to make sure that the LineTokens we return\n\t\t\t// are valid, so we clamp the ranges to ensure that.\n\t\t\tconst bStartCharacter = Math.min(bTokens.getStartCharacter(bIndex), aTokens.getTextLength());\n\t\t\tconst bEndCharacter = Math.min(bTokens.getEndCharacter(bIndex), aTokens.getTextLength());\n\t\t\tconst bMetadata = bTokens.getMetadata(bIndex);\n\n\t\t\tconst bMask = (\n\t\t\t\t((bMetadata & MetadataConsts.SEMANTIC_USE_ITALIC) ? MetadataConsts.ITALIC_MASK : 0)\n\t\t\t\t| ((bMetadata & MetadataConsts.SEMANTIC_USE_BOLD) ? MetadataConsts.BOLD_MASK : 0)\n\t\t\t\t| ((bMetadata & MetadataConsts.SEMANTIC_USE_UNDERLINE) ? MetadataConsts.UNDERLINE_MASK : 0)\n\t\t\t\t| ((bMetadata & MetadataConsts.SEMANTIC_USE_STRIKETHROUGH) ? MetadataConsts.STRIKETHROUGH_MASK : 0)\n\t\t\t\t| ((bMetadata & MetadataConsts.SEMANTIC_USE_FOREGROUND) ? MetadataConsts.FOREGROUND_MASK : 0)\n\t\t\t\t| ((bMetadata & MetadataConsts.SEMANTIC_USE_BACKGROUND) ? MetadataConsts.BACKGROUND_MASK : 0)\n\t\t\t) >>> 0;\n\t\t\tconst aMask = (~bMask) >>> 0;\n\n\t\t\t// push any token from `a` that is before `b`\n\t\t\twhile (aIndex < aLen && aTokens.getEndOffset(aIndex) <= bStartCharacter) {\n\t\t\t\temitToken(aTokens.getEndOffset(aIndex), aTokens.getMetadata(aIndex));\n\t\t\t\taIndex++;\n\t\t\t}\n\n\t\t\t// push the token from `a` if it intersects the token from `b`\n\t\t\tif (aIndex < aLen && aTokens.getStartOffset(aIndex) < bStartCharacter) {\n\t\t\t\temitToken(bStartCharacter, aTokens.getMetadata(aIndex));\n\t\t\t}\n\n\t\t\t// skip any tokens from `a` that are contained inside `b`\n\t\t\twhile (aIndex < aLen && aTokens.getEndOffset(aIndex) < bEndCharacter) {\n\t\t\t\temitToken(aTokens.getEndOffset(aIndex), (aTokens.getMetadata(aIndex) & aMask) | (bMetadata & bMask));\n\t\t\t\taIndex++;\n\t\t\t}\n\n\t\t\tif (aIndex < aLen) {\n\t\t\t\temitToken(bEndCharacter, (aTokens.getMetadata(aIndex) & aMask) | (bMetadata & bMask));\n\t\t\t\tif (aTokens.getEndOffset(aIndex) === bEndCharacter) {\n\t\t\t\t\t// `a` ends exactly at the same spot as `b`!\n\t\t\t\t\taIndex++;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst aMergeIndex = Math.min(Math.max(0, aIndex - 1), aLen - 1);\n\n\t\t\t\t// push the token from `b`\n\t\t\t\temitToken(bEndCharacter, (aTokens.getMetadata(aMergeIndex) & aMask) | (bMetadata & bMask));\n\t\t\t}\n\t\t}\n\n\t\t// push the remaining tokens from `a`\n\t\twhile (aIndex < aLen) {\n\t\t\temitToken(aTokens.getEndOffset(aIndex), aTokens.getMetadata(aIndex));\n\t\t\taIndex++;\n\t\t}\n\n\t\treturn new LineTokens(new Uint32Array(result), aTokens.getLineContent(), this._languageIdCodec);\n\t}\n\n\tprivate static _findFirstPieceWithLine(pieces: SparseMultilineTokens[], lineNumber: number): number {\n\t\tlet low = 0;\n\t\tlet high = pieces.length - 1;\n\n\t\twhile (low < high) {\n\t\t\tlet mid = low + Math.floor((high - low) / 2);\n\n\t\t\tif (pieces[mid].endLineNumber < lineNumber) {\n\t\t\t\tlow = mid + 1;\n\t\t\t} else if (pieces[mid].startLineNumber > lineNumber) {\n\t\t\t\thigh = mid - 1;\n\t\t\t} else {\n\t\t\t\twhile (mid > low && pieces[mid - 1].startLineNumber <= lineNumber && lineNumber <= pieces[mid - 1].endLineNumber) {\n\t\t\t\t\tmid--;\n\t\t\t\t}\n\t\t\t\treturn mid;\n\t\t\t}\n\t\t}\n\n\t\treturn low;\n\t}\n\n\tpublic acceptEdit(range: IRange, eolCount: number, firstLineLength: number, lastLineLength: number, firstCharCode: number): void {\n\t\tfor (const piece of this._pieces) {\n\t\t\tpiece.acceptEdit(range, eolCount, firstLineLength, lastLineLength, firstCharCode);\n\t\t}\n\t}\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1730, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/monaco-editor/esm/vs/editor/common/tokens/contiguousTokensEditing.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/tokens/file%3A/mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/tokens/contiguousTokensEditing.ts","file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/tokens/vs/editor/common/tokens/contiguousTokensEditing.ts"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { LineTokens } from './lineTokens.js';\n\nexport const EMPTY_LINE_TOKENS = (new Uint32Array(0)).buffer;\n\nexport class ContiguousTokensEditing {\n\n\tpublic static deleteBeginning(lineTokens: Uint32Array | ArrayBuffer | null, toChIndex: number): Uint32Array | ArrayBuffer | null {\n\t\tif (lineTokens === null || lineTokens === EMPTY_LINE_TOKENS) {\n\t\t\treturn lineTokens;\n\t\t}\n\t\treturn ContiguousTokensEditing.delete(lineTokens, 0, toChIndex);\n\t}\n\n\tpublic static deleteEnding(lineTokens: Uint32Array | ArrayBuffer | null, fromChIndex: number): Uint32Array | ArrayBuffer | null {\n\t\tif (lineTokens === null || lineTokens === EMPTY_LINE_TOKENS) {\n\t\t\treturn lineTokens;\n\t\t}\n\n\t\tconst tokens = toUint32Array(lineTokens);\n\t\tconst lineTextLength = tokens[tokens.length - 2];\n\t\treturn ContiguousTokensEditing.delete(lineTokens, fromChIndex, lineTextLength);\n\t}\n\n\tpublic static delete(lineTokens: Uint32Array | ArrayBuffer | null, fromChIndex: number, toChIndex: number): Uint32Array | ArrayBuffer | null {\n\t\tif (lineTokens === null || lineTokens === EMPTY_LINE_TOKENS || fromChIndex === toChIndex) {\n\t\t\treturn lineTokens;\n\t\t}\n\n\t\tconst tokens = toUint32Array(lineTokens);\n\t\tconst tokensCount = (tokens.length >>> 1);\n\n\t\t// special case: deleting everything\n\t\tif (fromChIndex === 0 && tokens[tokens.length - 2] === toChIndex) {\n\t\t\treturn EMPTY_LINE_TOKENS;\n\t\t}\n\n\t\tconst fromTokenIndex = LineTokens.findIndexInTokensArray(tokens, fromChIndex);\n\t\tconst fromTokenStartOffset = (fromTokenIndex > 0 ? tokens[(fromTokenIndex - 1) << 1] : 0);\n\t\tconst fromTokenEndOffset = tokens[fromTokenIndex << 1];\n\n\t\tif (toChIndex < fromTokenEndOffset) {\n\t\t\t// the delete range is inside a single token\n\t\t\tconst delta = (toChIndex - fromChIndex);\n\t\t\tfor (let i = fromTokenIndex; i < tokensCount; i++) {\n\t\t\t\ttokens[i << 1] -= delta;\n\t\t\t}\n\t\t\treturn lineTokens;\n\t\t}\n\n\t\tlet dest: number;\n\t\tlet lastEnd: number;\n\t\tif (fromTokenStartOffset !== fromChIndex) {\n\t\t\ttokens[fromTokenIndex << 1] = fromChIndex;\n\t\t\tdest = ((fromTokenIndex + 1) << 1);\n\t\t\tlastEnd = fromChIndex;\n\t\t} else {\n\t\t\tdest = (fromTokenIndex << 1);\n\t\t\tlastEnd = fromTokenStartOffset;\n\t\t}\n\n\t\tconst delta = (toChIndex - fromChIndex);\n\t\tfor (let tokenIndex = fromTokenIndex + 1; tokenIndex < tokensCount; tokenIndex++) {\n\t\t\tconst tokenEndOffset = tokens[tokenIndex << 1] - delta;\n\t\t\tif (tokenEndOffset > lastEnd) {\n\t\t\t\ttokens[dest++] = tokenEndOffset;\n\t\t\t\ttokens[dest++] = tokens[(tokenIndex << 1) + 1];\n\t\t\t\tlastEnd = tokenEndOffset;\n\t\t\t}\n\t\t}\n\n\t\tif (dest === tokens.length) {\n\t\t\t// nothing to trim\n\t\t\treturn lineTokens;\n\t\t}\n\n\t\tconst tmp = new Uint32Array(dest);\n\t\ttmp.set(tokens.subarray(0, dest), 0);\n\t\treturn tmp.buffer;\n\t}\n\n\tpublic static append(lineTokens: Uint32Array | ArrayBuffer | null, _otherTokens: Uint32Array | ArrayBuffer | null): Uint32Array | ArrayBuffer | null {\n\t\tif (_otherTokens === EMPTY_LINE_TOKENS) {\n\t\t\treturn lineTokens;\n\t\t}\n\t\tif (lineTokens === EMPTY_LINE_TOKENS) {\n\t\t\treturn _otherTokens;\n\t\t}\n\t\tif (lineTokens === null) {\n\t\t\treturn lineTokens;\n\t\t}\n\t\tif (_otherTokens === null) {\n\t\t\t// cannot determine combined line length...\n\t\t\treturn null;\n\t\t}\n\t\tconst myTokens = toUint32Array(lineTokens);\n\t\tconst otherTokens = toUint32Array(_otherTokens);\n\t\tconst otherTokensCount = (otherTokens.length >>> 1);\n\n\t\tconst result = new Uint32Array(myTokens.length + otherTokens.length);\n\t\tresult.set(myTokens, 0);\n\t\tlet dest = myTokens.length;\n\t\tconst delta = myTokens[myTokens.length - 2];\n\t\tfor (let i = 0; i < otherTokensCount; i++) {\n\t\t\tresult[dest++] = otherTokens[(i << 1)] + delta;\n\t\t\tresult[dest++] = otherTokens[(i << 1) + 1];\n\t\t}\n\t\treturn result.buffer;\n\t}\n\n\tpublic static insert(lineTokens: Uint32Array | ArrayBuffer | null, chIndex: number, textLength: number): Uint32Array | ArrayBuffer | null {\n\t\tif (lineTokens === null || lineTokens === EMPTY_LINE_TOKENS) {\n\t\t\t// nothing to do\n\t\t\treturn lineTokens;\n\t\t}\n\n\t\tconst tokens = toUint32Array(lineTokens);\n\t\tconst tokensCount = (tokens.length >>> 1);\n\n\t\tlet fromTokenIndex = LineTokens.findIndexInTokensArray(tokens, chIndex);\n\t\tif (fromTokenIndex > 0) {\n\t\t\tconst fromTokenStartOffset = tokens[(fromTokenIndex - 1) << 1];\n\t\t\tif (fromTokenStartOffset === chIndex) {\n\t\t\t\tfromTokenIndex--;\n\t\t\t}\n\t\t}\n\t\tfor (let tokenIndex = fromTokenIndex; tokenIndex < tokensCount; tokenIndex++) {\n\t\t\ttokens[tokenIndex << 1] += textLength;\n\t\t}\n\t\treturn lineTokens;\n\t}\n}\n\nexport function toUint32Array(arr: Uint32Array | ArrayBuffer): Uint32Array<ArrayBuffer> {\n\tif (arr instanceof Uint32Array) {\n\t\treturn arr as Uint32Array<ArrayBuffer>;\n\t} else {\n\t\treturn new Uint32Array<ArrayBuffer>(arr);\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { LineTokens } from './lineTokens.js';\n\nexport const EMPTY_LINE_TOKENS = (new Uint32Array(0)).buffer;\n\nexport class ContiguousTokensEditing {\n\n\tpublic static deleteBeginning(lineTokens: Uint32Array | ArrayBuffer | null, toChIndex: number): Uint32Array | ArrayBuffer | null {\n\t\tif (lineTokens === null || lineTokens === EMPTY_LINE_TOKENS) {\n\t\t\treturn lineTokens;\n\t\t}\n\t\treturn ContiguousTokensEditing.delete(lineTokens, 0, toChIndex);\n\t}\n\n\tpublic static deleteEnding(lineTokens: Uint32Array | ArrayBuffer | null, fromChIndex: number): Uint32Array | ArrayBuffer | null {\n\t\tif (lineTokens === null || lineTokens === EMPTY_LINE_TOKENS) {\n\t\t\treturn lineTokens;\n\t\t}\n\n\t\tconst tokens = toUint32Array(lineTokens);\n\t\tconst lineTextLength = tokens[tokens.length - 2];\n\t\treturn ContiguousTokensEditing.delete(lineTokens, fromChIndex, lineTextLength);\n\t}\n\n\tpublic static delete(lineTokens: Uint32Array | ArrayBuffer | null, fromChIndex: number, toChIndex: number): Uint32Array | ArrayBuffer | null {\n\t\tif (lineTokens === null || lineTokens === EMPTY_LINE_TOKENS || fromChIndex === toChIndex) {\n\t\t\treturn lineTokens;\n\t\t}\n\n\t\tconst tokens = toUint32Array(lineTokens);\n\t\tconst tokensCount = (tokens.length >>> 1);\n\n\t\t// special case: deleting everything\n\t\tif (fromChIndex === 0 && tokens[tokens.length - 2] === toChIndex) {\n\t\t\treturn EMPTY_LINE_TOKENS;\n\t\t}\n\n\t\tconst fromTokenIndex = LineTokens.findIndexInTokensArray(tokens, fromChIndex);\n\t\tconst fromTokenStartOffset = (fromTokenIndex > 0 ? tokens[(fromTokenIndex - 1) << 1] : 0);\n\t\tconst fromTokenEndOffset = tokens[fromTokenIndex << 1];\n\n\t\tif (toChIndex < fromTokenEndOffset) {\n\t\t\t// the delete range is inside a single token\n\t\t\tconst delta = (toChIndex - fromChIndex);\n\t\t\tfor (let i = fromTokenIndex; i < tokensCount; i++) {\n\t\t\t\ttokens[i << 1] -= delta;\n\t\t\t}\n\t\t\treturn lineTokens;\n\t\t}\n\n\t\tlet dest: number;\n\t\tlet lastEnd: number;\n\t\tif (fromTokenStartOffset !== fromChIndex) {\n\t\t\ttokens[fromTokenIndex << 1] = fromChIndex;\n\t\t\tdest = ((fromTokenIndex + 1) << 1);\n\t\t\tlastEnd = fromChIndex;\n\t\t} else {\n\t\t\tdest = (fromTokenIndex << 1);\n\t\t\tlastEnd = fromTokenStartOffset;\n\t\t}\n\n\t\tconst delta = (toChIndex - fromChIndex);\n\t\tfor (let tokenIndex = fromTokenIndex + 1; tokenIndex < tokensCount; tokenIndex++) {\n\t\t\tconst tokenEndOffset = tokens[tokenIndex << 1] - delta;\n\t\t\tif (tokenEndOffset > lastEnd) {\n\t\t\t\ttokens[dest++] = tokenEndOffset;\n\t\t\t\ttokens[dest++] = tokens[(tokenIndex << 1) + 1];\n\t\t\t\tlastEnd = tokenEndOffset;\n\t\t\t}\n\t\t}\n\n\t\tif (dest === tokens.length) {\n\t\t\t// nothing to trim\n\t\t\treturn lineTokens;\n\t\t}\n\n\t\tconst tmp = new Uint32Array(dest);\n\t\ttmp.set(tokens.subarray(0, dest), 0);\n\t\treturn tmp.buffer;\n\t}\n\n\tpublic static append(lineTokens: Uint32Array | ArrayBuffer | null, _otherTokens: Uint32Array | ArrayBuffer | null): Uint32Array | ArrayBuffer | null {\n\t\tif (_otherTokens === EMPTY_LINE_TOKENS) {\n\t\t\treturn lineTokens;\n\t\t}\n\t\tif (lineTokens === EMPTY_LINE_TOKENS) {\n\t\t\treturn _otherTokens;\n\t\t}\n\t\tif (lineTokens === null) {\n\t\t\treturn lineTokens;\n\t\t}\n\t\tif (_otherTokens === null) {\n\t\t\t// cannot determine combined line length...\n\t\t\treturn null;\n\t\t}\n\t\tconst myTokens = toUint32Array(lineTokens);\n\t\tconst otherTokens = toUint32Array(_otherTokens);\n\t\tconst otherTokensCount = (otherTokens.length >>> 1);\n\n\t\tconst result = new Uint32Array(myTokens.length + otherTokens.length);\n\t\tresult.set(myTokens, 0);\n\t\tlet dest = myTokens.length;\n\t\tconst delta = myTokens[myTokens.length - 2];\n\t\tfor (let i = 0; i < otherTokensCount; i++) {\n\t\t\tresult[dest++] = otherTokens[(i << 1)] + delta;\n\t\t\tresult[dest++] = otherTokens[(i << 1) + 1];\n\t\t}\n\t\treturn result.buffer;\n\t}\n\n\tpublic static insert(lineTokens: Uint32Array | ArrayBuffer | null, chIndex: number, textLength: number): Uint32Array | ArrayBuffer | null {\n\t\tif (lineTokens === null || lineTokens === EMPTY_LINE_TOKENS) {\n\t\t\t// nothing to do\n\t\t\treturn lineTokens;\n\t\t}\n\n\t\tconst tokens = toUint32Array(lineTokens);\n\t\tconst tokensCount = (tokens.length >>> 1);\n\n\t\tlet fromTokenIndex = LineTokens.findIndexInTokensArray(tokens, chIndex);\n\t\tif (fromTokenIndex > 0) {\n\t\t\tconst fromTokenStartOffset = tokens[(fromTokenIndex - 1) << 1];\n\t\t\tif (fromTokenStartOffset === chIndex) {\n\t\t\t\tfromTokenIndex--;\n\t\t\t}\n\t\t}\n\t\tfor (let tokenIndex = fromTokenIndex; tokenIndex < tokensCount; tokenIndex++) {\n\t\t\ttokens[tokenIndex << 1] += textLength;\n\t\t}\n\t\treturn lineTokens;\n\t}\n}\n\nexport function toUint32Array(arr: Uint32Array | ArrayBuffer): Uint32Array<ArrayBuffer> {\n\tif (arr instanceof Uint32Array) {\n\t\treturn arr as Uint32Array<ArrayBuffer>;\n\t} else {\n\t\treturn new Uint32Array<ArrayBuffer>(arr);\n\t}\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1865, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/monaco-editor/esm/vs/editor/common/tokens/contiguousTokensStore.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/tokens/file%3A/mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/tokens/contiguousTokensStore.ts","file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/tokens/vs/editor/common/tokens/contiguousTokensStore.ts"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as arrays from '../../../base/common/arrays.js';\nimport { Position } from '../core/position.js';\nimport { IRange } from '../core/range.js';\nimport { ContiguousTokensEditing, EMPTY_LINE_TOKENS, toUint32Array } from './contiguousTokensEditing.js';\nimport { LineTokens } from './lineTokens.js';\nimport { ILanguageIdCodec } from '../languages.js';\nimport { LanguageId, FontStyle, ColorId, StandardTokenType, MetadataConsts, TokenMetadata } from '../encodedTokenAttributes.js';\nimport { ITextModel } from '../model.js';\nimport { ContiguousMultilineTokens } from './contiguousMultilineTokens.js';\n\n/**\n * Represents contiguous tokens in a text model.\n */\nexport class ContiguousTokensStore {\n\tprivate _lineTokens: (Uint32Array | ArrayBuffer | null)[];\n\tprivate _len: number;\n\tprivate readonly _languageIdCodec: ILanguageIdCodec;\n\n\tconstructor(languageIdCodec: ILanguageIdCodec) {\n\t\tthis._lineTokens = [];\n\t\tthis._len = 0;\n\t\tthis._languageIdCodec = languageIdCodec;\n\t}\n\n\tpublic flush(): void {\n\t\tthis._lineTokens = [];\n\t\tthis._len = 0;\n\t}\n\n\tget hasTokens(): boolean {\n\t\treturn this._lineTokens.length > 0;\n\t}\n\n\tpublic getTokens(topLevelLanguageId: string, lineIndex: number, lineText: string): LineTokens {\n\t\tlet rawLineTokens: Uint32Array | ArrayBuffer | null = null;\n\t\tif (lineIndex < this._len) {\n\t\t\trawLineTokens = this._lineTokens[lineIndex];\n\t\t}\n\n\t\tif (rawLineTokens !== null && rawLineTokens !== EMPTY_LINE_TOKENS) {\n\t\t\treturn new LineTokens(toUint32Array(rawLineTokens), lineText, this._languageIdCodec);\n\t\t}\n\n\t\tconst lineTokens = new Uint32Array(2);\n\t\tlineTokens[0] = lineText.length;\n\t\tlineTokens[1] = getDefaultMetadata(this._languageIdCodec.encodeLanguageId(topLevelLanguageId));\n\t\treturn new LineTokens(lineTokens, lineText, this._languageIdCodec);\n\t}\n\n\tprivate static _massageTokens(topLevelLanguageId: LanguageId, lineTextLength: number, _tokens: Uint32Array | ArrayBuffer | null): Uint32Array | ArrayBuffer {\n\n\t\tconst tokens = _tokens ? toUint32Array(_tokens) : null;\n\n\t\tif (lineTextLength === 0) {\n\t\t\tlet hasDifferentLanguageId = false;\n\t\t\tif (tokens && tokens.length > 1) {\n\t\t\t\thasDifferentLanguageId = (TokenMetadata.getLanguageId(tokens[1]) !== topLevelLanguageId);\n\t\t\t}\n\n\t\t\tif (!hasDifferentLanguageId) {\n\t\t\t\treturn EMPTY_LINE_TOKENS;\n\t\t\t}\n\t\t}\n\n\t\tif (!tokens || tokens.length === 0) {\n\t\t\tconst tokens = new Uint32Array(2);\n\t\t\ttokens[0] = lineTextLength;\n\t\t\ttokens[1] = getDefaultMetadata(topLevelLanguageId);\n\t\t\treturn tokens.buffer;\n\t\t}\n\n\t\t// Ensure the last token covers the end of the text\n\t\ttokens[tokens.length - 2] = lineTextLength;\n\n\t\tif (tokens.byteOffset === 0 && tokens.byteLength === tokens.buffer.byteLength) {\n\t\t\t// Store directly the ArrayBuffer pointer to save an object\n\t\t\treturn tokens.buffer;\n\t\t}\n\t\treturn tokens;\n\t}\n\n\tprivate _ensureLine(lineIndex: number): void {\n\t\twhile (lineIndex >= this._len) {\n\t\t\tthis._lineTokens[this._len] = null;\n\t\t\tthis._len++;\n\t\t}\n\t}\n\n\tprivate _deleteLines(start: number, deleteCount: number): void {\n\t\tif (deleteCount === 0) {\n\t\t\treturn;\n\t\t}\n\t\tif (start + deleteCount > this._len) {\n\t\t\tdeleteCount = this._len - start;\n\t\t}\n\t\tthis._lineTokens.splice(start, deleteCount);\n\t\tthis._len -= deleteCount;\n\t}\n\n\tprivate _insertLines(insertIndex: number, insertCount: number): void {\n\t\tif (insertCount === 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst lineTokens: (Uint32Array | ArrayBuffer | null)[] = [];\n\t\tfor (let i = 0; i < insertCount; i++) {\n\t\t\tlineTokens[i] = null;\n\t\t}\n\t\tthis._lineTokens = arrays.arrayInsert(this._lineTokens, insertIndex, lineTokens);\n\t\tthis._len += insertCount;\n\t}\n\n\tpublic setTokens(topLevelLanguageId: string, lineIndex: number, lineTextLength: number, _tokens: Uint32Array | ArrayBuffer | null, checkEquality: boolean): boolean {\n\t\tconst tokens = ContiguousTokensStore._massageTokens(this._languageIdCodec.encodeLanguageId(topLevelLanguageId), lineTextLength, _tokens);\n\t\tthis._ensureLine(lineIndex);\n\t\tconst oldTokens = this._lineTokens[lineIndex];\n\t\tthis._lineTokens[lineIndex] = tokens;\n\n\t\tif (checkEquality) {\n\t\t\treturn !ContiguousTokensStore._equals(oldTokens, tokens);\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate static _equals(_a: Uint32Array | ArrayBuffer | null, _b: Uint32Array | ArrayBuffer | null) {\n\t\tif (!_a || !_b) {\n\t\t\treturn !_a && !_b;\n\t\t}\n\n\t\tconst a = toUint32Array(_a);\n\t\tconst b = toUint32Array(_b);\n\n\t\tif (a.length !== b.length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let i = 0, len = a.length; i < len; i++) {\n\t\t\tif (a[i] !== b[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t//#region Editing\n\n\tpublic acceptEdit(range: IRange, eolCount: number, firstLineLength: number): void {\n\t\tthis._acceptDeleteRange(range);\n\t\tthis._acceptInsertText(new Position(range.startLineNumber, range.startColumn), eolCount, firstLineLength);\n\t}\n\n\tprivate _acceptDeleteRange(range: IRange): void {\n\n\t\tconst firstLineIndex = range.startLineNumber - 1;\n\t\tif (firstLineIndex >= this._len) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (range.startLineNumber === range.endLineNumber) {\n\t\t\tif (range.startColumn === range.endColumn) {\n\t\t\t\t// Nothing to delete\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._lineTokens[firstLineIndex] = ContiguousTokensEditing.delete(this._lineTokens[firstLineIndex], range.startColumn - 1, range.endColumn - 1);\n\t\t\treturn;\n\t\t}\n\n\t\tthis._lineTokens[firstLineIndex] = ContiguousTokensEditing.deleteEnding(this._lineTokens[firstLineIndex], range.startColumn - 1);\n\n\t\tconst lastLineIndex = range.endLineNumber - 1;\n\t\tlet lastLineTokens: Uint32Array | ArrayBuffer | null = null;\n\t\tif (lastLineIndex < this._len) {\n\t\t\tlastLineTokens = ContiguousTokensEditing.deleteBeginning(this._lineTokens[lastLineIndex], range.endColumn - 1);\n\t\t}\n\n\t\t// Take remaining text on last line and append it to remaining text on first line\n\t\tthis._lineTokens[firstLineIndex] = ContiguousTokensEditing.append(this._lineTokens[firstLineIndex], lastLineTokens);\n\n\t\t// Delete middle lines\n\t\tthis._deleteLines(range.startLineNumber, range.endLineNumber - range.startLineNumber);\n\t}\n\n\tprivate _acceptInsertText(position: Position, eolCount: number, firstLineLength: number): void {\n\n\t\tif (eolCount === 0 && firstLineLength === 0) {\n\t\t\t// Nothing to insert\n\t\t\treturn;\n\t\t}\n\n\t\tconst lineIndex = position.lineNumber - 1;\n\t\tif (lineIndex >= this._len) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (eolCount === 0) {\n\t\t\t// Inserting text on one line\n\t\t\tthis._lineTokens[lineIndex] = ContiguousTokensEditing.insert(this._lineTokens[lineIndex], position.column - 1, firstLineLength);\n\t\t\treturn;\n\t\t}\n\n\t\tthis._lineTokens[lineIndex] = ContiguousTokensEditing.deleteEnding(this._lineTokens[lineIndex], position.column - 1);\n\t\tthis._lineTokens[lineIndex] = ContiguousTokensEditing.insert(this._lineTokens[lineIndex], position.column - 1, firstLineLength);\n\n\t\tthis._insertLines(position.lineNumber, eolCount);\n\t}\n\n\t//#endregion\n\n\tpublic setMultilineTokens(tokens: ContiguousMultilineTokens[], textModel: ITextModel): { changes: { fromLineNumber: number; toLineNumber: number }[] } {\n\t\tif (tokens.length === 0) {\n\t\t\treturn { changes: [] };\n\t\t}\n\n\t\tconst ranges: { fromLineNumber: number; toLineNumber: number }[] = [];\n\n\t\tfor (let i = 0, len = tokens.length; i < len; i++) {\n\t\t\tconst element = tokens[i];\n\t\t\tlet minChangedLineNumber = 0;\n\t\t\tlet maxChangedLineNumber = 0;\n\t\t\tlet hasChange = false;\n\t\t\tfor (let lineNumber = element.startLineNumber; lineNumber <= element.endLineNumber; lineNumber++) {\n\t\t\t\tif (hasChange) {\n\t\t\t\t\tthis.setTokens(textModel.getLanguageId(), lineNumber - 1, textModel.getLineLength(lineNumber), element.getLineTokens(lineNumber), false);\n\t\t\t\t\tmaxChangedLineNumber = lineNumber;\n\t\t\t\t} else {\n\t\t\t\t\tconst lineHasChange = this.setTokens(textModel.getLanguageId(), lineNumber - 1, textModel.getLineLength(lineNumber), element.getLineTokens(lineNumber), true);\n\t\t\t\t\tif (lineHasChange) {\n\t\t\t\t\t\thasChange = true;\n\t\t\t\t\t\tminChangedLineNumber = lineNumber;\n\t\t\t\t\t\tmaxChangedLineNumber = lineNumber;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (hasChange) {\n\t\t\t\tranges.push({ fromLineNumber: minChangedLineNumber, toLineNumber: maxChangedLineNumber, });\n\t\t\t}\n\t\t}\n\n\t\treturn { changes: ranges };\n\t}\n}\n\nfunction getDefaultMetadata(topLevelLanguageId: LanguageId): number {\n\treturn (\n\t\t(topLevelLanguageId << MetadataConsts.LANGUAGEID_OFFSET)\n\t\t| (StandardTokenType.Other << MetadataConsts.TOKEN_TYPE_OFFSET)\n\t\t| (FontStyle.None << MetadataConsts.FONT_STYLE_OFFSET)\n\t\t| (ColorId.DefaultForeground << MetadataConsts.FOREGROUND_OFFSET)\n\t\t| (ColorId.DefaultBackground << MetadataConsts.BACKGROUND_OFFSET)\n\t\t// If there is no grammar, we just take a guess and try to match brackets.\n\t\t| (MetadataConsts.BALANCED_BRACKETS_MASK)\n\t) >>> 0;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as arrays from '../../../base/common/arrays.js';\nimport { Position } from '../core/position.js';\nimport { IRange } from '../core/range.js';\nimport { ContiguousTokensEditing, EMPTY_LINE_TOKENS, toUint32Array } from './contiguousTokensEditing.js';\nimport { LineTokens } from './lineTokens.js';\nimport { ILanguageIdCodec } from '../languages.js';\nimport { LanguageId, FontStyle, ColorId, StandardTokenType, MetadataConsts, TokenMetadata } from '../encodedTokenAttributes.js';\nimport { ITextModel } from '../model.js';\nimport { ContiguousMultilineTokens } from './contiguousMultilineTokens.js';\n\n/**\n * Represents contiguous tokens in a text model.\n */\nexport class ContiguousTokensStore {\n\tprivate _lineTokens: (Uint32Array | ArrayBuffer | null)[];\n\tprivate _len: number;\n\tprivate readonly _languageIdCodec: ILanguageIdCodec;\n\n\tconstructor(languageIdCodec: ILanguageIdCodec) {\n\t\tthis._lineTokens = [];\n\t\tthis._len = 0;\n\t\tthis._languageIdCodec = languageIdCodec;\n\t}\n\n\tpublic flush(): void {\n\t\tthis._lineTokens = [];\n\t\tthis._len = 0;\n\t}\n\n\tget hasTokens(): boolean {\n\t\treturn this._lineTokens.length > 0;\n\t}\n\n\tpublic getTokens(topLevelLanguageId: string, lineIndex: number, lineText: string): LineTokens {\n\t\tlet rawLineTokens: Uint32Array | ArrayBuffer | null = null;\n\t\tif (lineIndex < this._len) {\n\t\t\trawLineTokens = this._lineTokens[lineIndex];\n\t\t}\n\n\t\tif (rawLineTokens !== null && rawLineTokens !== EMPTY_LINE_TOKENS) {\n\t\t\treturn new LineTokens(toUint32Array(rawLineTokens), lineText, this._languageIdCodec);\n\t\t}\n\n\t\tconst lineTokens = new Uint32Array(2);\n\t\tlineTokens[0] = lineText.length;\n\t\tlineTokens[1] = getDefaultMetadata(this._languageIdCodec.encodeLanguageId(topLevelLanguageId));\n\t\treturn new LineTokens(lineTokens, lineText, this._languageIdCodec);\n\t}\n\n\tprivate static _massageTokens(topLevelLanguageId: LanguageId, lineTextLength: number, _tokens: Uint32Array | ArrayBuffer | null): Uint32Array | ArrayBuffer {\n\n\t\tconst tokens = _tokens ? toUint32Array(_tokens) : null;\n\n\t\tif (lineTextLength === 0) {\n\t\t\tlet hasDifferentLanguageId = false;\n\t\t\tif (tokens && tokens.length > 1) {\n\t\t\t\thasDifferentLanguageId = (TokenMetadata.getLanguageId(tokens[1]) !== topLevelLanguageId);\n\t\t\t}\n\n\t\t\tif (!hasDifferentLanguageId) {\n\t\t\t\treturn EMPTY_LINE_TOKENS;\n\t\t\t}\n\t\t}\n\n\t\tif (!tokens || tokens.length === 0) {\n\t\t\tconst tokens = new Uint32Array(2);\n\t\t\ttokens[0] = lineTextLength;\n\t\t\ttokens[1] = getDefaultMetadata(topLevelLanguageId);\n\t\t\treturn tokens.buffer;\n\t\t}\n\n\t\t// Ensure the last token covers the end of the text\n\t\ttokens[tokens.length - 2] = lineTextLength;\n\n\t\tif (tokens.byteOffset === 0 && tokens.byteLength === tokens.buffer.byteLength) {\n\t\t\t// Store directly the ArrayBuffer pointer to save an object\n\t\t\treturn tokens.buffer;\n\t\t}\n\t\treturn tokens;\n\t}\n\n\tprivate _ensureLine(lineIndex: number): void {\n\t\twhile (lineIndex >= this._len) {\n\t\t\tthis._lineTokens[this._len] = null;\n\t\t\tthis._len++;\n\t\t}\n\t}\n\n\tprivate _deleteLines(start: number, deleteCount: number): void {\n\t\tif (deleteCount === 0) {\n\t\t\treturn;\n\t\t}\n\t\tif (start + deleteCount > this._len) {\n\t\t\tdeleteCount = this._len - start;\n\t\t}\n\t\tthis._lineTokens.splice(start, deleteCount);\n\t\tthis._len -= deleteCount;\n\t}\n\n\tprivate _insertLines(insertIndex: number, insertCount: number): void {\n\t\tif (insertCount === 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst lineTokens: (Uint32Array | ArrayBuffer | null)[] = [];\n\t\tfor (let i = 0; i < insertCount; i++) {\n\t\t\tlineTokens[i] = null;\n\t\t}\n\t\tthis._lineTokens = arrays.arrayInsert(this._lineTokens, insertIndex, lineTokens);\n\t\tthis._len += insertCount;\n\t}\n\n\tpublic setTokens(topLevelLanguageId: string, lineIndex: number, lineTextLength: number, _tokens: Uint32Array | ArrayBuffer | null, checkEquality: boolean): boolean {\n\t\tconst tokens = ContiguousTokensStore._massageTokens(this._languageIdCodec.encodeLanguageId(topLevelLanguageId), lineTextLength, _tokens);\n\t\tthis._ensureLine(lineIndex);\n\t\tconst oldTokens = this._lineTokens[lineIndex];\n\t\tthis._lineTokens[lineIndex] = tokens;\n\n\t\tif (checkEquality) {\n\t\t\treturn !ContiguousTokensStore._equals(oldTokens, tokens);\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate static _equals(_a: Uint32Array | ArrayBuffer | null, _b: Uint32Array | ArrayBuffer | null) {\n\t\tif (!_a || !_b) {\n\t\t\treturn !_a && !_b;\n\t\t}\n\n\t\tconst a = toUint32Array(_a);\n\t\tconst b = toUint32Array(_b);\n\n\t\tif (a.length !== b.length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let i = 0, len = a.length; i < len; i++) {\n\t\t\tif (a[i] !== b[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t//#region Editing\n\n\tpublic acceptEdit(range: IRange, eolCount: number, firstLineLength: number): void {\n\t\tthis._acceptDeleteRange(range);\n\t\tthis._acceptInsertText(new Position(range.startLineNumber, range.startColumn), eolCount, firstLineLength);\n\t}\n\n\tprivate _acceptDeleteRange(range: IRange): void {\n\n\t\tconst firstLineIndex = range.startLineNumber - 1;\n\t\tif (firstLineIndex >= this._len) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (range.startLineNumber === range.endLineNumber) {\n\t\t\tif (range.startColumn === range.endColumn) {\n\t\t\t\t// Nothing to delete\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._lineTokens[firstLineIndex] = ContiguousTokensEditing.delete(this._lineTokens[firstLineIndex], range.startColumn - 1, range.endColumn - 1);\n\t\t\treturn;\n\t\t}\n\n\t\tthis._lineTokens[firstLineIndex] = ContiguousTokensEditing.deleteEnding(this._lineTokens[firstLineIndex], range.startColumn - 1);\n\n\t\tconst lastLineIndex = range.endLineNumber - 1;\n\t\tlet lastLineTokens: Uint32Array | ArrayBuffer | null = null;\n\t\tif (lastLineIndex < this._len) {\n\t\t\tlastLineTokens = ContiguousTokensEditing.deleteBeginning(this._lineTokens[lastLineIndex], range.endColumn - 1);\n\t\t}\n\n\t\t// Take remaining text on last line and append it to remaining text on first line\n\t\tthis._lineTokens[firstLineIndex] = ContiguousTokensEditing.append(this._lineTokens[firstLineIndex], lastLineTokens);\n\n\t\t// Delete middle lines\n\t\tthis._deleteLines(range.startLineNumber, range.endLineNumber - range.startLineNumber);\n\t}\n\n\tprivate _acceptInsertText(position: Position, eolCount: number, firstLineLength: number): void {\n\n\t\tif (eolCount === 0 && firstLineLength === 0) {\n\t\t\t// Nothing to insert\n\t\t\treturn;\n\t\t}\n\n\t\tconst lineIndex = position.lineNumber - 1;\n\t\tif (lineIndex >= this._len) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (eolCount === 0) {\n\t\t\t// Inserting text on one line\n\t\t\tthis._lineTokens[lineIndex] = ContiguousTokensEditing.insert(this._lineTokens[lineIndex], position.column - 1, firstLineLength);\n\t\t\treturn;\n\t\t}\n\n\t\tthis._lineTokens[lineIndex] = ContiguousTokensEditing.deleteEnding(this._lineTokens[lineIndex], position.column - 1);\n\t\tthis._lineTokens[lineIndex] = ContiguousTokensEditing.insert(this._lineTokens[lineIndex], position.column - 1, firstLineLength);\n\n\t\tthis._insertLines(position.lineNumber, eolCount);\n\t}\n\n\t//#endregion\n\n\tpublic setMultilineTokens(tokens: ContiguousMultilineTokens[], textModel: ITextModel): { changes: { fromLineNumber: number; toLineNumber: number }[] } {\n\t\tif (tokens.length === 0) {\n\t\t\treturn { changes: [] };\n\t\t}\n\n\t\tconst ranges: { fromLineNumber: number; toLineNumber: number }[] = [];\n\n\t\tfor (let i = 0, len = tokens.length; i < len; i++) {\n\t\t\tconst element = tokens[i];\n\t\t\tlet minChangedLineNumber = 0;\n\t\t\tlet maxChangedLineNumber = 0;\n\t\t\tlet hasChange = false;\n\t\t\tfor (let lineNumber = element.startLineNumber; lineNumber <= element.endLineNumber; lineNumber++) {\n\t\t\t\tif (hasChange) {\n\t\t\t\t\tthis.setTokens(textModel.getLanguageId(), lineNumber - 1, textModel.getLineLength(lineNumber), element.getLineTokens(lineNumber), false);\n\t\t\t\t\tmaxChangedLineNumber = lineNumber;\n\t\t\t\t} else {\n\t\t\t\t\tconst lineHasChange = this.setTokens(textModel.getLanguageId(), lineNumber - 1, textModel.getLineLength(lineNumber), element.getLineTokens(lineNumber), true);\n\t\t\t\t\tif (lineHasChange) {\n\t\t\t\t\t\thasChange = true;\n\t\t\t\t\t\tminChangedLineNumber = lineNumber;\n\t\t\t\t\t\tmaxChangedLineNumber = lineNumber;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (hasChange) {\n\t\t\t\tranges.push({ fromLineNumber: minChangedLineNumber, toLineNumber: maxChangedLineNumber, });\n\t\t\t}\n\t\t}\n\n\t\treturn { changes: ranges };\n\t}\n}\n\nfunction getDefaultMetadata(topLevelLanguageId: LanguageId): number {\n\treturn (\n\t\t(topLevelLanguageId << MetadataConsts.LANGUAGEID_OFFSET)\n\t\t| (StandardTokenType.Other << MetadataConsts.TOKEN_TYPE_OFFSET)\n\t\t| (FontStyle.None << MetadataConsts.FONT_STYLE_OFFSET)\n\t\t| (ColorId.DefaultForeground << MetadataConsts.FOREGROUND_OFFSET)\n\t\t| (ColorId.DefaultBackground << MetadataConsts.BACKGROUND_OFFSET)\n\t\t// If there is no grammar, we just take a guess and try to match brackets.\n\t\t| (MetadataConsts.BALANCED_BRACKETS_MASK)\n\t) >>> 0;\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2078, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/monaco-editor/esm/vs/editor/common/tokens/tokenWithTextArray.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/tokens/file%3A/mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/tokens/tokenWithTextArray.ts","file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/tokens/vs/editor/common/tokens/tokenWithTextArray.ts"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { OffsetRange } from '../core/ranges/offsetRange.js';\nimport { ILanguageIdCodec } from '../languages.js';\nimport { LineTokens } from './lineTokens.js';\n\n/**\n * This class represents a sequence of tokens.\n * Conceptually, each token has a length and a metadata number.\n * A token array might be used to annotate a string with metadata.\n * Use {@link TokenWithTextArrayBuilder} to efficiently create a token array.\n *\n * TODO: Make this class more efficient (e.g. by using a Int32Array).\n*/\nexport class TokenWithTextArray {\n\tpublic static fromLineTokens(lineTokens: LineTokens): TokenWithTextArray {\n\t\tconst tokenInfo: TokenWithTextInfo[] = [];\n\t\tfor (let i = 0; i < lineTokens.getCount(); i++) {\n\t\t\ttokenInfo.push(new TokenWithTextInfo(lineTokens.getTokenText(i), lineTokens.getMetadata(i)));\n\t\t}\n\t\treturn TokenWithTextArray.create(tokenInfo);\n\t}\n\n\tpublic static create(tokenInfo: TokenWithTextInfo[]): TokenWithTextArray {\n\t\treturn new TokenWithTextArray(tokenInfo);\n\t}\n\n\tprivate constructor(\n\t\tprivate readonly _tokenInfo: TokenWithTextInfo[],\n\t) { }\n\n\tpublic toLineTokens(decoder: ILanguageIdCodec): LineTokens {\n\t\treturn LineTokens.createFromTextAndMetadata(this.map((_r, t) => ({ text: t.text, metadata: t.metadata })), decoder);\n\t}\n\n\tpublic map<T>(cb: (range: OffsetRange, tokenInfo: TokenWithTextInfo) => T): T[] {\n\t\tconst result: T[] = [];\n\t\tlet lengthSum = 0;\n\t\tfor (const tokenInfo of this._tokenInfo) {\n\t\t\tconst range = new OffsetRange(lengthSum, lengthSum + tokenInfo.text.length);\n\t\t\tresult.push(cb(range, tokenInfo));\n\t\t\tlengthSum += tokenInfo.text.length;\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic slice(range: OffsetRange): TokenWithTextArray {\n\t\tconst result: TokenWithTextInfo[] = [];\n\t\tlet lengthSum = 0;\n\t\tfor (const tokenInfo of this._tokenInfo) {\n\t\t\tconst tokenStart = lengthSum;\n\t\t\tconst tokenEndEx = tokenStart + tokenInfo.text.length;\n\t\t\tif (tokenEndEx > range.start) {\n\t\t\t\tif (tokenStart >= range.endExclusive) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tconst deltaBefore = Math.max(0, range.start - tokenStart);\n\t\t\t\tconst deltaAfter = Math.max(0, tokenEndEx - range.endExclusive);\n\n\t\t\t\tresult.push(new TokenWithTextInfo(tokenInfo.text.slice(deltaBefore, tokenInfo.text.length - deltaAfter), tokenInfo.metadata));\n\t\t\t}\n\n\t\t\tlengthSum += tokenInfo.text.length;\n\t\t}\n\t\treturn TokenWithTextArray.create(result);\n\t}\n\n\tpublic append(other: TokenWithTextArray): TokenWithTextArray {\n\t\tconst result: TokenWithTextInfo[] = this._tokenInfo.concat(other._tokenInfo);\n\t\treturn TokenWithTextArray.create(result);\n\t}\n}\n\nexport type TokenMetadata = number;\n\nexport class TokenWithTextInfo {\n\tconstructor(\n\t\tpublic readonly text: string,\n\t\tpublic readonly metadata: TokenMetadata,\n\t) { }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { OffsetRange } from '../core/ranges/offsetRange.js';\nimport { ILanguageIdCodec } from '../languages.js';\nimport { LineTokens } from './lineTokens.js';\n\n/**\n * This class represents a sequence of tokens.\n * Conceptually, each token has a length and a metadata number.\n * A token array might be used to annotate a string with metadata.\n * Use {@link TokenWithTextArrayBuilder} to efficiently create a token array.\n *\n * TODO: Make this class more efficient (e.g. by using a Int32Array).\n*/\nexport class TokenWithTextArray {\n\tpublic static fromLineTokens(lineTokens: LineTokens): TokenWithTextArray {\n\t\tconst tokenInfo: TokenWithTextInfo[] = [];\n\t\tfor (let i = 0; i < lineTokens.getCount(); i++) {\n\t\t\ttokenInfo.push(new TokenWithTextInfo(lineTokens.getTokenText(i), lineTokens.getMetadata(i)));\n\t\t}\n\t\treturn TokenWithTextArray.create(tokenInfo);\n\t}\n\n\tpublic static create(tokenInfo: TokenWithTextInfo[]): TokenWithTextArray {\n\t\treturn new TokenWithTextArray(tokenInfo);\n\t}\n\n\tprivate constructor(\n\t\tprivate readonly _tokenInfo: TokenWithTextInfo[],\n\t) { }\n\n\tpublic toLineTokens(decoder: ILanguageIdCodec): LineTokens {\n\t\treturn LineTokens.createFromTextAndMetadata(this.map((_r, t) => ({ text: t.text, metadata: t.metadata })), decoder);\n\t}\n\n\tpublic map<T>(cb: (range: OffsetRange, tokenInfo: TokenWithTextInfo) => T): T[] {\n\t\tconst result: T[] = [];\n\t\tlet lengthSum = 0;\n\t\tfor (const tokenInfo of this._tokenInfo) {\n\t\t\tconst range = new OffsetRange(lengthSum, lengthSum + tokenInfo.text.length);\n\t\t\tresult.push(cb(range, tokenInfo));\n\t\t\tlengthSum += tokenInfo.text.length;\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic slice(range: OffsetRange): TokenWithTextArray {\n\t\tconst result: TokenWithTextInfo[] = [];\n\t\tlet lengthSum = 0;\n\t\tfor (const tokenInfo of this._tokenInfo) {\n\t\t\tconst tokenStart = lengthSum;\n\t\t\tconst tokenEndEx = tokenStart + tokenInfo.text.length;\n\t\t\tif (tokenEndEx > range.start) {\n\t\t\t\tif (tokenStart >= range.endExclusive) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tconst deltaBefore = Math.max(0, range.start - tokenStart);\n\t\t\t\tconst deltaAfter = Math.max(0, tokenEndEx - range.endExclusive);\n\n\t\t\t\tresult.push(new TokenWithTextInfo(tokenInfo.text.slice(deltaBefore, tokenInfo.text.length - deltaAfter), tokenInfo.metadata));\n\t\t\t}\n\n\t\t\tlengthSum += tokenInfo.text.length;\n\t\t}\n\t\treturn TokenWithTextArray.create(result);\n\t}\n\n\tpublic append(other: TokenWithTextArray): TokenWithTextArray {\n\t\tconst result: TokenWithTextInfo[] = this._tokenInfo.concat(other._tokenInfo);\n\t\treturn TokenWithTextArray.create(result);\n\t}\n}\n\nexport type TokenMetadata = number;\n\nexport class TokenWithTextInfo {\n\tconstructor(\n\t\tpublic readonly text: string,\n\t\tpublic readonly metadata: TokenMetadata,\n\t) { }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2154, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/monaco-editor/esm/vs/editor/common/tokens/common.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/tokens/file%3A/mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/tokens/common.ts","file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/tokens/vs/editor/common/tokens/common.ts"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nexport class RateLimiter {\n\tprivate _lastRun: number;\n\tprivate readonly _minimumTimeBetweenRuns: number;\n\n\tconstructor(public readonly timesPerSecond: number = 5) {\n\t\tthis._lastRun = 0;\n\t\tthis._minimumTimeBetweenRuns = 1000 / timesPerSecond;\n\t}\n\n\tpublic runIfNotLimited(callback: () => void): void {\n\t\tconst now = Date.now();\n\t\tif (now - this._lastRun >= this._minimumTimeBetweenRuns) {\n\t\t\tthis._lastRun = now;\n\t\t\tcallback();\n\t\t}\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nexport class RateLimiter {\n\tprivate _lastRun: number;\n\tprivate readonly _minimumTimeBetweenRuns: number;\n\n\tconstructor(public readonly timesPerSecond: number = 5) {\n\t\tthis._lastRun = 0;\n\t\tthis._minimumTimeBetweenRuns = 1000 / timesPerSecond;\n\t}\n\n\tpublic runIfNotLimited(callback: () => void): void {\n\t\tconst now = Date.now();\n\t\tif (now - this._lastRun >= this._minimumTimeBetweenRuns) {\n\t\t\tthis._lastRun = now;\n\t\t\tcallback();\n\t\t}\n\t}\n}\n"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;AAE1F,MAAO,WAAW;IAIvB,YAA4B,iBAAyB,CAAC,CAAA;QAA1B,IAAA,CAAA,cAAc,GAAd,cAAc,CAAY;QACrD,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;QAClB,IAAI,CAAC,uBAAuB,GAAG,IAAI,GAAG,cAAc,CAAC;IACtD,CAAC;IAEM,eAAe,CAAC,QAAoB,EAAA;QAC1C,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QACvB,IAAI,GAAG,GAAG,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,uBAAuB,EAAE,CAAC;YACzD,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC;YACpB,QAAQ,EAAE,CAAC;QACZ,CAAC;IACF,CAAC;CACD","debugId":null}},
    {"offset": {"line": 2179, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/monaco-editor/esm/vs/editor/common/tokens/sparseMultilineTokens.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/tokens/file%3A/mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/tokens/sparseMultilineTokens.ts","file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/tokens/vs/editor/common/tokens/sparseMultilineTokens.ts"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from '../../../base/common/charCode.js';\nimport { Position } from '../core/position.js';\nimport { IRange, Range } from '../core/range.js';\nimport { countEOL } from '../core/misc/eolCounter.js';\nimport { ITextModel } from '../model.js';\nimport { RateLimiter } from './common.js';\n\n/**\n * Represents sparse tokens over a contiguous range of lines.\n */\nexport class SparseMultilineTokens {\n\n\tpublic static create(startLineNumber: number, tokens: Uint32Array): SparseMultilineTokens {\n\t\treturn new SparseMultilineTokens(startLineNumber, new SparseMultilineTokensStorage(tokens));\n\t}\n\n\tprivate _startLineNumber: number;\n\tprivate _endLineNumber: number;\n\tprivate readonly _tokens: SparseMultilineTokensStorage;\n\n\t/**\n\t * (Inclusive) start line number for these tokens.\n\t */\n\tpublic get startLineNumber(): number {\n\t\treturn this._startLineNumber;\n\t}\n\n\t/**\n\t * (Inclusive) end line number for these tokens.\n\t */\n\tpublic get endLineNumber(): number {\n\t\treturn this._endLineNumber;\n\t}\n\n\tprivate constructor(startLineNumber: number, tokens: SparseMultilineTokensStorage) {\n\t\tthis._startLineNumber = startLineNumber;\n\t\tthis._tokens = tokens;\n\t\tthis._endLineNumber = this._startLineNumber + this._tokens.getMaxDeltaLine();\n\t}\n\n\tpublic toString(): string {\n\t\treturn this._tokens.toString(this._startLineNumber);\n\t}\n\n\tprivate _updateEndLineNumber(): void {\n\t\tthis._endLineNumber = this._startLineNumber + this._tokens.getMaxDeltaLine();\n\t}\n\n\tpublic isEmpty(): boolean {\n\t\treturn this._tokens.isEmpty();\n\t}\n\n\tpublic getLineTokens(lineNumber: number): SparseLineTokens | null {\n\t\tif (this._startLineNumber <= lineNumber && lineNumber <= this._endLineNumber) {\n\t\t\treturn this._tokens.getLineTokens(lineNumber - this._startLineNumber);\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic getRange(): Range | null {\n\t\tconst deltaRange = this._tokens.getRange();\n\t\tif (!deltaRange) {\n\t\t\treturn deltaRange;\n\t\t}\n\t\treturn new Range(this._startLineNumber + deltaRange.startLineNumber, deltaRange.startColumn, this._startLineNumber + deltaRange.endLineNumber, deltaRange.endColumn);\n\t}\n\n\tpublic removeTokens(range: Range): void {\n\t\tconst startLineIndex = range.startLineNumber - this._startLineNumber;\n\t\tconst endLineIndex = range.endLineNumber - this._startLineNumber;\n\n\t\tthis._startLineNumber += this._tokens.removeTokens(startLineIndex, range.startColumn - 1, endLineIndex, range.endColumn - 1);\n\t\tthis._updateEndLineNumber();\n\t}\n\n\tpublic split(range: Range): [SparseMultilineTokens, SparseMultilineTokens] {\n\t\t// split tokens to two:\n\t\t// a) all the tokens before `range`\n\t\t// b) all the tokens after `range`\n\t\tconst startLineIndex = range.startLineNumber - this._startLineNumber;\n\t\tconst endLineIndex = range.endLineNumber - this._startLineNumber;\n\n\t\tconst [a, b, bDeltaLine] = this._tokens.split(startLineIndex, range.startColumn - 1, endLineIndex, range.endColumn - 1);\n\t\treturn [new SparseMultilineTokens(this._startLineNumber, a), new SparseMultilineTokens(this._startLineNumber + bDeltaLine, b)];\n\t}\n\n\tpublic applyEdit(range: IRange, text: string): void {\n\t\tconst [eolCount, firstLineLength, lastLineLength] = countEOL(text);\n\t\tthis.acceptEdit(range, eolCount, firstLineLength, lastLineLength, text.length > 0 ? text.charCodeAt(0) : CharCode.Null);\n\t}\n\n\tpublic acceptEdit(range: IRange, eolCount: number, firstLineLength: number, lastLineLength: number, firstCharCode: number): void {\n\t\tthis._acceptDeleteRange(range);\n\t\tthis._acceptInsertText(new Position(range.startLineNumber, range.startColumn), eolCount, firstLineLength, lastLineLength, firstCharCode);\n\t\tthis._updateEndLineNumber();\n\t}\n\n\tprivate _acceptDeleteRange(range: IRange): void {\n\t\tif (range.startLineNumber === range.endLineNumber && range.startColumn === range.endColumn) {\n\t\t\t// Nothing to delete\n\t\t\treturn;\n\t\t}\n\n\t\tconst firstLineIndex = range.startLineNumber - this._startLineNumber;\n\t\tconst lastLineIndex = range.endLineNumber - this._startLineNumber;\n\n\t\tif (lastLineIndex < 0) {\n\t\t\t// this deletion occurs entirely before this block, so we only need to adjust line numbers\n\t\t\tconst deletedLinesCount = lastLineIndex - firstLineIndex;\n\t\t\tthis._startLineNumber -= deletedLinesCount;\n\t\t\treturn;\n\t\t}\n\n\t\tconst tokenMaxDeltaLine = this._tokens.getMaxDeltaLine();\n\n\t\tif (firstLineIndex >= tokenMaxDeltaLine + 1) {\n\t\t\t// this deletion occurs entirely after this block, so there is nothing to do\n\t\t\treturn;\n\t\t}\n\n\t\tif (firstLineIndex < 0 && lastLineIndex >= tokenMaxDeltaLine + 1) {\n\t\t\t// this deletion completely encompasses this block\n\t\t\tthis._startLineNumber = 0;\n\t\t\tthis._tokens.clear();\n\t\t\treturn;\n\t\t}\n\n\t\tif (firstLineIndex < 0) {\n\t\t\tconst deletedBefore = -firstLineIndex;\n\t\t\tthis._startLineNumber -= deletedBefore;\n\n\t\t\tthis._tokens.acceptDeleteRange(range.startColumn - 1, 0, 0, lastLineIndex, range.endColumn - 1);\n\t\t} else {\n\t\t\tthis._tokens.acceptDeleteRange(0, firstLineIndex, range.startColumn - 1, lastLineIndex, range.endColumn - 1);\n\t\t}\n\t}\n\n\tprivate _acceptInsertText(position: Position, eolCount: number, firstLineLength: number, lastLineLength: number, firstCharCode: number): void {\n\n\t\tif (eolCount === 0 && firstLineLength === 0) {\n\t\t\t// Nothing to insert\n\t\t\treturn;\n\t\t}\n\n\t\tconst lineIndex = position.lineNumber - this._startLineNumber;\n\n\t\tif (lineIndex < 0) {\n\t\t\t// this insertion occurs before this block, so we only need to adjust line numbers\n\t\t\tthis._startLineNumber += eolCount;\n\t\t\treturn;\n\t\t}\n\n\t\tconst tokenMaxDeltaLine = this._tokens.getMaxDeltaLine();\n\n\t\tif (lineIndex >= tokenMaxDeltaLine + 1) {\n\t\t\t// this insertion occurs after this block, so there is nothing to do\n\t\t\treturn;\n\t\t}\n\n\t\tthis._tokens.acceptInsertText(lineIndex, position.column - 1, eolCount, firstLineLength, lastLineLength, firstCharCode);\n\t}\n\n\tpublic reportIfInvalid(model: ITextModel): void {\n\t\tthis._tokens.reportIfInvalid(model, this._startLineNumber);\n\t}\n}\n\nclass SparseMultilineTokensStorage {\n\t/**\n\t * The encoding of tokens is:\n\t *  4*i    deltaLine (from `startLineNumber`)\n\t *  4*i+1  startCharacter (from the line start)\n\t *  4*i+2  endCharacter (from the line start)\n\t *  4*i+3  metadata\n\t */\n\tprivate readonly _tokens: Uint32Array;\n\tprivate _tokenCount: number;\n\n\tconstructor(tokens: Uint32Array) {\n\t\tthis._tokens = tokens;\n\t\tthis._tokenCount = tokens.length / 4;\n\t}\n\n\tpublic toString(startLineNumber: number): string {\n\t\tconst pieces: string[] = [];\n\t\tfor (let i = 0; i < this._tokenCount; i++) {\n\t\t\tpieces.push(`(${this._getDeltaLine(i) + startLineNumber},${this._getStartCharacter(i)}-${this._getEndCharacter(i)})`);\n\t\t}\n\t\treturn `[${pieces.join(',')}]`;\n\t}\n\n\tpublic getMaxDeltaLine(): number {\n\t\tconst tokenCount = this._getTokenCount();\n\t\tif (tokenCount === 0) {\n\t\t\treturn -1;\n\t\t}\n\t\treturn this._getDeltaLine(tokenCount - 1);\n\t}\n\n\tpublic getRange(): Range | null {\n\t\tconst tokenCount = this._getTokenCount();\n\t\tif (tokenCount === 0) {\n\t\t\treturn null;\n\t\t}\n\t\tconst startChar = this._getStartCharacter(0);\n\t\tconst maxDeltaLine = this._getDeltaLine(tokenCount - 1);\n\t\tconst endChar = this._getEndCharacter(tokenCount - 1);\n\t\treturn new Range(0, startChar + 1, maxDeltaLine, endChar + 1);\n\t}\n\n\tprivate _getTokenCount(): number {\n\t\treturn this._tokenCount;\n\t}\n\n\tprivate _getDeltaLine(tokenIndex: number): number {\n\t\treturn this._tokens[4 * tokenIndex];\n\t}\n\n\tprivate _getStartCharacter(tokenIndex: number): number {\n\t\treturn this._tokens[4 * tokenIndex + 1];\n\t}\n\n\tprivate _getEndCharacter(tokenIndex: number): number {\n\t\treturn this._tokens[4 * tokenIndex + 2];\n\t}\n\n\tpublic isEmpty(): boolean {\n\t\treturn (this._getTokenCount() === 0);\n\t}\n\n\tpublic getLineTokens(deltaLine: number): SparseLineTokens | null {\n\t\tlet low = 0;\n\t\tlet high = this._getTokenCount() - 1;\n\n\t\twhile (low < high) {\n\t\t\tconst mid = low + Math.floor((high - low) / 2);\n\t\t\tconst midDeltaLine = this._getDeltaLine(mid);\n\n\t\t\tif (midDeltaLine < deltaLine) {\n\t\t\t\tlow = mid + 1;\n\t\t\t} else if (midDeltaLine > deltaLine) {\n\t\t\t\thigh = mid - 1;\n\t\t\t} else {\n\t\t\t\tlet min = mid;\n\t\t\t\twhile (min > low && this._getDeltaLine(min - 1) === deltaLine) {\n\t\t\t\t\tmin--;\n\t\t\t\t}\n\t\t\t\tlet max = mid;\n\t\t\t\twhile (max < high && this._getDeltaLine(max + 1) === deltaLine) {\n\t\t\t\t\tmax++;\n\t\t\t\t}\n\t\t\t\treturn new SparseLineTokens(this._tokens.subarray(4 * min, 4 * max + 4));\n\t\t\t}\n\t\t}\n\n\t\tif (this._getDeltaLine(low) === deltaLine) {\n\t\t\treturn new SparseLineTokens(this._tokens.subarray(4 * low, 4 * low + 4));\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic clear(): void {\n\t\tthis._tokenCount = 0;\n\t}\n\n\tpublic removeTokens(startDeltaLine: number, startChar: number, endDeltaLine: number, endChar: number): number {\n\t\tconst tokens = this._tokens;\n\t\tconst tokenCount = this._tokenCount;\n\t\tlet newTokenCount = 0;\n\t\tlet hasDeletedTokens = false;\n\t\tlet firstDeltaLine = 0;\n\t\tfor (let i = 0; i < tokenCount; i++) {\n\t\t\tconst srcOffset = 4 * i;\n\t\t\tconst tokenDeltaLine = tokens[srcOffset];\n\t\t\tconst tokenStartCharacter = tokens[srcOffset + 1];\n\t\t\tconst tokenEndCharacter = tokens[srcOffset + 2];\n\t\t\tconst tokenMetadata = tokens[srcOffset + 3];\n\n\t\t\tif (\n\t\t\t\t(tokenDeltaLine > startDeltaLine || (tokenDeltaLine === startDeltaLine && tokenEndCharacter >= startChar))\n\t\t\t\t&& (tokenDeltaLine < endDeltaLine || (tokenDeltaLine === endDeltaLine && tokenStartCharacter <= endChar))\n\t\t\t) {\n\t\t\t\thasDeletedTokens = true;\n\t\t\t} else {\n\t\t\t\tif (newTokenCount === 0) {\n\t\t\t\t\tfirstDeltaLine = tokenDeltaLine;\n\t\t\t\t}\n\t\t\t\tif (hasDeletedTokens) {\n\t\t\t\t\t// must move the token to the left\n\t\t\t\t\tconst destOffset = 4 * newTokenCount;\n\t\t\t\t\ttokens[destOffset] = tokenDeltaLine - firstDeltaLine;\n\t\t\t\t\ttokens[destOffset + 1] = tokenStartCharacter;\n\t\t\t\t\ttokens[destOffset + 2] = tokenEndCharacter;\n\t\t\t\t\ttokens[destOffset + 3] = tokenMetadata;\n\t\t\t\t}\n\t\t\t\tnewTokenCount++;\n\t\t\t}\n\t\t}\n\n\t\tthis._tokenCount = newTokenCount;\n\n\t\treturn firstDeltaLine;\n\t}\n\n\tpublic split(startDeltaLine: number, startChar: number, endDeltaLine: number, endChar: number): [SparseMultilineTokensStorage, SparseMultilineTokensStorage, number] {\n\t\tconst tokens = this._tokens;\n\t\tconst tokenCount = this._tokenCount;\n\t\tconst aTokens: number[] = [];\n\t\tconst bTokens: number[] = [];\n\t\tlet destTokens: number[] = aTokens;\n\t\tlet destOffset = 0;\n\t\tlet destFirstDeltaLine: number = 0;\n\t\tfor (let i = 0; i < tokenCount; i++) {\n\t\t\tconst srcOffset = 4 * i;\n\t\t\tconst tokenDeltaLine = tokens[srcOffset];\n\t\t\tconst tokenStartCharacter = tokens[srcOffset + 1];\n\t\t\tconst tokenEndCharacter = tokens[srcOffset + 2];\n\t\t\tconst tokenMetadata = tokens[srcOffset + 3];\n\n\t\t\tif ((tokenDeltaLine > startDeltaLine || (tokenDeltaLine === startDeltaLine && tokenEndCharacter >= startChar))) {\n\t\t\t\tif ((tokenDeltaLine < endDeltaLine || (tokenDeltaLine === endDeltaLine && tokenStartCharacter <= endChar))) {\n\t\t\t\t\t// this token is touching the range\n\t\t\t\t\tcontinue;\n\t\t\t\t} else {\n\t\t\t\t\t// this token is after the range\n\t\t\t\t\tif (destTokens !== bTokens) {\n\t\t\t\t\t\t// this token is the first token after the range\n\t\t\t\t\t\tdestTokens = bTokens;\n\t\t\t\t\t\tdestOffset = 0;\n\t\t\t\t\t\tdestFirstDeltaLine = tokenDeltaLine;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdestTokens[destOffset++] = tokenDeltaLine - destFirstDeltaLine;\n\t\t\tdestTokens[destOffset++] = tokenStartCharacter;\n\t\t\tdestTokens[destOffset++] = tokenEndCharacter;\n\t\t\tdestTokens[destOffset++] = tokenMetadata;\n\t\t}\n\n\t\treturn [new SparseMultilineTokensStorage(new Uint32Array(aTokens)), new SparseMultilineTokensStorage(new Uint32Array(bTokens)), destFirstDeltaLine];\n\t}\n\n\tpublic acceptDeleteRange(horizontalShiftForFirstLineTokens: number, startDeltaLine: number, startCharacter: number, endDeltaLine: number, endCharacter: number): void {\n\t\t// This is a bit complex, here are the cases I used to think about this:\n\t\t//\n\t\t// 1. The token starts before the deletion range\n\t\t// 1a. The token is completely before the deletion range\n\t\t//               -----------\n\t\t//                          xxxxxxxxxxx\n\t\t// 1b. The token starts before, the deletion range ends after the token\n\t\t//               -----------\n\t\t//                      xxxxxxxxxxx\n\t\t// 1c. The token starts before, the deletion range ends precisely with the token\n\t\t//               ---------------\n\t\t//                      xxxxxxxx\n\t\t// 1d. The token starts before, the deletion range is inside the token\n\t\t//               ---------------\n\t\t//                    xxxxx\n\t\t//\n\t\t// 2. The token starts at the same position with the deletion range\n\t\t// 2a. The token starts at the same position, and ends inside the deletion range\n\t\t//               -------\n\t\t//               xxxxxxxxxxx\n\t\t// 2b. The token starts at the same position, and ends at the same position as the deletion range\n\t\t//               ----------\n\t\t//               xxxxxxxxxx\n\t\t// 2c. The token starts at the same position, and ends after the deletion range\n\t\t//               -------------\n\t\t//               xxxxxxx\n\t\t//\n\t\t// 3. The token starts inside the deletion range\n\t\t// 3a. The token is inside the deletion range\n\t\t//                -------\n\t\t//             xxxxxxxxxxxxx\n\t\t// 3b. The token starts inside the deletion range, and ends at the same position as the deletion range\n\t\t//                ----------\n\t\t//             xxxxxxxxxxxxx\n\t\t// 3c. The token starts inside the deletion range, and ends after the deletion range\n\t\t//                ------------\n\t\t//             xxxxxxxxxxx\n\t\t//\n\t\t// 4. The token starts after the deletion range\n\t\t//                  -----------\n\t\t//          xxxxxxxx\n\t\t//\n\t\tconst tokens = this._tokens;\n\t\tconst tokenCount = this._tokenCount;\n\t\tconst deletedLineCount = (endDeltaLine - startDeltaLine);\n\t\tlet newTokenCount = 0;\n\t\tlet hasDeletedTokens = false;\n\t\tfor (let i = 0; i < tokenCount; i++) {\n\t\t\tconst srcOffset = 4 * i;\n\t\t\tlet tokenDeltaLine = tokens[srcOffset];\n\t\t\tlet tokenStartCharacter = tokens[srcOffset + 1];\n\t\t\tlet tokenEndCharacter = tokens[srcOffset + 2];\n\t\t\tconst tokenMetadata = tokens[srcOffset + 3];\n\n\t\t\tif (tokenDeltaLine < startDeltaLine || (tokenDeltaLine === startDeltaLine && tokenEndCharacter <= startCharacter)) {\n\t\t\t\t// 1a. The token is completely before the deletion range\n\t\t\t\t// => nothing to do\n\t\t\t\tnewTokenCount++;\n\t\t\t\tcontinue;\n\t\t\t} else if (tokenDeltaLine === startDeltaLine && tokenStartCharacter < startCharacter) {\n\t\t\t\t// 1b, 1c, 1d\n\t\t\t\t// => the token survives, but it needs to shrink\n\t\t\t\tif (tokenDeltaLine === endDeltaLine && tokenEndCharacter > endCharacter) {\n\t\t\t\t\t// 1d. The token starts before, the deletion range is inside the token\n\t\t\t\t\t// => the token shrinks by the deletion character count\n\t\t\t\t\ttokenEndCharacter -= (endCharacter - startCharacter);\n\t\t\t\t} else {\n\t\t\t\t\t// 1b. The token starts before, the deletion range ends after the token\n\t\t\t\t\t// 1c. The token starts before, the deletion range ends precisely with the token\n\t\t\t\t\t// => the token shrinks its ending to the deletion start\n\t\t\t\t\ttokenEndCharacter = startCharacter;\n\t\t\t\t}\n\t\t\t} else if (tokenDeltaLine === startDeltaLine && tokenStartCharacter === startCharacter) {\n\t\t\t\t// 2a, 2b, 2c\n\t\t\t\tif (tokenDeltaLine === endDeltaLine && tokenEndCharacter > endCharacter) {\n\t\t\t\t\t// 2c. The token starts at the same position, and ends after the deletion range\n\t\t\t\t\t// => the token shrinks by the deletion character count\n\t\t\t\t\ttokenEndCharacter -= (endCharacter - startCharacter);\n\t\t\t\t} else {\n\t\t\t\t\t// 2a. The token starts at the same position, and ends inside the deletion range\n\t\t\t\t\t// 2b. The token starts at the same position, and ends at the same position as the deletion range\n\t\t\t\t\t// => the token is deleted\n\t\t\t\t\thasDeletedTokens = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t} else if (tokenDeltaLine < endDeltaLine || (tokenDeltaLine === endDeltaLine && tokenStartCharacter < endCharacter)) {\n\t\t\t\t// 3a, 3b, 3c\n\t\t\t\tif (tokenDeltaLine === endDeltaLine && tokenEndCharacter > endCharacter) {\n\t\t\t\t\t// 3c. The token starts inside the deletion range, and ends after the deletion range\n\t\t\t\t\t// => the token moves to continue right after the deletion\n\t\t\t\t\ttokenDeltaLine = startDeltaLine;\n\t\t\t\t\ttokenStartCharacter = startCharacter;\n\t\t\t\t\ttokenEndCharacter = tokenStartCharacter + (tokenEndCharacter - endCharacter);\n\t\t\t\t} else {\n\t\t\t\t\t// 3a. The token is inside the deletion range\n\t\t\t\t\t// 3b. The token starts inside the deletion range, and ends at the same position as the deletion range\n\t\t\t\t\t// => the token is deleted\n\t\t\t\t\thasDeletedTokens = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t} else if (tokenDeltaLine > endDeltaLine) {\n\t\t\t\t// 4. (partial) The token starts after the deletion range, on a line below...\n\t\t\t\tif (deletedLineCount === 0 && !hasDeletedTokens) {\n\t\t\t\t\t// early stop, there is no need to walk all the tokens and do nothing...\n\t\t\t\t\tnewTokenCount = tokenCount;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ttokenDeltaLine -= deletedLineCount;\n\t\t\t} else if (tokenDeltaLine === endDeltaLine && tokenStartCharacter >= endCharacter) {\n\t\t\t\t// 4. (continued) The token starts after the deletion range, on the last line where a deletion occurs\n\t\t\t\tif (horizontalShiftForFirstLineTokens && tokenDeltaLine === 0) {\n\t\t\t\t\ttokenStartCharacter += horizontalShiftForFirstLineTokens;\n\t\t\t\t\ttokenEndCharacter += horizontalShiftForFirstLineTokens;\n\t\t\t\t}\n\t\t\t\ttokenDeltaLine -= deletedLineCount;\n\t\t\t\ttokenStartCharacter -= (endCharacter - startCharacter);\n\t\t\t\ttokenEndCharacter -= (endCharacter - startCharacter);\n\t\t\t} else {\n\t\t\t\tthrow new Error(`Not possible!`);\n\t\t\t}\n\n\t\t\tconst destOffset = 4 * newTokenCount;\n\t\t\ttokens[destOffset] = tokenDeltaLine;\n\t\t\ttokens[destOffset + 1] = tokenStartCharacter;\n\t\t\ttokens[destOffset + 2] = tokenEndCharacter;\n\t\t\ttokens[destOffset + 3] = tokenMetadata;\n\t\t\tnewTokenCount++;\n\t\t}\n\n\t\tthis._tokenCount = newTokenCount;\n\t}\n\n\tpublic acceptInsertText(deltaLine: number, character: number, eolCount: number, firstLineLength: number, lastLineLength: number, firstCharCode: number): void {\n\t\t// Here are the cases I used to think about this:\n\t\t//\n\t\t// 1. The token is completely before the insertion point\n\t\t//            -----------   |\n\t\t// 2. The token ends precisely at the insertion point\n\t\t//            -----------|\n\t\t// 3. The token contains the insertion point\n\t\t//            -----|------\n\t\t// 4. The token starts precisely at the insertion point\n\t\t//            |-----------\n\t\t// 5. The token is completely after the insertion point\n\t\t//            |   -----------\n\t\t//\n\t\tconst isInsertingPreciselyOneWordCharacter = (\n\t\t\teolCount === 0\n\t\t\t&& firstLineLength === 1\n\t\t\t&& (\n\t\t\t\t(firstCharCode >= CharCode.Digit0 && firstCharCode <= CharCode.Digit9)\n\t\t\t\t|| (firstCharCode >= CharCode.A && firstCharCode <= CharCode.Z)\n\t\t\t\t|| (firstCharCode >= CharCode.a && firstCharCode <= CharCode.z)\n\t\t\t)\n\t\t);\n\t\tconst tokens = this._tokens;\n\t\tconst tokenCount = this._tokenCount;\n\t\tfor (let i = 0; i < tokenCount; i++) {\n\t\t\tconst offset = 4 * i;\n\t\t\tlet tokenDeltaLine = tokens[offset];\n\t\t\tlet tokenStartCharacter = tokens[offset + 1];\n\t\t\tlet tokenEndCharacter = tokens[offset + 2];\n\n\t\t\tif (tokenDeltaLine < deltaLine || (tokenDeltaLine === deltaLine && tokenEndCharacter < character)) {\n\t\t\t\t// 1. The token is completely before the insertion point\n\t\t\t\t// => nothing to do\n\t\t\t\tcontinue;\n\t\t\t} else if (tokenDeltaLine === deltaLine && tokenEndCharacter === character) {\n\t\t\t\t// 2. The token ends precisely at the insertion point\n\t\t\t\t// => expand the end character only if inserting precisely one character that is a word character\n\t\t\t\tif (isInsertingPreciselyOneWordCharacter) {\n\t\t\t\t\ttokenEndCharacter += 1;\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t} else if (tokenDeltaLine === deltaLine && tokenStartCharacter < character && character < tokenEndCharacter) {\n\t\t\t\t// 3. The token contains the insertion point\n\t\t\t\tif (eolCount === 0) {\n\t\t\t\t\t// => just expand the end character\n\t\t\t\t\ttokenEndCharacter += firstLineLength;\n\t\t\t\t} else {\n\t\t\t\t\t// => cut off the token\n\t\t\t\t\ttokenEndCharacter = character;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// 4. or 5.\n\t\t\t\tif (tokenDeltaLine === deltaLine && tokenStartCharacter === character) {\n\t\t\t\t\t// 4. The token starts precisely at the insertion point\n\t\t\t\t\t// => grow the token (by keeping its start constant) only if inserting precisely one character that is a word character\n\t\t\t\t\t// => otherwise behave as in case 5.\n\t\t\t\t\tif (isInsertingPreciselyOneWordCharacter) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// => the token must move and keep its size constant\n\t\t\t\tif (tokenDeltaLine === deltaLine) {\n\t\t\t\t\ttokenDeltaLine += eolCount;\n\t\t\t\t\t// this token is on the line where the insertion is taking place\n\t\t\t\t\tif (eolCount === 0) {\n\t\t\t\t\t\ttokenStartCharacter += firstLineLength;\n\t\t\t\t\t\ttokenEndCharacter += firstLineLength;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst tokenLength = tokenEndCharacter - tokenStartCharacter;\n\t\t\t\t\t\ttokenStartCharacter = lastLineLength + (tokenStartCharacter - character);\n\t\t\t\t\t\ttokenEndCharacter = tokenStartCharacter + tokenLength;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttokenDeltaLine += eolCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttokens[offset] = tokenDeltaLine;\n\t\t\ttokens[offset + 1] = tokenStartCharacter;\n\t\t\ttokens[offset + 2] = tokenEndCharacter;\n\t\t}\n\t}\n\n\tprivate static _rateLimiter = new RateLimiter(10 / 60); // limit to 10 times per minute\n\n\tpublic reportIfInvalid(model: ITextModel, startLineNumber: number): void {\n\t\tfor (let i = 0; i < this._tokenCount; i++) {\n\t\t\tconst lineNumber = this._getDeltaLine(i) + startLineNumber;\n\n\t\t\tif (lineNumber < 1) {\n\t\t\t\tSparseMultilineTokensStorage._rateLimiter.runIfNotLimited(() => {\n\t\t\t\t\tconsole.error('Invalid Semantic Tokens Data From Extension: lineNumber < 1');\n\t\t\t\t});\n\t\t\t} else if (lineNumber > model.getLineCount()) {\n\t\t\t\tSparseMultilineTokensStorage._rateLimiter.runIfNotLimited(() => {\n\t\t\t\t\tconsole.error('Invalid Semantic Tokens Data From Extension: lineNumber > model.getLineCount()');\n\t\t\t\t});\n\t\t\t} else if (this._getEndCharacter(i) > model.getLineLength(lineNumber)) {\n\t\t\t\tSparseMultilineTokensStorage._rateLimiter.runIfNotLimited(() => {\n\t\t\t\t\tconsole.error('Invalid Semantic Tokens Data From Extension: end character > model.getLineLength(lineNumber)');\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport class SparseLineTokens {\n\n\tprivate readonly _tokens: Uint32Array;\n\n\tconstructor(tokens: Uint32Array) {\n\t\tthis._tokens = tokens;\n\t}\n\n\tpublic getCount(): number {\n\t\treturn this._tokens.length / 4;\n\t}\n\n\tpublic getStartCharacter(tokenIndex: number): number {\n\t\treturn this._tokens[4 * tokenIndex + 1];\n\t}\n\n\tpublic getEndCharacter(tokenIndex: number): number {\n\t\treturn this._tokens[4 * tokenIndex + 2];\n\t}\n\n\tpublic getMetadata(tokenIndex: number): number {\n\t\treturn this._tokens[4 * tokenIndex + 3];\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from '../../../base/common/charCode.js';\nimport { Position } from '../core/position.js';\nimport { IRange, Range } from '../core/range.js';\nimport { countEOL } from '../core/misc/eolCounter.js';\nimport { ITextModel } from '../model.js';\nimport { RateLimiter } from './common.js';\n\n/**\n * Represents sparse tokens over a contiguous range of lines.\n */\nexport class SparseMultilineTokens {\n\n\tpublic static create(startLineNumber: number, tokens: Uint32Array): SparseMultilineTokens {\n\t\treturn new SparseMultilineTokens(startLineNumber, new SparseMultilineTokensStorage(tokens));\n\t}\n\n\tprivate _startLineNumber: number;\n\tprivate _endLineNumber: number;\n\tprivate readonly _tokens: SparseMultilineTokensStorage;\n\n\t/**\n\t * (Inclusive) start line number for these tokens.\n\t */\n\tpublic get startLineNumber(): number {\n\t\treturn this._startLineNumber;\n\t}\n\n\t/**\n\t * (Inclusive) end line number for these tokens.\n\t */\n\tpublic get endLineNumber(): number {\n\t\treturn this._endLineNumber;\n\t}\n\n\tprivate constructor(startLineNumber: number, tokens: SparseMultilineTokensStorage) {\n\t\tthis._startLineNumber = startLineNumber;\n\t\tthis._tokens = tokens;\n\t\tthis._endLineNumber = this._startLineNumber + this._tokens.getMaxDeltaLine();\n\t}\n\n\tpublic toString(): string {\n\t\treturn this._tokens.toString(this._startLineNumber);\n\t}\n\n\tprivate _updateEndLineNumber(): void {\n\t\tthis._endLineNumber = this._startLineNumber + this._tokens.getMaxDeltaLine();\n\t}\n\n\tpublic isEmpty(): boolean {\n\t\treturn this._tokens.isEmpty();\n\t}\n\n\tpublic getLineTokens(lineNumber: number): SparseLineTokens | null {\n\t\tif (this._startLineNumber <= lineNumber && lineNumber <= this._endLineNumber) {\n\t\t\treturn this._tokens.getLineTokens(lineNumber - this._startLineNumber);\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic getRange(): Range | null {\n\t\tconst deltaRange = this._tokens.getRange();\n\t\tif (!deltaRange) {\n\t\t\treturn deltaRange;\n\t\t}\n\t\treturn new Range(this._startLineNumber + deltaRange.startLineNumber, deltaRange.startColumn, this._startLineNumber + deltaRange.endLineNumber, deltaRange.endColumn);\n\t}\n\n\tpublic removeTokens(range: Range): void {\n\t\tconst startLineIndex = range.startLineNumber - this._startLineNumber;\n\t\tconst endLineIndex = range.endLineNumber - this._startLineNumber;\n\n\t\tthis._startLineNumber += this._tokens.removeTokens(startLineIndex, range.startColumn - 1, endLineIndex, range.endColumn - 1);\n\t\tthis._updateEndLineNumber();\n\t}\n\n\tpublic split(range: Range): [SparseMultilineTokens, SparseMultilineTokens] {\n\t\t// split tokens to two:\n\t\t// a) all the tokens before `range`\n\t\t// b) all the tokens after `range`\n\t\tconst startLineIndex = range.startLineNumber - this._startLineNumber;\n\t\tconst endLineIndex = range.endLineNumber - this._startLineNumber;\n\n\t\tconst [a, b, bDeltaLine] = this._tokens.split(startLineIndex, range.startColumn - 1, endLineIndex, range.endColumn - 1);\n\t\treturn [new SparseMultilineTokens(this._startLineNumber, a), new SparseMultilineTokens(this._startLineNumber + bDeltaLine, b)];\n\t}\n\n\tpublic applyEdit(range: IRange, text: string): void {\n\t\tconst [eolCount, firstLineLength, lastLineLength] = countEOL(text);\n\t\tthis.acceptEdit(range, eolCount, firstLineLength, lastLineLength, text.length > 0 ? text.charCodeAt(0) : CharCode.Null);\n\t}\n\n\tpublic acceptEdit(range: IRange, eolCount: number, firstLineLength: number, lastLineLength: number, firstCharCode: number): void {\n\t\tthis._acceptDeleteRange(range);\n\t\tthis._acceptInsertText(new Position(range.startLineNumber, range.startColumn), eolCount, firstLineLength, lastLineLength, firstCharCode);\n\t\tthis._updateEndLineNumber();\n\t}\n\n\tprivate _acceptDeleteRange(range: IRange): void {\n\t\tif (range.startLineNumber === range.endLineNumber && range.startColumn === range.endColumn) {\n\t\t\t// Nothing to delete\n\t\t\treturn;\n\t\t}\n\n\t\tconst firstLineIndex = range.startLineNumber - this._startLineNumber;\n\t\tconst lastLineIndex = range.endLineNumber - this._startLineNumber;\n\n\t\tif (lastLineIndex < 0) {\n\t\t\t// this deletion occurs entirely before this block, so we only need to adjust line numbers\n\t\t\tconst deletedLinesCount = lastLineIndex - firstLineIndex;\n\t\t\tthis._startLineNumber -= deletedLinesCount;\n\t\t\treturn;\n\t\t}\n\n\t\tconst tokenMaxDeltaLine = this._tokens.getMaxDeltaLine();\n\n\t\tif (firstLineIndex >= tokenMaxDeltaLine + 1) {\n\t\t\t// this deletion occurs entirely after this block, so there is nothing to do\n\t\t\treturn;\n\t\t}\n\n\t\tif (firstLineIndex < 0 && lastLineIndex >= tokenMaxDeltaLine + 1) {\n\t\t\t// this deletion completely encompasses this block\n\t\t\tthis._startLineNumber = 0;\n\t\t\tthis._tokens.clear();\n\t\t\treturn;\n\t\t}\n\n\t\tif (firstLineIndex < 0) {\n\t\t\tconst deletedBefore = -firstLineIndex;\n\t\t\tthis._startLineNumber -= deletedBefore;\n\n\t\t\tthis._tokens.acceptDeleteRange(range.startColumn - 1, 0, 0, lastLineIndex, range.endColumn - 1);\n\t\t} else {\n\t\t\tthis._tokens.acceptDeleteRange(0, firstLineIndex, range.startColumn - 1, lastLineIndex, range.endColumn - 1);\n\t\t}\n\t}\n\n\tprivate _acceptInsertText(position: Position, eolCount: number, firstLineLength: number, lastLineLength: number, firstCharCode: number): void {\n\n\t\tif (eolCount === 0 && firstLineLength === 0) {\n\t\t\t// Nothing to insert\n\t\t\treturn;\n\t\t}\n\n\t\tconst lineIndex = position.lineNumber - this._startLineNumber;\n\n\t\tif (lineIndex < 0) {\n\t\t\t// this insertion occurs before this block, so we only need to adjust line numbers\n\t\t\tthis._startLineNumber += eolCount;\n\t\t\treturn;\n\t\t}\n\n\t\tconst tokenMaxDeltaLine = this._tokens.getMaxDeltaLine();\n\n\t\tif (lineIndex >= tokenMaxDeltaLine + 1) {\n\t\t\t// this insertion occurs after this block, so there is nothing to do\n\t\t\treturn;\n\t\t}\n\n\t\tthis._tokens.acceptInsertText(lineIndex, position.column - 1, eolCount, firstLineLength, lastLineLength, firstCharCode);\n\t}\n\n\tpublic reportIfInvalid(model: ITextModel): void {\n\t\tthis._tokens.reportIfInvalid(model, this._startLineNumber);\n\t}\n}\n\nclass SparseMultilineTokensStorage {\n\t/**\n\t * The encoding of tokens is:\n\t *  4*i    deltaLine (from `startLineNumber`)\n\t *  4*i+1  startCharacter (from the line start)\n\t *  4*i+2  endCharacter (from the line start)\n\t *  4*i+3  metadata\n\t */\n\tprivate readonly _tokens: Uint32Array;\n\tprivate _tokenCount: number;\n\n\tconstructor(tokens: Uint32Array) {\n\t\tthis._tokens = tokens;\n\t\tthis._tokenCount = tokens.length / 4;\n\t}\n\n\tpublic toString(startLineNumber: number): string {\n\t\tconst pieces: string[] = [];\n\t\tfor (let i = 0; i < this._tokenCount; i++) {\n\t\t\tpieces.push(`(${this._getDeltaLine(i) + startLineNumber},${this._getStartCharacter(i)}-${this._getEndCharacter(i)})`);\n\t\t}\n\t\treturn `[${pieces.join(',')}]`;\n\t}\n\n\tpublic getMaxDeltaLine(): number {\n\t\tconst tokenCount = this._getTokenCount();\n\t\tif (tokenCount === 0) {\n\t\t\treturn -1;\n\t\t}\n\t\treturn this._getDeltaLine(tokenCount - 1);\n\t}\n\n\tpublic getRange(): Range | null {\n\t\tconst tokenCount = this._getTokenCount();\n\t\tif (tokenCount === 0) {\n\t\t\treturn null;\n\t\t}\n\t\tconst startChar = this._getStartCharacter(0);\n\t\tconst maxDeltaLine = this._getDeltaLine(tokenCount - 1);\n\t\tconst endChar = this._getEndCharacter(tokenCount - 1);\n\t\treturn new Range(0, startChar + 1, maxDeltaLine, endChar + 1);\n\t}\n\n\tprivate _getTokenCount(): number {\n\t\treturn this._tokenCount;\n\t}\n\n\tprivate _getDeltaLine(tokenIndex: number): number {\n\t\treturn this._tokens[4 * tokenIndex];\n\t}\n\n\tprivate _getStartCharacter(tokenIndex: number): number {\n\t\treturn this._tokens[4 * tokenIndex + 1];\n\t}\n\n\tprivate _getEndCharacter(tokenIndex: number): number {\n\t\treturn this._tokens[4 * tokenIndex + 2];\n\t}\n\n\tpublic isEmpty(): boolean {\n\t\treturn (this._getTokenCount() === 0);\n\t}\n\n\tpublic getLineTokens(deltaLine: number): SparseLineTokens | null {\n\t\tlet low = 0;\n\t\tlet high = this._getTokenCount() - 1;\n\n\t\twhile (low < high) {\n\t\t\tconst mid = low + Math.floor((high - low) / 2);\n\t\t\tconst midDeltaLine = this._getDeltaLine(mid);\n\n\t\t\tif (midDeltaLine < deltaLine) {\n\t\t\t\tlow = mid + 1;\n\t\t\t} else if (midDeltaLine > deltaLine) {\n\t\t\t\thigh = mid - 1;\n\t\t\t} else {\n\t\t\t\tlet min = mid;\n\t\t\t\twhile (min > low && this._getDeltaLine(min - 1) === deltaLine) {\n\t\t\t\t\tmin--;\n\t\t\t\t}\n\t\t\t\tlet max = mid;\n\t\t\t\twhile (max < high && this._getDeltaLine(max + 1) === deltaLine) {\n\t\t\t\t\tmax++;\n\t\t\t\t}\n\t\t\t\treturn new SparseLineTokens(this._tokens.subarray(4 * min, 4 * max + 4));\n\t\t\t}\n\t\t}\n\n\t\tif (this._getDeltaLine(low) === deltaLine) {\n\t\t\treturn new SparseLineTokens(this._tokens.subarray(4 * low, 4 * low + 4));\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic clear(): void {\n\t\tthis._tokenCount = 0;\n\t}\n\n\tpublic removeTokens(startDeltaLine: number, startChar: number, endDeltaLine: number, endChar: number): number {\n\t\tconst tokens = this._tokens;\n\t\tconst tokenCount = this._tokenCount;\n\t\tlet newTokenCount = 0;\n\t\tlet hasDeletedTokens = false;\n\t\tlet firstDeltaLine = 0;\n\t\tfor (let i = 0; i < tokenCount; i++) {\n\t\t\tconst srcOffset = 4 * i;\n\t\t\tconst tokenDeltaLine = tokens[srcOffset];\n\t\t\tconst tokenStartCharacter = tokens[srcOffset + 1];\n\t\t\tconst tokenEndCharacter = tokens[srcOffset + 2];\n\t\t\tconst tokenMetadata = tokens[srcOffset + 3];\n\n\t\t\tif (\n\t\t\t\t(tokenDeltaLine > startDeltaLine || (tokenDeltaLine === startDeltaLine && tokenEndCharacter >= startChar))\n\t\t\t\t&& (tokenDeltaLine < endDeltaLine || (tokenDeltaLine === endDeltaLine && tokenStartCharacter <= endChar))\n\t\t\t) {\n\t\t\t\thasDeletedTokens = true;\n\t\t\t} else {\n\t\t\t\tif (newTokenCount === 0) {\n\t\t\t\t\tfirstDeltaLine = tokenDeltaLine;\n\t\t\t\t}\n\t\t\t\tif (hasDeletedTokens) {\n\t\t\t\t\t// must move the token to the left\n\t\t\t\t\tconst destOffset = 4 * newTokenCount;\n\t\t\t\t\ttokens[destOffset] = tokenDeltaLine - firstDeltaLine;\n\t\t\t\t\ttokens[destOffset + 1] = tokenStartCharacter;\n\t\t\t\t\ttokens[destOffset + 2] = tokenEndCharacter;\n\t\t\t\t\ttokens[destOffset + 3] = tokenMetadata;\n\t\t\t\t}\n\t\t\t\tnewTokenCount++;\n\t\t\t}\n\t\t}\n\n\t\tthis._tokenCount = newTokenCount;\n\n\t\treturn firstDeltaLine;\n\t}\n\n\tpublic split(startDeltaLine: number, startChar: number, endDeltaLine: number, endChar: number): [SparseMultilineTokensStorage, SparseMultilineTokensStorage, number] {\n\t\tconst tokens = this._tokens;\n\t\tconst tokenCount = this._tokenCount;\n\t\tconst aTokens: number[] = [];\n\t\tconst bTokens: number[] = [];\n\t\tlet destTokens: number[] = aTokens;\n\t\tlet destOffset = 0;\n\t\tlet destFirstDeltaLine: number = 0;\n\t\tfor (let i = 0; i < tokenCount; i++) {\n\t\t\tconst srcOffset = 4 * i;\n\t\t\tconst tokenDeltaLine = tokens[srcOffset];\n\t\t\tconst tokenStartCharacter = tokens[srcOffset + 1];\n\t\t\tconst tokenEndCharacter = tokens[srcOffset + 2];\n\t\t\tconst tokenMetadata = tokens[srcOffset + 3];\n\n\t\t\tif ((tokenDeltaLine > startDeltaLine || (tokenDeltaLine === startDeltaLine && tokenEndCharacter >= startChar))) {\n\t\t\t\tif ((tokenDeltaLine < endDeltaLine || (tokenDeltaLine === endDeltaLine && tokenStartCharacter <= endChar))) {\n\t\t\t\t\t// this token is touching the range\n\t\t\t\t\tcontinue;\n\t\t\t\t} else {\n\t\t\t\t\t// this token is after the range\n\t\t\t\t\tif (destTokens !== bTokens) {\n\t\t\t\t\t\t// this token is the first token after the range\n\t\t\t\t\t\tdestTokens = bTokens;\n\t\t\t\t\t\tdestOffset = 0;\n\t\t\t\t\t\tdestFirstDeltaLine = tokenDeltaLine;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdestTokens[destOffset++] = tokenDeltaLine - destFirstDeltaLine;\n\t\t\tdestTokens[destOffset++] = tokenStartCharacter;\n\t\t\tdestTokens[destOffset++] = tokenEndCharacter;\n\t\t\tdestTokens[destOffset++] = tokenMetadata;\n\t\t}\n\n\t\treturn [new SparseMultilineTokensStorage(new Uint32Array(aTokens)), new SparseMultilineTokensStorage(new Uint32Array(bTokens)), destFirstDeltaLine];\n\t}\n\n\tpublic acceptDeleteRange(horizontalShiftForFirstLineTokens: number, startDeltaLine: number, startCharacter: number, endDeltaLine: number, endCharacter: number): void {\n\t\t// This is a bit complex, here are the cases I used to think about this:\n\t\t//\n\t\t// 1. The token starts before the deletion range\n\t\t// 1a. The token is completely before the deletion range\n\t\t//               -----------\n\t\t//                          xxxxxxxxxxx\n\t\t// 1b. The token starts before, the deletion range ends after the token\n\t\t//               -----------\n\t\t//                      xxxxxxxxxxx\n\t\t// 1c. The token starts before, the deletion range ends precisely with the token\n\t\t//               ---------------\n\t\t//                      xxxxxxxx\n\t\t// 1d. The token starts before, the deletion range is inside the token\n\t\t//               ---------------\n\t\t//                    xxxxx\n\t\t//\n\t\t// 2. The token starts at the same position with the deletion range\n\t\t// 2a. The token starts at the same position, and ends inside the deletion range\n\t\t//               -------\n\t\t//               xxxxxxxxxxx\n\t\t// 2b. The token starts at the same position, and ends at the same position as the deletion range\n\t\t//               ----------\n\t\t//               xxxxxxxxxx\n\t\t// 2c. The token starts at the same position, and ends after the deletion range\n\t\t//               -------------\n\t\t//               xxxxxxx\n\t\t//\n\t\t// 3. The token starts inside the deletion range\n\t\t// 3a. The token is inside the deletion range\n\t\t//                -------\n\t\t//             xxxxxxxxxxxxx\n\t\t// 3b. The token starts inside the deletion range, and ends at the same position as the deletion range\n\t\t//                ----------\n\t\t//             xxxxxxxxxxxxx\n\t\t// 3c. The token starts inside the deletion range, and ends after the deletion range\n\t\t//                ------------\n\t\t//             xxxxxxxxxxx\n\t\t//\n\t\t// 4. The token starts after the deletion range\n\t\t//                  -----------\n\t\t//          xxxxxxxx\n\t\t//\n\t\tconst tokens = this._tokens;\n\t\tconst tokenCount = this._tokenCount;\n\t\tconst deletedLineCount = (endDeltaLine - startDeltaLine);\n\t\tlet newTokenCount = 0;\n\t\tlet hasDeletedTokens = false;\n\t\tfor (let i = 0; i < tokenCount; i++) {\n\t\t\tconst srcOffset = 4 * i;\n\t\t\tlet tokenDeltaLine = tokens[srcOffset];\n\t\t\tlet tokenStartCharacter = tokens[srcOffset + 1];\n\t\t\tlet tokenEndCharacter = tokens[srcOffset + 2];\n\t\t\tconst tokenMetadata = tokens[srcOffset + 3];\n\n\t\t\tif (tokenDeltaLine < startDeltaLine || (tokenDeltaLine === startDeltaLine && tokenEndCharacter <= startCharacter)) {\n\t\t\t\t// 1a. The token is completely before the deletion range\n\t\t\t\t// => nothing to do\n\t\t\t\tnewTokenCount++;\n\t\t\t\tcontinue;\n\t\t\t} else if (tokenDeltaLine === startDeltaLine && tokenStartCharacter < startCharacter) {\n\t\t\t\t// 1b, 1c, 1d\n\t\t\t\t// => the token survives, but it needs to shrink\n\t\t\t\tif (tokenDeltaLine === endDeltaLine && tokenEndCharacter > endCharacter) {\n\t\t\t\t\t// 1d. The token starts before, the deletion range is inside the token\n\t\t\t\t\t// => the token shrinks by the deletion character count\n\t\t\t\t\ttokenEndCharacter -= (endCharacter - startCharacter);\n\t\t\t\t} else {\n\t\t\t\t\t// 1b. The token starts before, the deletion range ends after the token\n\t\t\t\t\t// 1c. The token starts before, the deletion range ends precisely with the token\n\t\t\t\t\t// => the token shrinks its ending to the deletion start\n\t\t\t\t\ttokenEndCharacter = startCharacter;\n\t\t\t\t}\n\t\t\t} else if (tokenDeltaLine === startDeltaLine && tokenStartCharacter === startCharacter) {\n\t\t\t\t// 2a, 2b, 2c\n\t\t\t\tif (tokenDeltaLine === endDeltaLine && tokenEndCharacter > endCharacter) {\n\t\t\t\t\t// 2c. The token starts at the same position, and ends after the deletion range\n\t\t\t\t\t// => the token shrinks by the deletion character count\n\t\t\t\t\ttokenEndCharacter -= (endCharacter - startCharacter);\n\t\t\t\t} else {\n\t\t\t\t\t// 2a. The token starts at the same position, and ends inside the deletion range\n\t\t\t\t\t// 2b. The token starts at the same position, and ends at the same position as the deletion range\n\t\t\t\t\t// => the token is deleted\n\t\t\t\t\thasDeletedTokens = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t} else if (tokenDeltaLine < endDeltaLine || (tokenDeltaLine === endDeltaLine && tokenStartCharacter < endCharacter)) {\n\t\t\t\t// 3a, 3b, 3c\n\t\t\t\tif (tokenDeltaLine === endDeltaLine && tokenEndCharacter > endCharacter) {\n\t\t\t\t\t// 3c. The token starts inside the deletion range, and ends after the deletion range\n\t\t\t\t\t// => the token moves to continue right after the deletion\n\t\t\t\t\ttokenDeltaLine = startDeltaLine;\n\t\t\t\t\ttokenStartCharacter = startCharacter;\n\t\t\t\t\ttokenEndCharacter = tokenStartCharacter + (tokenEndCharacter - endCharacter);\n\t\t\t\t} else {\n\t\t\t\t\t// 3a. The token is inside the deletion range\n\t\t\t\t\t// 3b. The token starts inside the deletion range, and ends at the same position as the deletion range\n\t\t\t\t\t// => the token is deleted\n\t\t\t\t\thasDeletedTokens = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t} else if (tokenDeltaLine > endDeltaLine) {\n\t\t\t\t// 4. (partial) The token starts after the deletion range, on a line below...\n\t\t\t\tif (deletedLineCount === 0 && !hasDeletedTokens) {\n\t\t\t\t\t// early stop, there is no need to walk all the tokens and do nothing...\n\t\t\t\t\tnewTokenCount = tokenCount;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ttokenDeltaLine -= deletedLineCount;\n\t\t\t} else if (tokenDeltaLine === endDeltaLine && tokenStartCharacter >= endCharacter) {\n\t\t\t\t// 4. (continued) The token starts after the deletion range, on the last line where a deletion occurs\n\t\t\t\tif (horizontalShiftForFirstLineTokens && tokenDeltaLine === 0) {\n\t\t\t\t\ttokenStartCharacter += horizontalShiftForFirstLineTokens;\n\t\t\t\t\ttokenEndCharacter += horizontalShiftForFirstLineTokens;\n\t\t\t\t}\n\t\t\t\ttokenDeltaLine -= deletedLineCount;\n\t\t\t\ttokenStartCharacter -= (endCharacter - startCharacter);\n\t\t\t\ttokenEndCharacter -= (endCharacter - startCharacter);\n\t\t\t} else {\n\t\t\t\tthrow new Error(`Not possible!`);\n\t\t\t}\n\n\t\t\tconst destOffset = 4 * newTokenCount;\n\t\t\ttokens[destOffset] = tokenDeltaLine;\n\t\t\ttokens[destOffset + 1] = tokenStartCharacter;\n\t\t\ttokens[destOffset + 2] = tokenEndCharacter;\n\t\t\ttokens[destOffset + 3] = tokenMetadata;\n\t\t\tnewTokenCount++;\n\t\t}\n\n\t\tthis._tokenCount = newTokenCount;\n\t}\n\n\tpublic acceptInsertText(deltaLine: number, character: number, eolCount: number, firstLineLength: number, lastLineLength: number, firstCharCode: number): void {\n\t\t// Here are the cases I used to think about this:\n\t\t//\n\t\t// 1. The token is completely before the insertion point\n\t\t//            -----------   |\n\t\t// 2. The token ends precisely at the insertion point\n\t\t//            -----------|\n\t\t// 3. The token contains the insertion point\n\t\t//            -----|------\n\t\t// 4. The token starts precisely at the insertion point\n\t\t//            |-----------\n\t\t// 5. The token is completely after the insertion point\n\t\t//            |   -----------\n\t\t//\n\t\tconst isInsertingPreciselyOneWordCharacter = (\n\t\t\teolCount === 0\n\t\t\t&& firstLineLength === 1\n\t\t\t&& (\n\t\t\t\t(firstCharCode >= CharCode.Digit0 && firstCharCode <= CharCode.Digit9)\n\t\t\t\t|| (firstCharCode >= CharCode.A && firstCharCode <= CharCode.Z)\n\t\t\t\t|| (firstCharCode >= CharCode.a && firstCharCode <= CharCode.z)\n\t\t\t)\n\t\t);\n\t\tconst tokens = this._tokens;\n\t\tconst tokenCount = this._tokenCount;\n\t\tfor (let i = 0; i < tokenCount; i++) {\n\t\t\tconst offset = 4 * i;\n\t\t\tlet tokenDeltaLine = tokens[offset];\n\t\t\tlet tokenStartCharacter = tokens[offset + 1];\n\t\t\tlet tokenEndCharacter = tokens[offset + 2];\n\n\t\t\tif (tokenDeltaLine < deltaLine || (tokenDeltaLine === deltaLine && tokenEndCharacter < character)) {\n\t\t\t\t// 1. The token is completely before the insertion point\n\t\t\t\t// => nothing to do\n\t\t\t\tcontinue;\n\t\t\t} else if (tokenDeltaLine === deltaLine && tokenEndCharacter === character) {\n\t\t\t\t// 2. The token ends precisely at the insertion point\n\t\t\t\t// => expand the end character only if inserting precisely one character that is a word character\n\t\t\t\tif (isInsertingPreciselyOneWordCharacter) {\n\t\t\t\t\ttokenEndCharacter += 1;\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t} else if (tokenDeltaLine === deltaLine && tokenStartCharacter < character && character < tokenEndCharacter) {\n\t\t\t\t// 3. The token contains the insertion point\n\t\t\t\tif (eolCount === 0) {\n\t\t\t\t\t// => just expand the end character\n\t\t\t\t\ttokenEndCharacter += firstLineLength;\n\t\t\t\t} else {\n\t\t\t\t\t// => cut off the token\n\t\t\t\t\ttokenEndCharacter = character;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// 4. or 5.\n\t\t\t\tif (tokenDeltaLine === deltaLine && tokenStartCharacter === character) {\n\t\t\t\t\t// 4. The token starts precisely at the insertion point\n\t\t\t\t\t// => grow the token (by keeping its start constant) only if inserting precisely one character that is a word character\n\t\t\t\t\t// => otherwise behave as in case 5.\n\t\t\t\t\tif (isInsertingPreciselyOneWordCharacter) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// => the token must move and keep its size constant\n\t\t\t\tif (tokenDeltaLine === deltaLine) {\n\t\t\t\t\ttokenDeltaLine += eolCount;\n\t\t\t\t\t// this token is on the line where the insertion is taking place\n\t\t\t\t\tif (eolCount === 0) {\n\t\t\t\t\t\ttokenStartCharacter += firstLineLength;\n\t\t\t\t\t\ttokenEndCharacter += firstLineLength;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst tokenLength = tokenEndCharacter - tokenStartCharacter;\n\t\t\t\t\t\ttokenStartCharacter = lastLineLength + (tokenStartCharacter - character);\n\t\t\t\t\t\ttokenEndCharacter = tokenStartCharacter + tokenLength;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttokenDeltaLine += eolCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttokens[offset] = tokenDeltaLine;\n\t\t\ttokens[offset + 1] = tokenStartCharacter;\n\t\t\ttokens[offset + 2] = tokenEndCharacter;\n\t\t}\n\t}\n\n\tprivate static _rateLimiter = new RateLimiter(10 / 60); // limit to 10 times per minute\n\n\tpublic reportIfInvalid(model: ITextModel, startLineNumber: number): void {\n\t\tfor (let i = 0; i < this._tokenCount; i++) {\n\t\t\tconst lineNumber = this._getDeltaLine(i) + startLineNumber;\n\n\t\t\tif (lineNumber < 1) {\n\t\t\t\tSparseMultilineTokensStorage._rateLimiter.runIfNotLimited(() => {\n\t\t\t\t\tconsole.error('Invalid Semantic Tokens Data From Extension: lineNumber < 1');\n\t\t\t\t});\n\t\t\t} else if (lineNumber > model.getLineCount()) {\n\t\t\t\tSparseMultilineTokensStorage._rateLimiter.runIfNotLimited(() => {\n\t\t\t\t\tconsole.error('Invalid Semantic Tokens Data From Extension: lineNumber > model.getLineCount()');\n\t\t\t\t});\n\t\t\t} else if (this._getEndCharacter(i) > model.getLineLength(lineNumber)) {\n\t\t\t\tSparseMultilineTokensStorage._rateLimiter.runIfNotLimited(() => {\n\t\t\t\t\tconsole.error('Invalid Semantic Tokens Data From Extension: end character > model.getLineLength(lineNumber)');\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport class SparseLineTokens {\n\n\tprivate readonly _tokens: Uint32Array;\n\n\tconstructor(tokens: Uint32Array) {\n\t\tthis._tokens = tokens;\n\t}\n\n\tpublic getCount(): number {\n\t\treturn this._tokens.length / 4;\n\t}\n\n\tpublic getStartCharacter(tokenIndex: number): number {\n\t\treturn this._tokens[4 * tokenIndex + 1];\n\t}\n\n\tpublic getEndCharacter(tokenIndex: number): number {\n\t\treturn this._tokens[4 * tokenIndex + 2];\n\t}\n\n\tpublic getMetadata(tokenIndex: number): number {\n\t\treturn this._tokens[4 * tokenIndex + 3];\n\t}\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2706, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/monaco-editor/esm/vs/editor/common/editorContextKeys.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/vs/editor/common/editorContextKeys.ts"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../nls.js';\nimport { RawContextKey } from '../../platform/contextkey/common/contextkey.js';\n\nexport namespace EditorContextKeys {\n\n\texport const editorSimpleInput = new RawContextKey<boolean>('editorSimpleInput', false, true);\n\t/**\n\t * A context key that is set when the editor's text has focus (cursor is blinking).\n\t * Is false when focus is in simple editor widgets (repl input, scm commit input).\n\t */\n\texport const editorTextFocus = new RawContextKey<boolean>('editorTextFocus', false, nls.localize('editorTextFocus', \"Whether the editor text has focus (cursor is blinking)\"));\n\t/**\n\t * A context key that is set when the editor's text or an editor's widget has focus.\n\t */\n\texport const focus = new RawContextKey<boolean>('editorFocus', false, nls.localize('editorFocus', \"Whether the editor or an editor widget has focus (e.g. focus is in the find widget)\"));\n\n\t/**\n\t * A context key that is set when any editor input has focus (regular editor, repl input...).\n\t */\n\texport const textInputFocus = new RawContextKey<boolean>('textInputFocus', false, nls.localize('textInputFocus', \"Whether an editor or a rich text input has focus (cursor is blinking)\"));\n\n\texport const readOnly = new RawContextKey<boolean>('editorReadonly', false, nls.localize('editorReadonly', \"Whether the editor is read-only\"));\n\texport const inDiffEditor = new RawContextKey<boolean>('inDiffEditor', false, nls.localize('inDiffEditor', \"Whether the context is a diff editor\"));\n\texport const isEmbeddedDiffEditor = new RawContextKey<boolean>('isEmbeddedDiffEditor', false, nls.localize('isEmbeddedDiffEditor', \"Whether the context is an embedded diff editor\"));\n\texport const multiDiffEditorAllCollapsed = new RawContextKey<boolean>('multiDiffEditorAllCollapsed', undefined, nls.localize('multiDiffEditorAllCollapsed', \"Whether all files in multi diff editor are collapsed\"));\n\texport const hasChanges = new RawContextKey<boolean>('diffEditorHasChanges', false, nls.localize('diffEditorHasChanges', \"Whether the diff editor has changes\"));\n\texport const comparingMovedCode = new RawContextKey<boolean>('comparingMovedCode', false, nls.localize('comparingMovedCode', \"Whether a moved code block is selected for comparison\"));\n\texport const accessibleDiffViewerVisible = new RawContextKey<boolean>('accessibleDiffViewerVisible', false, nls.localize('accessibleDiffViewerVisible', \"Whether the accessible diff viewer is visible\"));\n\texport const diffEditorRenderSideBySideInlineBreakpointReached = new RawContextKey<boolean>('diffEditorRenderSideBySideInlineBreakpointReached', false, nls.localize('diffEditorRenderSideBySideInlineBreakpointReached', \"Whether the diff editor render side by side inline breakpoint is reached\"));\n\texport const diffEditorInlineMode = new RawContextKey<boolean>('diffEditorInlineMode', false, nls.localize('diffEditorInlineMode', \"Whether inline mode is active\"));\n\n\texport const diffEditorOriginalWritable = new RawContextKey<boolean>('diffEditorOriginalWritable', false, nls.localize('diffEditorOriginalWritable', \"Whether modified is writable in the diff editor\"));\n\texport const diffEditorModifiedWritable = new RawContextKey<boolean>('diffEditorModifiedWritable', false, nls.localize('diffEditorModifiedWritable', \"Whether modified is writable in the diff editor\"));\n\texport const diffEditorOriginalUri = new RawContextKey<string>('diffEditorOriginalUri', '', nls.localize('diffEditorOriginalUri', \"The uri of the original document\"));\n\texport const diffEditorModifiedUri = new RawContextKey<string>('diffEditorModifiedUri', '', nls.localize('diffEditorModifiedUri', \"The uri of the modified document\"));\n\n\texport const columnSelection = new RawContextKey<boolean>('editorColumnSelection', false, nls.localize('editorColumnSelection', \"Whether `editor.columnSelection` is enabled\"));\n\texport const writable = readOnly.toNegated();\n\texport const hasNonEmptySelection = new RawContextKey<boolean>('editorHasSelection', false, nls.localize('editorHasSelection', \"Whether the editor has text selected\"));\n\texport const hasOnlyEmptySelection = hasNonEmptySelection.toNegated();\n\texport const hasMultipleSelections = new RawContextKey<boolean>('editorHasMultipleSelections', false, nls.localize('editorHasMultipleSelections', \"Whether the editor has multiple selections\"));\n\texport const hasSingleSelection = hasMultipleSelections.toNegated();\n\texport const tabMovesFocus = new RawContextKey<boolean>('editorTabMovesFocus', false, nls.localize('editorTabMovesFocus', \"Whether `Tab` will move focus out of the editor\"));\n\texport const tabDoesNotMoveFocus = tabMovesFocus.toNegated();\n\texport const isInEmbeddedEditor = new RawContextKey<boolean>('isInEmbeddedEditor', false, true);\n\texport const canUndo = new RawContextKey<boolean>('canUndo', false, true);\n\texport const canRedo = new RawContextKey<boolean>('canRedo', false, true);\n\n\texport const hoverVisible = new RawContextKey<boolean>('editorHoverVisible', false, nls.localize('editorHoverVisible', \"Whether the editor hover is visible\"));\n\texport const hoverFocused = new RawContextKey<boolean>('editorHoverFocused', false, nls.localize('editorHoverFocused', \"Whether the editor hover is focused\"));\n\n\texport const stickyScrollFocused = new RawContextKey<boolean>('stickyScrollFocused', false, nls.localize('stickyScrollFocused', \"Whether the sticky scroll is focused\"));\n\texport const stickyScrollVisible = new RawContextKey<boolean>('stickyScrollVisible', false, nls.localize('stickyScrollVisible', \"Whether the sticky scroll is visible\"));\n\n\texport const standaloneColorPickerVisible = new RawContextKey<boolean>('standaloneColorPickerVisible', false, nls.localize('standaloneColorPickerVisible', \"Whether the standalone color picker is visible\"));\n\texport const standaloneColorPickerFocused = new RawContextKey<boolean>('standaloneColorPickerFocused', false, nls.localize('standaloneColorPickerFocused', \"Whether the standalone color picker is focused\"));\n\t/**\n\t * A context key that is set when an editor is part of a larger editor, like notebooks or\n\t * (future) a diff editor\n\t */\n\texport const inCompositeEditor = new RawContextKey<boolean>('inCompositeEditor', undefined, nls.localize('inCompositeEditor', \"Whether the editor is part of a larger editor (e.g. notebooks)\"));\n\texport const notInCompositeEditor = inCompositeEditor.toNegated();\n\n\t// -- mode context keys\n\texport const languageId = new RawContextKey<string>('editorLangId', '', nls.localize('editorLangId', \"The language identifier of the editor\"));\n\texport const hasCompletionItemProvider = new RawContextKey<boolean>('editorHasCompletionItemProvider', false, nls.localize('editorHasCompletionItemProvider', \"Whether the editor has a completion item provider\"));\n\texport const hasCodeActionsProvider = new RawContextKey<boolean>('editorHasCodeActionsProvider', false, nls.localize('editorHasCodeActionsProvider', \"Whether the editor has a code actions provider\"));\n\texport const hasCodeLensProvider = new RawContextKey<boolean>('editorHasCodeLensProvider', false, nls.localize('editorHasCodeLensProvider', \"Whether the editor has a code lens provider\"));\n\texport const hasDefinitionProvider = new RawContextKey<boolean>('editorHasDefinitionProvider', false, nls.localize('editorHasDefinitionProvider', \"Whether the editor has a definition provider\"));\n\texport const hasDeclarationProvider = new RawContextKey<boolean>('editorHasDeclarationProvider', false, nls.localize('editorHasDeclarationProvider', \"Whether the editor has a declaration provider\"));\n\texport const hasImplementationProvider = new RawContextKey<boolean>('editorHasImplementationProvider', false, nls.localize('editorHasImplementationProvider', \"Whether the editor has an implementation provider\"));\n\texport const hasTypeDefinitionProvider = new RawContextKey<boolean>('editorHasTypeDefinitionProvider', false, nls.localize('editorHasTypeDefinitionProvider', \"Whether the editor has a type definition provider\"));\n\texport const hasHoverProvider = new RawContextKey<boolean>('editorHasHoverProvider', false, nls.localize('editorHasHoverProvider', \"Whether the editor has a hover provider\"));\n\texport const hasDocumentHighlightProvider = new RawContextKey<boolean>('editorHasDocumentHighlightProvider', false, nls.localize('editorHasDocumentHighlightProvider', \"Whether the editor has a document highlight provider\"));\n\texport const hasDocumentSymbolProvider = new RawContextKey<boolean>('editorHasDocumentSymbolProvider', false, nls.localize('editorHasDocumentSymbolProvider', \"Whether the editor has a document symbol provider\"));\n\texport const hasReferenceProvider = new RawContextKey<boolean>('editorHasReferenceProvider', false, nls.localize('editorHasReferenceProvider', \"Whether the editor has a reference provider\"));\n\texport const hasRenameProvider = new RawContextKey<boolean>('editorHasRenameProvider', false, nls.localize('editorHasRenameProvider', \"Whether the editor has a rename provider\"));\n\texport const hasSignatureHelpProvider = new RawContextKey<boolean>('editorHasSignatureHelpProvider', false, nls.localize('editorHasSignatureHelpProvider', \"Whether the editor has a signature help provider\"));\n\texport const hasInlayHintsProvider = new RawContextKey<boolean>('editorHasInlayHintsProvider', false, nls.localize('editorHasInlayHintsProvider', \"Whether the editor has an inline hints provider\"));\n\n\t// -- mode context keys: formatting\n\texport const hasDocumentFormattingProvider = new RawContextKey<boolean>('editorHasDocumentFormattingProvider', false, nls.localize('editorHasDocumentFormattingProvider', \"Whether the editor has a document formatting provider\"));\n\texport const hasDocumentSelectionFormattingProvider = new RawContextKey<boolean>('editorHasDocumentSelectionFormattingProvider', false, nls.localize('editorHasDocumentSelectionFormattingProvider', \"Whether the editor has a document selection formatting provider\"));\n\texport const hasMultipleDocumentFormattingProvider = new RawContextKey<boolean>('editorHasMultipleDocumentFormattingProvider', false, nls.localize('editorHasMultipleDocumentFormattingProvider', \"Whether the editor has multiple document formatting providers\"));\n\texport const hasMultipleDocumentSelectionFormattingProvider = new RawContextKey<boolean>('editorHasMultipleDocumentSelectionFormattingProvider', false, nls.localize('editorHasMultipleDocumentSelectionFormattingProvider', \"Whether the editor has multiple document selection formatting providers\"));\n\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2791, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/monaco-editor/esm/vs/editor/common/viewEventHandler.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/file%3A/mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/viewEventHandler.ts","file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/vs/editor/common/viewEventHandler.ts"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from '../../base/common/lifecycle.js';\nimport * as viewEvents from './viewEvents.js';\n\nexport class ViewEventHandler extends Disposable {\n\n\tprivate _shouldRender: boolean;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis._shouldRender = true;\n\t}\n\n\tpublic shouldRender(): boolean {\n\t\treturn this._shouldRender;\n\t}\n\n\tpublic forceShouldRender(): void {\n\t\tthis._shouldRender = true;\n\t}\n\n\tprotected setShouldRender(): void {\n\t\tthis._shouldRender = true;\n\t}\n\n\tpublic onDidRender(): void {\n\t\tthis._shouldRender = false;\n\t}\n\n\t// --- begin event handlers\n\n\tpublic onCompositionStart(e: viewEvents.ViewCompositionStartEvent): boolean {\n\t\treturn false;\n\t}\n\tpublic onCompositionEnd(e: viewEvents.ViewCompositionEndEvent): boolean {\n\t\treturn false;\n\t}\n\tpublic onConfigurationChanged(e: viewEvents.ViewConfigurationChangedEvent): boolean {\n\t\treturn false;\n\t}\n\tpublic onCursorStateChanged(e: viewEvents.ViewCursorStateChangedEvent): boolean {\n\t\treturn false;\n\t}\n\tpublic onDecorationsChanged(e: viewEvents.ViewDecorationsChangedEvent): boolean {\n\t\treturn false;\n\t}\n\tpublic onFlushed(e: viewEvents.ViewFlushedEvent): boolean {\n\t\treturn false;\n\t}\n\tpublic onFocusChanged(e: viewEvents.ViewFocusChangedEvent): boolean {\n\t\treturn false;\n\t}\n\tpublic onLanguageConfigurationChanged(e: viewEvents.ViewLanguageConfigurationEvent): boolean {\n\t\treturn false;\n\t}\n\tpublic onLineMappingChanged(e: viewEvents.ViewLineMappingChangedEvent): boolean {\n\t\treturn false;\n\t}\n\tpublic onLinesChanged(e: viewEvents.ViewLinesChangedEvent): boolean {\n\t\treturn false;\n\t}\n\tpublic onLinesDeleted(e: viewEvents.ViewLinesDeletedEvent): boolean {\n\t\treturn false;\n\t}\n\tpublic onLinesInserted(e: viewEvents.ViewLinesInsertedEvent): boolean {\n\t\treturn false;\n\t}\n\tpublic onRevealRangeRequest(e: viewEvents.ViewRevealRangeRequestEvent): boolean {\n\t\treturn false;\n\t}\n\tpublic onScrollChanged(e: viewEvents.ViewScrollChangedEvent): boolean {\n\t\treturn false;\n\t}\n\tpublic onThemeChanged(e: viewEvents.ViewThemeChangedEvent): boolean {\n\t\treturn false;\n\t}\n\tpublic onTokensChanged(e: viewEvents.ViewTokensChangedEvent): boolean {\n\t\treturn false;\n\t}\n\tpublic onTokensColorsChanged(e: viewEvents.ViewTokensColorsChangedEvent): boolean {\n\t\treturn false;\n\t}\n\tpublic onZonesChanged(e: viewEvents.ViewZonesChangedEvent): boolean {\n\t\treturn false;\n\t}\n\n\t// --- end event handlers\n\n\tpublic handleEvents(events: viewEvents.ViewEvent[]): void {\n\n\t\tlet shouldRender = false;\n\n\t\tfor (let i = 0, len = events.length; i < len; i++) {\n\t\t\tconst e = events[i];\n\n\t\t\tswitch (e.type) {\n\n\t\t\t\tcase viewEvents.ViewEventType.ViewCompositionStart:\n\t\t\t\t\tif (this.onCompositionStart(e)) {\n\t\t\t\t\t\tshouldRender = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase viewEvents.ViewEventType.ViewCompositionEnd:\n\t\t\t\t\tif (this.onCompositionEnd(e)) {\n\t\t\t\t\t\tshouldRender = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase viewEvents.ViewEventType.ViewConfigurationChanged:\n\t\t\t\t\tif (this.onConfigurationChanged(e)) {\n\t\t\t\t\t\tshouldRender = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase viewEvents.ViewEventType.ViewCursorStateChanged:\n\t\t\t\t\tif (this.onCursorStateChanged(e)) {\n\t\t\t\t\t\tshouldRender = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase viewEvents.ViewEventType.ViewDecorationsChanged:\n\t\t\t\t\tif (this.onDecorationsChanged(e)) {\n\t\t\t\t\t\tshouldRender = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase viewEvents.ViewEventType.ViewFlushed:\n\t\t\t\t\tif (this.onFlushed(e)) {\n\t\t\t\t\t\tshouldRender = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase viewEvents.ViewEventType.ViewFocusChanged:\n\t\t\t\t\tif (this.onFocusChanged(e)) {\n\t\t\t\t\t\tshouldRender = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase viewEvents.ViewEventType.ViewLanguageConfigurationChanged:\n\t\t\t\t\tif (this.onLanguageConfigurationChanged(e)) {\n\t\t\t\t\t\tshouldRender = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase viewEvents.ViewEventType.ViewLineMappingChanged:\n\t\t\t\t\tif (this.onLineMappingChanged(e)) {\n\t\t\t\t\t\tshouldRender = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase viewEvents.ViewEventType.ViewLinesChanged:\n\t\t\t\t\tif (this.onLinesChanged(e)) {\n\t\t\t\t\t\tshouldRender = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase viewEvents.ViewEventType.ViewLinesDeleted:\n\t\t\t\t\tif (this.onLinesDeleted(e)) {\n\t\t\t\t\t\tshouldRender = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase viewEvents.ViewEventType.ViewLinesInserted:\n\t\t\t\t\tif (this.onLinesInserted(e)) {\n\t\t\t\t\t\tshouldRender = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase viewEvents.ViewEventType.ViewRevealRangeRequest:\n\t\t\t\t\tif (this.onRevealRangeRequest(e)) {\n\t\t\t\t\t\tshouldRender = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase viewEvents.ViewEventType.ViewScrollChanged:\n\t\t\t\t\tif (this.onScrollChanged(e)) {\n\t\t\t\t\t\tshouldRender = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase viewEvents.ViewEventType.ViewTokensChanged:\n\t\t\t\t\tif (this.onTokensChanged(e)) {\n\t\t\t\t\t\tshouldRender = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase viewEvents.ViewEventType.ViewThemeChanged:\n\t\t\t\t\tif (this.onThemeChanged(e)) {\n\t\t\t\t\t\tshouldRender = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase viewEvents.ViewEventType.ViewTokensColorsChanged:\n\t\t\t\t\tif (this.onTokensColorsChanged(e)) {\n\t\t\t\t\t\tshouldRender = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase viewEvents.ViewEventType.ViewZonesChanged:\n\t\t\t\t\tif (this.onZonesChanged(e)) {\n\t\t\t\t\t\tshouldRender = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.info('View received unknown event: ');\n\t\t\t\t\tconsole.info(e);\n\t\t\t}\n\t\t}\n\n\t\tif (shouldRender) {\n\t\t\tthis._shouldRender = true;\n\t\t}\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from '../../base/common/lifecycle.js';\nimport * as viewEvents from './viewEvents.js';\n\nexport class ViewEventHandler extends Disposable {\n\n\tprivate _shouldRender: boolean;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis._shouldRender = true;\n\t}\n\n\tpublic shouldRender(): boolean {\n\t\treturn this._shouldRender;\n\t}\n\n\tpublic forceShouldRender(): void {\n\t\tthis._shouldRender = true;\n\t}\n\n\tprotected setShouldRender(): void {\n\t\tthis._shouldRender = true;\n\t}\n\n\tpublic onDidRender(): void {\n\t\tthis._shouldRender = false;\n\t}\n\n\t// --- begin event handlers\n\n\tpublic onCompositionStart(e: viewEvents.ViewCompositionStartEvent): boolean {\n\t\treturn false;\n\t}\n\tpublic onCompositionEnd(e: viewEvents.ViewCompositionEndEvent): boolean {\n\t\treturn false;\n\t}\n\tpublic onConfigurationChanged(e: viewEvents.ViewConfigurationChangedEvent): boolean {\n\t\treturn false;\n\t}\n\tpublic onCursorStateChanged(e: viewEvents.ViewCursorStateChangedEvent): boolean {\n\t\treturn false;\n\t}\n\tpublic onDecorationsChanged(e: viewEvents.ViewDecorationsChangedEvent): boolean {\n\t\treturn false;\n\t}\n\tpublic onFlushed(e: viewEvents.ViewFlushedEvent): boolean {\n\t\treturn false;\n\t}\n\tpublic onFocusChanged(e: viewEvents.ViewFocusChangedEvent): boolean {\n\t\treturn false;\n\t}\n\tpublic onLanguageConfigurationChanged(e: viewEvents.ViewLanguageConfigurationEvent): boolean {\n\t\treturn false;\n\t}\n\tpublic onLineMappingChanged(e: viewEvents.ViewLineMappingChangedEvent): boolean {\n\t\treturn false;\n\t}\n\tpublic onLinesChanged(e: viewEvents.ViewLinesChangedEvent): boolean {\n\t\treturn false;\n\t}\n\tpublic onLinesDeleted(e: viewEvents.ViewLinesDeletedEvent): boolean {\n\t\treturn false;\n\t}\n\tpublic onLinesInserted(e: viewEvents.ViewLinesInsertedEvent): boolean {\n\t\treturn false;\n\t}\n\tpublic onRevealRangeRequest(e: viewEvents.ViewRevealRangeRequestEvent): boolean {\n\t\treturn false;\n\t}\n\tpublic onScrollChanged(e: viewEvents.ViewScrollChangedEvent): boolean {\n\t\treturn false;\n\t}\n\tpublic onThemeChanged(e: viewEvents.ViewThemeChangedEvent): boolean {\n\t\treturn false;\n\t}\n\tpublic onTokensChanged(e: viewEvents.ViewTokensChangedEvent): boolean {\n\t\treturn false;\n\t}\n\tpublic onTokensColorsChanged(e: viewEvents.ViewTokensColorsChangedEvent): boolean {\n\t\treturn false;\n\t}\n\tpublic onZonesChanged(e: viewEvents.ViewZonesChangedEvent): boolean {\n\t\treturn false;\n\t}\n\n\t// --- end event handlers\n\n\tpublic handleEvents(events: viewEvents.ViewEvent[]): void {\n\n\t\tlet shouldRender = false;\n\n\t\tfor (let i = 0, len = events.length; i < len; i++) {\n\t\t\tconst e = events[i];\n\n\t\t\tswitch (e.type) {\n\n\t\t\t\tcase viewEvents.ViewEventType.ViewCompositionStart:\n\t\t\t\t\tif (this.onCompositionStart(e)) {\n\t\t\t\t\t\tshouldRender = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase viewEvents.ViewEventType.ViewCompositionEnd:\n\t\t\t\t\tif (this.onCompositionEnd(e)) {\n\t\t\t\t\t\tshouldRender = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase viewEvents.ViewEventType.ViewConfigurationChanged:\n\t\t\t\t\tif (this.onConfigurationChanged(e)) {\n\t\t\t\t\t\tshouldRender = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase viewEvents.ViewEventType.ViewCursorStateChanged:\n\t\t\t\t\tif (this.onCursorStateChanged(e)) {\n\t\t\t\t\t\tshouldRender = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase viewEvents.ViewEventType.ViewDecorationsChanged:\n\t\t\t\t\tif (this.onDecorationsChanged(e)) {\n\t\t\t\t\t\tshouldRender = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase viewEvents.ViewEventType.ViewFlushed:\n\t\t\t\t\tif (this.onFlushed(e)) {\n\t\t\t\t\t\tshouldRender = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase viewEvents.ViewEventType.ViewFocusChanged:\n\t\t\t\t\tif (this.onFocusChanged(e)) {\n\t\t\t\t\t\tshouldRender = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase viewEvents.ViewEventType.ViewLanguageConfigurationChanged:\n\t\t\t\t\tif (this.onLanguageConfigurationChanged(e)) {\n\t\t\t\t\t\tshouldRender = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase viewEvents.ViewEventType.ViewLineMappingChanged:\n\t\t\t\t\tif (this.onLineMappingChanged(e)) {\n\t\t\t\t\t\tshouldRender = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase viewEvents.ViewEventType.ViewLinesChanged:\n\t\t\t\t\tif (this.onLinesChanged(e)) {\n\t\t\t\t\t\tshouldRender = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase viewEvents.ViewEventType.ViewLinesDeleted:\n\t\t\t\t\tif (this.onLinesDeleted(e)) {\n\t\t\t\t\t\tshouldRender = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase viewEvents.ViewEventType.ViewLinesInserted:\n\t\t\t\t\tif (this.onLinesInserted(e)) {\n\t\t\t\t\t\tshouldRender = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase viewEvents.ViewEventType.ViewRevealRangeRequest:\n\t\t\t\t\tif (this.onRevealRangeRequest(e)) {\n\t\t\t\t\t\tshouldRender = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase viewEvents.ViewEventType.ViewScrollChanged:\n\t\t\t\t\tif (this.onScrollChanged(e)) {\n\t\t\t\t\t\tshouldRender = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase viewEvents.ViewEventType.ViewTokensChanged:\n\t\t\t\t\tif (this.onTokensChanged(e)) {\n\t\t\t\t\t\tshouldRender = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase viewEvents.ViewEventType.ViewThemeChanged:\n\t\t\t\t\tif (this.onThemeChanged(e)) {\n\t\t\t\t\t\tshouldRender = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase viewEvents.ViewEventType.ViewTokensColorsChanged:\n\t\t\t\t\tif (this.onTokensColorsChanged(e)) {\n\t\t\t\t\t\tshouldRender = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase viewEvents.ViewEventType.ViewZonesChanged:\n\t\t\t\t\tif (this.onZonesChanged(e)) {\n\t\t\t\t\t\tshouldRender = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.info('View received unknown event: ');\n\t\t\t\t\tconsole.info(e);\n\t\t\t}\n\t\t}\n\n\t\tif (shouldRender) {\n\t\t\tthis._shouldRender = true;\n\t\t}\n\t}\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2982, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/monaco-editor/esm/vs/editor/common/textModelGuides.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/file%3A/mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/textModelGuides.ts","file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/vs/editor/common/textModelGuides.ts"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IPosition } from './core/position.js';\n\nexport interface IGuidesTextModelPart {\n\t/**\n\t * @internal\n\t */\n\tgetActiveIndentGuide(lineNumber: number, minLineNumber: number, maxLineNumber: number): IActiveIndentGuideInfo;\n\n\t/**\n\t * @internal\n\t */\n\tgetLinesIndentGuides(startLineNumber: number, endLineNumber: number): number[];\n\n\t/**\n\t * Requests the indent guides for the given range of lines.\n\t * `result[i]` will contain the indent guides of the `startLineNumber + i`th line.\n\t * @internal\n\t */\n\tgetLinesBracketGuides(startLineNumber: number, endLineNumber: number, activePosition: IPosition | null, options: BracketGuideOptions): IndentGuide[][];\n}\n\nexport interface IActiveIndentGuideInfo {\n\tstartLineNumber: number;\n\tendLineNumber: number;\n\tindent: number;\n}\n\nexport enum HorizontalGuidesState {\n\tDisabled,\n\tEnabledForActive,\n\tEnabled\n}\n\nexport interface BracketGuideOptions {\n\tincludeInactive: boolean;\n\thorizontalGuides: HorizontalGuidesState;\n\thighlightActive: boolean;\n}\n\nexport class IndentGuide {\n\tconstructor(\n\t\tpublic readonly visibleColumn: number | -1,\n\t\tpublic readonly column: number | -1,\n\t\tpublic readonly className: string,\n\t\t/**\n\t\t * If set, this indent guide is a horizontal guide (no vertical part).\n\t\t * It starts at visibleColumn and continues until endColumn.\n\t\t*/\n\t\tpublic readonly horizontalLine: IndentGuideHorizontalLine | null,\n\t\t/**\n\t\t * If set (!= -1), only show this guide for wrapped lines that don't contain this model column, but are after it.\n\t\t*/\n\t\tpublic readonly forWrappedLinesAfterColumn: number | -1,\n\t\tpublic readonly forWrappedLinesBeforeOrAtColumn: number | -1\n\t) {\n\t\tif ((visibleColumn !== -1) === (column !== -1)) {\n\t\t\tthrow new Error();\n\t\t}\n\t}\n}\n\nexport class IndentGuideHorizontalLine {\n\tconstructor(\n\t\tpublic readonly top: boolean,\n\t\tpublic readonly endColumn: number,\n\t) { }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IPosition } from './core/position.js';\n\nexport interface IGuidesTextModelPart {\n\t/**\n\t * @internal\n\t */\n\tgetActiveIndentGuide(lineNumber: number, minLineNumber: number, maxLineNumber: number): IActiveIndentGuideInfo;\n\n\t/**\n\t * @internal\n\t */\n\tgetLinesIndentGuides(startLineNumber: number, endLineNumber: number): number[];\n\n\t/**\n\t * Requests the indent guides for the given range of lines.\n\t * `result[i]` will contain the indent guides of the `startLineNumber + i`th line.\n\t * @internal\n\t */\n\tgetLinesBracketGuides(startLineNumber: number, endLineNumber: number, activePosition: IPosition | null, options: BracketGuideOptions): IndentGuide[][];\n}\n\nexport interface IActiveIndentGuideInfo {\n\tstartLineNumber: number;\n\tendLineNumber: number;\n\tindent: number;\n}\n\nexport enum HorizontalGuidesState {\n\tDisabled,\n\tEnabledForActive,\n\tEnabled\n}\n\nexport interface BracketGuideOptions {\n\tincludeInactive: boolean;\n\thorizontalGuides: HorizontalGuidesState;\n\thighlightActive: boolean;\n}\n\nexport class IndentGuide {\n\tconstructor(\n\t\tpublic readonly visibleColumn: number | -1,\n\t\tpublic readonly column: number | -1,\n\t\tpublic readonly className: string,\n\t\t/**\n\t\t * If set, this indent guide is a horizontal guide (no vertical part).\n\t\t * It starts at visibleColumn and continues until endColumn.\n\t\t*/\n\t\tpublic readonly horizontalLine: IndentGuideHorizontalLine | null,\n\t\t/**\n\t\t * If set (!= -1), only show this guide for wrapped lines that don't contain this model column, but are after it.\n\t\t*/\n\t\tpublic readonly forWrappedLinesAfterColumn: number | -1,\n\t\tpublic readonly forWrappedLinesBeforeOrAtColumn: number | -1\n\t) {\n\t\tif ((visibleColumn !== -1) === (column !== -1)) {\n\t\t\tthrow new Error();\n\t\t}\n\t}\n}\n\nexport class IndentGuideHorizontalLine {\n\tconstructor(\n\t\tpublic readonly top: boolean,\n\t\tpublic readonly endColumn: number,\n\t) { }\n}\n"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;AA6BhG,IAAY,qBAIX;AAJD,CAAA,SAAY,qBAAqB;IAChC,qBAAA,CAAA,qBAAA,CAAA,WAAA,GAAA,EAAA,GAAA,UAAQ,CAAA;IACR,qBAAA,CAAA,qBAAA,CAAA,mBAAA,GAAA,EAAA,GAAA,kBAAgB,CAAA;IAChB,qBAAA,CAAA,qBAAA,CAAA,UAAA,GAAA,EAAA,GAAA,SAAO,CAAA;AACR,CAAC,EAJW,qBAAqB,IAAA,CAArB,qBAAqB,GAAA,CAAA,CAAA,GAIhC;AAQK,MAAO,WAAW;IACvB,YACiB,aAA0B,EAC1B,MAAmB,EACnB,SAAiB,EACjC;;;MAGE,CACc,cAAgD,EAChE;;MAEE,CACc,0BAAuC,EACvC,+BAA4C,CAAA;QAZ5C,IAAA,CAAA,aAAa,GAAb,aAAa,CAAa;QAC1B,IAAA,CAAA,MAAM,GAAN,MAAM,CAAa;QACnB,IAAA,CAAA,SAAS,GAAT,SAAS,CAAQ;QAKjB,IAAA,CAAA,cAAc,GAAd,cAAc,CAAkC;QAIhD,IAAA,CAAA,0BAA0B,GAA1B,0BAA0B,CAAa;QACvC,IAAA,CAAA,+BAA+B,GAA/B,+BAA+B,CAAa;QAE5D,IAAI,AAAC,aAAa,KAAK,CAAC,CAAC,CAAC,IAAK,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;YAChD,MAAM,IAAI,KAAK,EAAE,CAAC;QACnB,CAAC;IACF,CAAC;CACD;AAEK,MAAO,yBAAyB;IACrC,YACiB,GAAY,EACZ,SAAiB,CAAA;QADjB,IAAA,CAAA,GAAG,GAAH,GAAG,CAAS;QACZ,IAAA,CAAA,SAAS,GAAT,SAAS,CAAQ;IAC9B,CAAC;CACL","debugId":null}},
    {"offset": {"line": 3027, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/monaco-editor/esm/vs/editor/common/tokenizationRegistry.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/file%3A/mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/tokenizationRegistry.ts","file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/vs/editor/common/tokenizationRegistry.ts"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Color } from '../../base/common/color.js';\nimport { Emitter, Event } from '../../base/common/event.js';\nimport { Disposable, IDisposable, toDisposable } from '../../base/common/lifecycle.js';\nimport { ITokenizationRegistry, ITokenizationSupportChangedEvent, ILazyTokenizationSupport } from './languages.js';\nimport { ColorId } from './encodedTokenAttributes.js';\n\nexport class TokenizationRegistry<TSupport> implements ITokenizationRegistry<TSupport> {\n\n\tprivate readonly _tokenizationSupports = new Map<string, TSupport>();\n\tprivate readonly _factories = new Map<string, TokenizationSupportFactoryData<TSupport>>();\n\n\tprivate readonly _onDidChange = new Emitter<ITokenizationSupportChangedEvent>();\n\tpublic readonly onDidChange: Event<ITokenizationSupportChangedEvent> = this._onDidChange.event;\n\n\tprivate _colorMap: Color[] | null;\n\n\tconstructor() {\n\t\tthis._colorMap = null;\n\t}\n\n\tpublic handleChange(languageIds: string[]): void {\n\t\tthis._onDidChange.fire({\n\t\t\tchangedLanguages: languageIds,\n\t\t\tchangedColorMap: false\n\t\t});\n\t}\n\n\tpublic register(languageId: string, support: TSupport): IDisposable {\n\t\tthis._tokenizationSupports.set(languageId, support);\n\t\tthis.handleChange([languageId]);\n\t\treturn toDisposable(() => {\n\t\t\tif (this._tokenizationSupports.get(languageId) !== support) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._tokenizationSupports.delete(languageId);\n\t\t\tthis.handleChange([languageId]);\n\t\t});\n\t}\n\n\tpublic get(languageId: string): TSupport | null {\n\t\treturn this._tokenizationSupports.get(languageId) || null;\n\t}\n\n\tpublic registerFactory(languageId: string, factory: ILazyTokenizationSupport<TSupport>): IDisposable {\n\t\tthis._factories.get(languageId)?.dispose();\n\t\tconst myData = new TokenizationSupportFactoryData(this, languageId, factory);\n\t\tthis._factories.set(languageId, myData);\n\t\treturn toDisposable(() => {\n\t\t\tconst v = this._factories.get(languageId);\n\t\t\tif (!v || v !== myData) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._factories.delete(languageId);\n\t\t\tv.dispose();\n\t\t});\n\t}\n\n\tpublic async getOrCreate(languageId: string): Promise<TSupport | null> {\n\t\t// check first if the support is already set\n\t\tconst tokenizationSupport = this.get(languageId);\n\t\tif (tokenizationSupport) {\n\t\t\treturn tokenizationSupport;\n\t\t}\n\n\t\tconst factory = this._factories.get(languageId);\n\t\tif (!factory || factory.isResolved) {\n\t\t\t// no factory or factory.resolve already finished\n\t\t\treturn null;\n\t\t}\n\n\t\tawait factory.resolve();\n\n\t\treturn this.get(languageId);\n\t}\n\n\tpublic isResolved(languageId: string): boolean {\n\t\tconst tokenizationSupport = this.get(languageId);\n\t\tif (tokenizationSupport) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst factory = this._factories.get(languageId);\n\t\tif (!factory || factory.isResolved) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpublic setColorMap(colorMap: Color[]): void {\n\t\tthis._colorMap = colorMap;\n\t\tthis._onDidChange.fire({\n\t\t\tchangedLanguages: Array.from(this._tokenizationSupports.keys()),\n\t\t\tchangedColorMap: true\n\t\t});\n\t}\n\n\tpublic getColorMap(): Color[] | null {\n\t\treturn this._colorMap;\n\t}\n\n\tpublic getDefaultBackground(): Color | null {\n\t\tif (this._colorMap && this._colorMap.length > ColorId.DefaultBackground) {\n\t\t\treturn this._colorMap[ColorId.DefaultBackground];\n\t\t}\n\t\treturn null;\n\t}\n}\n\nclass TokenizationSupportFactoryData<TSupport> extends Disposable {\n\n\tprivate _isDisposed: boolean = false;\n\tprivate _resolvePromise: Promise<void> | null = null;\n\tprivate _isResolved: boolean = false;\n\n\tpublic get isResolved(): boolean {\n\t\treturn this._isResolved;\n\t}\n\n\tconstructor(\n\t\tprivate readonly _registry: TokenizationRegistry<TSupport>,\n\t\tprivate readonly _languageId: string,\n\t\tprivate readonly _factory: ILazyTokenizationSupport<TSupport>,\n\t) {\n\t\tsuper();\n\t}\n\n\tpublic override dispose(): void {\n\t\tthis._isDisposed = true;\n\t\tsuper.dispose();\n\t}\n\n\tpublic async resolve(): Promise<void> {\n\t\tif (!this._resolvePromise) {\n\t\t\tthis._resolvePromise = this._create();\n\t\t}\n\t\treturn this._resolvePromise;\n\t}\n\n\tprivate async _create(): Promise<void> {\n\t\tconst value = await this._factory.tokenizationSupport;\n\t\tthis._isResolved = true;\n\t\tif (value && !this._isDisposed) {\n\t\t\tthis._register(this._registry.register(this._languageId, value));\n\t\t}\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Color } from '../../base/common/color.js';\nimport { Emitter, Event } from '../../base/common/event.js';\nimport { Disposable, IDisposable, toDisposable } from '../../base/common/lifecycle.js';\nimport { ITokenizationRegistry, ITokenizationSupportChangedEvent, ILazyTokenizationSupport } from './languages.js';\nimport { ColorId } from './encodedTokenAttributes.js';\n\nexport class TokenizationRegistry<TSupport> implements ITokenizationRegistry<TSupport> {\n\n\tprivate readonly _tokenizationSupports = new Map<string, TSupport>();\n\tprivate readonly _factories = new Map<string, TokenizationSupportFactoryData<TSupport>>();\n\n\tprivate readonly _onDidChange = new Emitter<ITokenizationSupportChangedEvent>();\n\tpublic readonly onDidChange: Event<ITokenizationSupportChangedEvent> = this._onDidChange.event;\n\n\tprivate _colorMap: Color[] | null;\n\n\tconstructor() {\n\t\tthis._colorMap = null;\n\t}\n\n\tpublic handleChange(languageIds: string[]): void {\n\t\tthis._onDidChange.fire({\n\t\t\tchangedLanguages: languageIds,\n\t\t\tchangedColorMap: false\n\t\t});\n\t}\n\n\tpublic register(languageId: string, support: TSupport): IDisposable {\n\t\tthis._tokenizationSupports.set(languageId, support);\n\t\tthis.handleChange([languageId]);\n\t\treturn toDisposable(() => {\n\t\t\tif (this._tokenizationSupports.get(languageId) !== support) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._tokenizationSupports.delete(languageId);\n\t\t\tthis.handleChange([languageId]);\n\t\t});\n\t}\n\n\tpublic get(languageId: string): TSupport | null {\n\t\treturn this._tokenizationSupports.get(languageId) || null;\n\t}\n\n\tpublic registerFactory(languageId: string, factory: ILazyTokenizationSupport<TSupport>): IDisposable {\n\t\tthis._factories.get(languageId)?.dispose();\n\t\tconst myData = new TokenizationSupportFactoryData(this, languageId, factory);\n\t\tthis._factories.set(languageId, myData);\n\t\treturn toDisposable(() => {\n\t\t\tconst v = this._factories.get(languageId);\n\t\t\tif (!v || v !== myData) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._factories.delete(languageId);\n\t\t\tv.dispose();\n\t\t});\n\t}\n\n\tpublic async getOrCreate(languageId: string): Promise<TSupport | null> {\n\t\t// check first if the support is already set\n\t\tconst tokenizationSupport = this.get(languageId);\n\t\tif (tokenizationSupport) {\n\t\t\treturn tokenizationSupport;\n\t\t}\n\n\t\tconst factory = this._factories.get(languageId);\n\t\tif (!factory || factory.isResolved) {\n\t\t\t// no factory or factory.resolve already finished\n\t\t\treturn null;\n\t\t}\n\n\t\tawait factory.resolve();\n\n\t\treturn this.get(languageId);\n\t}\n\n\tpublic isResolved(languageId: string): boolean {\n\t\tconst tokenizationSupport = this.get(languageId);\n\t\tif (tokenizationSupport) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst factory = this._factories.get(languageId);\n\t\tif (!factory || factory.isResolved) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpublic setColorMap(colorMap: Color[]): void {\n\t\tthis._colorMap = colorMap;\n\t\tthis._onDidChange.fire({\n\t\t\tchangedLanguages: Array.from(this._tokenizationSupports.keys()),\n\t\t\tchangedColorMap: true\n\t\t});\n\t}\n\n\tpublic getColorMap(): Color[] | null {\n\t\treturn this._colorMap;\n\t}\n\n\tpublic getDefaultBackground(): Color | null {\n\t\tif (this._colorMap && this._colorMap.length > ColorId.DefaultBackground) {\n\t\t\treturn this._colorMap[ColorId.DefaultBackground];\n\t\t}\n\t\treturn null;\n\t}\n}\n\nclass TokenizationSupportFactoryData<TSupport> extends Disposable {\n\n\tprivate _isDisposed: boolean = false;\n\tprivate _resolvePromise: Promise<void> | null = null;\n\tprivate _isResolved: boolean = false;\n\n\tpublic get isResolved(): boolean {\n\t\treturn this._isResolved;\n\t}\n\n\tconstructor(\n\t\tprivate readonly _registry: TokenizationRegistry<TSupport>,\n\t\tprivate readonly _languageId: string,\n\t\tprivate readonly _factory: ILazyTokenizationSupport<TSupport>,\n\t) {\n\t\tsuper();\n\t}\n\n\tpublic override dispose(): void {\n\t\tthis._isDisposed = true;\n\t\tsuper.dispose();\n\t}\n\n\tpublic async resolve(): Promise<void> {\n\t\tif (!this._resolvePromise) {\n\t\t\tthis._resolvePromise = this._create();\n\t\t}\n\t\treturn this._resolvePromise;\n\t}\n\n\tprivate async _create(): Promise<void> {\n\t\tconst value = await this._factory.tokenizationSupport;\n\t\tthis._isResolved = true;\n\t\tif (value && !this._isDisposed) {\n\t\t\tthis._register(this._registry.register(this._languageId, value));\n\t\t}\n\t}\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3160, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/monaco-editor/esm/vs/editor/common/languages.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/vs/editor/common/languages.ts"],"sourcesContent":["\nimport { CancellationToken } from '../../base/common/cancellation.js';\nimport { Codicon } from '../../base/common/codicons.js';\nimport { Color } from '../../base/common/color.js';\nimport { IReadonlyVSDataTransfer } from '../../base/common/dataTransfer.js';\nimport { Event } from '../../base/common/event.js';\nimport { HierarchicalKind } from '../../base/common/hierarchicalKind.js';\nimport { IMarkdownString } from '../../base/common/htmlContent.js';\nimport { IDisposable } from '../../base/common/lifecycle.js';\nimport { ThemeIcon } from '../../base/common/themables.js';\nimport { URI, UriComponents } from '../../base/common/uri.js';\nimport { ISingleEditOperation } from './core/editOperation.js';\nimport { IPosition, Position } from './core/position.js';\nimport { IRange, Range } from './core/range.js';\nimport { Selection } from './core/selection.js';\nimport { LanguageId } from './encodedTokenAttributes.js';\nimport { LanguageSelector } from './languageSelector.js';\nimport * as model from './model.js';\nimport { TokenizationRegistry as TokenizationRegistryImpl } from './tokenizationRegistry.js';\nimport { ContiguousMultilineTokens } from './tokens/contiguousMultilineTokens.js';\nimport { localize } from '../../nls.js';\nimport { ExtensionIdentifier } from '../../platform/extensions/common/extensions.js';\nimport { IMarkerData } from '../../platform/markers/common/markers.js';\n\n/**\n * @internal\n */\nexport interface ILanguageIdCodec {\n\tencodeLanguageId(languageId: string): LanguageId;\n\tdecodeLanguageId(languageId: LanguageId): string;\n}\n\nexport class Token {\n\t_tokenBrand: void = undefined;\n\n\tconstructor(\n\t\tpublic readonly offset: number,\n\t\tpublic readonly type: string,\n\t\tpublic readonly language: string,\n\t) {\n\t}\n\n\tpublic toString(): string {\n\t\treturn '(' + this.offset + ', ' + this.type + ')';\n\t}\n}\n\n/**\n * @internal\n */\nexport class TokenizationResult {\n\t_tokenizationResultBrand: void = undefined;\n\n\tconstructor(\n\t\tpublic readonly tokens: Token[],\n\t\tpublic readonly endState: IState,\n\t) {\n\t}\n}\n\n/**\n * @internal\n */\nexport class EncodedTokenizationResult {\n\t_encodedTokenizationResultBrand: void = undefined;\n\n\tconstructor(\n\t\t/**\n\t\t * The tokens in binary format. Each token occupies two array indices. For token i:\n\t\t *  - at offset 2*i => startIndex\n\t\t *  - at offset 2*i + 1 => metadata\n\t\t *\n\t\t */\n\t\tpublic readonly tokens: Uint32Array,\n\t\tpublic readonly endState: IState,\n\t) {\n\t}\n}\n\nexport interface SyntaxNode {\n\tstartIndex: number;\n\tendIndex: number;\n\tstartPosition: IPosition;\n\tendPosition: IPosition;\n}\n\nexport interface QueryCapture {\n\tname: string;\n\ttext?: string;\n\tnode: SyntaxNode;\n\tencodedLanguageId: number;\n}\n\n/**\n * @internal\n */\nexport interface ITokenizationSupport {\n\t/**\n\t * If true, the background tokenizer will only be used to verify tokens against the default background tokenizer.\n\t * Used for debugging.\n\t */\n\treadonly backgroundTokenizerShouldOnlyVerifyTokens?: boolean;\n\n\tgetInitialState(): IState;\n\n\ttokenize(line: string, hasEOL: boolean, state: IState): TokenizationResult;\n\n\ttokenizeEncoded(line: string, hasEOL: boolean, state: IState): EncodedTokenizationResult;\n\n\t/**\n\t * Can be/return undefined if default background tokenization should be used.\n\t */\n\tcreateBackgroundTokenizer?(textModel: model.ITextModel, store: IBackgroundTokenizationStore): IBackgroundTokenizer | undefined;\n}\n\n/**\n * @internal\n */\nexport interface IBackgroundTokenizer extends IDisposable {\n\t/**\n\t * Instructs the background tokenizer to set the tokens for the given range again.\n\t *\n\t * This might be necessary if the renderer overwrote those tokens with heuristically computed ones for some viewport,\n\t * when the change does not even propagate to that viewport.\n\t */\n\trequestTokens(startLineNumber: number, endLineNumberExclusive: number): void;\n\n\treportMismatchingTokens?(lineNumber: number): void;\n}\n\n/**\n * @internal\n */\nexport interface IBackgroundTokenizationStore {\n\tsetTokens(tokens: ContiguousMultilineTokens[]): void;\n\n\tsetEndState(lineNumber: number, state: IState): void;\n\n\t/**\n\t * Should be called to indicate that the background tokenization has finished for now.\n\t * (This triggers bracket pair colorization to re-parse the bracket pairs with token information)\n\t */\n\tbackgroundTokenizationFinished(): void;\n}\n\n/**\n * The state of the tokenizer between two lines.\n * It is useful to store flags such as in multiline comment, etc.\n * The model will clone the previous line's state and pass it in to tokenize the next line.\n */\nexport interface IState {\n\tclone(): IState;\n\tequals(other: IState): boolean;\n}\n\n/**\n * A provider result represents the values a provider, like the {@link HoverProvider},\n * may return. For once this is the actual result type `T`, like `Hover`, or a thenable that resolves\n * to that type `T`. In addition, `null` and `undefined` can be returned - either directly or from a\n * thenable.\n */\nexport type ProviderResult<T> = T | undefined | null | Thenable<T | undefined | null>;\n\n/**\n * A hover represents additional information for a symbol or word. Hovers are\n * rendered in a tooltip-like widget.\n */\nexport interface Hover {\n\t/**\n\t * The contents of this hover.\n\t */\n\tcontents: IMarkdownString[];\n\n\t/**\n\t * The range to which this hover applies. When missing, the\n\t * editor will use the range at the current position or the\n\t * current position itself.\n\t */\n\trange?: IRange;\n\n\t/**\n\t * Can increase the verbosity of the hover\n\t */\n\tcanIncreaseVerbosity?: boolean;\n\n\t/**\n\t * Can decrease the verbosity of the hover\n\t */\n\tcanDecreaseVerbosity?: boolean;\n}\n\n/**\n * The hover provider interface defines the contract between extensions and\n * the [hover](https://code.visualstudio.com/docs/editor/intellisense)-feature.\n */\nexport interface HoverProvider<THover = Hover> {\n\t/**\n\t * Provide a hover for the given position, context and document. Multiple hovers at the same\n\t * position will be merged by the editor. A hover can have a range which defaults\n\t * to the word range at the position when omitted.\n\t */\n\tprovideHover(model: model.ITextModel, position: Position, token: CancellationToken, context?: HoverContext<THover>): ProviderResult<THover>;\n}\n\nexport interface HoverContext<THover = Hover> {\n\t/**\n\t * Hover verbosity request\n\t */\n\tverbosityRequest?: HoverVerbosityRequest<THover>;\n}\n\nexport interface HoverVerbosityRequest<THover = Hover> {\n\t/**\n\t * The delta by which to increase/decrease the hover verbosity level\n\t */\n\tverbosityDelta: number;\n\t/**\n\t * The previous hover for the same position\n\t */\n\tpreviousHover: THover;\n}\n\nexport enum HoverVerbosityAction {\n\t/**\n\t * Increase the verbosity of the hover\n\t */\n\tIncrease,\n\t/**\n\t * Decrease the verbosity of the hover\n\t */\n\tDecrease\n}\n\nexport const enum CompletionItemKind {\n\tMethod,\n\tFunction,\n\tConstructor,\n\tField,\n\tVariable,\n\tClass,\n\tStruct,\n\tInterface,\n\tModule,\n\tProperty,\n\tEvent,\n\tOperator,\n\tUnit,\n\tValue,\n\tConstant,\n\tEnum,\n\tEnumMember,\n\tKeyword,\n\tText,\n\tColor,\n\tFile,\n\tReference,\n\tCustomcolor,\n\tFolder,\n\tTypeParameter,\n\tUser,\n\tIssue,\n\tTool,\n\tSnippet, // <- highest value (used for compare!)\n}\n\n/**\n * @internal\n */\nexport namespace CompletionItemKinds {\n\n\tconst byKind = new Map<CompletionItemKind, ThemeIcon>();\n\tbyKind.set(CompletionItemKind.Method, Codicon.symbolMethod);\n\tbyKind.set(CompletionItemKind.Function, Codicon.symbolFunction);\n\tbyKind.set(CompletionItemKind.Constructor, Codicon.symbolConstructor);\n\tbyKind.set(CompletionItemKind.Field, Codicon.symbolField);\n\tbyKind.set(CompletionItemKind.Variable, Codicon.symbolVariable);\n\tbyKind.set(CompletionItemKind.Class, Codicon.symbolClass);\n\tbyKind.set(CompletionItemKind.Struct, Codicon.symbolStruct);\n\tbyKind.set(CompletionItemKind.Interface, Codicon.symbolInterface);\n\tbyKind.set(CompletionItemKind.Module, Codicon.symbolModule);\n\tbyKind.set(CompletionItemKind.Property, Codicon.symbolProperty);\n\tbyKind.set(CompletionItemKind.Event, Codicon.symbolEvent);\n\tbyKind.set(CompletionItemKind.Operator, Codicon.symbolOperator);\n\tbyKind.set(CompletionItemKind.Unit, Codicon.symbolUnit);\n\tbyKind.set(CompletionItemKind.Value, Codicon.symbolValue);\n\tbyKind.set(CompletionItemKind.Enum, Codicon.symbolEnum);\n\tbyKind.set(CompletionItemKind.Constant, Codicon.symbolConstant);\n\tbyKind.set(CompletionItemKind.Enum, Codicon.symbolEnum);\n\tbyKind.set(CompletionItemKind.EnumMember, Codicon.symbolEnumMember);\n\tbyKind.set(CompletionItemKind.Keyword, Codicon.symbolKeyword);\n\tbyKind.set(CompletionItemKind.Snippet, Codicon.symbolSnippet);\n\tbyKind.set(CompletionItemKind.Text, Codicon.symbolText);\n\tbyKind.set(CompletionItemKind.Color, Codicon.symbolColor);\n\tbyKind.set(CompletionItemKind.File, Codicon.symbolFile);\n\tbyKind.set(CompletionItemKind.Reference, Codicon.symbolReference);\n\tbyKind.set(CompletionItemKind.Customcolor, Codicon.symbolCustomColor);\n\tbyKind.set(CompletionItemKind.Folder, Codicon.symbolFolder);\n\tbyKind.set(CompletionItemKind.TypeParameter, Codicon.symbolTypeParameter);\n\tbyKind.set(CompletionItemKind.User, Codicon.account);\n\tbyKind.set(CompletionItemKind.Issue, Codicon.issues);\n\tbyKind.set(CompletionItemKind.Tool, Codicon.tools);\n\n\t/**\n\t * @internal\n\t */\n\texport function toIcon(kind: CompletionItemKind): ThemeIcon {\n\t\tlet codicon = byKind.get(kind);\n\t\tif (!codicon) {\n\t\t\tconsole.info('No codicon found for CompletionItemKind ' + kind);\n\t\t\tcodicon = Codicon.symbolProperty;\n\t\t}\n\t\treturn codicon;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\texport function toLabel(kind: CompletionItemKind): string {\n\t\tswitch (kind) {\n\t\t\tcase CompletionItemKind.Method: return localize('suggestWidget.kind.method', 'Method');\n\t\t\tcase CompletionItemKind.Function: return localize('suggestWidget.kind.function', 'Function');\n\t\t\tcase CompletionItemKind.Constructor: return localize('suggestWidget.kind.constructor', 'Constructor');\n\t\t\tcase CompletionItemKind.Field: return localize('suggestWidget.kind.field', 'Field');\n\t\t\tcase CompletionItemKind.Variable: return localize('suggestWidget.kind.variable', 'Variable');\n\t\t\tcase CompletionItemKind.Class: return localize('suggestWidget.kind.class', 'Class');\n\t\t\tcase CompletionItemKind.Struct: return localize('suggestWidget.kind.struct', 'Struct');\n\t\t\tcase CompletionItemKind.Interface: return localize('suggestWidget.kind.interface', 'Interface');\n\t\t\tcase CompletionItemKind.Module: return localize('suggestWidget.kind.module', 'Module');\n\t\t\tcase CompletionItemKind.Property: return localize('suggestWidget.kind.property', 'Property');\n\t\t\tcase CompletionItemKind.Event: return localize('suggestWidget.kind.event', 'Event');\n\t\t\tcase CompletionItemKind.Operator: return localize('suggestWidget.kind.operator', 'Operator');\n\t\t\tcase CompletionItemKind.Unit: return localize('suggestWidget.kind.unit', 'Unit');\n\t\t\tcase CompletionItemKind.Value: return localize('suggestWidget.kind.value', 'Value');\n\t\t\tcase CompletionItemKind.Constant: return localize('suggestWidget.kind.constant', 'Constant');\n\t\t\tcase CompletionItemKind.Enum: return localize('suggestWidget.kind.enum', 'Enum');\n\t\t\tcase CompletionItemKind.EnumMember: return localize('suggestWidget.kind.enumMember', 'Enum Member');\n\t\t\tcase CompletionItemKind.Keyword: return localize('suggestWidget.kind.keyword', 'Keyword');\n\t\t\tcase CompletionItemKind.Text: return localize('suggestWidget.kind.text', 'Text');\n\t\t\tcase CompletionItemKind.Color: return localize('suggestWidget.kind.color', 'Color');\n\t\t\tcase CompletionItemKind.File: return localize('suggestWidget.kind.file', 'File');\n\t\t\tcase CompletionItemKind.Reference: return localize('suggestWidget.kind.reference', 'Reference');\n\t\t\tcase CompletionItemKind.Customcolor: return localize('suggestWidget.kind.customcolor', 'Custom Color');\n\t\t\tcase CompletionItemKind.Folder: return localize('suggestWidget.kind.folder', 'Folder');\n\t\t\tcase CompletionItemKind.TypeParameter: return localize('suggestWidget.kind.typeParameter', 'Type Parameter');\n\t\t\tcase CompletionItemKind.User: return localize('suggestWidget.kind.user', 'User');\n\t\t\tcase CompletionItemKind.Issue: return localize('suggestWidget.kind.issue', 'Issue');\n\t\t\tcase CompletionItemKind.Tool: return localize('suggestWidget.kind.tool', 'Tool');\n\t\t\tcase CompletionItemKind.Snippet: return localize('suggestWidget.kind.snippet', 'Snippet');\n\t\t\tdefault: return '';\n\t\t}\n\t}\n\n\tconst data = new Map<string, CompletionItemKind>();\n\tdata.set('method', CompletionItemKind.Method);\n\tdata.set('function', CompletionItemKind.Function);\n\tdata.set('constructor', <any>CompletionItemKind.Constructor);\n\tdata.set('field', CompletionItemKind.Field);\n\tdata.set('variable', CompletionItemKind.Variable);\n\tdata.set('class', CompletionItemKind.Class);\n\tdata.set('struct', CompletionItemKind.Struct);\n\tdata.set('interface', CompletionItemKind.Interface);\n\tdata.set('module', CompletionItemKind.Module);\n\tdata.set('property', CompletionItemKind.Property);\n\tdata.set('event', CompletionItemKind.Event);\n\tdata.set('operator', CompletionItemKind.Operator);\n\tdata.set('unit', CompletionItemKind.Unit);\n\tdata.set('value', CompletionItemKind.Value);\n\tdata.set('constant', CompletionItemKind.Constant);\n\tdata.set('enum', CompletionItemKind.Enum);\n\tdata.set('enum-member', CompletionItemKind.EnumMember);\n\tdata.set('enumMember', CompletionItemKind.EnumMember);\n\tdata.set('keyword', CompletionItemKind.Keyword);\n\tdata.set('snippet', CompletionItemKind.Snippet);\n\tdata.set('text', CompletionItemKind.Text);\n\tdata.set('color', CompletionItemKind.Color);\n\tdata.set('file', CompletionItemKind.File);\n\tdata.set('reference', CompletionItemKind.Reference);\n\tdata.set('customcolor', CompletionItemKind.Customcolor);\n\tdata.set('folder', CompletionItemKind.Folder);\n\tdata.set('type-parameter', CompletionItemKind.TypeParameter);\n\tdata.set('typeParameter', CompletionItemKind.TypeParameter);\n\tdata.set('account', CompletionItemKind.User);\n\tdata.set('issue', CompletionItemKind.Issue);\n\tdata.set('tool', CompletionItemKind.Tool);\n\n\t/**\n\t * @internal\n\t */\n\texport function fromString(value: string): CompletionItemKind;\n\t/**\n\t * @internal\n\t */\n\texport function fromString(value: string, strict: true): CompletionItemKind | undefined;\n\t/**\n\t * @internal\n\t */\n\texport function fromString(value: string, strict?: boolean): CompletionItemKind | undefined {\n\t\tlet res = data.get(value);\n\t\tif (typeof res === 'undefined' && !strict) {\n\t\t\tres = CompletionItemKind.Property;\n\t\t}\n\t\treturn res;\n\t}\n}\n\nexport interface CompletionItemLabel {\n\tlabel: string;\n\tdetail?: string;\n\tdescription?: string;\n}\n\nexport const enum CompletionItemTag {\n\tDeprecated = 1\n}\n\nexport const enum CompletionItemInsertTextRule {\n\tNone = 0,\n\n\t/**\n\t * Adjust whitespace/indentation of multiline insert texts to\n\t * match the current line indentation.\n\t */\n\tKeepWhitespace = 0b001,\n\n\t/**\n\t * `insertText` is a snippet.\n\t */\n\tInsertAsSnippet = 0b100,\n}\n\nexport interface CompletionItemRanges {\n\tinsert: IRange;\n\treplace: IRange;\n}\n\n/**\n * A completion item represents a text snippet that is\n * proposed to complete text that is being typed.\n */\nexport interface CompletionItem {\n\t/**\n\t * The label of this completion item. By default\n\t * this is also the text that is inserted when selecting\n\t * this completion.\n\t */\n\tlabel: string | CompletionItemLabel;\n\t/**\n\t * The kind of this completion item. Based on the kind\n\t * an icon is chosen by the editor.\n\t */\n\tkind: CompletionItemKind;\n\t/**\n\t * A modifier to the `kind` which affect how the item\n\t * is rendered, e.g. Deprecated is rendered with a strikeout\n\t */\n\ttags?: ReadonlyArray<CompletionItemTag>;\n\t/**\n\t * A human-readable string with additional information\n\t * about this item, like type or symbol information.\n\t */\n\tdetail?: string;\n\t/**\n\t * A human-readable string that represents a doc-comment.\n\t */\n\tdocumentation?: string | IMarkdownString;\n\t/**\n\t * A string that should be used when comparing this item\n\t * with other items. When `falsy` the {@link CompletionItem.label label}\n\t * is used.\n\t */\n\tsortText?: string;\n\t/**\n\t * A string that should be used when filtering a set of\n\t * completion items. When `falsy` the {@link CompletionItem.label label}\n\t * is used.\n\t */\n\tfilterText?: string;\n\t/**\n\t * Select this item when showing. *Note* that only one completion item can be selected and\n\t * that the editor decides which item that is. The rule is that the *first* item of those\n\t * that match best is selected.\n\t */\n\tpreselect?: boolean;\n\t/**\n\t * A string or snippet that should be inserted in a document when selecting\n\t * this completion.\n\t */\n\tinsertText: string;\n\t/**\n\t * Additional rules (as bitmask) that should be applied when inserting\n\t * this completion.\n\t */\n\tinsertTextRules?: CompletionItemInsertTextRule;\n\t/**\n\t * A range of text that should be replaced by this completion item.\n\t *\n\t * *Note:* The range must be a {@link Range.isSingleLine single line} and it must\n\t * {@link Range.contains contain} the position at which completion has been {@link CompletionItemProvider.provideCompletionItems requested}.\n\t */\n\trange: IRange | CompletionItemRanges;\n\t/**\n\t * An optional set of characters that when pressed while this completion is active will accept it first and\n\t * then type that character. *Note* that all commit characters should have `length=1` and that superfluous\n\t * characters will be ignored.\n\t */\n\tcommitCharacters?: string[];\n\t/**\n\t * An optional array of additional text edits that are applied when\n\t * selecting this completion. Edits must not overlap with the main edit\n\t * nor with themselves.\n\t */\n\tadditionalTextEdits?: ISingleEditOperation[];\n\t/**\n\t * A command that should be run upon acceptance of this item.\n\t */\n\tcommand?: Command;\n\t/**\n\t * A command that should be run upon acceptance of this item.\n\t */\n\taction?: Command;\n\t/**\n\t * @internal\n\t */\n\textensionId?: ExtensionIdentifier;\n}\n\nexport interface CompletionList {\n\tsuggestions: CompletionItem[];\n\tincomplete?: boolean;\n\tdispose?(): void;\n\n\t/**\n\t * @internal\n\t */\n\tduration?: number;\n}\n\n/**\n * Info provided on partial acceptance.\n */\nexport interface PartialAcceptInfo {\n\tkind: PartialAcceptTriggerKind;\n\tacceptedLength: number;\n}\n\n/**\n * How a partial acceptance was triggered.\n */\nexport const enum PartialAcceptTriggerKind {\n\tWord = 0,\n\tLine = 1,\n\tSuggest = 2,\n}\n\n/**\n * How a suggest provider was triggered.\n */\nexport const enum CompletionTriggerKind {\n\tInvoke = 0,\n\tTriggerCharacter = 1,\n\tTriggerForIncompleteCompletions = 2\n}\n/**\n * Contains additional information about the context in which\n * {@link CompletionItemProvider.provideCompletionItems completion provider} is triggered.\n */\nexport interface CompletionContext {\n\t/**\n\t * How the completion was triggered.\n\t */\n\ttriggerKind: CompletionTriggerKind;\n\t/**\n\t * Character that triggered the completion item provider.\n\t *\n\t * `undefined` if provider was not triggered by a character.\n\t */\n\ttriggerCharacter?: string;\n}\n/**\n * The completion item provider interface defines the contract between extensions and\n * the [IntelliSense](https://code.visualstudio.com/docs/editor/intellisense).\n *\n * When computing *complete* completion items is expensive, providers can optionally implement\n * the `resolveCompletionItem`-function. In that case it is enough to return completion\n * items with a {@link CompletionItem.label label} from the\n * {@link CompletionItemProvider.provideCompletionItems provideCompletionItems}-function. Subsequently,\n * when a completion item is shown in the UI and gains focus this provider is asked to resolve\n * the item, like adding {@link CompletionItem.documentation doc-comment} or {@link CompletionItem.detail details}.\n */\nexport interface CompletionItemProvider {\n\n\t/**\n\t * Used to identify completions in the (debug) UI and telemetry. This isn't the extension identifier because extensions\n\t * often contribute multiple completion item providers.\n\t *\n\t * @internal\n\t */\n\t_debugDisplayName: string;\n\n\ttriggerCharacters?: string[];\n\t/**\n\t * Provide completion items for the given position and document.\n\t */\n\tprovideCompletionItems(model: model.ITextModel, position: Position, context: CompletionContext, token: CancellationToken): ProviderResult<CompletionList>;\n\n\t/**\n\t * Given a completion item fill in more data, like {@link CompletionItem.documentation doc-comment}\n\t * or {@link CompletionItem.detail details}.\n\t *\n\t * The editor will only resolve a completion item once.\n\t */\n\tresolveCompletionItem?(item: CompletionItem, token: CancellationToken): ProviderResult<CompletionItem>;\n}\n\n/**\n * How an {@link InlineCompletionsProvider inline completion provider} was triggered.\n */\nexport enum InlineCompletionTriggerKind {\n\t/**\n\t * Completion was triggered automatically while editing.\n\t * It is sufficient to return a single completion item in this case.\n\t */\n\tAutomatic = 0,\n\n\t/**\n\t * Completion was triggered explicitly by a user gesture.\n\t * Return multiple completion items to enable cycling through them.\n\t */\n\tExplicit = 1,\n}\n\nexport interface InlineCompletionContext {\n\n\t/**\n\t * How the completion was triggered.\n\t */\n\treadonly triggerKind: InlineCompletionTriggerKind;\n\treadonly selectedSuggestionInfo: SelectedSuggestionInfo | undefined;\n\t/**\n\t * @experimental\n\t * @internal\n\t*/\n\treadonly requestUuid: string;\n\n\treadonly includeInlineEdits: boolean;\n\treadonly includeInlineCompletions: boolean;\n\treadonly requestIssuedDateTime: number;\n\treadonly earliestShownDateTime: number;\n}\n\nexport class SelectedSuggestionInfo {\n\tconstructor(\n\t\tpublic readonly range: IRange,\n\t\tpublic readonly text: string,\n\t\tpublic readonly completionKind: CompletionItemKind,\n\t\tpublic readonly isSnippetText: boolean,\n\t) {\n\t}\n\n\tpublic equals(other: SelectedSuggestionInfo) {\n\t\treturn Range.lift(this.range).equalsRange(other.range)\n\t\t\t&& this.text === other.text\n\t\t\t&& this.completionKind === other.completionKind\n\t\t\t&& this.isSnippetText === other.isSnippetText;\n\t}\n}\n\nexport interface InlineCompletion {\n\t/**\n\t * The text to insert.\n\t * If the text contains a line break, the range must end at the end of a line.\n\t * If existing text should be replaced, the existing text must be a prefix of the text to insert.\n\t *\n\t * The text can also be a snippet. In that case, a preview with default parameters is shown.\n\t * When accepting the suggestion, the full snippet is inserted.\n\t*/\n\treadonly insertText: string | { snippet: string };\n\n\t/**\n\t * A text that is used to decide if this inline completion should be shown.\n\t * An inline completion is shown if the text to replace is a subword of the filter text.\n\t */\n\treadonly filterText?: string;\n\n\t/**\n\t * An optional array of additional text edits that are applied when\n\t * selecting this completion. Edits must not overlap with the main edit\n\t * nor with themselves.\n\t */\n\treadonly additionalTextEdits?: ISingleEditOperation[];\n\n\t/**\n\t * The range to replace.\n\t * Must begin and end on the same line.\n\t*/\n\treadonly range?: IRange;\n\n\treadonly command?: Command;\n\n\treadonly action?: Command;\n\n\t/**\n\t * Is called the first time an inline completion is shown.\n\t * @deprecated. Use `onDidShow` of the provider instead.\n\t*/\n\treadonly shownCommand?: Command;\n\n\t/**\n\t * If set to `true`, unopened closing brackets are removed and unclosed opening brackets are closed.\n\t * Defaults to `false`.\n\t*/\n\treadonly completeBracketPairs?: boolean;\n\n\treadonly isInlineEdit?: boolean;\n\treadonly showInlineEditMenu?: boolean;\n\n\treadonly showRange?: IRange;\n\n\treadonly warning?: InlineCompletionWarning;\n\n\treadonly displayLocation?: InlineCompletionDisplayLocation;\n\n\t/**\n\t * Used for telemetry.\n\t */\n\treadonly correlationId?: string | undefined;\n}\n\nexport interface InlineCompletionWarning {\n\tmessage: IMarkdownString | string;\n\ticon?: IconPath;\n}\n\nexport enum InlineCompletionDisplayLocationKind {\n\tCode = 1,\n\tLabel = 2\n}\n\nexport interface InlineCompletionDisplayLocation {\n\trange: IRange;\n\tkind: InlineCompletionDisplayLocationKind;\n\tlabel: string;\n}\n\n/**\n * TODO: add `| URI | { light: URI; dark: URI }`.\n*/\nexport type IconPath = ThemeIcon;\n\nexport interface InlineCompletions<TItem extends InlineCompletion = InlineCompletion> {\n\treadonly items: readonly TItem[];\n\t/**\n\t * A list of commands associated with the inline completions of this list.\n\t */\n\treadonly commands?: InlineCompletionCommand[];\n\n\treadonly suppressSuggestions?: boolean | undefined;\n\n\t/**\n\t * When set and the user types a suggestion without derivating from it, the inline suggestion is not updated.\n\t */\n\treadonly enableForwardStability?: boolean | undefined;\n}\n\nexport type InlineCompletionCommand = { command: Command; icon?: ThemeIcon };\n\nexport type InlineCompletionProviderGroupId = string;\n\nexport interface InlineCompletionsProvider<T extends InlineCompletions = InlineCompletions> {\n\tprovideInlineCompletions(model: model.ITextModel, position: Position, context: InlineCompletionContext, token: CancellationToken): ProviderResult<T>;\n\n\t/**\n\t * Will be called when an item is shown.\n\t * @param updatedInsertText Is useful to understand bracket completion.\n\t*/\n\thandleItemDidShow?(completions: T, item: T['items'][number], updatedInsertText: string): void;\n\n\t/**\n\t * Will be called when an item is partially accepted. TODO: also handle full acceptance here!\n\t * @param acceptedCharacters Deprecated. Use `info.acceptedCharacters` instead.\n\t */\n\thandlePartialAccept?(completions: T, item: T['items'][number], acceptedCharacters: number, info: PartialAcceptInfo): void;\n\n\t/**\n\t * @deprecated Use `handleEndOfLifetime` instead.\n\t*/\n\thandleRejection?(completions: T, item: T['items'][number]): void;\n\n\t/**\n\t * Is called when an inline completion item is no longer being used.\n\t * Provides a reason of why it is not used anymore.\n\t*/\n\thandleEndOfLifetime?(completions: T, item: T['items'][number], reason: InlineCompletionEndOfLifeReason<T['items'][number]>, lifetimeSummary: LifetimeSummary): void;\n\n\t/**\n\t * Will be called when a completions list is no longer in use and can be garbage-collected.\n\t*/\n\tdisposeInlineCompletions(completions: T, reason: InlineCompletionsDisposeReason): void;\n\n\tonDidChangeInlineCompletions?: Event<void>;\n\n\t/**\n\t * Only used for {@link yieldsToGroupIds}.\n\t * Multiple providers can have the same group id.\n\t */\n\tgroupId?: InlineCompletionProviderGroupId;\n\n\t/** @internal */\n\tproviderId?: ProviderId;\n\n\t/**\n\t * Returns a list of preferred provider {@link groupId}s.\n\t * The current provider is only requested for completions if no provider with a preferred group id returned a result.\n\t */\n\tyieldsToGroupIds?: InlineCompletionProviderGroupId[];\n\n\texcludesGroupIds?: InlineCompletionProviderGroupId[];\n\n\tdisplayName?: string;\n\n\tdebounceDelayMs?: number;\n\n\ttoString?(): string;\n}\n\n\n/** @internal */\nexport class ProviderId {\n\tpublic static fromExtensionId(extensionId: string | undefined): ProviderId {\n\t\treturn new ProviderId(extensionId, undefined, undefined);\n\t}\n\n\tconstructor(\n\t\tpublic readonly extensionId: string | undefined,\n\t\tpublic readonly extensionVersion: string | undefined,\n\t\tpublic readonly providerId: string | undefined\n\t) {\n\t}\n\n\ttoString(): string {\n\t\tlet result = '';\n\t\tif (this.extensionId) {\n\t\t\tresult += this.extensionId;\n\t\t}\n\t\tif (this.extensionVersion) {\n\t\t\tresult += `@${this.extensionVersion}`;\n\t\t}\n\t\tif (this.providerId) {\n\t\t\tresult += `:${this.providerId}`;\n\t\t}\n\t\tif (result.length === 0) {\n\t\t\tresult = 'unknown';\n\t\t}\n\t\treturn result;\n\t}\n}\n\n/** @internal */\nexport class VersionedExtensionId {\n\n\tconstructor(\n\t\tpublic readonly extensionId: string,\n\t\tpublic readonly version: string,\n\t) { }\n\n\ttoString(): string {\n\t\treturn `${this.extensionId}@${this.version}`;\n\t}\n}\n\nexport type InlineCompletionsDisposeReason = { kind: 'lostRace' | 'tokenCancellation' | 'other' | 'empty' | 'notTaken' };\n\nexport enum InlineCompletionEndOfLifeReasonKind {\n\tAccepted = 0,\n\tRejected = 1,\n\tIgnored = 2,\n}\n\nexport type InlineCompletionEndOfLifeReason<TInlineCompletion = InlineCompletion> = {\n\tkind: InlineCompletionEndOfLifeReasonKind.Accepted; // User did an explicit action to accept\n} | {\n\tkind: InlineCompletionEndOfLifeReasonKind.Rejected; // User did an explicit action to reject\n} | {\n\tkind: InlineCompletionEndOfLifeReasonKind.Ignored;\n\tsupersededBy?: TInlineCompletion;\n\tuserTypingDisagreed: boolean;\n};\n\nexport type LifetimeSummary = {\n\trequestUuid: string;\n\tcorrelationId: string | undefined;\n\tpartiallyAccepted: number;\n\tpartiallyAcceptedCountSinceOriginal: number;\n\tpartiallyAcceptedRatioSinceOriginal: number;\n\tpartiallyAcceptedCharactersSinceOriginal: number;\n\tshown: boolean;\n\tshownDuration: number;\n\tshownDurationUncollapsed: number;\n\ttimeUntilShown: number | undefined;\n\ttimeUntilProviderRequest: number;\n\ttimeUntilProviderResponse: number;\n\teditorType: string;\n\tviewKind: string | undefined;\n\terror: string | undefined;\n\tpreceeded: boolean;\n\tlanguageId: string;\n\trequestReason: string;\n\tcursorColumnDistance?: number;\n\tcursorLineDistance?: number;\n\tlineCountOriginal?: number;\n\tlineCountModified?: number;\n\tcharacterCountOriginal?: number;\n\tcharacterCountModified?: number;\n\tdisjointReplacements?: number;\n\tsameShapeReplacements?: boolean;\n\ttypingInterval: number;\n\ttypingIntervalCharacterCount: number;\n};\n\nexport interface CodeAction {\n\ttitle: string;\n\tcommand?: Command;\n\tedit?: WorkspaceEdit;\n\tdiagnostics?: IMarkerData[];\n\tkind?: string;\n\tisPreferred?: boolean;\n\tisAI?: boolean;\n\tdisabled?: string;\n\tranges?: IRange[];\n}\n\nexport const enum CodeActionTriggerType {\n\tInvoke = 1,\n\tAuto = 2,\n}\n\n/**\n * @internal\n */\nexport interface CodeActionContext {\n\tonly?: string;\n\ttrigger: CodeActionTriggerType;\n}\n\nexport interface CodeActionList extends IDisposable {\n\treadonly actions: ReadonlyArray<CodeAction>;\n}\n\n/**\n * The code action interface defines the contract between extensions and\n * the [light bulb](https://code.visualstudio.com/docs/editor/editingevolved#_code-action) feature.\n * @internal\n */\nexport interface CodeActionProvider {\n\n\textensionId?: string;\n\n\t/**\n\t * Provide commands for the given document and range.\n\t */\n\tprovideCodeActions(model: model.ITextModel, range: Range | Selection, context: CodeActionContext, token: CancellationToken): ProviderResult<CodeActionList>;\n\n\t/**\n\t * Given a code action fill in the edit. Will only invoked when missing.\n\t */\n\tresolveCodeAction?(codeAction: CodeAction, token: CancellationToken): ProviderResult<CodeAction>;\n\n\t/**\n\t * Optional list of CodeActionKinds that this provider returns.\n\t */\n\treadonly providedCodeActionKinds?: ReadonlyArray<string>;\n\n\treadonly documentation?: ReadonlyArray<{ readonly kind: string; readonly command: Command }>;\n\n\t/**\n\t * @internal\n\t */\n\t_getAdditionalMenuItems?(context: CodeActionContext, actions: readonly CodeAction[]): Command[];\n}\n\n/**\n * @internal\n */\nexport interface DocumentPasteEdit {\n\treadonly title: string;\n\treadonly kind: HierarchicalKind;\n\treadonly handledMimeType?: string;\n\tyieldTo?: readonly DropYieldTo[];\n\tinsertText: string | { readonly snippet: string };\n\tadditionalEdit?: WorkspaceEdit;\n}\n\n/**\n * @internal\n */\nexport enum DocumentPasteTriggerKind {\n\tAutomatic = 0,\n\tPasteAs = 1,\n}\n\n/**\n * @internal\n */\nexport interface DocumentPasteContext {\n\treadonly only?: HierarchicalKind;\n\treadonly triggerKind: DocumentPasteTriggerKind;\n}\n\n/**\n * @internal\n */\nexport interface DocumentPasteEditsSession {\n\tedits: readonly DocumentPasteEdit[];\n\tdispose(): void;\n}\n\n/**\n * @internal\n */\nexport interface DocumentPasteEditProvider {\n\treadonly id?: string;\n\treadonly copyMimeTypes: readonly string[];\n\treadonly pasteMimeTypes: readonly string[];\n\treadonly providedPasteEditKinds: readonly HierarchicalKind[];\n\n\tprepareDocumentPaste?(model: model.ITextModel, ranges: readonly IRange[], dataTransfer: IReadonlyVSDataTransfer, token: CancellationToken): Promise<undefined | IReadonlyVSDataTransfer>;\n\n\tprovideDocumentPasteEdits?(model: model.ITextModel, ranges: readonly IRange[], dataTransfer: IReadonlyVSDataTransfer, context: DocumentPasteContext, token: CancellationToken): Promise<DocumentPasteEditsSession | undefined>;\n\n\tresolveDocumentPasteEdit?(edit: DocumentPasteEdit, token: CancellationToken): Promise<DocumentPasteEdit>;\n}\n\n/**\n * Represents a parameter of a callable-signature. A parameter can\n * have a label and a doc-comment.\n */\nexport interface ParameterInformation {\n\t/**\n\t * The label of this signature. Will be shown in\n\t * the UI.\n\t */\n\tlabel: string | [number, number];\n\t/**\n\t * The human-readable doc-comment of this signature. Will be shown\n\t * in the UI but can be omitted.\n\t */\n\tdocumentation?: string | IMarkdownString;\n}\n/**\n * Represents the signature of something callable. A signature\n * can have a label, like a function-name, a doc-comment, and\n * a set of parameters.\n */\nexport interface SignatureInformation {\n\t/**\n\t * The label of this signature. Will be shown in\n\t * the UI.\n\t */\n\tlabel: string;\n\t/**\n\t * The human-readable doc-comment of this signature. Will be shown\n\t * in the UI but can be omitted.\n\t */\n\tdocumentation?: string | IMarkdownString;\n\t/**\n\t * The parameters of this signature.\n\t */\n\tparameters: ParameterInformation[];\n\t/**\n\t * Index of the active parameter.\n\t *\n\t * If provided, this is used in place of `SignatureHelp.activeSignature`.\n\t */\n\tactiveParameter?: number;\n}\n/**\n * Signature help represents the signature of something\n * callable. There can be multiple signatures but only one\n * active and only one active parameter.\n */\nexport interface SignatureHelp {\n\t/**\n\t * One or more signatures.\n\t */\n\tsignatures: SignatureInformation[];\n\t/**\n\t * The active signature.\n\t */\n\tactiveSignature: number;\n\t/**\n\t * The active parameter of the active signature.\n\t */\n\tactiveParameter: number;\n}\n\nexport interface SignatureHelpResult extends IDisposable {\n\tvalue: SignatureHelp;\n}\n\nexport enum SignatureHelpTriggerKind {\n\tInvoke = 1,\n\tTriggerCharacter = 2,\n\tContentChange = 3,\n}\n\nexport interface SignatureHelpContext {\n\treadonly triggerKind: SignatureHelpTriggerKind;\n\treadonly triggerCharacter?: string;\n\treadonly isRetrigger: boolean;\n\treadonly activeSignatureHelp?: SignatureHelp;\n}\n\n/**\n * The signature help provider interface defines the contract between extensions and\n * the [parameter hints](https://code.visualstudio.com/docs/editor/intellisense)-feature.\n */\nexport interface SignatureHelpProvider {\n\n\treadonly signatureHelpTriggerCharacters?: ReadonlyArray<string>;\n\treadonly signatureHelpRetriggerCharacters?: ReadonlyArray<string>;\n\n\t/**\n\t * Provide help for the signature at the given position and document.\n\t */\n\tprovideSignatureHelp(model: model.ITextModel, position: Position, token: CancellationToken, context: SignatureHelpContext): ProviderResult<SignatureHelpResult>;\n}\n\n/**\n * A document highlight kind.\n */\nexport enum DocumentHighlightKind {\n\t/**\n\t * A textual occurrence.\n\t */\n\tText,\n\t/**\n\t * Read-access of a symbol, like reading a variable.\n\t */\n\tRead,\n\t/**\n\t * Write-access of a symbol, like writing to a variable.\n\t */\n\tWrite\n}\n/**\n * A document highlight is a range inside a text document which deserves\n * special attention. Usually a document highlight is visualized by changing\n * the background color of its range.\n */\nexport interface DocumentHighlight {\n\t/**\n\t * The range this highlight applies to.\n\t */\n\trange: IRange;\n\t/**\n\t * The highlight kind, default is {@link DocumentHighlightKind.Text text}.\n\t */\n\tkind?: DocumentHighlightKind;\n}\n\n/**\n * Represents a set of document highlights for a specific URI.\n */\nexport interface MultiDocumentHighlight {\n\t/**\n\t * The URI of the document that the highlights belong to.\n\t */\n\turi: URI;\n\n\t/**\n\t * The set of highlights for the document.\n\t */\n\thighlights: DocumentHighlight[];\n}\n\n/**\n * The document highlight provider interface defines the contract between extensions and\n * the word-highlight-feature.\n */\nexport interface DocumentHighlightProvider {\n\t/**\n\t * Provide a set of document highlights, like all occurrences of a variable or\n\t * all exit-points of a function.\n\t */\n\tprovideDocumentHighlights(model: model.ITextModel, position: Position, token: CancellationToken): ProviderResult<DocumentHighlight[]>;\n}\n\n/**\n * A provider that can provide document highlights across multiple documents.\n */\nexport interface MultiDocumentHighlightProvider {\n\treadonly selector: LanguageSelector;\n\n\t/**\n\t * Provide a Map of URI --> document highlights, like all occurrences of a variable or\n\t * all exit-points of a function.\n\t *\n\t * Used in cases such as split view, notebooks, etc. where there can be multiple documents\n\t * with shared symbols.\n\t *\n\t * @param primaryModel The primary text model.\n\t * @param position The position at which to provide document highlights.\n\t * @param otherModels The other text models to search for document highlights.\n\t * @param token A cancellation token.\n\t * @returns A map of URI to document highlights.\n\t */\n\tprovideMultiDocumentHighlights(primaryModel: model.ITextModel, position: Position, otherModels: model.ITextModel[], token: CancellationToken): ProviderResult<Map<URI, DocumentHighlight[]>>;\n}\n\n/**\n * The linked editing range provider interface defines the contract between extensions and\n * the linked editing feature.\n */\nexport interface LinkedEditingRangeProvider {\n\n\t/**\n\t * Provide a list of ranges that can be edited together.\n\t */\n\tprovideLinkedEditingRanges(model: model.ITextModel, position: Position, token: CancellationToken): ProviderResult<LinkedEditingRanges>;\n}\n\n/**\n * Represents a list of ranges that can be edited together along with a word pattern to describe valid contents.\n */\nexport interface LinkedEditingRanges {\n\t/**\n\t * A list of ranges that can be edited together. The ranges must have\n\t * identical length and text content. The ranges cannot overlap\n\t */\n\tranges: IRange[];\n\n\t/**\n\t * An optional word pattern that describes valid contents for the given ranges.\n\t * If no pattern is provided, the language configuration's word pattern will be used.\n\t */\n\twordPattern?: RegExp;\n}\n\n/**\n * Value-object that contains additional information when\n * requesting references.\n */\nexport interface ReferenceContext {\n\t/**\n\t * Include the declaration of the current symbol.\n\t */\n\tincludeDeclaration: boolean;\n}\n/**\n * The reference provider interface defines the contract between extensions and\n * the [find references](https://code.visualstudio.com/docs/editor/editingevolved#_peek)-feature.\n */\nexport interface ReferenceProvider {\n\t/**\n\t * Provide a set of project-wide references for the given position and document.\n\t */\n\tprovideReferences(model: model.ITextModel, position: Position, context: ReferenceContext, token: CancellationToken): ProviderResult<Location[]>;\n}\n\n/**\n * Represents a location inside a resource, such as a line\n * inside a text file.\n */\nexport interface Location {\n\t/**\n\t * The resource identifier of this location.\n\t */\n\turi: URI;\n\t/**\n\t * The document range of this locations.\n\t */\n\trange: IRange;\n}\n\nexport interface LocationLink {\n\t/**\n\t * A range to select where this link originates from.\n\t */\n\toriginSelectionRange?: IRange;\n\n\t/**\n\t * The target uri this link points to.\n\t */\n\turi: URI;\n\n\t/**\n\t * The full range this link points to.\n\t */\n\trange: IRange;\n\n\t/**\n\t * A range to select this link points to. Must be contained\n\t * in `LocationLink.range`.\n\t */\n\ttargetSelectionRange?: IRange;\n}\n\n/**\n * @internal\n */\nexport function isLocationLink(thing: any): thing is LocationLink {\n\treturn thing\n\t\t&& URI.isUri((thing as LocationLink).uri)\n\t\t&& Range.isIRange((thing as LocationLink).range)\n\t\t&& (Range.isIRange((thing as LocationLink).originSelectionRange) || Range.isIRange((thing as LocationLink).targetSelectionRange));\n}\n\n\nexport type Definition = Location | Location[] | LocationLink[];\n\n/**\n * The definition provider interface defines the contract between extensions and\n * the [go to definition](https://code.visualstudio.com/docs/editor/editingevolved#_go-to-definition)\n * and peek definition features.\n */\nexport interface DefinitionProvider {\n\t/**\n\t * Provide the definition of the symbol at the given position and document.\n\t */\n\tprovideDefinition(model: model.ITextModel, position: Position, token: CancellationToken): ProviderResult<Definition | LocationLink[]>;\n}\n\n/**\n * The definition provider interface defines the contract between extensions and\n * the [go to definition](https://code.visualstudio.com/docs/editor/editingevolved#_go-to-definition)\n * and peek definition features.\n */\nexport interface DeclarationProvider {\n\t/**\n\t * Provide the declaration of the symbol at the given position and document.\n\t */\n\tprovideDeclaration(model: model.ITextModel, position: Position, token: CancellationToken): ProviderResult<Definition | LocationLink[]>;\n}\n\n/**\n * The implementation provider interface defines the contract between extensions and\n * the go to implementation feature.\n */\nexport interface ImplementationProvider {\n\t/**\n\t * Provide the implementation of the symbol at the given position and document.\n\t */\n\tprovideImplementation(model: model.ITextModel, position: Position, token: CancellationToken): ProviderResult<Definition | LocationLink[]>;\n}\n\n/**\n * The type definition provider interface defines the contract between extensions and\n * the go to type definition feature.\n */\nexport interface TypeDefinitionProvider {\n\t/**\n\t * Provide the type definition of the symbol at the given position and document.\n\t */\n\tprovideTypeDefinition(model: model.ITextModel, position: Position, token: CancellationToken): ProviderResult<Definition | LocationLink[]>;\n}\n\n/**\n * A symbol kind.\n */\nexport const enum SymbolKind {\n\tFile = 0,\n\tModule = 1,\n\tNamespace = 2,\n\tPackage = 3,\n\tClass = 4,\n\tMethod = 5,\n\tProperty = 6,\n\tField = 7,\n\tConstructor = 8,\n\tEnum = 9,\n\tInterface = 10,\n\tFunction = 11,\n\tVariable = 12,\n\tConstant = 13,\n\tString = 14,\n\tNumber = 15,\n\tBoolean = 16,\n\tArray = 17,\n\tObject = 18,\n\tKey = 19,\n\tNull = 20,\n\tEnumMember = 21,\n\tStruct = 22,\n\tEvent = 23,\n\tOperator = 24,\n\tTypeParameter = 25\n}\n\n/**\n * @internal\n */\nexport const symbolKindNames: { [symbol: number]: string } = {\n\t[SymbolKind.Array]: localize('Array', \"array\"),\n\t[SymbolKind.Boolean]: localize('Boolean', \"boolean\"),\n\t[SymbolKind.Class]: localize('Class', \"class\"),\n\t[SymbolKind.Constant]: localize('Constant', \"constant\"),\n\t[SymbolKind.Constructor]: localize('Constructor', \"constructor\"),\n\t[SymbolKind.Enum]: localize('Enum', \"enumeration\"),\n\t[SymbolKind.EnumMember]: localize('EnumMember', \"enumeration member\"),\n\t[SymbolKind.Event]: localize('Event', \"event\"),\n\t[SymbolKind.Field]: localize('Field', \"field\"),\n\t[SymbolKind.File]: localize('File', \"file\"),\n\t[SymbolKind.Function]: localize('Function', \"function\"),\n\t[SymbolKind.Interface]: localize('Interface', \"interface\"),\n\t[SymbolKind.Key]: localize('Key', \"key\"),\n\t[SymbolKind.Method]: localize('Method', \"method\"),\n\t[SymbolKind.Module]: localize('Module', \"module\"),\n\t[SymbolKind.Namespace]: localize('Namespace', \"namespace\"),\n\t[SymbolKind.Null]: localize('Null', \"null\"),\n\t[SymbolKind.Number]: localize('Number', \"number\"),\n\t[SymbolKind.Object]: localize('Object', \"object\"),\n\t[SymbolKind.Operator]: localize('Operator', \"operator\"),\n\t[SymbolKind.Package]: localize('Package', \"package\"),\n\t[SymbolKind.Property]: localize('Property', \"property\"),\n\t[SymbolKind.String]: localize('String', \"string\"),\n\t[SymbolKind.Struct]: localize('Struct', \"struct\"),\n\t[SymbolKind.TypeParameter]: localize('TypeParameter', \"type parameter\"),\n\t[SymbolKind.Variable]: localize('Variable', \"variable\"),\n};\n\n/**\n * @internal\n */\nexport function getAriaLabelForSymbol(symbolName: string, kind: SymbolKind): string {\n\treturn localize('symbolAriaLabel', '{0} ({1})', symbolName, symbolKindNames[kind]);\n}\n\nexport const enum SymbolTag {\n\tDeprecated = 1,\n}\n\n/**\n * @internal\n */\nexport namespace SymbolKinds {\n\n\tconst byKind = new Map<SymbolKind, ThemeIcon>();\n\tbyKind.set(SymbolKind.File, Codicon.symbolFile);\n\tbyKind.set(SymbolKind.Module, Codicon.symbolModule);\n\tbyKind.set(SymbolKind.Namespace, Codicon.symbolNamespace);\n\tbyKind.set(SymbolKind.Package, Codicon.symbolPackage);\n\tbyKind.set(SymbolKind.Class, Codicon.symbolClass);\n\tbyKind.set(SymbolKind.Method, Codicon.symbolMethod);\n\tbyKind.set(SymbolKind.Property, Codicon.symbolProperty);\n\tbyKind.set(SymbolKind.Field, Codicon.symbolField);\n\tbyKind.set(SymbolKind.Constructor, Codicon.symbolConstructor);\n\tbyKind.set(SymbolKind.Enum, Codicon.symbolEnum);\n\tbyKind.set(SymbolKind.Interface, Codicon.symbolInterface);\n\tbyKind.set(SymbolKind.Function, Codicon.symbolFunction);\n\tbyKind.set(SymbolKind.Variable, Codicon.symbolVariable);\n\tbyKind.set(SymbolKind.Constant, Codicon.symbolConstant);\n\tbyKind.set(SymbolKind.String, Codicon.symbolString);\n\tbyKind.set(SymbolKind.Number, Codicon.symbolNumber);\n\tbyKind.set(SymbolKind.Boolean, Codicon.symbolBoolean);\n\tbyKind.set(SymbolKind.Array, Codicon.symbolArray);\n\tbyKind.set(SymbolKind.Object, Codicon.symbolObject);\n\tbyKind.set(SymbolKind.Key, Codicon.symbolKey);\n\tbyKind.set(SymbolKind.Null, Codicon.symbolNull);\n\tbyKind.set(SymbolKind.EnumMember, Codicon.symbolEnumMember);\n\tbyKind.set(SymbolKind.Struct, Codicon.symbolStruct);\n\tbyKind.set(SymbolKind.Event, Codicon.symbolEvent);\n\tbyKind.set(SymbolKind.Operator, Codicon.symbolOperator);\n\tbyKind.set(SymbolKind.TypeParameter, Codicon.symbolTypeParameter);\n\t/**\n\t * @internal\n\t */\n\texport function toIcon(kind: SymbolKind): ThemeIcon {\n\t\tlet icon = byKind.get(kind);\n\t\tif (!icon) {\n\t\t\tconsole.info('No codicon found for SymbolKind ' + kind);\n\t\t\ticon = Codicon.symbolProperty;\n\t\t}\n\t\treturn icon;\n\t}\n\n\tconst byCompletionKind = new Map<SymbolKind, CompletionItemKind>();\n\tbyCompletionKind.set(SymbolKind.File, CompletionItemKind.File);\n\tbyCompletionKind.set(SymbolKind.Module, CompletionItemKind.Module);\n\tbyCompletionKind.set(SymbolKind.Namespace, CompletionItemKind.Module);\n\tbyCompletionKind.set(SymbolKind.Package, CompletionItemKind.Module);\n\tbyCompletionKind.set(SymbolKind.Class, CompletionItemKind.Class);\n\tbyCompletionKind.set(SymbolKind.Method, CompletionItemKind.Method);\n\tbyCompletionKind.set(SymbolKind.Property, CompletionItemKind.Property);\n\tbyCompletionKind.set(SymbolKind.Field, CompletionItemKind.Field);\n\tbyCompletionKind.set(SymbolKind.Constructor, CompletionItemKind.Constructor);\n\tbyCompletionKind.set(SymbolKind.Enum, CompletionItemKind.Enum);\n\tbyCompletionKind.set(SymbolKind.Interface, CompletionItemKind.Interface);\n\tbyCompletionKind.set(SymbolKind.Function, CompletionItemKind.Function);\n\tbyCompletionKind.set(SymbolKind.Variable, CompletionItemKind.Variable);\n\tbyCompletionKind.set(SymbolKind.Constant, CompletionItemKind.Constant);\n\tbyCompletionKind.set(SymbolKind.String, CompletionItemKind.Text);\n\tbyCompletionKind.set(SymbolKind.Number, CompletionItemKind.Value);\n\tbyCompletionKind.set(SymbolKind.Boolean, CompletionItemKind.Value);\n\tbyCompletionKind.set(SymbolKind.Array, CompletionItemKind.Value);\n\tbyCompletionKind.set(SymbolKind.Object, CompletionItemKind.Value);\n\tbyCompletionKind.set(SymbolKind.Key, CompletionItemKind.Keyword);\n\tbyCompletionKind.set(SymbolKind.Null, CompletionItemKind.Value);\n\tbyCompletionKind.set(SymbolKind.EnumMember, CompletionItemKind.EnumMember);\n\tbyCompletionKind.set(SymbolKind.Struct, CompletionItemKind.Struct);\n\tbyCompletionKind.set(SymbolKind.Event, CompletionItemKind.Event);\n\tbyCompletionKind.set(SymbolKind.Operator, CompletionItemKind.Operator);\n\tbyCompletionKind.set(SymbolKind.TypeParameter, CompletionItemKind.TypeParameter);\n\t/**\n\t * @internal\n\t */\n\texport function toCompletionKind(kind: SymbolKind): CompletionItemKind {\n\t\tlet completionKind = byCompletionKind.get(kind);\n\t\tif (completionKind === undefined) {\n\t\t\tconsole.info('No completion kind found for SymbolKind ' + kind);\n\t\t\tcompletionKind = CompletionItemKind.File;\n\t\t}\n\t\treturn completionKind;\n\t}\n}\n\nexport interface DocumentSymbol {\n\tname: string;\n\tdetail: string;\n\tkind: SymbolKind;\n\ttags: ReadonlyArray<SymbolTag>;\n\tcontainerName?: string;\n\trange: IRange;\n\tselectionRange: IRange;\n\tchildren?: DocumentSymbol[];\n}\n\n/**\n * The document symbol provider interface defines the contract between extensions and\n * the [go to symbol](https://code.visualstudio.com/docs/editor/editingevolved#_go-to-symbol)-feature.\n */\nexport interface DocumentSymbolProvider {\n\n\tdisplayName?: string;\n\n\t/**\n\t * Provide symbol information for the given document.\n\t */\n\tprovideDocumentSymbols(model: model.ITextModel, token: CancellationToken): ProviderResult<DocumentSymbol[]>;\n}\n\nexport interface TextEdit {\n\trange: IRange;\n\ttext: string;\n\teol?: model.EndOfLineSequence;\n}\n\n/** @internal */\nexport abstract class TextEdit {\n}\n\n/**\n * Interface used to format a model\n */\nexport interface FormattingOptions {\n\t/**\n\t * Size of a tab in spaces.\n\t */\n\ttabSize: number;\n\t/**\n\t * Prefer spaces over tabs.\n\t */\n\tinsertSpaces: boolean;\n}\n/**\n * The document formatting provider interface defines the contract between extensions and\n * the formatting-feature.\n */\nexport interface DocumentFormattingEditProvider {\n\n\t/**\n\t * @internal\n\t */\n\treadonly extensionId?: ExtensionIdentifier;\n\n\treadonly displayName?: string;\n\n\t/**\n\t * Provide formatting edits for a whole document.\n\t */\n\tprovideDocumentFormattingEdits(model: model.ITextModel, options: FormattingOptions, token: CancellationToken): ProviderResult<TextEdit[]>;\n}\n/**\n * The document formatting provider interface defines the contract between extensions and\n * the formatting-feature.\n */\nexport interface DocumentRangeFormattingEditProvider {\n\t/**\n\t * @internal\n\t */\n\treadonly extensionId?: ExtensionIdentifier;\n\n\treadonly displayName?: string;\n\n\t/**\n\t * Provide formatting edits for a range in a document.\n\t *\n\t * The given range is a hint and providers can decide to format a smaller\n\t * or larger range. Often this is done by adjusting the start and end\n\t * of the range to full syntax nodes.\n\t */\n\tprovideDocumentRangeFormattingEdits(model: model.ITextModel, range: Range, options: FormattingOptions, token: CancellationToken): ProviderResult<TextEdit[]>;\n\n\tprovideDocumentRangesFormattingEdits?(model: model.ITextModel, ranges: Range[], options: FormattingOptions, token: CancellationToken): ProviderResult<TextEdit[]>;\n}\n/**\n * The document formatting provider interface defines the contract between extensions and\n * the formatting-feature.\n */\nexport interface OnTypeFormattingEditProvider {\n\n\tautoFormatTriggerCharacters: string[];\n\n\t/**\n\t * Provide formatting edits after a character has been typed.\n\t *\n\t * The given position and character should hint to the provider\n\t * what range the position to expand to, like find the matching `{`\n\t * when `}` has been entered.\n\t */\n\tprovideOnTypeFormattingEdits(model: model.ITextModel, position: Position, ch: string, options: FormattingOptions, token: CancellationToken): ProviderResult<TextEdit[]>;\n}\n\n/**\n * @internal\n */\nexport interface IInplaceReplaceSupportResult {\n\tvalue: string;\n\trange: IRange;\n}\n\n/**\n * A link inside the editor.\n */\nexport interface ILink {\n\trange: IRange;\n\turl?: URI | string;\n\ttooltip?: string;\n}\n\nexport interface ILinksList {\n\tlinks: ILink[];\n\tdispose?(): void;\n}\n/**\n * A provider of links.\n */\nexport interface LinkProvider {\n\tprovideLinks(model: model.ITextModel, token: CancellationToken): ProviderResult<ILinksList>;\n\tresolveLink?: (link: ILink, token: CancellationToken) => ProviderResult<ILink>;\n}\n\n/**\n * A color in RGBA format.\n */\nexport interface IColor {\n\n\t/**\n\t * The red component in the range [0-1].\n\t */\n\treadonly red: number;\n\n\t/**\n\t * The green component in the range [0-1].\n\t */\n\treadonly green: number;\n\n\t/**\n\t * The blue component in the range [0-1].\n\t */\n\treadonly blue: number;\n\n\t/**\n\t * The alpha component in the range [0-1].\n\t */\n\treadonly alpha: number;\n}\n\n/**\n * String representations for a color\n */\nexport interface IColorPresentation {\n\t/**\n\t * The label of this color presentation. It will be shown on the color\n\t * picker header. By default this is also the text that is inserted when selecting\n\t * this color presentation.\n\t */\n\tlabel: string;\n\t/**\n\t * An {@link TextEdit edit} which is applied to a document when selecting\n\t * this presentation for the color.\n\t */\n\ttextEdit?: TextEdit;\n\t/**\n\t * An optional array of additional {@link TextEdit text edits} that are applied when\n\t * selecting this color presentation.\n\t */\n\tadditionalTextEdits?: TextEdit[];\n}\n\n/**\n * A color range is a range in a text model which represents a color.\n */\nexport interface IColorInformation {\n\n\t/**\n\t * The range within the model.\n\t */\n\trange: IRange;\n\n\t/**\n\t * The color represented in this range.\n\t */\n\tcolor: IColor;\n}\n\n/**\n * A provider of colors for editor models.\n */\nexport interface DocumentColorProvider {\n\t/**\n\t * Provides the color ranges for a specific model.\n\t */\n\tprovideDocumentColors(model: model.ITextModel, token: CancellationToken): ProviderResult<IColorInformation[]>;\n\t/**\n\t * Provide the string representations for a color.\n\t */\n\tprovideColorPresentations(model: model.ITextModel, colorInfo: IColorInformation, token: CancellationToken): ProviderResult<IColorPresentation[]>;\n}\n\nexport interface SelectionRange {\n\trange: IRange;\n}\n\nexport interface SelectionRangeProvider {\n\t/**\n\t * Provide ranges that should be selected from the given position.\n\t */\n\tprovideSelectionRanges(model: model.ITextModel, positions: Position[], token: CancellationToken): ProviderResult<SelectionRange[][]>;\n}\n\nexport interface FoldingContext {\n}\n/**\n * A provider of folding ranges for editor models.\n */\nexport interface FoldingRangeProvider {\n\n\t/**\n\t * An optional event to signal that the folding ranges from this provider have changed.\n\t */\n\tonDidChange?: Event<this>;\n\n\t/**\n\t * Provides the folding ranges for a specific model.\n\t */\n\tprovideFoldingRanges(model: model.ITextModel, context: FoldingContext, token: CancellationToken): ProviderResult<FoldingRange[]>;\n}\n\nexport interface FoldingRange {\n\n\t/**\n\t * The one-based start line of the range to fold. The folded area starts after the line's last character.\n\t */\n\tstart: number;\n\n\t/**\n\t * The one-based end line of the range to fold. The folded area ends with the line's last character.\n\t */\n\tend: number;\n\n\t/**\n\t * Describes the {@link FoldingRangeKind Kind} of the folding range such as {@link FoldingRangeKind.Comment Comment} or\n\t * {@link FoldingRangeKind.Region Region}. The kind is used to categorize folding ranges and used by commands\n\t * like 'Fold all comments'. See\n\t * {@link FoldingRangeKind} for an enumeration of standardized kinds.\n\t */\n\tkind?: FoldingRangeKind;\n}\nexport class FoldingRangeKind {\n\t/**\n\t * Kind for folding range representing a comment. The value of the kind is 'comment'.\n\t */\n\tstatic readonly Comment = new FoldingRangeKind('comment');\n\t/**\n\t * Kind for folding range representing a import. The value of the kind is 'imports'.\n\t */\n\tstatic readonly Imports = new FoldingRangeKind('imports');\n\t/**\n\t * Kind for folding range representing regions (for example marked by `#region`, `#endregion`).\n\t * The value of the kind is 'region'.\n\t */\n\tstatic readonly Region = new FoldingRangeKind('region');\n\n\t/**\n\t * Returns a {@link FoldingRangeKind} for the given value.\n\t *\n\t * @param value of the kind.\n\t */\n\tstatic fromValue(value: string) {\n\t\tswitch (value) {\n\t\t\tcase 'comment': return FoldingRangeKind.Comment;\n\t\t\tcase 'imports': return FoldingRangeKind.Imports;\n\t\t\tcase 'region': return FoldingRangeKind.Region;\n\t\t}\n\t\treturn new FoldingRangeKind(value);\n\t}\n\n\t/**\n\t * Creates a new {@link FoldingRangeKind}.\n\t *\n\t * @param value of the kind.\n\t */\n\tpublic constructor(public value: string) {\n\t}\n}\n\n\nexport interface WorkspaceEditMetadata {\n\tneedsConfirmation: boolean;\n\tlabel: string;\n\tdescription?: string;\n}\n\nexport interface WorkspaceFileEditOptions {\n\toverwrite?: boolean;\n\tignoreIfNotExists?: boolean;\n\tignoreIfExists?: boolean;\n\trecursive?: boolean;\n\tcopy?: boolean;\n\tfolder?: boolean;\n\tskipTrashBin?: boolean;\n\tmaxSize?: number;\n}\n\nexport interface IWorkspaceFileEdit {\n\toldResource?: URI;\n\tnewResource?: URI;\n\toptions?: WorkspaceFileEditOptions;\n\tmetadata?: WorkspaceEditMetadata;\n}\n\nexport interface IWorkspaceTextEdit {\n\tresource: URI;\n\ttextEdit: TextEdit & { insertAsSnippet?: boolean; keepWhitespace?: boolean };\n\tversionId: number | undefined;\n\tmetadata?: WorkspaceEditMetadata;\n}\n\nexport interface WorkspaceEdit {\n\tedits: Array<IWorkspaceTextEdit | IWorkspaceFileEdit | ICustomEdit>;\n}\n\nexport interface ICustomEdit {\n\treadonly resource: URI;\n\treadonly metadata?: WorkspaceEditMetadata;\n\tundo(): Promise<void> | void;\n\tredo(): Promise<void> | void;\n}\n\nexport interface Rejection {\n\trejectReason?: string;\n}\nexport interface RenameLocation {\n\trange: IRange;\n\ttext: string;\n}\n\nexport interface RenameProvider {\n\tprovideRenameEdits(model: model.ITextModel, position: Position, newName: string, token: CancellationToken): ProviderResult<WorkspaceEdit & Rejection>;\n\tresolveRenameLocation?(model: model.ITextModel, position: Position, token: CancellationToken): ProviderResult<RenameLocation & Rejection>;\n}\n\nexport enum NewSymbolNameTag {\n\tAIGenerated = 1\n}\n\nexport enum NewSymbolNameTriggerKind {\n\tInvoke = 0,\n\tAutomatic = 1,\n}\n\nexport interface NewSymbolName {\n\treadonly newSymbolName: string;\n\treadonly tags?: readonly NewSymbolNameTag[];\n}\n\nexport interface NewSymbolNamesProvider {\n\tsupportsAutomaticNewSymbolNamesTriggerKind?: Promise<boolean | undefined>;\n\tprovideNewSymbolNames(model: model.ITextModel, range: IRange, triggerKind: NewSymbolNameTriggerKind, token: CancellationToken): ProviderResult<NewSymbolName[]>;\n}\n\nexport interface Command {\n\tid: string;\n\ttitle: string;\n\ttooltip?: string;\n\targuments?: any[];\n}\n\n/**\n * @internal\n */\nexport namespace Command {\n\n\t/**\n\t * @internal\n\t */\n\texport function is(obj: any): obj is Command {\n\t\tif (!obj || typeof obj !== 'object') {\n\t\t\treturn false;\n\t\t}\n\t\treturn typeof (<Command>obj).id === 'string' &&\n\t\t\ttypeof (<Command>obj).title === 'string';\n\t}\n}\n\nexport interface CommentThreadRevealOptions {\n\tpreserveFocus: boolean;\n\tfocusReply: boolean;\n}\n\nexport interface CommentAuthorInformation {\n\tname: string;\n\ticonPath?: UriComponents;\n\n}\n\nexport interface PendingCommentThread {\n\trange: IRange | undefined;\n\turi: URI;\n\tuniqueOwner: string;\n\tisReply: boolean;\n\tcomment: PendingComment;\n}\n\nexport interface PendingComment {\n\tbody: string;\n\tcursor: IPosition;\n}\n\nexport interface CodeLens {\n\trange: IRange;\n\tid?: string;\n\tcommand?: Command;\n}\n\nexport interface CodeLensList {\n\treadonly lenses: readonly CodeLens[];\n\tdispose?(): void;\n}\n\nexport interface CodeLensProvider {\n\tonDidChange?: Event<this>;\n\tprovideCodeLenses(model: model.ITextModel, token: CancellationToken): ProviderResult<CodeLensList>;\n\tresolveCodeLens?(model: model.ITextModel, codeLens: CodeLens, token: CancellationToken): ProviderResult<CodeLens>;\n}\n\n\nexport enum InlayHintKind {\n\tType = 1,\n\tParameter = 2,\n}\n\nexport interface InlayHintLabelPart {\n\tlabel: string;\n\ttooltip?: string | IMarkdownString;\n\t// collapsible?: boolean;\n\tcommand?: Command;\n\tlocation?: Location;\n}\n\nexport interface InlayHint {\n\tlabel: string | InlayHintLabelPart[];\n\ttooltip?: string | IMarkdownString;\n\ttextEdits?: TextEdit[];\n\tposition: IPosition;\n\tkind?: InlayHintKind;\n\tpaddingLeft?: boolean;\n\tpaddingRight?: boolean;\n}\n\nexport interface InlayHintList {\n\thints: InlayHint[];\n\tdispose(): void;\n}\n\nexport interface InlayHintsProvider {\n\tdisplayName?: string;\n\tonDidChangeInlayHints?: Event<void>;\n\tprovideInlayHints(model: model.ITextModel, range: Range, token: CancellationToken): ProviderResult<InlayHintList>;\n\tresolveInlayHint?(hint: InlayHint, token: CancellationToken): ProviderResult<InlayHint>;\n}\n\nexport interface SemanticTokensLegend {\n\treadonly tokenTypes: string[];\n\treadonly tokenModifiers: string[];\n}\n\nexport interface SemanticTokens {\n\treadonly resultId?: string;\n\treadonly data: Uint32Array;\n}\n\nexport interface SemanticTokensEdit {\n\treadonly start: number;\n\treadonly deleteCount: number;\n\treadonly data?: Uint32Array;\n}\n\nexport interface SemanticTokensEdits {\n\treadonly resultId?: string;\n\treadonly edits: SemanticTokensEdit[];\n}\n\nexport interface DocumentSemanticTokensProvider {\n\tonDidChange?: Event<void>;\n\tgetLegend(): SemanticTokensLegend;\n\tprovideDocumentSemanticTokens(model: model.ITextModel, lastResultId: string | null, token: CancellationToken): ProviderResult<SemanticTokens | SemanticTokensEdits>;\n\treleaseDocumentSemanticTokens(resultId: string | undefined): void;\n}\n\nexport interface DocumentRangeSemanticTokensProvider {\n\tgetLegend(): SemanticTokensLegend;\n\tprovideDocumentRangeSemanticTokens(model: model.ITextModel, range: Range, token: CancellationToken): ProviderResult<SemanticTokens>;\n}\n\n/**\n * @internal\n */\nexport interface ITokenizationSupportChangedEvent {\n\tchangedLanguages: string[];\n\tchangedColorMap: boolean;\n}\n\n/**\n * @internal\n */\nexport interface ILazyTokenizationSupport<TSupport> {\n\tget tokenizationSupport(): Promise<TSupport | null>;\n}\n\n/**\n * @internal\n */\nexport class LazyTokenizationSupport<TSupport = ITokenizationSupport> implements IDisposable, ILazyTokenizationSupport<TSupport> {\n\tprivate _tokenizationSupport: Promise<TSupport & IDisposable | null> | null = null;\n\n\tconstructor(private readonly createSupport: () => Promise<TSupport & IDisposable | null>) {\n\t}\n\n\tdispose(): void {\n\t\tif (this._tokenizationSupport) {\n\t\t\tthis._tokenizationSupport.then((support) => {\n\t\t\t\tif (support) {\n\t\t\t\t\tsupport.dispose();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tget tokenizationSupport(): Promise<TSupport | null> {\n\t\tif (!this._tokenizationSupport) {\n\t\t\tthis._tokenizationSupport = this.createSupport();\n\t\t}\n\t\treturn this._tokenizationSupport;\n\t}\n}\n\n/**\n * @internal\n */\nexport interface ITokenizationRegistry<TSupport> {\n\n\t/**\n\t * An event triggered when:\n\t *  - a tokenization support is registered, unregistered or changed.\n\t *  - the color map is changed.\n\t */\n\tonDidChange: Event<ITokenizationSupportChangedEvent>;\n\n\t/**\n\t * Fire a change event for a language.\n\t * This is useful for languages that embed other languages.\n\t */\n\thandleChange(languageIds: string[]): void;\n\n\t/**\n\t * Register a tokenization support.\n\t */\n\tregister(languageId: string, support: TSupport): IDisposable;\n\n\t/**\n\t * Register a tokenization support factory.\n\t */\n\tregisterFactory(languageId: string, factory: ILazyTokenizationSupport<TSupport>): IDisposable;\n\n\t/**\n\t * Get or create the tokenization support for a language.\n\t * Returns `null` if not found.\n\t */\n\tgetOrCreate(languageId: string): Promise<TSupport | null>;\n\n\t/**\n\t * Get the tokenization support for a language.\n\t * Returns `null` if not found.\n\t */\n\tget(languageId: string): TSupport | null;\n\n\t/**\n\t * Returns false if a factory is still pending.\n\t */\n\tisResolved(languageId: string): boolean;\n\n\t/**\n\t * Set the new color map that all tokens will use in their ColorId binary encoded bits for foreground and background.\n\t */\n\tsetColorMap(colorMap: Color[]): void;\n\n\tgetColorMap(): Color[] | null;\n\n\tgetDefaultBackground(): Color | null;\n}\n\n/**\n * @internal\n */\nexport const TokenizationRegistry: ITokenizationRegistry<ITokenizationSupport> = new TokenizationRegistryImpl();\n\n/**\n * @internal\n */\nexport type DropYieldTo = { readonly kind: HierarchicalKind } | { readonly mimeType: string };\n\n/**\n * @internal\n */\nexport interface DocumentDropEdit {\n\treadonly title: string;\n\treadonly kind: HierarchicalKind | undefined;\n\treadonly handledMimeType?: string;\n\treadonly yieldTo?: readonly DropYieldTo[];\n\tinsertText: string | { readonly snippet: string };\n\tadditionalEdit?: WorkspaceEdit;\n}\n\n/**\n * @internal\n */\nexport interface DocumentDropEditsSession {\n\tedits: readonly DocumentDropEdit[];\n\tdispose(): void;\n}\n\n/**\n * @internal\n */\nexport interface DocumentDropEditProvider {\n\treadonly id?: string;\n\treadonly dropMimeTypes?: readonly string[];\n\n\tprovideDocumentDropEdits(model: model.ITextModel, position: IPosition, dataTransfer: IReadonlyVSDataTransfer, token: CancellationToken): ProviderResult<DocumentDropEditsSession>;\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3715, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/monaco-editor/esm/vs/editor/common/viewModel.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/file%3A/mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/viewModel.ts","file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/vs/editor/common/viewModel.ts"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as arrays from '../../base/common/arrays.js';\nimport { IScrollPosition, Scrollable } from '../../base/common/scrollable.js';\nimport * as strings from '../../base/common/strings.js';\nimport { ISimpleModel } from './viewModel/screenReaderSimpleModel.js';\nimport { ICoordinatesConverter } from './coordinatesConverter.js';\nimport { IPosition, Position } from './core/position.js';\nimport { Range } from './core/range.js';\nimport { CursorConfiguration, CursorState, EditOperationType, IColumnSelectData, ICursorSimpleModel, PartialCursorState } from './cursorCommon.js';\nimport { CursorChangeReason } from './cursorEvents.js';\nimport { INewScrollPosition, ScrollType } from './editorCommon.js';\nimport { EditorTheme } from './editorTheme.js';\nimport { EndOfLinePreference, IGlyphMarginLanesModel, IModelDecorationOptions, ITextModel, TextDirection } from './model.js';\nimport { ILineBreaksComputer, InjectedText } from './modelLineProjectionData.js';\nimport { BracketGuideOptions, IActiveIndentGuideInfo, IndentGuide } from './textModelGuides.js';\nimport { IViewLineTokens } from './tokens/lineTokens.js';\nimport { ViewEventHandler } from './viewEventHandler.js';\nimport { VerticalRevealType } from './viewEvents.js';\nimport { InlineDecoration, SingleLineInlineDecoration } from './viewModel/inlineDecorations.js';\n\nexport interface IViewModel extends ICursorSimpleModel, ISimpleModel {\n\n\treadonly model: ITextModel;\n\n\treadonly coordinatesConverter: ICoordinatesConverter;\n\n\treadonly viewLayout: IViewLayout;\n\n\treadonly cursorConfig: CursorConfiguration;\n\n\treadonly glyphLanes: IGlyphMarginLanesModel;\n\n\taddViewEventHandler(eventHandler: ViewEventHandler): void;\n\tremoveViewEventHandler(eventHandler: ViewEventHandler): void;\n\n\t/**\n\t * Gives a hint that a lot of requests are about to come in for these line numbers.\n\t */\n\tsetViewport(startLineNumber: number, endLineNumber: number, centeredLineNumber: number): void;\n\tvisibleLinesStabilized(): void;\n\tsetHasFocus(hasFocus: boolean): void;\n\tsetHasWidgetFocus(hasWidgetFocus: boolean): void;\n\tonCompositionStart(): void;\n\tonCompositionEnd(): void;\n\n\tgetFontSizeAtPosition(position: IPosition): string | null;\n\tgetMinimapDecorationsInRange(range: Range): ViewModelDecoration[];\n\tgetDecorationsInViewport(visibleRange: Range): ViewModelDecoration[];\n\tgetTextDirection(lineNumber: number): TextDirection;\n\tgetViewportViewLineRenderingData(visibleRange: Range, lineNumber: number): ViewLineRenderingData;\n\tgetViewLineRenderingData(lineNumber: number): ViewLineRenderingData;\n\tgetViewLineData(lineNumber: number): ViewLineData;\n\tgetMinimapLinesRenderingData(startLineNumber: number, endLineNumber: number, needed: boolean[]): MinimapLinesRenderingData;\n\tgetCompletelyVisibleViewRange(): Range;\n\tgetCompletelyVisibleViewRangeAtScrollTop(scrollTop: number): Range;\n\n\tgetHiddenAreas(): Range[];\n\n\tgetLineCount(): number;\n\tgetLineContent(lineNumber: number): string;\n\tgetLineLength(lineNumber: number): number;\n\tgetActiveIndentGuide(lineNumber: number, minLineNumber: number, maxLineNumber: number): IActiveIndentGuideInfo;\n\tgetLinesIndentGuides(startLineNumber: number, endLineNumber: number): number[];\n\tgetBracketGuidesInRangeByLine(startLineNumber: number, endLineNumber: number, activePosition: IPosition | null, options: BracketGuideOptions): IndentGuide[][];\n\tgetLineMinColumn(lineNumber: number): number;\n\tgetLineMaxColumn(lineNumber: number): number;\n\tgetLineFirstNonWhitespaceColumn(lineNumber: number): number;\n\tgetLineLastNonWhitespaceColumn(lineNumber: number): number;\n\tgetAllOverviewRulerDecorations(theme: EditorTheme): OverviewRulerDecorationsGroup[];\n\tgetValueInRange(range: Range, eol: EndOfLinePreference): string;\n\tgetValueLengthInRange(range: Range, eol: EndOfLinePreference): number;\n\n\tgetInjectedTextAt(viewPosition: Position): InjectedText | null;\n\n\tdeduceModelPositionRelativeToViewPosition(viewAnchorPosition: Position, deltaOffset: number, lineFeedCnt: number): Position;\n\tgetPlainTextToCopy(modelRanges: Range[], emptySelectionClipboard: boolean, forceCRLF: boolean): string | string[];\n\tgetRichTextToCopy(modelRanges: Range[], emptySelectionClipboard: boolean): { html: string; mode: string } | null;\n\n\tcreateLineBreaksComputer(): ILineBreaksComputer;\n\n\t//#region cursor\n\tgetPrimaryCursorState(): CursorState;\n\tgetLastAddedCursorIndex(): number;\n\tgetCursorStates(): CursorState[];\n\tsetCursorStates(source: string | null | undefined, reason: CursorChangeReason, states: PartialCursorState[] | null): boolean;\n\tgetCursorColumnSelectData(): IColumnSelectData;\n\tgetCursorAutoClosedCharacters(): Range[];\n\tsetCursorColumnSelectData(columnSelectData: IColumnSelectData): void;\n\tgetPrevEditOperationType(): EditOperationType;\n\tsetPrevEditOperationType(type: EditOperationType): void;\n\trevealAllCursors(source: string | null | undefined, revealHorizontal: boolean, minimalReveal?: boolean): void;\n\trevealPrimaryCursor(source: string | null | undefined, revealHorizontal: boolean, minimalReveal?: boolean): void;\n\trevealTopMostCursor(source: string | null | undefined): void;\n\trevealBottomMostCursor(source: string | null | undefined): void;\n\trevealRange(source: string | null | undefined, revealHorizontal: boolean, viewRange: Range, verticalType: VerticalRevealType, scrollType: ScrollType): void;\n\t//#endregion\n\n\t//#region viewLayout\n\tchangeWhitespace(callback: (accessor: IWhitespaceChangeAccessor) => void): void;\n}\n\nexport interface IViewLayout {\n\n\tgetScrollable(): Scrollable;\n\n\tgetScrollWidth(): number;\n\tgetScrollHeight(): number;\n\n\tgetCurrentScrollLeft(): number;\n\tgetCurrentScrollTop(): number;\n\tgetCurrentViewport(): Viewport;\n\n\tgetFutureViewport(): Viewport;\n\n\tsetScrollPosition(position: INewScrollPosition, type: ScrollType): void;\n\tdeltaScrollNow(deltaScrollLeft: number, deltaScrollTop: number): void;\n\n\tvalidateScrollPosition(scrollPosition: INewScrollPosition): IScrollPosition;\n\n\tsetMaxLineWidth(maxLineWidth: number): void;\n\tsetOverlayWidgetsMinWidth(overlayWidgetsMinWidth: number): void;\n\n\tgetLinesViewportData(): IPartialViewLinesViewportData;\n\tgetWhitespaces(): IEditorWhitespace[];\n\n\tisAfterLines(verticalOffset: number): boolean;\n\tisInTopPadding(verticalOffset: number): boolean;\n\tisInBottomPadding(verticalOffset: number): boolean;\n\tgetLineNumberAtVerticalOffset(verticalOffset: number): number;\n\tgetVerticalOffsetForLineNumber(lineNumber: number, includeViewZones?: boolean): number;\n\tgetVerticalOffsetAfterLineNumber(lineNumber: number, includeViewZones?: boolean): number;\n\tgetLineHeightForLineNumber(lineNumber: number): number;\n\tgetWhitespaceAtVerticalOffset(verticalOffset: number): IViewWhitespaceViewportData | null;\n\n\t/**\n\t * Get the layout information for whitespaces currently in the viewport\n\t */\n\tgetWhitespaceViewportData(): IViewWhitespaceViewportData[];\n}\n\nexport interface IEditorWhitespace {\n\treadonly id: string;\n\treadonly afterLineNumber: number;\n\treadonly height: number;\n}\n\n/**\n * An accessor that allows for whitespace to be added, removed or changed in bulk.\n */\nexport interface IWhitespaceChangeAccessor {\n\tinsertWhitespace(afterLineNumber: number, ordinal: number, heightInPx: number, minWidth: number): string;\n\tchangeOneWhitespace(id: string, newAfterLineNumber: number, newHeight: number): void;\n\tremoveWhitespace(id: string): void;\n}\n\nexport interface ILineHeightChangeAccessor {\n\tinsertOrChangeCustomLineHeight(decorationId: string, startLineNumber: number, endLineNumber: number, lineHeight: number): void;\n\tremoveCustomLineHeight(decorationId: string): void;\n}\n\nexport interface IPartialViewLinesViewportData {\n\t/**\n\t * Value to be substracted from `scrollTop` (in order to vertical offset numbers < 1MM)\n\t */\n\treadonly bigNumbersDelta: number;\n\t/**\n\t * The first (partially) visible line number.\n\t */\n\treadonly startLineNumber: number;\n\t/**\n\t * The last (partially) visible line number.\n\t */\n\treadonly endLineNumber: number;\n\t/**\n\t * relativeVerticalOffset[i] is the `top` position for line at `i` + `startLineNumber`.\n\t */\n\treadonly relativeVerticalOffset: number[];\n\t/**\n\t * The centered line in the viewport.\n\t */\n\treadonly centeredLineNumber: number;\n\t/**\n\t * The first completely visible line number.\n\t */\n\treadonly completelyVisibleStartLineNumber: number;\n\t/**\n\t * The last completely visible line number.\n\t */\n\treadonly completelyVisibleEndLineNumber: number;\n\n\t/**\n\t * The height of a line.\n\t */\n\treadonly lineHeight: number;\n}\n\nexport interface IViewWhitespaceViewportData {\n\treadonly id: string;\n\treadonly afterLineNumber: number;\n\treadonly verticalOffset: number;\n\treadonly height: number;\n}\n\nexport class Viewport {\n\treadonly _viewportBrand: void = undefined;\n\n\treadonly top: number;\n\treadonly left: number;\n\treadonly width: number;\n\treadonly height: number;\n\n\tconstructor(top: number, left: number, width: number, height: number) {\n\t\tthis.top = top | 0;\n\t\tthis.left = left | 0;\n\t\tthis.width = width | 0;\n\t\tthis.height = height | 0;\n\t}\n}\n\nexport class MinimapLinesRenderingData {\n\tpublic readonly tabSize: number;\n\tpublic readonly data: Array<ViewLineData | null>;\n\n\tconstructor(\n\t\ttabSize: number,\n\t\tdata: Array<ViewLineData | null>\n\t) {\n\t\tthis.tabSize = tabSize;\n\t\tthis.data = data;\n\t}\n}\n\nexport class ViewLineData {\n\t_viewLineDataBrand: void = undefined;\n\n\t/**\n\t * The content at this view line.\n\t */\n\tpublic readonly content: string;\n\t/**\n\t * Does this line continue with a wrapped line?\n\t */\n\tpublic readonly continuesWithWrappedLine: boolean;\n\t/**\n\t * The minimum allowed column at this view line.\n\t */\n\tpublic readonly minColumn: number;\n\t/**\n\t * The maximum allowed column at this view line.\n\t */\n\tpublic readonly maxColumn: number;\n\t/**\n\t * The visible column at the start of the line (after the fauxIndent).\n\t */\n\tpublic readonly startVisibleColumn: number;\n\t/**\n\t * The tokens at this view line.\n\t */\n\tpublic readonly tokens: IViewLineTokens;\n\n\t/**\n\t * Additional inline decorations for this line.\n\t*/\n\tpublic readonly inlineDecorations: readonly SingleLineInlineDecoration[] | null;\n\n\tconstructor(\n\t\tcontent: string,\n\t\tcontinuesWithWrappedLine: boolean,\n\t\tminColumn: number,\n\t\tmaxColumn: number,\n\t\tstartVisibleColumn: number,\n\t\ttokens: IViewLineTokens,\n\t\tinlineDecorations: readonly SingleLineInlineDecoration[] | null\n\t) {\n\t\tthis.content = content;\n\t\tthis.continuesWithWrappedLine = continuesWithWrappedLine;\n\t\tthis.minColumn = minColumn;\n\t\tthis.maxColumn = maxColumn;\n\t\tthis.startVisibleColumn = startVisibleColumn;\n\t\tthis.tokens = tokens;\n\t\tthis.inlineDecorations = inlineDecorations;\n\t}\n}\n\nexport class ViewLineRenderingData {\n\t/**\n\t * The minimum allowed column at this view line.\n\t */\n\tpublic readonly minColumn: number;\n\t/**\n\t * The maximum allowed column at this view line.\n\t */\n\tpublic readonly maxColumn: number;\n\t/**\n\t * The content at this view line.\n\t */\n\tpublic readonly content: string;\n\t/**\n\t * Does this line continue with a wrapped line?\n\t */\n\tpublic readonly continuesWithWrappedLine: boolean;\n\t/**\n\t * Describes if `content` contains RTL characters.\n\t */\n\tpublic readonly containsRTL: boolean;\n\t/**\n\t * Describes if `content` contains non basic ASCII chars.\n\t */\n\tpublic readonly isBasicASCII: boolean;\n\t/**\n\t * The tokens at this view line.\n\t */\n\tpublic readonly tokens: IViewLineTokens;\n\t/**\n\t * Inline decorations at this view line.\n\t */\n\tpublic readonly inlineDecorations: InlineDecoration[];\n\t/**\n\t * The tab size for this view model.\n\t */\n\tpublic readonly tabSize: number;\n\t/**\n\t * The visible column at the start of the line (after the fauxIndent)\n\t */\n\tpublic readonly startVisibleColumn: number;\n\t/**\n\t * The direction to use for rendering the line.\n\t */\n\tpublic readonly textDirection: TextDirection;\n\t/**\n\t * Whether the line has variable fonts\n\t */\n\tpublic readonly hasVariableFonts: boolean;\n\n\tconstructor(\n\t\tminColumn: number,\n\t\tmaxColumn: number,\n\t\tcontent: string,\n\t\tcontinuesWithWrappedLine: boolean,\n\t\tmightContainRTL: boolean,\n\t\tmightContainNonBasicASCII: boolean,\n\t\ttokens: IViewLineTokens,\n\t\tinlineDecorations: InlineDecoration[],\n\t\ttabSize: number,\n\t\tstartVisibleColumn: number,\n\t\ttextDirection: TextDirection,\n\t\thasVariableFonts: boolean\n\t) {\n\t\tthis.minColumn = minColumn;\n\t\tthis.maxColumn = maxColumn;\n\t\tthis.content = content;\n\t\tthis.continuesWithWrappedLine = continuesWithWrappedLine;\n\n\t\tthis.isBasicASCII = ViewLineRenderingData.isBasicASCII(content, mightContainNonBasicASCII);\n\t\tthis.containsRTL = ViewLineRenderingData.containsRTL(content, this.isBasicASCII, mightContainRTL);\n\n\t\tthis.tokens = tokens;\n\t\tthis.inlineDecorations = inlineDecorations;\n\t\tthis.tabSize = tabSize;\n\t\tthis.startVisibleColumn = startVisibleColumn;\n\t\tthis.textDirection = textDirection;\n\t\tthis.hasVariableFonts = hasVariableFonts;\n\t}\n\n\tpublic static isBasicASCII(lineContent: string, mightContainNonBasicASCII: boolean): boolean {\n\t\tif (mightContainNonBasicASCII) {\n\t\t\treturn strings.isBasicASCII(lineContent);\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic static containsRTL(lineContent: string, isBasicASCII: boolean, mightContainRTL: boolean): boolean {\n\t\tif (!isBasicASCII && mightContainRTL) {\n\t\t\treturn strings.containsRTL(lineContent);\n\t\t}\n\t\treturn false;\n\t}\n}\n\nexport class ViewModelDecoration {\n\t_viewModelDecorationBrand: void = undefined;\n\n\tpublic readonly range: Range;\n\tpublic readonly options: IModelDecorationOptions;\n\n\tconstructor(range: Range, options: IModelDecorationOptions) {\n\t\tthis.range = range;\n\t\tthis.options = options;\n\t}\n}\n\nexport class OverviewRulerDecorationsGroup {\n\n\tconstructor(\n\t\tpublic readonly color: string,\n\t\tpublic readonly zIndex: number,\n\t\t/**\n\t\t * Decorations are encoded in a number array using the following scheme:\n\t\t *  - 3*i = lane\n\t\t *  - 3*i+1 = startLineNumber\n\t\t *  - 3*i+2 = endLineNumber\n\t\t */\n\t\tpublic readonly data: number[]\n\t) { }\n\n\tpublic static compareByRenderingProps(a: OverviewRulerDecorationsGroup, b: OverviewRulerDecorationsGroup): number {\n\t\tif (a.zIndex === b.zIndex) {\n\t\t\tif (a.color < b.color) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif (a.color > b.color) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\treturn 0;\n\t\t}\n\t\treturn a.zIndex - b.zIndex;\n\t}\n\n\tpublic static equals(a: OverviewRulerDecorationsGroup, b: OverviewRulerDecorationsGroup): boolean {\n\t\treturn (\n\t\t\ta.color === b.color\n\t\t\t&& a.zIndex === b.zIndex\n\t\t\t&& arrays.equals(a.data, b.data)\n\t\t);\n\t}\n\n\tpublic static equalsArr(a: OverviewRulerDecorationsGroup[], b: OverviewRulerDecorationsGroup[]): boolean {\n\t\treturn arrays.equals(a, b, OverviewRulerDecorationsGroup.equals);\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as arrays from '../../base/common/arrays.js';\nimport { IScrollPosition, Scrollable } from '../../base/common/scrollable.js';\nimport * as strings from '../../base/common/strings.js';\nimport { ISimpleModel } from './viewModel/screenReaderSimpleModel.js';\nimport { ICoordinatesConverter } from './coordinatesConverter.js';\nimport { IPosition, Position } from './core/position.js';\nimport { Range } from './core/range.js';\nimport { CursorConfiguration, CursorState, EditOperationType, IColumnSelectData, ICursorSimpleModel, PartialCursorState } from './cursorCommon.js';\nimport { CursorChangeReason } from './cursorEvents.js';\nimport { INewScrollPosition, ScrollType } from './editorCommon.js';\nimport { EditorTheme } from './editorTheme.js';\nimport { EndOfLinePreference, IGlyphMarginLanesModel, IModelDecorationOptions, ITextModel, TextDirection } from './model.js';\nimport { ILineBreaksComputer, InjectedText } from './modelLineProjectionData.js';\nimport { BracketGuideOptions, IActiveIndentGuideInfo, IndentGuide } from './textModelGuides.js';\nimport { IViewLineTokens } from './tokens/lineTokens.js';\nimport { ViewEventHandler } from './viewEventHandler.js';\nimport { VerticalRevealType } from './viewEvents.js';\nimport { InlineDecoration, SingleLineInlineDecoration } from './viewModel/inlineDecorations.js';\n\nexport interface IViewModel extends ICursorSimpleModel, ISimpleModel {\n\n\treadonly model: ITextModel;\n\n\treadonly coordinatesConverter: ICoordinatesConverter;\n\n\treadonly viewLayout: IViewLayout;\n\n\treadonly cursorConfig: CursorConfiguration;\n\n\treadonly glyphLanes: IGlyphMarginLanesModel;\n\n\taddViewEventHandler(eventHandler: ViewEventHandler): void;\n\tremoveViewEventHandler(eventHandler: ViewEventHandler): void;\n\n\t/**\n\t * Gives a hint that a lot of requests are about to come in for these line numbers.\n\t */\n\tsetViewport(startLineNumber: number, endLineNumber: number, centeredLineNumber: number): void;\n\tvisibleLinesStabilized(): void;\n\tsetHasFocus(hasFocus: boolean): void;\n\tsetHasWidgetFocus(hasWidgetFocus: boolean): void;\n\tonCompositionStart(): void;\n\tonCompositionEnd(): void;\n\n\tgetFontSizeAtPosition(position: IPosition): string | null;\n\tgetMinimapDecorationsInRange(range: Range): ViewModelDecoration[];\n\tgetDecorationsInViewport(visibleRange: Range): ViewModelDecoration[];\n\tgetTextDirection(lineNumber: number): TextDirection;\n\tgetViewportViewLineRenderingData(visibleRange: Range, lineNumber: number): ViewLineRenderingData;\n\tgetViewLineRenderingData(lineNumber: number): ViewLineRenderingData;\n\tgetViewLineData(lineNumber: number): ViewLineData;\n\tgetMinimapLinesRenderingData(startLineNumber: number, endLineNumber: number, needed: boolean[]): MinimapLinesRenderingData;\n\tgetCompletelyVisibleViewRange(): Range;\n\tgetCompletelyVisibleViewRangeAtScrollTop(scrollTop: number): Range;\n\n\tgetHiddenAreas(): Range[];\n\n\tgetLineCount(): number;\n\tgetLineContent(lineNumber: number): string;\n\tgetLineLength(lineNumber: number): number;\n\tgetActiveIndentGuide(lineNumber: number, minLineNumber: number, maxLineNumber: number): IActiveIndentGuideInfo;\n\tgetLinesIndentGuides(startLineNumber: number, endLineNumber: number): number[];\n\tgetBracketGuidesInRangeByLine(startLineNumber: number, endLineNumber: number, activePosition: IPosition | null, options: BracketGuideOptions): IndentGuide[][];\n\tgetLineMinColumn(lineNumber: number): number;\n\tgetLineMaxColumn(lineNumber: number): number;\n\tgetLineFirstNonWhitespaceColumn(lineNumber: number): number;\n\tgetLineLastNonWhitespaceColumn(lineNumber: number): number;\n\tgetAllOverviewRulerDecorations(theme: EditorTheme): OverviewRulerDecorationsGroup[];\n\tgetValueInRange(range: Range, eol: EndOfLinePreference): string;\n\tgetValueLengthInRange(range: Range, eol: EndOfLinePreference): number;\n\n\tgetInjectedTextAt(viewPosition: Position): InjectedText | null;\n\n\tdeduceModelPositionRelativeToViewPosition(viewAnchorPosition: Position, deltaOffset: number, lineFeedCnt: number): Position;\n\tgetPlainTextToCopy(modelRanges: Range[], emptySelectionClipboard: boolean, forceCRLF: boolean): string | string[];\n\tgetRichTextToCopy(modelRanges: Range[], emptySelectionClipboard: boolean): { html: string; mode: string } | null;\n\n\tcreateLineBreaksComputer(): ILineBreaksComputer;\n\n\t//#region cursor\n\tgetPrimaryCursorState(): CursorState;\n\tgetLastAddedCursorIndex(): number;\n\tgetCursorStates(): CursorState[];\n\tsetCursorStates(source: string | null | undefined, reason: CursorChangeReason, states: PartialCursorState[] | null): boolean;\n\tgetCursorColumnSelectData(): IColumnSelectData;\n\tgetCursorAutoClosedCharacters(): Range[];\n\tsetCursorColumnSelectData(columnSelectData: IColumnSelectData): void;\n\tgetPrevEditOperationType(): EditOperationType;\n\tsetPrevEditOperationType(type: EditOperationType): void;\n\trevealAllCursors(source: string | null | undefined, revealHorizontal: boolean, minimalReveal?: boolean): void;\n\trevealPrimaryCursor(source: string | null | undefined, revealHorizontal: boolean, minimalReveal?: boolean): void;\n\trevealTopMostCursor(source: string | null | undefined): void;\n\trevealBottomMostCursor(source: string | null | undefined): void;\n\trevealRange(source: string | null | undefined, revealHorizontal: boolean, viewRange: Range, verticalType: VerticalRevealType, scrollType: ScrollType): void;\n\t//#endregion\n\n\t//#region viewLayout\n\tchangeWhitespace(callback: (accessor: IWhitespaceChangeAccessor) => void): void;\n}\n\nexport interface IViewLayout {\n\n\tgetScrollable(): Scrollable;\n\n\tgetScrollWidth(): number;\n\tgetScrollHeight(): number;\n\n\tgetCurrentScrollLeft(): number;\n\tgetCurrentScrollTop(): number;\n\tgetCurrentViewport(): Viewport;\n\n\tgetFutureViewport(): Viewport;\n\n\tsetScrollPosition(position: INewScrollPosition, type: ScrollType): void;\n\tdeltaScrollNow(deltaScrollLeft: number, deltaScrollTop: number): void;\n\n\tvalidateScrollPosition(scrollPosition: INewScrollPosition): IScrollPosition;\n\n\tsetMaxLineWidth(maxLineWidth: number): void;\n\tsetOverlayWidgetsMinWidth(overlayWidgetsMinWidth: number): void;\n\n\tgetLinesViewportData(): IPartialViewLinesViewportData;\n\tgetWhitespaces(): IEditorWhitespace[];\n\n\tisAfterLines(verticalOffset: number): boolean;\n\tisInTopPadding(verticalOffset: number): boolean;\n\tisInBottomPadding(verticalOffset: number): boolean;\n\tgetLineNumberAtVerticalOffset(verticalOffset: number): number;\n\tgetVerticalOffsetForLineNumber(lineNumber: number, includeViewZones?: boolean): number;\n\tgetVerticalOffsetAfterLineNumber(lineNumber: number, includeViewZones?: boolean): number;\n\tgetLineHeightForLineNumber(lineNumber: number): number;\n\tgetWhitespaceAtVerticalOffset(verticalOffset: number): IViewWhitespaceViewportData | null;\n\n\t/**\n\t * Get the layout information for whitespaces currently in the viewport\n\t */\n\tgetWhitespaceViewportData(): IViewWhitespaceViewportData[];\n}\n\nexport interface IEditorWhitespace {\n\treadonly id: string;\n\treadonly afterLineNumber: number;\n\treadonly height: number;\n}\n\n/**\n * An accessor that allows for whitespace to be added, removed or changed in bulk.\n */\nexport interface IWhitespaceChangeAccessor {\n\tinsertWhitespace(afterLineNumber: number, ordinal: number, heightInPx: number, minWidth: number): string;\n\tchangeOneWhitespace(id: string, newAfterLineNumber: number, newHeight: number): void;\n\tremoveWhitespace(id: string): void;\n}\n\nexport interface ILineHeightChangeAccessor {\n\tinsertOrChangeCustomLineHeight(decorationId: string, startLineNumber: number, endLineNumber: number, lineHeight: number): void;\n\tremoveCustomLineHeight(decorationId: string): void;\n}\n\nexport interface IPartialViewLinesViewportData {\n\t/**\n\t * Value to be substracted from `scrollTop` (in order to vertical offset numbers < 1MM)\n\t */\n\treadonly bigNumbersDelta: number;\n\t/**\n\t * The first (partially) visible line number.\n\t */\n\treadonly startLineNumber: number;\n\t/**\n\t * The last (partially) visible line number.\n\t */\n\treadonly endLineNumber: number;\n\t/**\n\t * relativeVerticalOffset[i] is the `top` position for line at `i` + `startLineNumber`.\n\t */\n\treadonly relativeVerticalOffset: number[];\n\t/**\n\t * The centered line in the viewport.\n\t */\n\treadonly centeredLineNumber: number;\n\t/**\n\t * The first completely visible line number.\n\t */\n\treadonly completelyVisibleStartLineNumber: number;\n\t/**\n\t * The last completely visible line number.\n\t */\n\treadonly completelyVisibleEndLineNumber: number;\n\n\t/**\n\t * The height of a line.\n\t */\n\treadonly lineHeight: number;\n}\n\nexport interface IViewWhitespaceViewportData {\n\treadonly id: string;\n\treadonly afterLineNumber: number;\n\treadonly verticalOffset: number;\n\treadonly height: number;\n}\n\nexport class Viewport {\n\treadonly _viewportBrand: void = undefined;\n\n\treadonly top: number;\n\treadonly left: number;\n\treadonly width: number;\n\treadonly height: number;\n\n\tconstructor(top: number, left: number, width: number, height: number) {\n\t\tthis.top = top | 0;\n\t\tthis.left = left | 0;\n\t\tthis.width = width | 0;\n\t\tthis.height = height | 0;\n\t}\n}\n\nexport class MinimapLinesRenderingData {\n\tpublic readonly tabSize: number;\n\tpublic readonly data: Array<ViewLineData | null>;\n\n\tconstructor(\n\t\ttabSize: number,\n\t\tdata: Array<ViewLineData | null>\n\t) {\n\t\tthis.tabSize = tabSize;\n\t\tthis.data = data;\n\t}\n}\n\nexport class ViewLineData {\n\t_viewLineDataBrand: void = undefined;\n\n\t/**\n\t * The content at this view line.\n\t */\n\tpublic readonly content: string;\n\t/**\n\t * Does this line continue with a wrapped line?\n\t */\n\tpublic readonly continuesWithWrappedLine: boolean;\n\t/**\n\t * The minimum allowed column at this view line.\n\t */\n\tpublic readonly minColumn: number;\n\t/**\n\t * The maximum allowed column at this view line.\n\t */\n\tpublic readonly maxColumn: number;\n\t/**\n\t * The visible column at the start of the line (after the fauxIndent).\n\t */\n\tpublic readonly startVisibleColumn: number;\n\t/**\n\t * The tokens at this view line.\n\t */\n\tpublic readonly tokens: IViewLineTokens;\n\n\t/**\n\t * Additional inline decorations for this line.\n\t*/\n\tpublic readonly inlineDecorations: readonly SingleLineInlineDecoration[] | null;\n\n\tconstructor(\n\t\tcontent: string,\n\t\tcontinuesWithWrappedLine: boolean,\n\t\tminColumn: number,\n\t\tmaxColumn: number,\n\t\tstartVisibleColumn: number,\n\t\ttokens: IViewLineTokens,\n\t\tinlineDecorations: readonly SingleLineInlineDecoration[] | null\n\t) {\n\t\tthis.content = content;\n\t\tthis.continuesWithWrappedLine = continuesWithWrappedLine;\n\t\tthis.minColumn = minColumn;\n\t\tthis.maxColumn = maxColumn;\n\t\tthis.startVisibleColumn = startVisibleColumn;\n\t\tthis.tokens = tokens;\n\t\tthis.inlineDecorations = inlineDecorations;\n\t}\n}\n\nexport class ViewLineRenderingData {\n\t/**\n\t * The minimum allowed column at this view line.\n\t */\n\tpublic readonly minColumn: number;\n\t/**\n\t * The maximum allowed column at this view line.\n\t */\n\tpublic readonly maxColumn: number;\n\t/**\n\t * The content at this view line.\n\t */\n\tpublic readonly content: string;\n\t/**\n\t * Does this line continue with a wrapped line?\n\t */\n\tpublic readonly continuesWithWrappedLine: boolean;\n\t/**\n\t * Describes if `content` contains RTL characters.\n\t */\n\tpublic readonly containsRTL: boolean;\n\t/**\n\t * Describes if `content` contains non basic ASCII chars.\n\t */\n\tpublic readonly isBasicASCII: boolean;\n\t/**\n\t * The tokens at this view line.\n\t */\n\tpublic readonly tokens: IViewLineTokens;\n\t/**\n\t * Inline decorations at this view line.\n\t */\n\tpublic readonly inlineDecorations: InlineDecoration[];\n\t/**\n\t * The tab size for this view model.\n\t */\n\tpublic readonly tabSize: number;\n\t/**\n\t * The visible column at the start of the line (after the fauxIndent)\n\t */\n\tpublic readonly startVisibleColumn: number;\n\t/**\n\t * The direction to use for rendering the line.\n\t */\n\tpublic readonly textDirection: TextDirection;\n\t/**\n\t * Whether the line has variable fonts\n\t */\n\tpublic readonly hasVariableFonts: boolean;\n\n\tconstructor(\n\t\tminColumn: number,\n\t\tmaxColumn: number,\n\t\tcontent: string,\n\t\tcontinuesWithWrappedLine: boolean,\n\t\tmightContainRTL: boolean,\n\t\tmightContainNonBasicASCII: boolean,\n\t\ttokens: IViewLineTokens,\n\t\tinlineDecorations: InlineDecoration[],\n\t\ttabSize: number,\n\t\tstartVisibleColumn: number,\n\t\ttextDirection: TextDirection,\n\t\thasVariableFonts: boolean\n\t) {\n\t\tthis.minColumn = minColumn;\n\t\tthis.maxColumn = maxColumn;\n\t\tthis.content = content;\n\t\tthis.continuesWithWrappedLine = continuesWithWrappedLine;\n\n\t\tthis.isBasicASCII = ViewLineRenderingData.isBasicASCII(content, mightContainNonBasicASCII);\n\t\tthis.containsRTL = ViewLineRenderingData.containsRTL(content, this.isBasicASCII, mightContainRTL);\n\n\t\tthis.tokens = tokens;\n\t\tthis.inlineDecorations = inlineDecorations;\n\t\tthis.tabSize = tabSize;\n\t\tthis.startVisibleColumn = startVisibleColumn;\n\t\tthis.textDirection = textDirection;\n\t\tthis.hasVariableFonts = hasVariableFonts;\n\t}\n\n\tpublic static isBasicASCII(lineContent: string, mightContainNonBasicASCII: boolean): boolean {\n\t\tif (mightContainNonBasicASCII) {\n\t\t\treturn strings.isBasicASCII(lineContent);\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic static containsRTL(lineContent: string, isBasicASCII: boolean, mightContainRTL: boolean): boolean {\n\t\tif (!isBasicASCII && mightContainRTL) {\n\t\t\treturn strings.containsRTL(lineContent);\n\t\t}\n\t\treturn false;\n\t}\n}\n\nexport class ViewModelDecoration {\n\t_viewModelDecorationBrand: void = undefined;\n\n\tpublic readonly range: Range;\n\tpublic readonly options: IModelDecorationOptions;\n\n\tconstructor(range: Range, options: IModelDecorationOptions) {\n\t\tthis.range = range;\n\t\tthis.options = options;\n\t}\n}\n\nexport class OverviewRulerDecorationsGroup {\n\n\tconstructor(\n\t\tpublic readonly color: string,\n\t\tpublic readonly zIndex: number,\n\t\t/**\n\t\t * Decorations are encoded in a number array using the following scheme:\n\t\t *  - 3*i = lane\n\t\t *  - 3*i+1 = startLineNumber\n\t\t *  - 3*i+2 = endLineNumber\n\t\t */\n\t\tpublic readonly data: number[]\n\t) { }\n\n\tpublic static compareByRenderingProps(a: OverviewRulerDecorationsGroup, b: OverviewRulerDecorationsGroup): number {\n\t\tif (a.zIndex === b.zIndex) {\n\t\t\tif (a.color < b.color) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif (a.color > b.color) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\treturn 0;\n\t\t}\n\t\treturn a.zIndex - b.zIndex;\n\t}\n\n\tpublic static equals(a: OverviewRulerDecorationsGroup, b: OverviewRulerDecorationsGroup): boolean {\n\t\treturn (\n\t\t\ta.color === b.color\n\t\t\t&& a.zIndex === b.zIndex\n\t\t\t&& arrays.equals(a.data, b.data)\n\t\t);\n\t}\n\n\tpublic static equalsArr(a: OverviewRulerDecorationsGroup[], b: OverviewRulerDecorationsGroup[]): boolean {\n\t\treturn arrays.equals(a, b, OverviewRulerDecorationsGroup.equals);\n\t}\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3832, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/monaco-editor/esm/vs/editor/common/editorTheme.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/file%3A/mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/editorTheme.ts","file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/vs/editor/common/editorTheme.ts"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IColorTheme } from '../../platform/theme/common/themeService.js';\nimport { ColorIdentifier } from '../../platform/theme/common/colorRegistry.js';\nimport { Color } from '../../base/common/color.js';\nimport { ColorScheme } from '../../platform/theme/common/theme.js';\n\nexport class EditorTheme {\n\n\tprivate _theme: IColorTheme;\n\n\tpublic get type(): ColorScheme {\n\t\treturn this._theme.type;\n\t}\n\n\tpublic get value(): IColorTheme {\n\t\treturn this._theme;\n\t}\n\n\tconstructor(theme: IColorTheme) {\n\t\tthis._theme = theme;\n\t}\n\n\tpublic update(theme: IColorTheme): void {\n\t\tthis._theme = theme;\n\t}\n\n\tpublic getColor(color: ColorIdentifier): Color | undefined {\n\t\treturn this._theme.getColor(color);\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IColorTheme } from '../../platform/theme/common/themeService.js';\nimport { ColorIdentifier } from '../../platform/theme/common/colorRegistry.js';\nimport { Color } from '../../base/common/color.js';\nimport { ColorScheme } from '../../platform/theme/common/theme.js';\n\nexport class EditorTheme {\n\n\tprivate _theme: IColorTheme;\n\n\tpublic get type(): ColorScheme {\n\t\treturn this._theme.type;\n\t}\n\n\tpublic get value(): IColorTheme {\n\t\treturn this._theme;\n\t}\n\n\tconstructor(theme: IColorTheme) {\n\t\tthis._theme = theme;\n\t}\n\n\tpublic update(theme: IColorTheme): void {\n\t\tthis._theme = theme;\n\t}\n\n\tpublic getColor(color: ColorIdentifier): Color | undefined {\n\t\treturn this._theme.getColor(color);\n\t}\n}\n"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;AAO1F,MAAO,WAAW;IAIvB,IAAW,IAAI,GAAA;QACd,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;IACzB,CAAC;IAED,IAAW,KAAK,GAAA;QACf,OAAO,IAAI,CAAC,MAAM,CAAC;IACpB,CAAC;IAED,YAAY,KAAkB,CAAA;QAC7B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACrB,CAAC;IAEM,MAAM,CAAC,KAAkB,EAAA;QAC/B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACrB,CAAC;IAEM,QAAQ,CAAC,KAAsB,EAAA;QACrC,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IACpC,CAAC;CACD","debugId":null}},
    {"offset": {"line": 3860, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/monaco-editor/esm/vs/editor/common/modelLineProjectionData.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/file%3A/mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/modelLineProjectionData.ts","file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/vs/editor/common/modelLineProjectionData.ts"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { assertNever } from '../../base/common/assert.js';\nimport { WrappingIndent } from './config/editorOptions.js';\nimport { FontInfo } from './config/fontInfo.js';\nimport { Position } from './core/position.js';\nimport { InjectedTextCursorStops, InjectedTextOptions, PositionAffinity } from './model.js';\nimport { LineInjectedText } from './textModelEvents.js';\n\n/**\n * *input*:\n * ```\n * xxxxxxxxxxxxxxxxxxxxxxxxxxx\n * ```\n *\n * -> Applying injections `[i...i]`, *inputWithInjections*:\n * ```\n * xxxxxx[iiiiiiiiii]xxxxxxxxxxxxxxxxx[ii]xxxx\n * ```\n *\n * -> breaking at offsets `|` in `xxxxxx[iiiiiii|iii]xxxxxxxxxxx|xxxxxx[ii]xxxx|`:\n * ```\n * xxxxxx[iiiiiii\n * iii]xxxxxxxxxxx\n * xxxxxx[ii]xxxx\n * ```\n *\n * -> applying wrappedTextIndentLength, *output*:\n * ```\n * xxxxxx[iiiiiii\n *    iii]xxxxxxxxxxx\n *    xxxxxx[ii]xxxx\n * ```\n */\nexport class ModelLineProjectionData {\n\tconstructor(\n\t\tpublic injectionOffsets: number[] | null,\n\t\t/**\n\t\t * `injectionOptions.length` must equal `injectionOffsets.length`\n\t\t */\n\t\tpublic injectionOptions: InjectedTextOptions[] | null,\n\t\t/**\n\t\t * Refers to offsets after applying injections to the source.\n\t\t * The last break offset indicates the length of the source after applying injections.\n\t\t */\n\t\tpublic breakOffsets: number[],\n\t\t/**\n\t\t * Refers to offsets after applying injections\n\t\t */\n\t\tpublic breakOffsetsVisibleColumn: number[],\n\t\tpublic wrappedTextIndentLength: number\n\t) {\n\t}\n\n\tpublic getOutputLineCount(): number {\n\t\treturn this.breakOffsets.length;\n\t}\n\n\tpublic getMinOutputOffset(outputLineIndex: number): number {\n\t\tif (outputLineIndex > 0) {\n\t\t\treturn this.wrappedTextIndentLength;\n\t\t}\n\t\treturn 0;\n\t}\n\n\tpublic getLineLength(outputLineIndex: number): number {\n\t\t// These offsets refer to model text with injected text.\n\t\tconst startOffset = outputLineIndex > 0 ? this.breakOffsets[outputLineIndex - 1] : 0;\n\t\tconst endOffset = this.breakOffsets[outputLineIndex];\n\n\t\tlet lineLength = endOffset - startOffset;\n\t\tif (outputLineIndex > 0) {\n\t\t\tlineLength += this.wrappedTextIndentLength;\n\t\t}\n\t\treturn lineLength;\n\t}\n\n\tpublic getMaxOutputOffset(outputLineIndex: number): number {\n\t\treturn this.getLineLength(outputLineIndex);\n\t}\n\n\tpublic translateToInputOffset(outputLineIndex: number, outputOffset: number): number {\n\t\tif (outputLineIndex > 0) {\n\t\t\toutputOffset = Math.max(0, outputOffset - this.wrappedTextIndentLength);\n\t\t}\n\n\t\tconst offsetInInputWithInjection = outputLineIndex === 0 ? outputOffset : this.breakOffsets[outputLineIndex - 1] + outputOffset;\n\t\tlet offsetInInput = offsetInInputWithInjection;\n\n\t\tif (this.injectionOffsets !== null) {\n\t\t\tfor (let i = 0; i < this.injectionOffsets.length; i++) {\n\t\t\t\tif (offsetInInput > this.injectionOffsets[i]) {\n\t\t\t\t\tif (offsetInInput < this.injectionOffsets[i] + this.injectionOptions![i].content.length) {\n\t\t\t\t\t\t// `inputOffset` is within injected text\n\t\t\t\t\t\toffsetInInput = this.injectionOffsets[i];\n\t\t\t\t\t} else {\n\t\t\t\t\t\toffsetInInput -= this.injectionOptions![i].content.length;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn offsetInInput;\n\t}\n\n\tpublic translateToOutputPosition(inputOffset: number, affinity: PositionAffinity = PositionAffinity.None): OutputPosition {\n\t\tlet inputOffsetInInputWithInjection = inputOffset;\n\t\tif (this.injectionOffsets !== null) {\n\t\t\tfor (let i = 0; i < this.injectionOffsets.length; i++) {\n\t\t\t\tif (inputOffset < this.injectionOffsets[i]) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (affinity !== PositionAffinity.Right && inputOffset === this.injectionOffsets[i]) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tinputOffsetInInputWithInjection += this.injectionOptions![i].content.length;\n\t\t\t}\n\t\t}\n\n\t\treturn this.offsetInInputWithInjectionsToOutputPosition(inputOffsetInInputWithInjection, affinity);\n\t}\n\n\tprivate offsetInInputWithInjectionsToOutputPosition(offsetInInputWithInjections: number, affinity: PositionAffinity = PositionAffinity.None): OutputPosition {\n\t\tlet low = 0;\n\t\tlet high = this.breakOffsets.length - 1;\n\t\tlet mid = 0;\n\t\tlet midStart = 0;\n\n\t\twhile (low <= high) {\n\t\t\tmid = low + ((high - low) / 2) | 0;\n\n\t\t\tconst midStop = this.breakOffsets[mid];\n\t\t\tmidStart = mid > 0 ? this.breakOffsets[mid - 1] : 0;\n\n\t\t\tif (affinity === PositionAffinity.Left) {\n\t\t\t\tif (offsetInInputWithInjections <= midStart) {\n\t\t\t\t\thigh = mid - 1;\n\t\t\t\t} else if (offsetInInputWithInjections > midStop) {\n\t\t\t\t\tlow = mid + 1;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (offsetInInputWithInjections < midStart) {\n\t\t\t\t\thigh = mid - 1;\n\t\t\t\t} else if (offsetInInputWithInjections >= midStop) {\n\t\t\t\t\tlow = mid + 1;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet outputOffset = offsetInInputWithInjections - midStart;\n\t\tif (mid > 0) {\n\t\t\toutputOffset += this.wrappedTextIndentLength;\n\t\t}\n\n\t\treturn new OutputPosition(mid, outputOffset);\n\t}\n\n\tpublic normalizeOutputPosition(outputLineIndex: number, outputOffset: number, affinity: PositionAffinity): OutputPosition {\n\t\tif (this.injectionOffsets !== null) {\n\t\t\tconst offsetInInputWithInjections = this.outputPositionToOffsetInInputWithInjections(outputLineIndex, outputOffset);\n\t\t\tconst normalizedOffsetInUnwrappedLine = this.normalizeOffsetInInputWithInjectionsAroundInjections(offsetInInputWithInjections, affinity);\n\t\t\tif (normalizedOffsetInUnwrappedLine !== offsetInInputWithInjections) {\n\t\t\t\t// injected text caused a change\n\t\t\t\treturn this.offsetInInputWithInjectionsToOutputPosition(normalizedOffsetInUnwrappedLine, affinity);\n\t\t\t}\n\t\t}\n\n\t\tif (affinity === PositionAffinity.Left) {\n\t\t\tif (outputLineIndex > 0 && outputOffset === this.getMinOutputOffset(outputLineIndex)) {\n\t\t\t\treturn new OutputPosition(outputLineIndex - 1, this.getMaxOutputOffset(outputLineIndex - 1));\n\t\t\t}\n\t\t}\n\t\telse if (affinity === PositionAffinity.Right) {\n\t\t\tconst maxOutputLineIndex = this.getOutputLineCount() - 1;\n\t\t\tif (outputLineIndex < maxOutputLineIndex && outputOffset === this.getMaxOutputOffset(outputLineIndex)) {\n\t\t\t\treturn new OutputPosition(outputLineIndex + 1, this.getMinOutputOffset(outputLineIndex + 1));\n\t\t\t}\n\t\t}\n\n\t\treturn new OutputPosition(outputLineIndex, outputOffset);\n\t}\n\n\tprivate outputPositionToOffsetInInputWithInjections(outputLineIndex: number, outputOffset: number): number {\n\t\tif (outputLineIndex > 0) {\n\t\t\toutputOffset = Math.max(0, outputOffset - this.wrappedTextIndentLength);\n\t\t}\n\t\tconst result = (outputLineIndex > 0 ? this.breakOffsets[outputLineIndex - 1] : 0) + outputOffset;\n\t\treturn result;\n\t}\n\n\tprivate normalizeOffsetInInputWithInjectionsAroundInjections(offsetInInputWithInjections: number, affinity: PositionAffinity): number {\n\t\tconst injectedText = this.getInjectedTextAtOffset(offsetInInputWithInjections);\n\t\tif (!injectedText) {\n\t\t\treturn offsetInInputWithInjections;\n\t\t}\n\n\t\tif (affinity === PositionAffinity.None) {\n\t\t\tif (offsetInInputWithInjections === injectedText.offsetInInputWithInjections + injectedText.length\n\t\t\t\t&& hasRightCursorStop(this.injectionOptions![injectedText.injectedTextIndex].cursorStops)) {\n\t\t\t\treturn injectedText.offsetInInputWithInjections + injectedText.length;\n\t\t\t} else {\n\t\t\t\tlet result = injectedText.offsetInInputWithInjections;\n\t\t\t\tif (hasLeftCursorStop(this.injectionOptions![injectedText.injectedTextIndex].cursorStops)) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tlet index = injectedText.injectedTextIndex - 1;\n\t\t\t\twhile (index >= 0 && this.injectionOffsets![index] === this.injectionOffsets![injectedText.injectedTextIndex]) {\n\t\t\t\t\tif (hasRightCursorStop(this.injectionOptions![index].cursorStops)) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tresult -= this.injectionOptions![index].content.length;\n\t\t\t\t\tif (hasLeftCursorStop(this.injectionOptions![index].cursorStops)) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\n\t\t\t\treturn result;\n\t\t\t}\n\t\t} else if (affinity === PositionAffinity.Right || affinity === PositionAffinity.RightOfInjectedText) {\n\t\t\tlet result = injectedText.offsetInInputWithInjections + injectedText.length;\n\t\t\tlet index = injectedText.injectedTextIndex;\n\t\t\t// traverse all injected text that touch each other\n\t\t\twhile (index + 1 < this.injectionOffsets!.length && this.injectionOffsets![index + 1] === this.injectionOffsets![index]) {\n\t\t\t\tresult += this.injectionOptions![index + 1].content.length;\n\t\t\t\tindex++;\n\t\t\t}\n\t\t\treturn result;\n\t\t} else if (affinity === PositionAffinity.Left || affinity === PositionAffinity.LeftOfInjectedText) {\n\t\t\t// affinity is left\n\t\t\tlet result = injectedText.offsetInInputWithInjections;\n\t\t\tlet index = injectedText.injectedTextIndex;\n\t\t\t// traverse all injected text that touch each other\n\t\t\twhile (index - 1 >= 0 && this.injectionOffsets![index - 1] === this.injectionOffsets![index]) {\n\t\t\t\tresult -= this.injectionOptions![index - 1].content.length;\n\t\t\t\tindex--;\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\n\t\tassertNever(affinity);\n\t}\n\n\tpublic getInjectedText(outputLineIndex: number, outputOffset: number): InjectedText | null {\n\t\tconst offset = this.outputPositionToOffsetInInputWithInjections(outputLineIndex, outputOffset);\n\t\tconst injectedText = this.getInjectedTextAtOffset(offset);\n\t\tif (!injectedText) {\n\t\t\treturn null;\n\t\t}\n\t\treturn {\n\t\t\toptions: this.injectionOptions![injectedText.injectedTextIndex]\n\t\t};\n\t}\n\n\tprivate getInjectedTextAtOffset(offsetInInputWithInjections: number): { injectedTextIndex: number; offsetInInputWithInjections: number; length: number } | undefined {\n\t\tconst injectionOffsets = this.injectionOffsets;\n\t\tconst injectionOptions = this.injectionOptions;\n\n\t\tif (injectionOffsets !== null) {\n\t\t\tlet totalInjectedTextLengthBefore = 0;\n\t\t\tfor (let i = 0; i < injectionOffsets.length; i++) {\n\t\t\t\tconst length = injectionOptions![i].content.length;\n\t\t\t\tconst injectedTextStartOffsetInInputWithInjections = injectionOffsets[i] + totalInjectedTextLengthBefore;\n\t\t\t\tconst injectedTextEndOffsetInInputWithInjections = injectionOffsets[i] + totalInjectedTextLengthBefore + length;\n\n\t\t\t\tif (injectedTextStartOffsetInInputWithInjections > offsetInInputWithInjections) {\n\t\t\t\t\t// Injected text starts later.\n\t\t\t\t\tbreak; // All later injected texts have an even larger offset.\n\t\t\t\t}\n\n\t\t\t\tif (offsetInInputWithInjections <= injectedTextEndOffsetInInputWithInjections) {\n\t\t\t\t\t// Injected text ends after or with the given position (but also starts with or before it).\n\t\t\t\t\treturn {\n\t\t\t\t\t\tinjectedTextIndex: i,\n\t\t\t\t\t\toffsetInInputWithInjections: injectedTextStartOffsetInInputWithInjections,\n\t\t\t\t\t\tlength\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\ttotalInjectedTextLengthBefore += length;\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n}\n\nfunction hasRightCursorStop(cursorStop: InjectedTextCursorStops | null | undefined): boolean {\n\tif (cursorStop === null || cursorStop === undefined) { return true; }\n\treturn cursorStop === InjectedTextCursorStops.Right || cursorStop === InjectedTextCursorStops.Both;\n}\nfunction hasLeftCursorStop(cursorStop: InjectedTextCursorStops | null | undefined): boolean {\n\tif (cursorStop === null || cursorStop === undefined) { return true; }\n\treturn cursorStop === InjectedTextCursorStops.Left || cursorStop === InjectedTextCursorStops.Both;\n}\n\nexport class InjectedText {\n\tconstructor(public readonly options: InjectedTextOptions) { }\n}\n\nexport class OutputPosition {\n\toutputLineIndex: number;\n\toutputOffset: number;\n\n\tconstructor(outputLineIndex: number, outputOffset: number) {\n\t\tthis.outputLineIndex = outputLineIndex;\n\t\tthis.outputOffset = outputOffset;\n\t}\n\n\ttoString(): string {\n\t\treturn `${this.outputLineIndex}:${this.outputOffset}`;\n\t}\n\n\ttoPosition(baseLineNumber: number): Position {\n\t\treturn new Position(baseLineNumber + this.outputLineIndex, this.outputOffset + 1);\n\t}\n}\n\nexport interface ILineBreaksComputerFactory {\n\tcreateLineBreaksComputer(fontInfo: FontInfo, tabSize: number, wrappingColumn: number, wrappingIndent: WrappingIndent, wordBreak: 'normal' | 'keepAll', wrapOnEscapedLineFeeds: boolean): ILineBreaksComputer;\n}\n\nexport interface ILineBreaksComputer {\n\t/**\n\t * Pass in `previousLineBreakData` if the only difference is in breaking columns!!!\n\t */\n\taddRequest(lineText: string, injectedText: LineInjectedText[] | null, previousLineBreakData: ModelLineProjectionData | null): void;\n\tfinalize(): (ModelLineProjectionData | null)[];\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { assertNever } from '../../base/common/assert.js';\nimport { WrappingIndent } from './config/editorOptions.js';\nimport { FontInfo } from './config/fontInfo.js';\nimport { Position } from './core/position.js';\nimport { InjectedTextCursorStops, InjectedTextOptions, PositionAffinity } from './model.js';\nimport { LineInjectedText } from './textModelEvents.js';\n\n/**\n * *input*:\n * ```\n * xxxxxxxxxxxxxxxxxxxxxxxxxxx\n * ```\n *\n * -> Applying injections `[i...i]`, *inputWithInjections*:\n * ```\n * xxxxxx[iiiiiiiiii]xxxxxxxxxxxxxxxxx[ii]xxxx\n * ```\n *\n * -> breaking at offsets `|` in `xxxxxx[iiiiiii|iii]xxxxxxxxxxx|xxxxxx[ii]xxxx|`:\n * ```\n * xxxxxx[iiiiiii\n * iii]xxxxxxxxxxx\n * xxxxxx[ii]xxxx\n * ```\n *\n * -> applying wrappedTextIndentLength, *output*:\n * ```\n * xxxxxx[iiiiiii\n *    iii]xxxxxxxxxxx\n *    xxxxxx[ii]xxxx\n * ```\n */\nexport class ModelLineProjectionData {\n\tconstructor(\n\t\tpublic injectionOffsets: number[] | null,\n\t\t/**\n\t\t * `injectionOptions.length` must equal `injectionOffsets.length`\n\t\t */\n\t\tpublic injectionOptions: InjectedTextOptions[] | null,\n\t\t/**\n\t\t * Refers to offsets after applying injections to the source.\n\t\t * The last break offset indicates the length of the source after applying injections.\n\t\t */\n\t\tpublic breakOffsets: number[],\n\t\t/**\n\t\t * Refers to offsets after applying injections\n\t\t */\n\t\tpublic breakOffsetsVisibleColumn: number[],\n\t\tpublic wrappedTextIndentLength: number\n\t) {\n\t}\n\n\tpublic getOutputLineCount(): number {\n\t\treturn this.breakOffsets.length;\n\t}\n\n\tpublic getMinOutputOffset(outputLineIndex: number): number {\n\t\tif (outputLineIndex > 0) {\n\t\t\treturn this.wrappedTextIndentLength;\n\t\t}\n\t\treturn 0;\n\t}\n\n\tpublic getLineLength(outputLineIndex: number): number {\n\t\t// These offsets refer to model text with injected text.\n\t\tconst startOffset = outputLineIndex > 0 ? this.breakOffsets[outputLineIndex - 1] : 0;\n\t\tconst endOffset = this.breakOffsets[outputLineIndex];\n\n\t\tlet lineLength = endOffset - startOffset;\n\t\tif (outputLineIndex > 0) {\n\t\t\tlineLength += this.wrappedTextIndentLength;\n\t\t}\n\t\treturn lineLength;\n\t}\n\n\tpublic getMaxOutputOffset(outputLineIndex: number): number {\n\t\treturn this.getLineLength(outputLineIndex);\n\t}\n\n\tpublic translateToInputOffset(outputLineIndex: number, outputOffset: number): number {\n\t\tif (outputLineIndex > 0) {\n\t\t\toutputOffset = Math.max(0, outputOffset - this.wrappedTextIndentLength);\n\t\t}\n\n\t\tconst offsetInInputWithInjection = outputLineIndex === 0 ? outputOffset : this.breakOffsets[outputLineIndex - 1] + outputOffset;\n\t\tlet offsetInInput = offsetInInputWithInjection;\n\n\t\tif (this.injectionOffsets !== null) {\n\t\t\tfor (let i = 0; i < this.injectionOffsets.length; i++) {\n\t\t\t\tif (offsetInInput > this.injectionOffsets[i]) {\n\t\t\t\t\tif (offsetInInput < this.injectionOffsets[i] + this.injectionOptions![i].content.length) {\n\t\t\t\t\t\t// `inputOffset` is within injected text\n\t\t\t\t\t\toffsetInInput = this.injectionOffsets[i];\n\t\t\t\t\t} else {\n\t\t\t\t\t\toffsetInInput -= this.injectionOptions![i].content.length;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn offsetInInput;\n\t}\n\n\tpublic translateToOutputPosition(inputOffset: number, affinity: PositionAffinity = PositionAffinity.None): OutputPosition {\n\t\tlet inputOffsetInInputWithInjection = inputOffset;\n\t\tif (this.injectionOffsets !== null) {\n\t\t\tfor (let i = 0; i < this.injectionOffsets.length; i++) {\n\t\t\t\tif (inputOffset < this.injectionOffsets[i]) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (affinity !== PositionAffinity.Right && inputOffset === this.injectionOffsets[i]) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tinputOffsetInInputWithInjection += this.injectionOptions![i].content.length;\n\t\t\t}\n\t\t}\n\n\t\treturn this.offsetInInputWithInjectionsToOutputPosition(inputOffsetInInputWithInjection, affinity);\n\t}\n\n\tprivate offsetInInputWithInjectionsToOutputPosition(offsetInInputWithInjections: number, affinity: PositionAffinity = PositionAffinity.None): OutputPosition {\n\t\tlet low = 0;\n\t\tlet high = this.breakOffsets.length - 1;\n\t\tlet mid = 0;\n\t\tlet midStart = 0;\n\n\t\twhile (low <= high) {\n\t\t\tmid = low + ((high - low) / 2) | 0;\n\n\t\t\tconst midStop = this.breakOffsets[mid];\n\t\t\tmidStart = mid > 0 ? this.breakOffsets[mid - 1] : 0;\n\n\t\t\tif (affinity === PositionAffinity.Left) {\n\t\t\t\tif (offsetInInputWithInjections <= midStart) {\n\t\t\t\t\thigh = mid - 1;\n\t\t\t\t} else if (offsetInInputWithInjections > midStop) {\n\t\t\t\t\tlow = mid + 1;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (offsetInInputWithInjections < midStart) {\n\t\t\t\t\thigh = mid - 1;\n\t\t\t\t} else if (offsetInInputWithInjections >= midStop) {\n\t\t\t\t\tlow = mid + 1;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet outputOffset = offsetInInputWithInjections - midStart;\n\t\tif (mid > 0) {\n\t\t\toutputOffset += this.wrappedTextIndentLength;\n\t\t}\n\n\t\treturn new OutputPosition(mid, outputOffset);\n\t}\n\n\tpublic normalizeOutputPosition(outputLineIndex: number, outputOffset: number, affinity: PositionAffinity): OutputPosition {\n\t\tif (this.injectionOffsets !== null) {\n\t\t\tconst offsetInInputWithInjections = this.outputPositionToOffsetInInputWithInjections(outputLineIndex, outputOffset);\n\t\t\tconst normalizedOffsetInUnwrappedLine = this.normalizeOffsetInInputWithInjectionsAroundInjections(offsetInInputWithInjections, affinity);\n\t\t\tif (normalizedOffsetInUnwrappedLine !== offsetInInputWithInjections) {\n\t\t\t\t// injected text caused a change\n\t\t\t\treturn this.offsetInInputWithInjectionsToOutputPosition(normalizedOffsetInUnwrappedLine, affinity);\n\t\t\t}\n\t\t}\n\n\t\tif (affinity === PositionAffinity.Left) {\n\t\t\tif (outputLineIndex > 0 && outputOffset === this.getMinOutputOffset(outputLineIndex)) {\n\t\t\t\treturn new OutputPosition(outputLineIndex - 1, this.getMaxOutputOffset(outputLineIndex - 1));\n\t\t\t}\n\t\t}\n\t\telse if (affinity === PositionAffinity.Right) {\n\t\t\tconst maxOutputLineIndex = this.getOutputLineCount() - 1;\n\t\t\tif (outputLineIndex < maxOutputLineIndex && outputOffset === this.getMaxOutputOffset(outputLineIndex)) {\n\t\t\t\treturn new OutputPosition(outputLineIndex + 1, this.getMinOutputOffset(outputLineIndex + 1));\n\t\t\t}\n\t\t}\n\n\t\treturn new OutputPosition(outputLineIndex, outputOffset);\n\t}\n\n\tprivate outputPositionToOffsetInInputWithInjections(outputLineIndex: number, outputOffset: number): number {\n\t\tif (outputLineIndex > 0) {\n\t\t\toutputOffset = Math.max(0, outputOffset - this.wrappedTextIndentLength);\n\t\t}\n\t\tconst result = (outputLineIndex > 0 ? this.breakOffsets[outputLineIndex - 1] : 0) + outputOffset;\n\t\treturn result;\n\t}\n\n\tprivate normalizeOffsetInInputWithInjectionsAroundInjections(offsetInInputWithInjections: number, affinity: PositionAffinity): number {\n\t\tconst injectedText = this.getInjectedTextAtOffset(offsetInInputWithInjections);\n\t\tif (!injectedText) {\n\t\t\treturn offsetInInputWithInjections;\n\t\t}\n\n\t\tif (affinity === PositionAffinity.None) {\n\t\t\tif (offsetInInputWithInjections === injectedText.offsetInInputWithInjections + injectedText.length\n\t\t\t\t&& hasRightCursorStop(this.injectionOptions![injectedText.injectedTextIndex].cursorStops)) {\n\t\t\t\treturn injectedText.offsetInInputWithInjections + injectedText.length;\n\t\t\t} else {\n\t\t\t\tlet result = injectedText.offsetInInputWithInjections;\n\t\t\t\tif (hasLeftCursorStop(this.injectionOptions![injectedText.injectedTextIndex].cursorStops)) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tlet index = injectedText.injectedTextIndex - 1;\n\t\t\t\twhile (index >= 0 && this.injectionOffsets![index] === this.injectionOffsets![injectedText.injectedTextIndex]) {\n\t\t\t\t\tif (hasRightCursorStop(this.injectionOptions![index].cursorStops)) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tresult -= this.injectionOptions![index].content.length;\n\t\t\t\t\tif (hasLeftCursorStop(this.injectionOptions![index].cursorStops)) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\n\t\t\t\treturn result;\n\t\t\t}\n\t\t} else if (affinity === PositionAffinity.Right || affinity === PositionAffinity.RightOfInjectedText) {\n\t\t\tlet result = injectedText.offsetInInputWithInjections + injectedText.length;\n\t\t\tlet index = injectedText.injectedTextIndex;\n\t\t\t// traverse all injected text that touch each other\n\t\t\twhile (index + 1 < this.injectionOffsets!.length && this.injectionOffsets![index + 1] === this.injectionOffsets![index]) {\n\t\t\t\tresult += this.injectionOptions![index + 1].content.length;\n\t\t\t\tindex++;\n\t\t\t}\n\t\t\treturn result;\n\t\t} else if (affinity === PositionAffinity.Left || affinity === PositionAffinity.LeftOfInjectedText) {\n\t\t\t// affinity is left\n\t\t\tlet result = injectedText.offsetInInputWithInjections;\n\t\t\tlet index = injectedText.injectedTextIndex;\n\t\t\t// traverse all injected text that touch each other\n\t\t\twhile (index - 1 >= 0 && this.injectionOffsets![index - 1] === this.injectionOffsets![index]) {\n\t\t\t\tresult -= this.injectionOptions![index - 1].content.length;\n\t\t\t\tindex--;\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\n\t\tassertNever(affinity);\n\t}\n\n\tpublic getInjectedText(outputLineIndex: number, outputOffset: number): InjectedText | null {\n\t\tconst offset = this.outputPositionToOffsetInInputWithInjections(outputLineIndex, outputOffset);\n\t\tconst injectedText = this.getInjectedTextAtOffset(offset);\n\t\tif (!injectedText) {\n\t\t\treturn null;\n\t\t}\n\t\treturn {\n\t\t\toptions: this.injectionOptions![injectedText.injectedTextIndex]\n\t\t};\n\t}\n\n\tprivate getInjectedTextAtOffset(offsetInInputWithInjections: number): { injectedTextIndex: number; offsetInInputWithInjections: number; length: number } | undefined {\n\t\tconst injectionOffsets = this.injectionOffsets;\n\t\tconst injectionOptions = this.injectionOptions;\n\n\t\tif (injectionOffsets !== null) {\n\t\t\tlet totalInjectedTextLengthBefore = 0;\n\t\t\tfor (let i = 0; i < injectionOffsets.length; i++) {\n\t\t\t\tconst length = injectionOptions![i].content.length;\n\t\t\t\tconst injectedTextStartOffsetInInputWithInjections = injectionOffsets[i] + totalInjectedTextLengthBefore;\n\t\t\t\tconst injectedTextEndOffsetInInputWithInjections = injectionOffsets[i] + totalInjectedTextLengthBefore + length;\n\n\t\t\t\tif (injectedTextStartOffsetInInputWithInjections > offsetInInputWithInjections) {\n\t\t\t\t\t// Injected text starts later.\n\t\t\t\t\tbreak; // All later injected texts have an even larger offset.\n\t\t\t\t}\n\n\t\t\t\tif (offsetInInputWithInjections <= injectedTextEndOffsetInInputWithInjections) {\n\t\t\t\t\t// Injected text ends after or with the given position (but also starts with or before it).\n\t\t\t\t\treturn {\n\t\t\t\t\t\tinjectedTextIndex: i,\n\t\t\t\t\t\toffsetInInputWithInjections: injectedTextStartOffsetInInputWithInjections,\n\t\t\t\t\t\tlength\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\ttotalInjectedTextLengthBefore += length;\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n}\n\nfunction hasRightCursorStop(cursorStop: InjectedTextCursorStops | null | undefined): boolean {\n\tif (cursorStop === null || cursorStop === undefined) { return true; }\n\treturn cursorStop === InjectedTextCursorStops.Right || cursorStop === InjectedTextCursorStops.Both;\n}\nfunction hasLeftCursorStop(cursorStop: InjectedTextCursorStops | null | undefined): boolean {\n\tif (cursorStop === null || cursorStop === undefined) { return true; }\n\treturn cursorStop === InjectedTextCursorStops.Left || cursorStop === InjectedTextCursorStops.Both;\n}\n\nexport class InjectedText {\n\tconstructor(public readonly options: InjectedTextOptions) { }\n}\n\nexport class OutputPosition {\n\toutputLineIndex: number;\n\toutputOffset: number;\n\n\tconstructor(outputLineIndex: number, outputOffset: number) {\n\t\tthis.outputLineIndex = outputLineIndex;\n\t\tthis.outputOffset = outputOffset;\n\t}\n\n\ttoString(): string {\n\t\treturn `${this.outputLineIndex}:${this.outputOffset}`;\n\t}\n\n\ttoPosition(baseLineNumber: number): Position {\n\t\treturn new Position(baseLineNumber + this.outputLineIndex, this.outputOffset + 1);\n\t}\n}\n\nexport interface ILineBreaksComputerFactory {\n\tcreateLineBreaksComputer(fontInfo: FontInfo, tabSize: number, wrappingColumn: number, wrappingIndent: WrappingIndent, wordBreak: 'normal' | 'keepAll', wrapOnEscapedLineFeeds: boolean): ILineBreaksComputer;\n}\n\nexport interface ILineBreaksComputer {\n\t/**\n\t * Pass in `previousLineBreakData` if the only difference is in breaking columns!!!\n\t */\n\taddRequest(lineText: string, injectedText: LineInjectedText[] | null, previousLineBreakData: ModelLineProjectionData | null): void;\n\tfinalize(): (ModelLineProjectionData | null)[];\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 4129, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/monaco-editor/esm/vs/editor/common/textModelEvents.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/file%3A/mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/textModelEvents.ts","file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/vs/editor/common/textModelEvents.ts"],"sourcesContent":["\nimport { Selection } from './core/selection.js';\nimport { IModelDecoration, InjectedTextOptions } from './model.js';\nimport { IModelContentChange } from './model/mirrorTextModel.js';\nimport { TextModelEditSource } from './textModelEditSource.js';\n\n/**\n * An event describing that the current language associated with a model has changed.\n */\nexport interface IModelLanguageChangedEvent {\n\t/**\n\t * Previous language\n\t */\n\treadonly oldLanguage: string;\n\t/**\n\t * New language\n\t */\n\treadonly newLanguage: string;\n\n\t/**\n\t * Source of the call that caused the event.\n\t */\n\treadonly source: string;\n}\n\n/**\n * An event describing that the language configuration associated with a model has changed.\n */\nexport interface IModelLanguageConfigurationChangedEvent {\n}\n\n/**\n * An event describing a change in the text of a model.\n */\nexport interface IModelContentChangedEvent {\n\t/**\n\t * The changes are ordered from the end of the document to the beginning, so they should be safe to apply in sequence.\n\t */\n\treadonly changes: IModelContentChange[];\n\t/**\n\t * The (new) end-of-line character.\n\t */\n\treadonly eol: string;\n\t/**\n\t * The new version id the model has transitioned to.\n\t */\n\treadonly versionId: number;\n\t/**\n\t * Flag that indicates that this event was generated while undoing.\n\t */\n\treadonly isUndoing: boolean;\n\t/**\n\t * Flag that indicates that this event was generated while redoing.\n\t */\n\treadonly isRedoing: boolean;\n\t/**\n\t * Flag that indicates that all decorations were lost with this edit.\n\t * The model has been reset to a new value.\n\t */\n\treadonly isFlush: boolean;\n\n\t/**\n\t * Flag that indicates that this event describes an eol change.\n\t */\n\treadonly isEolChange: boolean;\n\n\t/**\n\t * Detailed reason information for the change\n\t * @internal\n\t */\n\treadonly detailedReasons: TextModelEditSource[];\n\n\t/**\n\t * The sum of these lengths equals changes.length.\n\t * The length of this array must equal the length of detailedReasons.\n\t*/\n\treadonly detailedReasonsChangeLengths: number[];\n}\n\nexport interface ISerializedModelContentChangedEvent {\n\t/**\n\t * The changes are ordered from the end of the document to the beginning, so they should be safe to apply in sequence.\n\t */\n\treadonly changes: IModelContentChange[];\n\t/**\n\t * The (new) end-of-line character.\n\t */\n\treadonly eol: string;\n\t/**\n\t * The new version id the model has transitioned to.\n\t */\n\treadonly versionId: number;\n\t/**\n\t * Flag that indicates that this event was generated while undoing.\n\t */\n\treadonly isUndoing: boolean;\n\t/**\n\t * Flag that indicates that this event was generated while redoing.\n\t */\n\treadonly isRedoing: boolean;\n\t/**\n\t * Flag that indicates that all decorations were lost with this edit.\n\t * The model has been reset to a new value.\n\t */\n\treadonly isFlush: boolean;\n\n\t/**\n\t * Flag that indicates that this event describes an eol change.\n\t */\n\treadonly isEolChange: boolean;\n}\n\n/**\n * An event describing that model decorations have changed.\n */\nexport interface IModelDecorationsChangedEvent {\n\treadonly affectsMinimap: boolean;\n\treadonly affectsOverviewRuler: boolean;\n\treadonly affectsGlyphMargin: boolean;\n\treadonly affectsLineNumber: boolean;\n}\n\n/**\n * An event describing that some ranges of lines have been tokenized (their tokens have changed).\n * @internal\n */\nexport interface IModelTokensChangedEvent {\n\treadonly semanticTokensApplied: boolean;\n\treadonly ranges: {\n\t\t/**\n\t\t * The start of the range (inclusive)\n\t\t */\n\t\treadonly fromLineNumber: number;\n\t\t/**\n\t\t * The end of the range (inclusive)\n\t\t */\n\t\treadonly toLineNumber: number;\n\t}[];\n}\n\nexport interface IModelOptionsChangedEvent {\n\treadonly tabSize: boolean;\n\treadonly indentSize: boolean;\n\treadonly insertSpaces: boolean;\n\treadonly trimAutoWhitespace: boolean;\n}\n\n/**\n * @internal\n */\nexport const enum RawContentChangedType {\n\tFlush = 1,\n\tLineChanged = 2,\n\tLinesDeleted = 3,\n\tLinesInserted = 4,\n\tEOLChanged = 5\n}\n\n/**\n * An event describing that a model has been reset to a new value.\n * @internal\n */\nexport class ModelRawFlush {\n\tpublic readonly changeType = RawContentChangedType.Flush;\n}\n\n/**\n * Represents text injected on a line\n * @internal\n */\nexport class LineInjectedText {\n\tpublic static applyInjectedText(lineText: string, injectedTexts: LineInjectedText[] | null): string {\n\t\tif (!injectedTexts || injectedTexts.length === 0) {\n\t\t\treturn lineText;\n\t\t}\n\t\tlet result = '';\n\t\tlet lastOriginalOffset = 0;\n\t\tfor (const injectedText of injectedTexts) {\n\t\t\tresult += lineText.substring(lastOriginalOffset, injectedText.column - 1);\n\t\t\tlastOriginalOffset = injectedText.column - 1;\n\t\t\tresult += injectedText.options.content;\n\t\t}\n\t\tresult += lineText.substring(lastOriginalOffset);\n\t\treturn result;\n\t}\n\n\tpublic static fromDecorations(decorations: IModelDecoration[]): LineInjectedText[] {\n\t\tconst result: LineInjectedText[] = [];\n\t\tfor (const decoration of decorations) {\n\t\t\tif (decoration.options.before && decoration.options.before.content.length > 0) {\n\t\t\t\tresult.push(new LineInjectedText(\n\t\t\t\t\tdecoration.ownerId,\n\t\t\t\t\tdecoration.range.startLineNumber,\n\t\t\t\t\tdecoration.range.startColumn,\n\t\t\t\t\tdecoration.options.before,\n\t\t\t\t\t0,\n\t\t\t\t));\n\t\t\t}\n\t\t\tif (decoration.options.after && decoration.options.after.content.length > 0) {\n\t\t\t\tresult.push(new LineInjectedText(\n\t\t\t\t\tdecoration.ownerId,\n\t\t\t\t\tdecoration.range.endLineNumber,\n\t\t\t\t\tdecoration.range.endColumn,\n\t\t\t\t\tdecoration.options.after,\n\t\t\t\t\t1,\n\t\t\t\t));\n\t\t\t}\n\t\t}\n\t\tresult.sort((a, b) => {\n\t\t\tif (a.lineNumber === b.lineNumber) {\n\t\t\t\tif (a.column === b.column) {\n\t\t\t\t\treturn a.order - b.order;\n\t\t\t\t}\n\t\t\t\treturn a.column - b.column;\n\t\t\t}\n\t\t\treturn a.lineNumber - b.lineNumber;\n\t\t});\n\t\treturn result;\n\t}\n\n\tconstructor(\n\t\tpublic readonly ownerId: number,\n\t\tpublic readonly lineNumber: number,\n\t\tpublic readonly column: number,\n\t\tpublic readonly options: InjectedTextOptions,\n\t\tpublic readonly order: number\n\t) { }\n}\n\n/**\n * An event describing that a line has changed in a model.\n * @internal\n */\nexport class ModelRawLineChanged {\n\tpublic readonly changeType = RawContentChangedType.LineChanged;\n\t/**\n\t * The line that has changed.\n\t */\n\tpublic readonly lineNumber: number;\n\t/**\n\t * The new value of the line.\n\t */\n\tpublic readonly detail: string;\n\t/**\n\t * The injected text on the line.\n\t */\n\tpublic readonly injectedText: LineInjectedText[] | null;\n\n\tconstructor(lineNumber: number, detail: string, injectedText: LineInjectedText[] | null) {\n\t\tthis.lineNumber = lineNumber;\n\t\tthis.detail = detail;\n\t\tthis.injectedText = injectedText;\n\t}\n}\n\n\n/**\n * An event describing that a line height has changed in the model.\n * @internal\n */\nexport class ModelLineHeightChanged {\n\t/**\n\t * Editor owner ID\n\t */\n\tpublic readonly ownerId: number;\n\t/**\n\t * The decoration ID that has changed.\n\t */\n\tpublic readonly decorationId: string;\n\t/**\n\t * The line that has changed.\n\t */\n\tpublic readonly lineNumber: number;\n\t/**\n\t * The line height on the line.\n\t */\n\tpublic readonly lineHeight: number | null;\n\n\tconstructor(ownerId: number, decorationId: string, lineNumber: number, lineHeight: number | null) {\n\t\tthis.ownerId = ownerId;\n\t\tthis.decorationId = decorationId;\n\t\tthis.lineNumber = lineNumber;\n\t\tthis.lineHeight = lineHeight;\n\t}\n}\n\n/**\n * An event describing that a line height has changed in the model.\n * @internal\n */\nexport class ModelFontChanged {\n\t/**\n\t * Editor owner ID\n\t */\n\tpublic readonly ownerId: number;\n\t/**\n\t * The line that has changed.\n\t */\n\tpublic readonly lineNumber: number;\n\n\tconstructor(ownerId: number, lineNumber: number) {\n\t\tthis.ownerId = ownerId;\n\t\tthis.lineNumber = lineNumber;\n\t}\n}\n\n/**\n * An event describing that line(s) have been deleted in a model.\n * @internal\n */\nexport class ModelRawLinesDeleted {\n\tpublic readonly changeType = RawContentChangedType.LinesDeleted;\n\t/**\n\t * At what line the deletion began (inclusive).\n\t */\n\tpublic readonly fromLineNumber: number;\n\t/**\n\t * At what line the deletion stopped (inclusive).\n\t */\n\tpublic readonly toLineNumber: number;\n\n\tconstructor(fromLineNumber: number, toLineNumber: number) {\n\t\tthis.fromLineNumber = fromLineNumber;\n\t\tthis.toLineNumber = toLineNumber;\n\t}\n}\n\n/**\n * An event describing that line(s) have been inserted in a model.\n * @internal\n */\nexport class ModelRawLinesInserted {\n\tpublic readonly changeType = RawContentChangedType.LinesInserted;\n\t/**\n\t * Before what line did the insertion begin\n\t */\n\tpublic readonly fromLineNumber: number;\n\t/**\n\t * `toLineNumber` - `fromLineNumber` + 1 denotes the number of lines that were inserted\n\t */\n\tpublic readonly toLineNumber: number;\n\t/**\n\t * The text that was inserted\n\t */\n\tpublic readonly detail: string[];\n\t/**\n\t * The injected texts for every inserted line.\n\t */\n\tpublic readonly injectedTexts: (LineInjectedText[] | null)[];\n\n\tconstructor(fromLineNumber: number, toLineNumber: number, detail: string[], injectedTexts: (LineInjectedText[] | null)[]) {\n\t\tthis.injectedTexts = injectedTexts;\n\t\tthis.fromLineNumber = fromLineNumber;\n\t\tthis.toLineNumber = toLineNumber;\n\t\tthis.detail = detail;\n\t}\n}\n\n/**\n * An event describing that a model has had its EOL changed.\n * @internal\n */\nexport class ModelRawEOLChanged {\n\tpublic readonly changeType = RawContentChangedType.EOLChanged;\n}\n\n/**\n * @internal\n */\nexport type ModelRawChange = ModelRawFlush | ModelRawLineChanged | ModelRawLinesDeleted | ModelRawLinesInserted | ModelRawEOLChanged;\n\n/**\n * An event describing a change in the text of a model.\n * @internal\n */\nexport class ModelRawContentChangedEvent {\n\n\tpublic readonly changes: ModelRawChange[];\n\t/**\n\t * The new version id the model has transitioned to.\n\t */\n\tpublic readonly versionId: number;\n\t/**\n\t * Flag that indicates that this event was generated while undoing.\n\t */\n\tpublic readonly isUndoing: boolean;\n\t/**\n\t * Flag that indicates that this event was generated while redoing.\n\t */\n\tpublic readonly isRedoing: boolean;\n\n\tpublic resultingSelection: Selection[] | null;\n\n\tconstructor(changes: ModelRawChange[], versionId: number, isUndoing: boolean, isRedoing: boolean) {\n\t\tthis.changes = changes;\n\t\tthis.versionId = versionId;\n\t\tthis.isUndoing = isUndoing;\n\t\tthis.isRedoing = isRedoing;\n\t\tthis.resultingSelection = null;\n\t}\n\n\tpublic containsEvent(type: RawContentChangedType): boolean {\n\t\tfor (let i = 0, len = this.changes.length; i < len; i++) {\n\t\t\tconst change = this.changes[i];\n\t\t\tif (change.changeType === type) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic static merge(a: ModelRawContentChangedEvent, b: ModelRawContentChangedEvent): ModelRawContentChangedEvent {\n\t\tconst changes = ([] as ModelRawChange[]).concat(a.changes).concat(b.changes);\n\t\tconst versionId = b.versionId;\n\t\tconst isUndoing = (a.isUndoing || b.isUndoing);\n\t\tconst isRedoing = (a.isRedoing || b.isRedoing);\n\t\treturn new ModelRawContentChangedEvent(changes, versionId, isUndoing, isRedoing);\n\t}\n}\n\n/**\n * An event describing a change in injected text.\n * @internal\n */\nexport class ModelInjectedTextChangedEvent {\n\n\tpublic readonly changes: ModelRawLineChanged[];\n\n\tconstructor(changes: ModelRawLineChanged[]) {\n\t\tthis.changes = changes;\n\t}\n}\n\n/**\n * An event describing a change of a line height.\n * @internal\n */\nexport class ModelLineHeightChangedEvent {\n\n\tpublic readonly changes: ModelLineHeightChanged[];\n\n\tconstructor(changes: ModelLineHeightChanged[]) {\n\t\tthis.changes = changes;\n\t}\n}\n\n/**\n * An event describing a change in fonts.\n * @internal\n */\nexport class ModelFontChangedEvent {\n\n\tpublic readonly changes: ModelFontChanged[];\n\n\tconstructor(changes: ModelFontChanged[]) {\n\t\tthis.changes = changes;\n\t}\n}\n\n/**\n * @internal\n */\nexport class InternalModelContentChangeEvent {\n\tconstructor(\n\t\tpublic readonly rawContentChangedEvent: ModelRawContentChangedEvent,\n\t\tpublic readonly contentChangedEvent: IModelContentChangedEvent,\n\t) { }\n\n\tpublic merge(other: InternalModelContentChangeEvent): InternalModelContentChangeEvent {\n\t\tconst rawContentChangedEvent = ModelRawContentChangedEvent.merge(this.rawContentChangedEvent, other.rawContentChangedEvent);\n\t\tconst contentChangedEvent = InternalModelContentChangeEvent._mergeChangeEvents(this.contentChangedEvent, other.contentChangedEvent);\n\t\treturn new InternalModelContentChangeEvent(rawContentChangedEvent, contentChangedEvent);\n\t}\n\n\tprivate static _mergeChangeEvents(a: IModelContentChangedEvent, b: IModelContentChangedEvent): IModelContentChangedEvent {\n\t\tconst changes = ([] as IModelContentChange[]).concat(a.changes).concat(b.changes);\n\t\tconst eol = b.eol;\n\t\tconst versionId = b.versionId;\n\t\tconst isUndoing = (a.isUndoing || b.isUndoing);\n\t\tconst isRedoing = (a.isRedoing || b.isRedoing);\n\t\tconst isFlush = (a.isFlush || b.isFlush);\n\t\tconst isEolChange = a.isEolChange && b.isEolChange; // both must be true to not confuse listeners who skip such edits\n\t\treturn {\n\t\t\tchanges: changes,\n\t\t\teol: eol,\n\t\t\tisEolChange: isEolChange,\n\t\t\tversionId: versionId,\n\t\t\tisUndoing: isUndoing,\n\t\t\tisRedoing: isRedoing,\n\t\t\tisFlush: isFlush,\n\t\t\tdetailedReasons: a.detailedReasons.concat(b.detailedReasons),\n\t\t\tdetailedReasonsChangeLengths: a.detailedReasonsChangeLengths.concat(b.detailedReasonsChangeLengths),\n\t\t};\n\t}\n}\n","\nimport { Selection } from './core/selection.js';\nimport { IModelDecoration, InjectedTextOptions } from './model.js';\nimport { IModelContentChange } from './model/mirrorTextModel.js';\nimport { TextModelEditSource } from './textModelEditSource.js';\n\n/**\n * An event describing that the current language associated with a model has changed.\n */\nexport interface IModelLanguageChangedEvent {\n\t/**\n\t * Previous language\n\t */\n\treadonly oldLanguage: string;\n\t/**\n\t * New language\n\t */\n\treadonly newLanguage: string;\n\n\t/**\n\t * Source of the call that caused the event.\n\t */\n\treadonly source: string;\n}\n\n/**\n * An event describing that the language configuration associated with a model has changed.\n */\nexport interface IModelLanguageConfigurationChangedEvent {\n}\n\n/**\n * An event describing a change in the text of a model.\n */\nexport interface IModelContentChangedEvent {\n\t/**\n\t * The changes are ordered from the end of the document to the beginning, so they should be safe to apply in sequence.\n\t */\n\treadonly changes: IModelContentChange[];\n\t/**\n\t * The (new) end-of-line character.\n\t */\n\treadonly eol: string;\n\t/**\n\t * The new version id the model has transitioned to.\n\t */\n\treadonly versionId: number;\n\t/**\n\t * Flag that indicates that this event was generated while undoing.\n\t */\n\treadonly isUndoing: boolean;\n\t/**\n\t * Flag that indicates that this event was generated while redoing.\n\t */\n\treadonly isRedoing: boolean;\n\t/**\n\t * Flag that indicates that all decorations were lost with this edit.\n\t * The model has been reset to a new value.\n\t */\n\treadonly isFlush: boolean;\n\n\t/**\n\t * Flag that indicates that this event describes an eol change.\n\t */\n\treadonly isEolChange: boolean;\n\n\t/**\n\t * Detailed reason information for the change\n\t * @internal\n\t */\n\treadonly detailedReasons: TextModelEditSource[];\n\n\t/**\n\t * The sum of these lengths equals changes.length.\n\t * The length of this array must equal the length of detailedReasons.\n\t*/\n\treadonly detailedReasonsChangeLengths: number[];\n}\n\nexport interface ISerializedModelContentChangedEvent {\n\t/**\n\t * The changes are ordered from the end of the document to the beginning, so they should be safe to apply in sequence.\n\t */\n\treadonly changes: IModelContentChange[];\n\t/**\n\t * The (new) end-of-line character.\n\t */\n\treadonly eol: string;\n\t/**\n\t * The new version id the model has transitioned to.\n\t */\n\treadonly versionId: number;\n\t/**\n\t * Flag that indicates that this event was generated while undoing.\n\t */\n\treadonly isUndoing: boolean;\n\t/**\n\t * Flag that indicates that this event was generated while redoing.\n\t */\n\treadonly isRedoing: boolean;\n\t/**\n\t * Flag that indicates that all decorations were lost with this edit.\n\t * The model has been reset to a new value.\n\t */\n\treadonly isFlush: boolean;\n\n\t/**\n\t * Flag that indicates that this event describes an eol change.\n\t */\n\treadonly isEolChange: boolean;\n}\n\n/**\n * An event describing that model decorations have changed.\n */\nexport interface IModelDecorationsChangedEvent {\n\treadonly affectsMinimap: boolean;\n\treadonly affectsOverviewRuler: boolean;\n\treadonly affectsGlyphMargin: boolean;\n\treadonly affectsLineNumber: boolean;\n}\n\n/**\n * An event describing that some ranges of lines have been tokenized (their tokens have changed).\n * @internal\n */\nexport interface IModelTokensChangedEvent {\n\treadonly semanticTokensApplied: boolean;\n\treadonly ranges: {\n\t\t/**\n\t\t * The start of the range (inclusive)\n\t\t */\n\t\treadonly fromLineNumber: number;\n\t\t/**\n\t\t * The end of the range (inclusive)\n\t\t */\n\t\treadonly toLineNumber: number;\n\t}[];\n}\n\nexport interface IModelOptionsChangedEvent {\n\treadonly tabSize: boolean;\n\treadonly indentSize: boolean;\n\treadonly insertSpaces: boolean;\n\treadonly trimAutoWhitespace: boolean;\n}\n\n/**\n * @internal\n */\nexport const enum RawContentChangedType {\n\tFlush = 1,\n\tLineChanged = 2,\n\tLinesDeleted = 3,\n\tLinesInserted = 4,\n\tEOLChanged = 5\n}\n\n/**\n * An event describing that a model has been reset to a new value.\n * @internal\n */\nexport class ModelRawFlush {\n\tpublic readonly changeType = RawContentChangedType.Flush;\n}\n\n/**\n * Represents text injected on a line\n * @internal\n */\nexport class LineInjectedText {\n\tpublic static applyInjectedText(lineText: string, injectedTexts: LineInjectedText[] | null): string {\n\t\tif (!injectedTexts || injectedTexts.length === 0) {\n\t\t\treturn lineText;\n\t\t}\n\t\tlet result = '';\n\t\tlet lastOriginalOffset = 0;\n\t\tfor (const injectedText of injectedTexts) {\n\t\t\tresult += lineText.substring(lastOriginalOffset, injectedText.column - 1);\n\t\t\tlastOriginalOffset = injectedText.column - 1;\n\t\t\tresult += injectedText.options.content;\n\t\t}\n\t\tresult += lineText.substring(lastOriginalOffset);\n\t\treturn result;\n\t}\n\n\tpublic static fromDecorations(decorations: IModelDecoration[]): LineInjectedText[] {\n\t\tconst result: LineInjectedText[] = [];\n\t\tfor (const decoration of decorations) {\n\t\t\tif (decoration.options.before && decoration.options.before.content.length > 0) {\n\t\t\t\tresult.push(new LineInjectedText(\n\t\t\t\t\tdecoration.ownerId,\n\t\t\t\t\tdecoration.range.startLineNumber,\n\t\t\t\t\tdecoration.range.startColumn,\n\t\t\t\t\tdecoration.options.before,\n\t\t\t\t\t0,\n\t\t\t\t));\n\t\t\t}\n\t\t\tif (decoration.options.after && decoration.options.after.content.length > 0) {\n\t\t\t\tresult.push(new LineInjectedText(\n\t\t\t\t\tdecoration.ownerId,\n\t\t\t\t\tdecoration.range.endLineNumber,\n\t\t\t\t\tdecoration.range.endColumn,\n\t\t\t\t\tdecoration.options.after,\n\t\t\t\t\t1,\n\t\t\t\t));\n\t\t\t}\n\t\t}\n\t\tresult.sort((a, b) => {\n\t\t\tif (a.lineNumber === b.lineNumber) {\n\t\t\t\tif (a.column === b.column) {\n\t\t\t\t\treturn a.order - b.order;\n\t\t\t\t}\n\t\t\t\treturn a.column - b.column;\n\t\t\t}\n\t\t\treturn a.lineNumber - b.lineNumber;\n\t\t});\n\t\treturn result;\n\t}\n\n\tconstructor(\n\t\tpublic readonly ownerId: number,\n\t\tpublic readonly lineNumber: number,\n\t\tpublic readonly column: number,\n\t\tpublic readonly options: InjectedTextOptions,\n\t\tpublic readonly order: number\n\t) { }\n}\n\n/**\n * An event describing that a line has changed in a model.\n * @internal\n */\nexport class ModelRawLineChanged {\n\tpublic readonly changeType = RawContentChangedType.LineChanged;\n\t/**\n\t * The line that has changed.\n\t */\n\tpublic readonly lineNumber: number;\n\t/**\n\t * The new value of the line.\n\t */\n\tpublic readonly detail: string;\n\t/**\n\t * The injected text on the line.\n\t */\n\tpublic readonly injectedText: LineInjectedText[] | null;\n\n\tconstructor(lineNumber: number, detail: string, injectedText: LineInjectedText[] | null) {\n\t\tthis.lineNumber = lineNumber;\n\t\tthis.detail = detail;\n\t\tthis.injectedText = injectedText;\n\t}\n}\n\n\n/**\n * An event describing that a line height has changed in the model.\n * @internal\n */\nexport class ModelLineHeightChanged {\n\t/**\n\t * Editor owner ID\n\t */\n\tpublic readonly ownerId: number;\n\t/**\n\t * The decoration ID that has changed.\n\t */\n\tpublic readonly decorationId: string;\n\t/**\n\t * The line that has changed.\n\t */\n\tpublic readonly lineNumber: number;\n\t/**\n\t * The line height on the line.\n\t */\n\tpublic readonly lineHeight: number | null;\n\n\tconstructor(ownerId: number, decorationId: string, lineNumber: number, lineHeight: number | null) {\n\t\tthis.ownerId = ownerId;\n\t\tthis.decorationId = decorationId;\n\t\tthis.lineNumber = lineNumber;\n\t\tthis.lineHeight = lineHeight;\n\t}\n}\n\n/**\n * An event describing that a line height has changed in the model.\n * @internal\n */\nexport class ModelFontChanged {\n\t/**\n\t * Editor owner ID\n\t */\n\tpublic readonly ownerId: number;\n\t/**\n\t * The line that has changed.\n\t */\n\tpublic readonly lineNumber: number;\n\n\tconstructor(ownerId: number, lineNumber: number) {\n\t\tthis.ownerId = ownerId;\n\t\tthis.lineNumber = lineNumber;\n\t}\n}\n\n/**\n * An event describing that line(s) have been deleted in a model.\n * @internal\n */\nexport class ModelRawLinesDeleted {\n\tpublic readonly changeType = RawContentChangedType.LinesDeleted;\n\t/**\n\t * At what line the deletion began (inclusive).\n\t */\n\tpublic readonly fromLineNumber: number;\n\t/**\n\t * At what line the deletion stopped (inclusive).\n\t */\n\tpublic readonly toLineNumber: number;\n\n\tconstructor(fromLineNumber: number, toLineNumber: number) {\n\t\tthis.fromLineNumber = fromLineNumber;\n\t\tthis.toLineNumber = toLineNumber;\n\t}\n}\n\n/**\n * An event describing that line(s) have been inserted in a model.\n * @internal\n */\nexport class ModelRawLinesInserted {\n\tpublic readonly changeType = RawContentChangedType.LinesInserted;\n\t/**\n\t * Before what line did the insertion begin\n\t */\n\tpublic readonly fromLineNumber: number;\n\t/**\n\t * `toLineNumber` - `fromLineNumber` + 1 denotes the number of lines that were inserted\n\t */\n\tpublic readonly toLineNumber: number;\n\t/**\n\t * The text that was inserted\n\t */\n\tpublic readonly detail: string[];\n\t/**\n\t * The injected texts for every inserted line.\n\t */\n\tpublic readonly injectedTexts: (LineInjectedText[] | null)[];\n\n\tconstructor(fromLineNumber: number, toLineNumber: number, detail: string[], injectedTexts: (LineInjectedText[] | null)[]) {\n\t\tthis.injectedTexts = injectedTexts;\n\t\tthis.fromLineNumber = fromLineNumber;\n\t\tthis.toLineNumber = toLineNumber;\n\t\tthis.detail = detail;\n\t}\n}\n\n/**\n * An event describing that a model has had its EOL changed.\n * @internal\n */\nexport class ModelRawEOLChanged {\n\tpublic readonly changeType = RawContentChangedType.EOLChanged;\n}\n\n/**\n * @internal\n */\nexport type ModelRawChange = ModelRawFlush | ModelRawLineChanged | ModelRawLinesDeleted | ModelRawLinesInserted | ModelRawEOLChanged;\n\n/**\n * An event describing a change in the text of a model.\n * @internal\n */\nexport class ModelRawContentChangedEvent {\n\n\tpublic readonly changes: ModelRawChange[];\n\t/**\n\t * The new version id the model has transitioned to.\n\t */\n\tpublic readonly versionId: number;\n\t/**\n\t * Flag that indicates that this event was generated while undoing.\n\t */\n\tpublic readonly isUndoing: boolean;\n\t/**\n\t * Flag that indicates that this event was generated while redoing.\n\t */\n\tpublic readonly isRedoing: boolean;\n\n\tpublic resultingSelection: Selection[] | null;\n\n\tconstructor(changes: ModelRawChange[], versionId: number, isUndoing: boolean, isRedoing: boolean) {\n\t\tthis.changes = changes;\n\t\tthis.versionId = versionId;\n\t\tthis.isUndoing = isUndoing;\n\t\tthis.isRedoing = isRedoing;\n\t\tthis.resultingSelection = null;\n\t}\n\n\tpublic containsEvent(type: RawContentChangedType): boolean {\n\t\tfor (let i = 0, len = this.changes.length; i < len; i++) {\n\t\t\tconst change = this.changes[i];\n\t\t\tif (change.changeType === type) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic static merge(a: ModelRawContentChangedEvent, b: ModelRawContentChangedEvent): ModelRawContentChangedEvent {\n\t\tconst changes = ([] as ModelRawChange[]).concat(a.changes).concat(b.changes);\n\t\tconst versionId = b.versionId;\n\t\tconst isUndoing = (a.isUndoing || b.isUndoing);\n\t\tconst isRedoing = (a.isRedoing || b.isRedoing);\n\t\treturn new ModelRawContentChangedEvent(changes, versionId, isUndoing, isRedoing);\n\t}\n}\n\n/**\n * An event describing a change in injected text.\n * @internal\n */\nexport class ModelInjectedTextChangedEvent {\n\n\tpublic readonly changes: ModelRawLineChanged[];\n\n\tconstructor(changes: ModelRawLineChanged[]) {\n\t\tthis.changes = changes;\n\t}\n}\n\n/**\n * An event describing a change of a line height.\n * @internal\n */\nexport class ModelLineHeightChangedEvent {\n\n\tpublic readonly changes: ModelLineHeightChanged[];\n\n\tconstructor(changes: ModelLineHeightChanged[]) {\n\t\tthis.changes = changes;\n\t}\n}\n\n/**\n * An event describing a change in fonts.\n * @internal\n */\nexport class ModelFontChangedEvent {\n\n\tpublic readonly changes: ModelFontChanged[];\n\n\tconstructor(changes: ModelFontChanged[]) {\n\t\tthis.changes = changes;\n\t}\n}\n\n/**\n * @internal\n */\nexport class InternalModelContentChangeEvent {\n\tconstructor(\n\t\tpublic readonly rawContentChangedEvent: ModelRawContentChangedEvent,\n\t\tpublic readonly contentChangedEvent: IModelContentChangedEvent,\n\t) { }\n\n\tpublic merge(other: InternalModelContentChangeEvent): InternalModelContentChangeEvent {\n\t\tconst rawContentChangedEvent = ModelRawContentChangedEvent.merge(this.rawContentChangedEvent, other.rawContentChangedEvent);\n\t\tconst contentChangedEvent = InternalModelContentChangeEvent._mergeChangeEvents(this.contentChangedEvent, other.contentChangedEvent);\n\t\treturn new InternalModelContentChangeEvent(rawContentChangedEvent, contentChangedEvent);\n\t}\n\n\tprivate static _mergeChangeEvents(a: IModelContentChangedEvent, b: IModelContentChangedEvent): IModelContentChangedEvent {\n\t\tconst changes = ([] as IModelContentChange[]).concat(a.changes).concat(b.changes);\n\t\tconst eol = b.eol;\n\t\tconst versionId = b.versionId;\n\t\tconst isUndoing = (a.isUndoing || b.isUndoing);\n\t\tconst isRedoing = (a.isRedoing || b.isRedoing);\n\t\tconst isFlush = (a.isFlush || b.isFlush);\n\t\tconst isEolChange = a.isEolChange && b.isEolChange; // both must be true to not confuse listeners who skip such edits\n\t\treturn {\n\t\t\tchanges: changes,\n\t\t\teol: eol,\n\t\t\tisEolChange: isEolChange,\n\t\t\tversionId: versionId,\n\t\t\tisUndoing: isUndoing,\n\t\t\tisRedoing: isRedoing,\n\t\t\tisFlush: isFlush,\n\t\t\tdetailedReasons: a.detailedReasons.concat(b.detailedReasons),\n\t\t\tdetailedReasonsChangeLengths: a.detailedReasonsChangeLengths.concat(b.detailedReasonsChangeLengths),\n\t\t};\n\t}\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 4327, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/monaco-editor/esm/vs/editor/common/editorAction.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/file%3A/mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/editorAction.ts","file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/vs/editor/common/editorAction.ts"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IEditorAction } from './editorCommon.js';\nimport { ICommandMetadata } from '../../platform/commands/common/commands.js';\nimport { ContextKeyExpression, IContextKeyService } from '../../platform/contextkey/common/contextkey.js';\n\nexport class InternalEditorAction implements IEditorAction {\n\n\tconstructor(\n\t\tpublic readonly id: string,\n\t\tpublic readonly label: string,\n\t\tpublic readonly alias: string,\n\t\tpublic readonly metadata: ICommandMetadata | undefined,\n\t\tprivate readonly _precondition: ContextKeyExpression | undefined,\n\t\tprivate readonly _run: (args: unknown) => Promise<void>,\n\t\tprivate readonly _contextKeyService: IContextKeyService\n\t) { }\n\n\tpublic isSupported(): boolean {\n\t\treturn this._contextKeyService.contextMatchesRules(this._precondition);\n\t}\n\n\tpublic run(args: unknown): Promise<void> {\n\t\tif (!this.isSupported()) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\treturn this._run(args);\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IEditorAction } from './editorCommon.js';\nimport { ICommandMetadata } from '../../platform/commands/common/commands.js';\nimport { ContextKeyExpression, IContextKeyService } from '../../platform/contextkey/common/contextkey.js';\n\nexport class InternalEditorAction implements IEditorAction {\n\n\tconstructor(\n\t\tpublic readonly id: string,\n\t\tpublic readonly label: string,\n\t\tpublic readonly alias: string,\n\t\tpublic readonly metadata: ICommandMetadata | undefined,\n\t\tprivate readonly _precondition: ContextKeyExpression | undefined,\n\t\tprivate readonly _run: (args: unknown) => Promise<void>,\n\t\tprivate readonly _contextKeyService: IContextKeyService\n\t) { }\n\n\tpublic isSupported(): boolean {\n\t\treturn this._contextKeyService.contextMatchesRules(this._precondition);\n\t}\n\n\tpublic run(args: unknown): Promise<void> {\n\t\tif (!this.isSupported()) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\treturn this._run(args);\n\t}\n}\n"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;AAM1F,MAAO,oBAAoB;IAEhC,YACiB,EAAU,EACV,KAAa,EACb,KAAa,EACb,QAAsC,EACrC,aAA+C,EAC/C,IAAsC,EACtC,kBAAsC,CAAA;QANvC,IAAA,CAAA,EAAE,GAAF,EAAE,CAAQ;QACV,IAAA,CAAA,KAAK,GAAL,KAAK,CAAQ;QACb,IAAA,CAAA,KAAK,GAAL,KAAK,CAAQ;QACb,IAAA,CAAA,QAAQ,GAAR,QAAQ,CAA8B;QACrC,IAAA,CAAA,aAAa,GAAb,aAAa,CAAkC;QAC/C,IAAA,CAAA,IAAI,GAAJ,IAAI,CAAkC;QACtC,IAAA,CAAA,kBAAkB,GAAlB,kBAAkB,CAAoB;IACpD,CAAC;IAEE,WAAW,GAAA;QACjB,OAAO,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IACxE,CAAC;IAEM,GAAG,CAAC,IAAa,EAAA;QACvB,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,CAAC;YACzB,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QACnC,CAAC;QAED,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACxB,CAAC;CACD","debugId":null}},
    {"offset": {"line": 4358, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/monaco-editor/esm/vs/editor/common/editorCommon.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/file%3A/mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/editorCommon.ts","file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/vs/editor/common/editorCommon.ts"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from '../../base/common/event.js';\nimport { IDisposable } from '../../base/common/lifecycle.js';\nimport { URI } from '../../base/common/uri.js';\nimport { IEditorOptions } from './config/editorOptions.js';\nimport { IDimension } from './core/2d/dimension.js';\nimport { IPosition, Position } from './core/position.js';\nimport { IRange, Range } from './core/range.js';\nimport { ISelection, Selection } from './core/selection.js';\nimport { IModelDecoration, IModelDecorationsChangeAccessor, IModelDeltaDecoration, ITextModel, IValidEditOperation } from './model.js';\nimport { IModelDecorationsChangedEvent } from './textModelEvents.js';\nimport { ICommandMetadata } from '../../platform/commands/common/commands.js';\n\n/**\n * A builder and helper for edit operations for a command.\n */\nexport interface IEditOperationBuilder {\n\t/**\n\t * Add a new edit operation (a replace operation).\n\t * @param range The range to replace (delete). May be empty to represent a simple insert.\n\t * @param text The text to replace with. May be null to represent a simple delete.\n\t */\n\taddEditOperation(range: IRange, text: string | null, forceMoveMarkers?: boolean): void;\n\n\t/**\n\t * Add a new edit operation (a replace operation).\n\t * The inverse edits will be accessible in `ICursorStateComputerData.getInverseEditOperations()`\n\t * @param range The range to replace (delete). May be empty to represent a simple insert.\n\t * @param text The text to replace with. May be null to represent a simple delete.\n\t */\n\taddTrackedEditOperation(range: IRange, text: string | null, forceMoveMarkers?: boolean): void;\n\n\t/**\n\t * Track `selection` when applying edit operations.\n\t * A best effort will be made to not grow/expand the selection.\n\t * An empty selection will clamp to a nearby character.\n\t * @param selection The selection to track.\n\t * @param trackPreviousOnEmpty If set, and the selection is empty, indicates whether the selection\n\t *           should clamp to the previous or the next character.\n\t * @return A unique identifier.\n\t */\n\ttrackSelection(selection: Selection, trackPreviousOnEmpty?: boolean): string;\n}\n\n/**\n * A helper for computing cursor state after a command.\n */\nexport interface ICursorStateComputerData {\n\t/**\n\t * Get the inverse edit operations of the added edit operations.\n\t */\n\tgetInverseEditOperations(): IValidEditOperation[];\n\t/**\n\t * Get a previously tracked selection.\n\t * @param id The unique identifier returned by `trackSelection`.\n\t * @return The selection.\n\t */\n\tgetTrackedSelection(id: string): Selection;\n}\n\n/**\n * A command that modifies text / cursor state on a model.\n */\nexport interface ICommand {\n\n\t/**\n\t * Signal that this command is inserting automatic whitespace that should be trimmed if possible.\n\t * @internal\n\t */\n\treadonly insertsAutoWhitespace?: boolean;\n\n\t/**\n\t * Get the edit operations needed to execute this command.\n\t * @param model The model the command will execute on.\n\t * @param builder A helper to collect the needed edit operations and to track selections.\n\t */\n\tgetEditOperations(model: ITextModel, builder: IEditOperationBuilder): void;\n\n\t/**\n\t * Compute the cursor state after the edit operations were applied.\n\t * @param model The model the command has executed on.\n\t * @param helper A helper to get inverse edit operations and to get previously tracked selections.\n\t * @return The cursor state after the command executed.\n\t */\n\tcomputeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection;\n}\n\n/**\n * A model for the diff editor.\n */\nexport interface IDiffEditorModel {\n\t/**\n\t * Original model.\n\t */\n\toriginal: ITextModel;\n\t/**\n\t * Modified model.\n\t */\n\tmodified: ITextModel;\n}\n\nexport interface IDiffEditorViewModel extends IDisposable {\n\treadonly model: IDiffEditorModel;\n\n\twaitForDiff(): Promise<void>;\n}\n\n/**\n * An event describing that an editor has had its model reset (i.e. `editor.setModel()`).\n */\nexport interface IModelChangedEvent {\n\t/**\n\t * The `uri` of the previous model or null.\n\t */\n\treadonly oldModelUrl: URI | null;\n\t/**\n\t * The `uri` of the new model or null.\n\t */\n\treadonly newModelUrl: URI | null;\n}\n\n// --- view\n\nexport interface IScrollEvent {\n\treadonly scrollTop: number;\n\treadonly scrollLeft: number;\n\treadonly scrollWidth: number;\n\treadonly scrollHeight: number;\n\n\treadonly scrollTopChanged: boolean;\n\treadonly scrollLeftChanged: boolean;\n\treadonly scrollWidthChanged: boolean;\n\treadonly scrollHeightChanged: boolean;\n}\n\nexport interface IContentSizeChangedEvent {\n\treadonly contentWidth: number;\n\treadonly contentHeight: number;\n\n\treadonly contentWidthChanged: boolean;\n\treadonly contentHeightChanged: boolean;\n}\n\n/**\n * @internal\n */\nexport interface ITriggerEditorOperationEvent {\n\tsource: string | null | undefined;\n\thandlerId: string;\n\tpayload: unknown;\n}\n\nexport interface INewScrollPosition {\n\tscrollLeft?: number;\n\tscrollTop?: number;\n}\n\nexport interface IEditorAction {\n\treadonly id: string;\n\treadonly label: string;\n\treadonly alias: string;\n\treadonly metadata: ICommandMetadata | undefined;\n\tisSupported(): boolean;\n\trun(args?: unknown): Promise<void>;\n}\n\nexport type IEditorModel = ITextModel | IDiffEditorModel | IDiffEditorViewModel;\n\n/**\n * A (serializable) state of the cursors.\n */\nexport interface ICursorState {\n\tinSelectionMode: boolean;\n\tselectionStart: IPosition;\n\tposition: IPosition;\n}\n/**\n * A (serializable) state of the view.\n */\nexport interface IViewState {\n\t/** written by previous versions */\n\tscrollTop?: number;\n\t/** written by previous versions */\n\tscrollTopWithoutViewZones?: number;\n\tscrollLeft: number;\n\tfirstPosition: IPosition;\n\tfirstPositionDeltaTop: number;\n}\n/**\n * A (serializable) state of the code editor.\n */\nexport interface ICodeEditorViewState {\n\tcursorState: ICursorState[];\n\tviewState: IViewState;\n\tcontributionsState: { [id: string]: any };\n}\n/**\n * (Serializable) View state for the diff editor.\n */\nexport interface IDiffEditorViewState {\n\toriginal: ICodeEditorViewState | null;\n\tmodified: ICodeEditorViewState | null;\n\tmodelState?: unknown;\n}\n/**\n * An editor view state.\n */\nexport type IEditorViewState = ICodeEditorViewState | IDiffEditorViewState;\n\nexport const enum ScrollType {\n\tSmooth = 0,\n\tImmediate = 1,\n}\n\n/**\n * An editor.\n */\nexport interface IEditor {\n\t/**\n\t * An event emitted when the editor has been disposed.\n\t * @event\n\t */\n\tonDidDispose(listener: () => void): IDisposable;\n\n\t/**\n\t * Dispose the editor.\n\t */\n\tdispose(): void;\n\n\t/**\n\t * Get a unique id for this editor instance.\n\t */\n\tgetId(): string;\n\n\t/**\n\t * Get the editor type. Please see `EditorType`.\n\t * This is to avoid an instanceof check\n\t */\n\tgetEditorType(): string;\n\n\t/**\n\t * Update the editor's options after the editor has been created.\n\t */\n\tupdateOptions(newOptions: IEditorOptions): void;\n\n\t/**\n\t * Instructs the editor to remeasure its container. This method should\n\t * be called when the container of the editor gets resized.\n\t *\n\t * If a dimension is passed in, the passed in value will be used.\n\t *\n\t * By default, this will also render the editor immediately.\n\t * If you prefer to delay rendering to the next animation frame, use postponeRendering == true.\n\t */\n\tlayout(dimension?: IDimension, postponeRendering?: boolean): void;\n\n\t/**\n\t * Brings browser focus to the editor text\n\t */\n\tfocus(): void;\n\n\t/**\n\t * Returns true if the text inside this editor is focused (i.e. cursor is blinking).\n\t */\n\thasTextFocus(): boolean;\n\n\t/**\n\t * Returns all actions associated with this editor.\n\t */\n\tgetSupportedActions(): IEditorAction[];\n\n\t/**\n\t * Saves current view state of the editor in a serializable object.\n\t */\n\tsaveViewState(): IEditorViewState | null;\n\n\t/**\n\t * Restores the view state of the editor from a serializable object generated by `saveViewState`.\n\t */\n\trestoreViewState(state: IEditorViewState | null): void;\n\n\t/**\n\t * Given a position, returns a column number that takes tab-widths into account.\n\t */\n\tgetVisibleColumnFromPosition(position: IPosition): number;\n\n\t/**\n\t * Returns the primary position of the cursor.\n\t */\n\tgetPosition(): Position | null;\n\n\t/**\n\t * Set the primary position of the cursor. This will remove any secondary cursors.\n\t * @param position New primary cursor's position\n\t * @param source Source of the call that caused the position\n\t */\n\tsetPosition(position: IPosition, source?: string): void;\n\n\t/**\n\t * Scroll vertically as necessary and reveal a line.\n\t */\n\trevealLine(lineNumber: number, scrollType?: ScrollType): void;\n\n\t/**\n\t * Scroll vertically as necessary and reveal a line centered vertically.\n\t */\n\trevealLineInCenter(lineNumber: number, scrollType?: ScrollType): void;\n\n\t/**\n\t * Scroll vertically as necessary and reveal a line centered vertically only if it lies outside the viewport.\n\t */\n\trevealLineInCenterIfOutsideViewport(lineNumber: number, scrollType?: ScrollType): void;\n\n\t/**\n\t * Scroll vertically as necessary and reveal a line close to the top of the viewport,\n\t * optimized for viewing a code definition.\n\t */\n\trevealLineNearTop(lineNumber: number, scrollType?: ScrollType): void;\n\n\t/**\n\t * Scroll vertically or horizontally as necessary and reveal a position.\n\t */\n\trevealPosition(position: IPosition, scrollType?: ScrollType): void;\n\n\t/**\n\t * Scroll vertically or horizontally as necessary and reveal a position centered vertically.\n\t */\n\trevealPositionInCenter(position: IPosition, scrollType?: ScrollType): void;\n\n\t/**\n\t * Scroll vertically or horizontally as necessary and reveal a position centered vertically only if it lies outside the viewport.\n\t */\n\trevealPositionInCenterIfOutsideViewport(position: IPosition, scrollType?: ScrollType): void;\n\n\t/**\n\t * Scroll vertically or horizontally as necessary and reveal a position close to the top of the viewport,\n\t * optimized for viewing a code definition.\n\t */\n\trevealPositionNearTop(position: IPosition, scrollType?: ScrollType): void;\n\n\t/**\n\t * Returns the primary selection of the editor.\n\t */\n\tgetSelection(): Selection | null;\n\n\t/**\n\t * Returns all the selections of the editor.\n\t */\n\tgetSelections(): Selection[] | null;\n\n\t/**\n\t * Set the primary selection of the editor. This will remove any secondary cursors.\n\t * @param selection The new selection\n\t * @param source Source of the call that caused the selection\n\t */\n\tsetSelection(selection: IRange, source?: string): void;\n\t/**\n\t * Set the primary selection of the editor. This will remove any secondary cursors.\n\t * @param selection The new selection\n\t * @param source Source of the call that caused the selection\n\t */\n\tsetSelection(selection: Range, source?: string): void;\n\t/**\n\t * Set the primary selection of the editor. This will remove any secondary cursors.\n\t * @param selection The new selection\n\t * @param source Source of the call that caused the selection\n\t */\n\tsetSelection(selection: ISelection, source?: string): void;\n\t/**\n\t * Set the primary selection of the editor. This will remove any secondary cursors.\n\t * @param selection The new selection\n\t * @param source Source of the call that caused the selection\n\t */\n\tsetSelection(selection: Selection, source?: string): void;\n\n\t/**\n\t * Set the selections for all the cursors of the editor.\n\t * Cursors will be removed or added, as necessary.\n\t * @param selections The new selection\n\t * @param source Source of the call that caused the selection\n\t */\n\tsetSelections(selections: readonly ISelection[], source?: string): void;\n\n\t/**\n\t * Scroll vertically as necessary and reveal lines.\n\t */\n\trevealLines(startLineNumber: number, endLineNumber: number, scrollType?: ScrollType): void;\n\n\t/**\n\t * Scroll vertically as necessary and reveal lines centered vertically.\n\t */\n\trevealLinesInCenter(lineNumber: number, endLineNumber: number, scrollType?: ScrollType): void;\n\n\t/**\n\t * Scroll vertically as necessary and reveal lines centered vertically only if it lies outside the viewport.\n\t */\n\trevealLinesInCenterIfOutsideViewport(lineNumber: number, endLineNumber: number, scrollType?: ScrollType): void;\n\n\t/**\n\t * Scroll vertically as necessary and reveal lines close to the top of the viewport,\n\t * optimized for viewing a code definition.\n\t */\n\trevealLinesNearTop(lineNumber: number, endLineNumber: number, scrollType?: ScrollType): void;\n\n\t/**\n\t * Scroll vertically or horizontally as necessary and reveal a range.\n\t */\n\trevealRange(range: IRange, scrollType?: ScrollType): void;\n\n\t/**\n\t * Scroll vertically or horizontally as necessary and reveal a range centered vertically.\n\t */\n\trevealRangeInCenter(range: IRange, scrollType?: ScrollType): void;\n\n\t/**\n\t * Scroll vertically or horizontally as necessary and reveal a range at the top of the viewport.\n\t */\n\trevealRangeAtTop(range: IRange, scrollType?: ScrollType): void;\n\n\t/**\n\t * Scroll vertically or horizontally as necessary and reveal a range centered vertically only if it lies outside the viewport.\n\t */\n\trevealRangeInCenterIfOutsideViewport(range: IRange, scrollType?: ScrollType): void;\n\n\t/**\n\t * Scroll vertically or horizontally as necessary and reveal a range close to the top of the viewport,\n\t * optimized for viewing a code definition.\n\t */\n\trevealRangeNearTop(range: IRange, scrollType?: ScrollType): void;\n\n\t/**\n\t * Scroll vertically or horizontally as necessary and reveal a range close to the top of the viewport,\n\t * optimized for viewing a code definition. Only if it lies outside the viewport.\n\t */\n\trevealRangeNearTopIfOutsideViewport(range: IRange, scrollType?: ScrollType): void;\n\n\t/**\n\t * Directly trigger a handler or an editor action.\n\t * @param source The source of the call.\n\t * @param handlerId The id of the handler or the id of a contribution.\n\t * @param payload Extra data to be sent to the handler.\n\t */\n\ttrigger(source: string | null | undefined, handlerId: string, payload: any): void;\n\n\t/**\n\t * Gets the current model attached to this editor.\n\t */\n\tgetModel(): IEditorModel | null;\n\n\t/**\n\t * Sets the current model attached to this editor.\n\t * If the previous model was created by the editor via the value key in the options\n\t * literal object, it will be destroyed. Otherwise, if the previous model was set\n\t * via setModel, or the model key in the options literal object, the previous model\n\t * will not be destroyed.\n\t * It is safe to call setModel(null) to simply detach the current model from the editor.\n\t */\n\tsetModel(model: IEditorModel | null): void;\n\n\t/**\n\t * Create a collection of decorations. All decorations added through this collection\n\t * will get the ownerId of the editor (meaning they will not show up in other editors).\n\t * These decorations will be automatically cleared when the editor's model changes.\n\t */\n\tcreateDecorationsCollection(decorations?: IModelDeltaDecoration[]): IEditorDecorationsCollection;\n\n\t/**\n\t * Change the decorations. All decorations added through this changeAccessor\n\t * will get the ownerId of the editor (meaning they will not show up in other\n\t * editors).\n\t * @see {@link ITextModel.changeDecorations}\n\t * @internal\n\t */\n\tchangeDecorations(callback: (changeAccessor: IModelDecorationsChangeAccessor) => any): any;\n}\n\n/**\n * A diff editor.\n *\n * @internal\n */\nexport interface IDiffEditor extends IEditor {\n\n\t/**\n\t * Type the getModel() of IEditor.\n\t */\n\tgetModel(): IDiffEditorModel | null;\n}\n\n/**\n * @internal\n */\nexport interface ICompositeCodeEditor {\n\n\t/**\n\t * An event that signals that the active editor has changed\n\t */\n\treadonly onDidChangeActiveEditor: Event<ICompositeCodeEditor>;\n\n\t/**\n\t * The active code editor iff any\n\t */\n\treadonly activeCodeEditor: IEditor | undefined;\n\t// readonly editors: readonly ICodeEditor[] maybe supported with uris\n}\n\n/**\n * A collection of decorations\n */\nexport interface IEditorDecorationsCollection {\n\t/**\n\t * An event emitted when decorations change in the editor,\n\t * but the change is not caused by us setting or clearing the collection.\n\t */\n\tonDidChange: Event<IModelDecorationsChangedEvent>;\n\t/**\n\t * Get the decorations count.\n\t */\n\tlength: number;\n\t/**\n\t * Get the range for a decoration.\n\t */\n\tgetRange(index: number): Range | null;\n\t/**\n\t * Get all ranges for decorations.\n\t */\n\tgetRanges(): Range[];\n\t/**\n\t * Determine if a decoration is in this collection.\n\t */\n\thas(decoration: IModelDecoration): boolean;\n\t/**\n\t * Replace all previous decorations with `newDecorations`.\n\t */\n\tset(newDecorations: readonly IModelDeltaDecoration[]): string[];\n\t/**\n\t * Append `newDecorations` to this collection.\n\t */\n\tappend(newDecorations: readonly IModelDeltaDecoration[]): string[];\n\t/**\n\t * Remove all previous decorations.\n\t */\n\tclear(): void;\n}\n\n/**\n * An editor contribution that gets created every time a new editor gets created and gets disposed when the editor gets disposed.\n */\nexport interface IEditorContribution {\n\t/**\n\t * Dispose this contribution.\n\t */\n\tdispose(): void;\n\t/**\n\t * Store view state.\n\t */\n\tsaveViewState?(): any;\n\t/**\n\t * Restore view state.\n\t */\n\trestoreViewState?(state: any): void;\n}\n\n/**\n * A diff editor contribution that gets created every time a new  diffeditor gets created and gets disposed when the diff editor gets disposed.\n * @internal\n */\nexport interface IDiffEditorContribution {\n\t/**\n\t * Dispose this contribution.\n\t */\n\tdispose(): void;\n}\n\n/**\n * The type of the `IEditor`.\n */\nexport const EditorType = {\n\tICodeEditor: 'vs.editor.ICodeEditor',\n\tIDiffEditor: 'vs.editor.IDiffEditor'\n};\n\n/**\n * Built-in commands.\n * @internal\n */\nexport const enum Handler {\n\tCompositionStart = 'compositionStart',\n\tCompositionEnd = 'compositionEnd',\n\tType = 'type',\n\tReplacePreviousChar = 'replacePreviousChar',\n\tCompositionType = 'compositionType',\n\tPaste = 'paste',\n\tCut = 'cut',\n}\n\n/**\n * @internal\n */\nexport interface TypePayload {\n\ttext: string;\n}\n\n/**\n * @internal\n */\nexport interface ReplacePreviousCharPayload {\n\ttext: string;\n\treplaceCharCnt: number;\n}\n\n/**\n * @internal\n */\nexport interface CompositionTypePayload {\n\ttext: string;\n\treplacePrevCharCnt: number;\n\treplaceNextCharCnt: number;\n\tpositionDelta: number;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from '../../base/common/event.js';\nimport { IDisposable } from '../../base/common/lifecycle.js';\nimport { URI } from '../../base/common/uri.js';\nimport { IEditorOptions } from './config/editorOptions.js';\nimport { IDimension } from './core/2d/dimension.js';\nimport { IPosition, Position } from './core/position.js';\nimport { IRange, Range } from './core/range.js';\nimport { ISelection, Selection } from './core/selection.js';\nimport { IModelDecoration, IModelDecorationsChangeAccessor, IModelDeltaDecoration, ITextModel, IValidEditOperation } from './model.js';\nimport { IModelDecorationsChangedEvent } from './textModelEvents.js';\nimport { ICommandMetadata } from '../../platform/commands/common/commands.js';\n\n/**\n * A builder and helper for edit operations for a command.\n */\nexport interface IEditOperationBuilder {\n\t/**\n\t * Add a new edit operation (a replace operation).\n\t * @param range The range to replace (delete). May be empty to represent a simple insert.\n\t * @param text The text to replace with. May be null to represent a simple delete.\n\t */\n\taddEditOperation(range: IRange, text: string | null, forceMoveMarkers?: boolean): void;\n\n\t/**\n\t * Add a new edit operation (a replace operation).\n\t * The inverse edits will be accessible in `ICursorStateComputerData.getInverseEditOperations()`\n\t * @param range The range to replace (delete). May be empty to represent a simple insert.\n\t * @param text The text to replace with. May be null to represent a simple delete.\n\t */\n\taddTrackedEditOperation(range: IRange, text: string | null, forceMoveMarkers?: boolean): void;\n\n\t/**\n\t * Track `selection` when applying edit operations.\n\t * A best effort will be made to not grow/expand the selection.\n\t * An empty selection will clamp to a nearby character.\n\t * @param selection The selection to track.\n\t * @param trackPreviousOnEmpty If set, and the selection is empty, indicates whether the selection\n\t *           should clamp to the previous or the next character.\n\t * @return A unique identifier.\n\t */\n\ttrackSelection(selection: Selection, trackPreviousOnEmpty?: boolean): string;\n}\n\n/**\n * A helper for computing cursor state after a command.\n */\nexport interface ICursorStateComputerData {\n\t/**\n\t * Get the inverse edit operations of the added edit operations.\n\t */\n\tgetInverseEditOperations(): IValidEditOperation[];\n\t/**\n\t * Get a previously tracked selection.\n\t * @param id The unique identifier returned by `trackSelection`.\n\t * @return The selection.\n\t */\n\tgetTrackedSelection(id: string): Selection;\n}\n\n/**\n * A command that modifies text / cursor state on a model.\n */\nexport interface ICommand {\n\n\t/**\n\t * Signal that this command is inserting automatic whitespace that should be trimmed if possible.\n\t * @internal\n\t */\n\treadonly insertsAutoWhitespace?: boolean;\n\n\t/**\n\t * Get the edit operations needed to execute this command.\n\t * @param model The model the command will execute on.\n\t * @param builder A helper to collect the needed edit operations and to track selections.\n\t */\n\tgetEditOperations(model: ITextModel, builder: IEditOperationBuilder): void;\n\n\t/**\n\t * Compute the cursor state after the edit operations were applied.\n\t * @param model The model the command has executed on.\n\t * @param helper A helper to get inverse edit operations and to get previously tracked selections.\n\t * @return The cursor state after the command executed.\n\t */\n\tcomputeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection;\n}\n\n/**\n * A model for the diff editor.\n */\nexport interface IDiffEditorModel {\n\t/**\n\t * Original model.\n\t */\n\toriginal: ITextModel;\n\t/**\n\t * Modified model.\n\t */\n\tmodified: ITextModel;\n}\n\nexport interface IDiffEditorViewModel extends IDisposable {\n\treadonly model: IDiffEditorModel;\n\n\twaitForDiff(): Promise<void>;\n}\n\n/**\n * An event describing that an editor has had its model reset (i.e. `editor.setModel()`).\n */\nexport interface IModelChangedEvent {\n\t/**\n\t * The `uri` of the previous model or null.\n\t */\n\treadonly oldModelUrl: URI | null;\n\t/**\n\t * The `uri` of the new model or null.\n\t */\n\treadonly newModelUrl: URI | null;\n}\n\n// --- view\n\nexport interface IScrollEvent {\n\treadonly scrollTop: number;\n\treadonly scrollLeft: number;\n\treadonly scrollWidth: number;\n\treadonly scrollHeight: number;\n\n\treadonly scrollTopChanged: boolean;\n\treadonly scrollLeftChanged: boolean;\n\treadonly scrollWidthChanged: boolean;\n\treadonly scrollHeightChanged: boolean;\n}\n\nexport interface IContentSizeChangedEvent {\n\treadonly contentWidth: number;\n\treadonly contentHeight: number;\n\n\treadonly contentWidthChanged: boolean;\n\treadonly contentHeightChanged: boolean;\n}\n\n/**\n * @internal\n */\nexport interface ITriggerEditorOperationEvent {\n\tsource: string | null | undefined;\n\thandlerId: string;\n\tpayload: unknown;\n}\n\nexport interface INewScrollPosition {\n\tscrollLeft?: number;\n\tscrollTop?: number;\n}\n\nexport interface IEditorAction {\n\treadonly id: string;\n\treadonly label: string;\n\treadonly alias: string;\n\treadonly metadata: ICommandMetadata | undefined;\n\tisSupported(): boolean;\n\trun(args?: unknown): Promise<void>;\n}\n\nexport type IEditorModel = ITextModel | IDiffEditorModel | IDiffEditorViewModel;\n\n/**\n * A (serializable) state of the cursors.\n */\nexport interface ICursorState {\n\tinSelectionMode: boolean;\n\tselectionStart: IPosition;\n\tposition: IPosition;\n}\n/**\n * A (serializable) state of the view.\n */\nexport interface IViewState {\n\t/** written by previous versions */\n\tscrollTop?: number;\n\t/** written by previous versions */\n\tscrollTopWithoutViewZones?: number;\n\tscrollLeft: number;\n\tfirstPosition: IPosition;\n\tfirstPositionDeltaTop: number;\n}\n/**\n * A (serializable) state of the code editor.\n */\nexport interface ICodeEditorViewState {\n\tcursorState: ICursorState[];\n\tviewState: IViewState;\n\tcontributionsState: { [id: string]: any };\n}\n/**\n * (Serializable) View state for the diff editor.\n */\nexport interface IDiffEditorViewState {\n\toriginal: ICodeEditorViewState | null;\n\tmodified: ICodeEditorViewState | null;\n\tmodelState?: unknown;\n}\n/**\n * An editor view state.\n */\nexport type IEditorViewState = ICodeEditorViewState | IDiffEditorViewState;\n\nexport const enum ScrollType {\n\tSmooth = 0,\n\tImmediate = 1,\n}\n\n/**\n * An editor.\n */\nexport interface IEditor {\n\t/**\n\t * An event emitted when the editor has been disposed.\n\t * @event\n\t */\n\tonDidDispose(listener: () => void): IDisposable;\n\n\t/**\n\t * Dispose the editor.\n\t */\n\tdispose(): void;\n\n\t/**\n\t * Get a unique id for this editor instance.\n\t */\n\tgetId(): string;\n\n\t/**\n\t * Get the editor type. Please see `EditorType`.\n\t * This is to avoid an instanceof check\n\t */\n\tgetEditorType(): string;\n\n\t/**\n\t * Update the editor's options after the editor has been created.\n\t */\n\tupdateOptions(newOptions: IEditorOptions): void;\n\n\t/**\n\t * Instructs the editor to remeasure its container. This method should\n\t * be called when the container of the editor gets resized.\n\t *\n\t * If a dimension is passed in, the passed in value will be used.\n\t *\n\t * By default, this will also render the editor immediately.\n\t * If you prefer to delay rendering to the next animation frame, use postponeRendering == true.\n\t */\n\tlayout(dimension?: IDimension, postponeRendering?: boolean): void;\n\n\t/**\n\t * Brings browser focus to the editor text\n\t */\n\tfocus(): void;\n\n\t/**\n\t * Returns true if the text inside this editor is focused (i.e. cursor is blinking).\n\t */\n\thasTextFocus(): boolean;\n\n\t/**\n\t * Returns all actions associated with this editor.\n\t */\n\tgetSupportedActions(): IEditorAction[];\n\n\t/**\n\t * Saves current view state of the editor in a serializable object.\n\t */\n\tsaveViewState(): IEditorViewState | null;\n\n\t/**\n\t * Restores the view state of the editor from a serializable object generated by `saveViewState`.\n\t */\n\trestoreViewState(state: IEditorViewState | null): void;\n\n\t/**\n\t * Given a position, returns a column number that takes tab-widths into account.\n\t */\n\tgetVisibleColumnFromPosition(position: IPosition): number;\n\n\t/**\n\t * Returns the primary position of the cursor.\n\t */\n\tgetPosition(): Position | null;\n\n\t/**\n\t * Set the primary position of the cursor. This will remove any secondary cursors.\n\t * @param position New primary cursor's position\n\t * @param source Source of the call that caused the position\n\t */\n\tsetPosition(position: IPosition, source?: string): void;\n\n\t/**\n\t * Scroll vertically as necessary and reveal a line.\n\t */\n\trevealLine(lineNumber: number, scrollType?: ScrollType): void;\n\n\t/**\n\t * Scroll vertically as necessary and reveal a line centered vertically.\n\t */\n\trevealLineInCenter(lineNumber: number, scrollType?: ScrollType): void;\n\n\t/**\n\t * Scroll vertically as necessary and reveal a line centered vertically only if it lies outside the viewport.\n\t */\n\trevealLineInCenterIfOutsideViewport(lineNumber: number, scrollType?: ScrollType): void;\n\n\t/**\n\t * Scroll vertically as necessary and reveal a line close to the top of the viewport,\n\t * optimized for viewing a code definition.\n\t */\n\trevealLineNearTop(lineNumber: number, scrollType?: ScrollType): void;\n\n\t/**\n\t * Scroll vertically or horizontally as necessary and reveal a position.\n\t */\n\trevealPosition(position: IPosition, scrollType?: ScrollType): void;\n\n\t/**\n\t * Scroll vertically or horizontally as necessary and reveal a position centered vertically.\n\t */\n\trevealPositionInCenter(position: IPosition, scrollType?: ScrollType): void;\n\n\t/**\n\t * Scroll vertically or horizontally as necessary and reveal a position centered vertically only if it lies outside the viewport.\n\t */\n\trevealPositionInCenterIfOutsideViewport(position: IPosition, scrollType?: ScrollType): void;\n\n\t/**\n\t * Scroll vertically or horizontally as necessary and reveal a position close to the top of the viewport,\n\t * optimized for viewing a code definition.\n\t */\n\trevealPositionNearTop(position: IPosition, scrollType?: ScrollType): void;\n\n\t/**\n\t * Returns the primary selection of the editor.\n\t */\n\tgetSelection(): Selection | null;\n\n\t/**\n\t * Returns all the selections of the editor.\n\t */\n\tgetSelections(): Selection[] | null;\n\n\t/**\n\t * Set the primary selection of the editor. This will remove any secondary cursors.\n\t * @param selection The new selection\n\t * @param source Source of the call that caused the selection\n\t */\n\tsetSelection(selection: IRange, source?: string): void;\n\t/**\n\t * Set the primary selection of the editor. This will remove any secondary cursors.\n\t * @param selection The new selection\n\t * @param source Source of the call that caused the selection\n\t */\n\tsetSelection(selection: Range, source?: string): void;\n\t/**\n\t * Set the primary selection of the editor. This will remove any secondary cursors.\n\t * @param selection The new selection\n\t * @param source Source of the call that caused the selection\n\t */\n\tsetSelection(selection: ISelection, source?: string): void;\n\t/**\n\t * Set the primary selection of the editor. This will remove any secondary cursors.\n\t * @param selection The new selection\n\t * @param source Source of the call that caused the selection\n\t */\n\tsetSelection(selection: Selection, source?: string): void;\n\n\t/**\n\t * Set the selections for all the cursors of the editor.\n\t * Cursors will be removed or added, as necessary.\n\t * @param selections The new selection\n\t * @param source Source of the call that caused the selection\n\t */\n\tsetSelections(selections: readonly ISelection[], source?: string): void;\n\n\t/**\n\t * Scroll vertically as necessary and reveal lines.\n\t */\n\trevealLines(startLineNumber: number, endLineNumber: number, scrollType?: ScrollType): void;\n\n\t/**\n\t * Scroll vertically as necessary and reveal lines centered vertically.\n\t */\n\trevealLinesInCenter(lineNumber: number, endLineNumber: number, scrollType?: ScrollType): void;\n\n\t/**\n\t * Scroll vertically as necessary and reveal lines centered vertically only if it lies outside the viewport.\n\t */\n\trevealLinesInCenterIfOutsideViewport(lineNumber: number, endLineNumber: number, scrollType?: ScrollType): void;\n\n\t/**\n\t * Scroll vertically as necessary and reveal lines close to the top of the viewport,\n\t * optimized for viewing a code definition.\n\t */\n\trevealLinesNearTop(lineNumber: number, endLineNumber: number, scrollType?: ScrollType): void;\n\n\t/**\n\t * Scroll vertically or horizontally as necessary and reveal a range.\n\t */\n\trevealRange(range: IRange, scrollType?: ScrollType): void;\n\n\t/**\n\t * Scroll vertically or horizontally as necessary and reveal a range centered vertically.\n\t */\n\trevealRangeInCenter(range: IRange, scrollType?: ScrollType): void;\n\n\t/**\n\t * Scroll vertically or horizontally as necessary and reveal a range at the top of the viewport.\n\t */\n\trevealRangeAtTop(range: IRange, scrollType?: ScrollType): void;\n\n\t/**\n\t * Scroll vertically or horizontally as necessary and reveal a range centered vertically only if it lies outside the viewport.\n\t */\n\trevealRangeInCenterIfOutsideViewport(range: IRange, scrollType?: ScrollType): void;\n\n\t/**\n\t * Scroll vertically or horizontally as necessary and reveal a range close to the top of the viewport,\n\t * optimized for viewing a code definition.\n\t */\n\trevealRangeNearTop(range: IRange, scrollType?: ScrollType): void;\n\n\t/**\n\t * Scroll vertically or horizontally as necessary and reveal a range close to the top of the viewport,\n\t * optimized for viewing a code definition. Only if it lies outside the viewport.\n\t */\n\trevealRangeNearTopIfOutsideViewport(range: IRange, scrollType?: ScrollType): void;\n\n\t/**\n\t * Directly trigger a handler or an editor action.\n\t * @param source The source of the call.\n\t * @param handlerId The id of the handler or the id of a contribution.\n\t * @param payload Extra data to be sent to the handler.\n\t */\n\ttrigger(source: string | null | undefined, handlerId: string, payload: any): void;\n\n\t/**\n\t * Gets the current model attached to this editor.\n\t */\n\tgetModel(): IEditorModel | null;\n\n\t/**\n\t * Sets the current model attached to this editor.\n\t * If the previous model was created by the editor via the value key in the options\n\t * literal object, it will be destroyed. Otherwise, if the previous model was set\n\t * via setModel, or the model key in the options literal object, the previous model\n\t * will not be destroyed.\n\t * It is safe to call setModel(null) to simply detach the current model from the editor.\n\t */\n\tsetModel(model: IEditorModel | null): void;\n\n\t/**\n\t * Create a collection of decorations. All decorations added through this collection\n\t * will get the ownerId of the editor (meaning they will not show up in other editors).\n\t * These decorations will be automatically cleared when the editor's model changes.\n\t */\n\tcreateDecorationsCollection(decorations?: IModelDeltaDecoration[]): IEditorDecorationsCollection;\n\n\t/**\n\t * Change the decorations. All decorations added through this changeAccessor\n\t * will get the ownerId of the editor (meaning they will not show up in other\n\t * editors).\n\t * @see {@link ITextModel.changeDecorations}\n\t * @internal\n\t */\n\tchangeDecorations(callback: (changeAccessor: IModelDecorationsChangeAccessor) => any): any;\n}\n\n/**\n * A diff editor.\n *\n * @internal\n */\nexport interface IDiffEditor extends IEditor {\n\n\t/**\n\t * Type the getModel() of IEditor.\n\t */\n\tgetModel(): IDiffEditorModel | null;\n}\n\n/**\n * @internal\n */\nexport interface ICompositeCodeEditor {\n\n\t/**\n\t * An event that signals that the active editor has changed\n\t */\n\treadonly onDidChangeActiveEditor: Event<ICompositeCodeEditor>;\n\n\t/**\n\t * The active code editor iff any\n\t */\n\treadonly activeCodeEditor: IEditor | undefined;\n\t// readonly editors: readonly ICodeEditor[] maybe supported with uris\n}\n\n/**\n * A collection of decorations\n */\nexport interface IEditorDecorationsCollection {\n\t/**\n\t * An event emitted when decorations change in the editor,\n\t * but the change is not caused by us setting or clearing the collection.\n\t */\n\tonDidChange: Event<IModelDecorationsChangedEvent>;\n\t/**\n\t * Get the decorations count.\n\t */\n\tlength: number;\n\t/**\n\t * Get the range for a decoration.\n\t */\n\tgetRange(index: number): Range | null;\n\t/**\n\t * Get all ranges for decorations.\n\t */\n\tgetRanges(): Range[];\n\t/**\n\t * Determine if a decoration is in this collection.\n\t */\n\thas(decoration: IModelDecoration): boolean;\n\t/**\n\t * Replace all previous decorations with `newDecorations`.\n\t */\n\tset(newDecorations: readonly IModelDeltaDecoration[]): string[];\n\t/**\n\t * Append `newDecorations` to this collection.\n\t */\n\tappend(newDecorations: readonly IModelDeltaDecoration[]): string[];\n\t/**\n\t * Remove all previous decorations.\n\t */\n\tclear(): void;\n}\n\n/**\n * An editor contribution that gets created every time a new editor gets created and gets disposed when the editor gets disposed.\n */\nexport interface IEditorContribution {\n\t/**\n\t * Dispose this contribution.\n\t */\n\tdispose(): void;\n\t/**\n\t * Store view state.\n\t */\n\tsaveViewState?(): any;\n\t/**\n\t * Restore view state.\n\t */\n\trestoreViewState?(state: any): void;\n}\n\n/**\n * A diff editor contribution that gets created every time a new  diffeditor gets created and gets disposed when the diff editor gets disposed.\n * @internal\n */\nexport interface IDiffEditorContribution {\n\t/**\n\t * Dispose this contribution.\n\t */\n\tdispose(): void;\n}\n\n/**\n * The type of the `IEditor`.\n */\nexport const EditorType = {\n\tICodeEditor: 'vs.editor.ICodeEditor',\n\tIDiffEditor: 'vs.editor.IDiffEditor'\n};\n\n/**\n * Built-in commands.\n * @internal\n */\nexport const enum Handler {\n\tCompositionStart = 'compositionStart',\n\tCompositionEnd = 'compositionEnd',\n\tType = 'type',\n\tReplacePreviousChar = 'replacePreviousChar',\n\tCompositionType = 'compositionType',\n\tPaste = 'paste',\n\tCut = 'cut',\n}\n\n/**\n * @internal\n */\nexport interface TypePayload {\n\ttext: string;\n}\n\n/**\n * @internal\n */\nexport interface ReplacePreviousCharPayload {\n\ttext: string;\n\treplaceCharCnt: number;\n}\n\n/**\n * @internal\n */\nexport interface CompositionTypePayload {\n\ttext: string;\n\treplacePrevCharCnt: number;\n\treplaceNextCharCnt: number;\n\tpositionDelta: number;\n}\n"],"names":[],"mappings":"AAAA;;;gGAGgG,CA+jBhG;;GAEG;;;;AACI,MAAM,UAAU,GAAG;IACzB,WAAW,EAAE,uBAAuB;IACpC,WAAW,EAAE,uBAAuB;CACpC,CAAC","debugId":null}},
    {"offset": {"line": 4375, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/monaco-editor/esm/vs/editor/common/textModelBracketPairs.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/file%3A/mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/textModelBracketPairs.ts","file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/vs/editor/common/textModelBracketPairs.ts"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CallbackIterable } from '../../base/common/arrays.js';\nimport { Event } from '../../base/common/event.js';\nimport { IPosition } from './core/position.js';\nimport { IRange, Range } from './core/range.js';\nimport { ClosingBracketKind, OpeningBracketKind } from './languages/supports/languageBracketsConfiguration.js';\nimport { PairAstNode } from './model/bracketPairsTextModelPart/bracketPairsTree/ast.js';\n\nexport interface IBracketPairsTextModelPart {\n\t/**\n\t * Is fired when bracket pairs change, either due to a text or a settings change.\n\t*/\n\tonDidChange: Event<void>;\n\n\t/**\n\t * Gets all bracket pairs that intersect the given position.\n\t * The result is sorted by the start position.\n\t */\n\tgetBracketPairsInRange(range: IRange): CallbackIterable<BracketPairInfo>;\n\n\t/**\n\t * Gets all bracket pairs that intersect the given position.\n\t * The result is sorted by the start position.\n\t */\n\tgetBracketPairsInRangeWithMinIndentation(range: IRange): CallbackIterable<BracketPairWithMinIndentationInfo>;\n\n\tgetBracketsInRange(range: IRange, onlyColorizedBrackets?: boolean): CallbackIterable<BracketInfo>;\n\n\t/**\n\t * Find the matching bracket of `request` up, counting brackets.\n\t * @param request The bracket we're searching for\n\t * @param position The position at which to start the search.\n\t * @return The range of the matching bracket, or null if the bracket match was not found.\n\t */\n\tfindMatchingBracketUp(bracket: string, position: IPosition, maxDuration?: number): Range | null;\n\n\t/**\n\t * Find the first bracket in the model before `position`.\n\t * @param position The position at which to start the search.\n\t * @return The info for the first bracket before `position`, or null if there are no more brackets before `positions`.\n\t */\n\tfindPrevBracket(position: IPosition): IFoundBracket | null;\n\n\t/**\n\t * Find the first bracket in the model after `position`.\n\t * @param position The position at which to start the search.\n\t * @return The info for the first bracket after `position`, or null if there are no more brackets after `positions`.\n\t */\n\tfindNextBracket(position: IPosition): IFoundBracket | null;\n\n\t/**\n\t * Find the enclosing brackets that contain `position`.\n\t * @param position The position at which to start the search.\n\t */\n\tfindEnclosingBrackets(position: IPosition, maxDuration?: number): [Range, Range] | null;\n\n\t/**\n\t * Given a `position`, if the position is on top or near a bracket,\n\t * find the matching bracket of that bracket and return the ranges of both brackets.\n\t * @param position The position at which to look for a bracket.\n\t */\n\tmatchBracket(position: IPosition, maxDuration?: number): [Range, Range] | null;\n}\n\nexport interface IFoundBracket {\n\trange: Range;\n\tbracketInfo: OpeningBracketKind | ClosingBracketKind;\n}\n\nexport class BracketInfo {\n\tconstructor(\n\t\tpublic readonly range: Range,\n\t\t/** 0-based level */\n\t\tpublic readonly nestingLevel: number,\n\t\tpublic readonly nestingLevelOfEqualBracketType: number,\n\t\tpublic readonly isInvalid: boolean,\n\t) { }\n}\n\nexport class BracketPairInfo {\n\tconstructor(\n\t\tpublic readonly range: Range,\n\t\tpublic readonly openingBracketRange: Range,\n\t\tpublic readonly closingBracketRange: Range | undefined,\n\t\t/** 0-based */\n\t\tpublic readonly nestingLevel: number,\n\t\tpublic readonly nestingLevelOfEqualBracketType: number,\n\t\tprivate readonly bracketPairNode: PairAstNode,\n\n\t) {\n\t}\n\n\tpublic get openingBracketInfo(): OpeningBracketKind {\n\t\treturn this.bracketPairNode.openingBracket.bracketInfo as OpeningBracketKind;\n\t}\n}\n\nexport class BracketPairWithMinIndentationInfo extends BracketPairInfo {\n\tconstructor(\n\t\trange: Range,\n\t\topeningBracketRange: Range,\n\t\tclosingBracketRange: Range | undefined,\n\t\t/**\n\t\t * 0-based\n\t\t*/\n\t\tnestingLevel: number,\n\t\tnestingLevelOfEqualBracketType: number,\n\t\tbracketPairNode: PairAstNode,\n\t\t/**\n\t\t * -1 if not requested, otherwise the size of the minimum indentation in the bracket pair in terms of visible columns.\n\t\t*/\n\t\tpublic readonly minVisibleColumnIndentation: number,\n\t) {\n\t\tsuper(range, openingBracketRange, closingBracketRange, nestingLevel, nestingLevelOfEqualBracketType, bracketPairNode);\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CallbackIterable } from '../../base/common/arrays.js';\nimport { Event } from '../../base/common/event.js';\nimport { IPosition } from './core/position.js';\nimport { IRange, Range } from './core/range.js';\nimport { ClosingBracketKind, OpeningBracketKind } from './languages/supports/languageBracketsConfiguration.js';\nimport { PairAstNode } from './model/bracketPairsTextModelPart/bracketPairsTree/ast.js';\n\nexport interface IBracketPairsTextModelPart {\n\t/**\n\t * Is fired when bracket pairs change, either due to a text or a settings change.\n\t*/\n\tonDidChange: Event<void>;\n\n\t/**\n\t * Gets all bracket pairs that intersect the given position.\n\t * The result is sorted by the start position.\n\t */\n\tgetBracketPairsInRange(range: IRange): CallbackIterable<BracketPairInfo>;\n\n\t/**\n\t * Gets all bracket pairs that intersect the given position.\n\t * The result is sorted by the start position.\n\t */\n\tgetBracketPairsInRangeWithMinIndentation(range: IRange): CallbackIterable<BracketPairWithMinIndentationInfo>;\n\n\tgetBracketsInRange(range: IRange, onlyColorizedBrackets?: boolean): CallbackIterable<BracketInfo>;\n\n\t/**\n\t * Find the matching bracket of `request` up, counting brackets.\n\t * @param request The bracket we're searching for\n\t * @param position The position at which to start the search.\n\t * @return The range of the matching bracket, or null if the bracket match was not found.\n\t */\n\tfindMatchingBracketUp(bracket: string, position: IPosition, maxDuration?: number): Range | null;\n\n\t/**\n\t * Find the first bracket in the model before `position`.\n\t * @param position The position at which to start the search.\n\t * @return The info for the first bracket before `position`, or null if there are no more brackets before `positions`.\n\t */\n\tfindPrevBracket(position: IPosition): IFoundBracket | null;\n\n\t/**\n\t * Find the first bracket in the model after `position`.\n\t * @param position The position at which to start the search.\n\t * @return The info for the first bracket after `position`, or null if there are no more brackets after `positions`.\n\t */\n\tfindNextBracket(position: IPosition): IFoundBracket | null;\n\n\t/**\n\t * Find the enclosing brackets that contain `position`.\n\t * @param position The position at which to start the search.\n\t */\n\tfindEnclosingBrackets(position: IPosition, maxDuration?: number): [Range, Range] | null;\n\n\t/**\n\t * Given a `position`, if the position is on top or near a bracket,\n\t * find the matching bracket of that bracket and return the ranges of both brackets.\n\t * @param position The position at which to look for a bracket.\n\t */\n\tmatchBracket(position: IPosition, maxDuration?: number): [Range, Range] | null;\n}\n\nexport interface IFoundBracket {\n\trange: Range;\n\tbracketInfo: OpeningBracketKind | ClosingBracketKind;\n}\n\nexport class BracketInfo {\n\tconstructor(\n\t\tpublic readonly range: Range,\n\t\t/** 0-based level */\n\t\tpublic readonly nestingLevel: number,\n\t\tpublic readonly nestingLevelOfEqualBracketType: number,\n\t\tpublic readonly isInvalid: boolean,\n\t) { }\n}\n\nexport class BracketPairInfo {\n\tconstructor(\n\t\tpublic readonly range: Range,\n\t\tpublic readonly openingBracketRange: Range,\n\t\tpublic readonly closingBracketRange: Range | undefined,\n\t\t/** 0-based */\n\t\tpublic readonly nestingLevel: number,\n\t\tpublic readonly nestingLevelOfEqualBracketType: number,\n\t\tprivate readonly bracketPairNode: PairAstNode,\n\n\t) {\n\t}\n\n\tpublic get openingBracketInfo(): OpeningBracketKind {\n\t\treturn this.bracketPairNode.openingBracket.bracketInfo as OpeningBracketKind;\n\t}\n}\n\nexport class BracketPairWithMinIndentationInfo extends BracketPairInfo {\n\tconstructor(\n\t\trange: Range,\n\t\topeningBracketRange: Range,\n\t\tclosingBracketRange: Range | undefined,\n\t\t/**\n\t\t * 0-based\n\t\t*/\n\t\tnestingLevel: number,\n\t\tnestingLevelOfEqualBracketType: number,\n\t\tbracketPairNode: PairAstNode,\n\t\t/**\n\t\t * -1 if not requested, otherwise the size of the minimum indentation in the bracket pair in terms of visible columns.\n\t\t*/\n\t\tpublic readonly minVisibleColumnIndentation: number,\n\t) {\n\t\tsuper(range, openingBracketRange, closingBracketRange, nestingLevel, nestingLevelOfEqualBracketType, bracketPairNode);\n\t}\n}\n"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;AAsE1F,MAAO,WAAW;IACvB,YACiB,KAAY,EAC5B,kBAAA,EAAoB,CACJ,YAAoB,EACpB,8BAAsC,EACtC,SAAkB,CAAA;QAJlB,IAAA,CAAA,KAAK,GAAL,KAAK,CAAO;QAEZ,IAAA,CAAA,YAAY,GAAZ,YAAY,CAAQ;QACpB,IAAA,CAAA,8BAA8B,GAA9B,8BAA8B,CAAQ;QACtC,IAAA,CAAA,SAAS,GAAT,SAAS,CAAS;IAC/B,CAAC;CACL;AAEK,MAAO,eAAe;IAC3B,YACiB,KAAY,EACZ,mBAA0B,EAC1B,mBAAsC,EACtD,YAAA,EAAc,CACE,YAAoB,EACpB,8BAAsC,EACrC,eAA4B,CAAA;QAN7B,IAAA,CAAA,KAAK,GAAL,KAAK,CAAO;QACZ,IAAA,CAAA,mBAAmB,GAAnB,mBAAmB,CAAO;QAC1B,IAAA,CAAA,mBAAmB,GAAnB,mBAAmB,CAAmB;QAEtC,IAAA,CAAA,YAAY,GAAZ,YAAY,CAAQ;QACpB,IAAA,CAAA,8BAA8B,GAA9B,8BAA8B,CAAQ;QACrC,IAAA,CAAA,eAAe,GAAf,eAAe,CAAa;IAG9C,CAAC;IAED,IAAW,kBAAkB,GAAA;QAC5B,OAAO,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,WAAiC,CAAC;IAC9E,CAAC;CACD;AAEK,MAAO,iCAAkC,SAAQ,eAAe;IACrE,YACC,KAAY,EACZ,mBAA0B,EAC1B,mBAAsC,EACtC;;MAEE,CACF,YAAoB,EACpB,8BAAsC,EACtC,eAA4B,EAC5B;;MAEE,CACc,2BAAmC,CAAA;QAEnD,KAAK,CAAC,KAAK,EAAE,mBAAmB,EAAE,mBAAmB,EAAE,YAAY,EAAE,8BAA8B,EAAE,eAAe,CAAC,CAAC;QAFtG,IAAA,CAAA,2BAA2B,GAA3B,2BAA2B,CAAQ;IAGpD,CAAC;CACD","debugId":null}},
    {"offset": {"line": 4421, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/monaco-editor/esm/vs/editor/common/textModelEditSource.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/file%3A/mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/textModelEditSource.ts","file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/vs/editor/common/textModelEditSource.ts"],"sourcesContent":["\nimport { prefixedUuid } from '../../base/common/uuid.js';\nimport { ProviderId, VersionedExtensionId } from './languages.js';\n\nconst privateSymbol = Symbol('TextModelEditSource');\n\nexport class TextModelEditSource {\n\tconstructor(\n\t\tpublic readonly metadata: ITextModelEditSourceMetadata,\n\t\t_privateCtorGuard: typeof privateSymbol,\n\t) { }\n\n\tpublic toString(): string {\n\t\treturn `${this.metadata.source}`;\n\t}\n\n\tpublic getType(): string {\n\t\tconst metadata = this.metadata;\n\t\tswitch (metadata.source) {\n\t\t\tcase 'cursor':\n\t\t\t\treturn metadata.kind;\n\t\t\tcase 'inlineCompletionAccept':\n\t\t\t\treturn metadata.source + (metadata.$nes ? ':nes' : '');\n\t\t\tcase 'unknown':\n\t\t\t\treturn metadata.name || 'unknown';\n\t\t\tdefault:\n\t\t\t\treturn metadata.source;\n\t\t}\n\t}\n\n\t/**\n\t * Converts the metadata to a key string.\n\t * Only includes properties/values that have `level` many `$` prefixes or less.\n\t*/\n\tpublic toKey(level: number, filter: { [TKey in ITextModelEditSourceMetadataKeys]?: boolean } = {}): string {\n\t\tconst metadata = this.metadata;\n\t\tconst keys = Object.entries(metadata).filter(([key, value]) => {\n\t\t\tconst filterVal = (filter as Record<string, boolean>)[key];\n\t\t\tif (filterVal !== undefined) {\n\t\t\t\treturn filterVal;\n\t\t\t}\n\n\t\t\tconst prefixCount = (key.match(/\\$/g) || []).length;\n\t\t\treturn prefixCount <= level && value !== undefined && value !== null && value !== '';\n\t\t}).map(([key, value]) => `${key}:${value}`);\n\t\treturn keys.join('-');\n\t}\n}\n\ntype TextModelEditSourceT<T> = TextModelEditSource & {\n\tmetadataT: T;\n};\n\nfunction createEditSource<T extends Record<string, any>>(metadata: T): TextModelEditSourceT<T> {\n\treturn new TextModelEditSource(metadata as any, privateSymbol) as any;\n}\n\nexport const EditSources = {\n\tunknown(data: { name?: string | null }) {\n\t\treturn createEditSource({\n\t\t\tsource: 'unknown',\n\t\t\tname: data.name,\n\t\t} as const);\n\t},\n\n\trename: () => createEditSource({ source: 'rename' } as const),\n\n\tchatApplyEdits(data: {\n\t\tmodelId: string | undefined;\n\t\tsessionId: string | undefined;\n\t\trequestId: string | undefined;\n\t\tlanguageId: string;\n\t\tmode: string | undefined;\n\t\textensionId: VersionedExtensionId | undefined;\n\t\tcodeBlockSuggestionId: EditSuggestionId | undefined;\n\t}) {\n\t\treturn createEditSource({\n\t\t\tsource: 'Chat.applyEdits',\n\t\t\t$modelId: avoidPathRedaction(data.modelId),\n\t\t\t$extensionId: data.extensionId?.extensionId,\n\t\t\t$extensionVersion: data.extensionId?.version,\n\t\t\t$$languageId: data.languageId,\n\t\t\t$$sessionId: data.sessionId,\n\t\t\t$$requestId: data.requestId,\n\t\t\t$$mode: data.mode,\n\t\t\t$$codeBlockSuggestionId: data.codeBlockSuggestionId,\n\t\t} as const);\n\t},\n\n\tchatUndoEdits: () => createEditSource({ source: 'Chat.undoEdits' } as const),\n\tchatReset: () => createEditSource({ source: 'Chat.reset' } as const),\n\n\tinlineCompletionAccept(data: { nes: boolean; requestUuid: string; languageId: string; providerId?: ProviderId }) {\n\t\treturn createEditSource({\n\t\t\tsource: 'inlineCompletionAccept',\n\t\t\t$nes: data.nes,\n\t\t\t...toProperties(data.providerId),\n\t\t\t$$requestUuid: data.requestUuid,\n\t\t\t$$languageId: data.languageId,\n\t\t} as const);\n\t},\n\n\tinlineCompletionPartialAccept(data: { nes: boolean; requestUuid: string; languageId: string; providerId?: ProviderId; type: 'word' | 'line' }) {\n\t\treturn createEditSource({\n\t\t\tsource: 'inlineCompletionPartialAccept',\n\t\t\ttype: data.type,\n\t\t\t$nes: data.nes,\n\t\t\t...toProperties(data.providerId),\n\t\t\t$$requestUuid: data.requestUuid,\n\t\t\t$$languageId: data.languageId,\n\t\t} as const);\n\t},\n\n\tinlineChatApplyEdit(data: { modelId: string | undefined; requestId: string | undefined; languageId: string; extensionId: VersionedExtensionId | undefined }) {\n\t\treturn createEditSource({\n\t\t\tsource: 'inlineChat.applyEdits',\n\t\t\t$modelId: avoidPathRedaction(data.modelId),\n\t\t\t$extensionId: data.extensionId?.extensionId,\n\t\t\t$extensionVersion: data.extensionId?.version,\n\t\t\t$$requestId: data.requestId,\n\t\t\t$$languageId: data.languageId,\n\t\t} as const);\n\t},\n\n\treloadFromDisk: () => createEditSource({ source: 'reloadFromDisk' } as const),\n\n\tcursor(data: { kind: 'compositionType' | 'compositionEnd' | 'type' | 'paste' | 'cut' | 'executeCommands' | 'executeCommand'; detailedSource?: string | null }) {\n\t\treturn createEditSource({\n\t\t\tsource: 'cursor',\n\t\t\tkind: data.kind,\n\t\t\tdetailedSource: data.detailedSource,\n\t\t} as const);\n\t},\n\n\tsetValue: () => createEditSource({ source: 'setValue' } as const),\n\teolChange: () => createEditSource({ source: 'eolChange' } as const),\n\tapplyEdits: () => createEditSource({ source: 'applyEdits' } as const),\n\tsnippet: () => createEditSource({ source: 'snippet' } as const),\n\tsuggest: (data: { providerId: ProviderId | undefined }) => createEditSource({ source: 'suggest', ...toProperties(data.providerId) } as const),\n\n\tcodeAction: (data: { kind: string | undefined; providerId: ProviderId | undefined }) => createEditSource({ source: 'codeAction', $kind: data.kind, ...toProperties(data.providerId) } as const)\n};\n\nfunction toProperties(version: ProviderId | undefined) {\n\tif (!version) {\n\t\treturn {};\n\t}\n\treturn {\n\t\t$extensionId: version.extensionId,\n\t\t$extensionVersion: version.extensionVersion,\n\t\t$providerId: version.providerId,\n\t};\n}\n\ntype Values<T> = T[keyof T];\nexport type ITextModelEditSourceMetadata = Values<{ [TKey in keyof typeof EditSources]: ReturnType<typeof EditSources[TKey]>['metadataT'] }>;\ntype ITextModelEditSourceMetadataKeys = Values<{ [TKey in keyof typeof EditSources]: keyof ReturnType<typeof EditSources[TKey]>['metadataT'] }>;\n\n\nfunction avoidPathRedaction(str: string | undefined): string | undefined {\n\tif (str === undefined) {\n\t\treturn undefined;\n\t}\n\t// To avoid false-positive file path redaction.\n\treturn str.replaceAll('/', '|');\n}\n\n\n/**\n * This is an opaque serializable type that represents a unique identity for an edit.\n */\nexport interface EditSuggestionId {\n}\n\nexport namespace EditSuggestionId {\n\t/**\n\t * Use AiEditTelemetryServiceImpl to create a new id!\n\t*/\n\texport function newId(): EditSuggestionId {\n\t\tconst id = prefixedUuid('sgt');\n\t\treturn toEditIdentity(id);\n\t}\n}\n\nfunction toEditIdentity(id: string): EditSuggestionId {\n\treturn id as unknown as EditSuggestionId;\n}\n","\nimport { prefixedUuid } from '../../base/common/uuid.js';\nimport { ProviderId, VersionedExtensionId } from './languages.js';\n\nconst privateSymbol = Symbol('TextModelEditSource');\n\nexport class TextModelEditSource {\n\tconstructor(\n\t\tpublic readonly metadata: ITextModelEditSourceMetadata,\n\t\t_privateCtorGuard: typeof privateSymbol,\n\t) { }\n\n\tpublic toString(): string {\n\t\treturn `${this.metadata.source}`;\n\t}\n\n\tpublic getType(): string {\n\t\tconst metadata = this.metadata;\n\t\tswitch (metadata.source) {\n\t\t\tcase 'cursor':\n\t\t\t\treturn metadata.kind;\n\t\t\tcase 'inlineCompletionAccept':\n\t\t\t\treturn metadata.source + (metadata.$nes ? ':nes' : '');\n\t\t\tcase 'unknown':\n\t\t\t\treturn metadata.name || 'unknown';\n\t\t\tdefault:\n\t\t\t\treturn metadata.source;\n\t\t}\n\t}\n\n\t/**\n\t * Converts the metadata to a key string.\n\t * Only includes properties/values that have `level` many `$` prefixes or less.\n\t*/\n\tpublic toKey(level: number, filter: { [TKey in ITextModelEditSourceMetadataKeys]?: boolean } = {}): string {\n\t\tconst metadata = this.metadata;\n\t\tconst keys = Object.entries(metadata).filter(([key, value]) => {\n\t\t\tconst filterVal = (filter as Record<string, boolean>)[key];\n\t\t\tif (filterVal !== undefined) {\n\t\t\t\treturn filterVal;\n\t\t\t}\n\n\t\t\tconst prefixCount = (key.match(/\\$/g) || []).length;\n\t\t\treturn prefixCount <= level && value !== undefined && value !== null && value !== '';\n\t\t}).map(([key, value]) => `${key}:${value}`);\n\t\treturn keys.join('-');\n\t}\n}\n\ntype TextModelEditSourceT<T> = TextModelEditSource & {\n\tmetadataT: T;\n};\n\nfunction createEditSource<T extends Record<string, any>>(metadata: T): TextModelEditSourceT<T> {\n\treturn new TextModelEditSource(metadata as any, privateSymbol) as any;\n}\n\nexport const EditSources = {\n\tunknown(data: { name?: string | null }) {\n\t\treturn createEditSource({\n\t\t\tsource: 'unknown',\n\t\t\tname: data.name,\n\t\t} as const);\n\t},\n\n\trename: () => createEditSource({ source: 'rename' } as const),\n\n\tchatApplyEdits(data: {\n\t\tmodelId: string | undefined;\n\t\tsessionId: string | undefined;\n\t\trequestId: string | undefined;\n\t\tlanguageId: string;\n\t\tmode: string | undefined;\n\t\textensionId: VersionedExtensionId | undefined;\n\t\tcodeBlockSuggestionId: EditSuggestionId | undefined;\n\t}) {\n\t\treturn createEditSource({\n\t\t\tsource: 'Chat.applyEdits',\n\t\t\t$modelId: avoidPathRedaction(data.modelId),\n\t\t\t$extensionId: data.extensionId?.extensionId,\n\t\t\t$extensionVersion: data.extensionId?.version,\n\t\t\t$$languageId: data.languageId,\n\t\t\t$$sessionId: data.sessionId,\n\t\t\t$$requestId: data.requestId,\n\t\t\t$$mode: data.mode,\n\t\t\t$$codeBlockSuggestionId: data.codeBlockSuggestionId,\n\t\t} as const);\n\t},\n\n\tchatUndoEdits: () => createEditSource({ source: 'Chat.undoEdits' } as const),\n\tchatReset: () => createEditSource({ source: 'Chat.reset' } as const),\n\n\tinlineCompletionAccept(data: { nes: boolean; requestUuid: string; languageId: string; providerId?: ProviderId }) {\n\t\treturn createEditSource({\n\t\t\tsource: 'inlineCompletionAccept',\n\t\t\t$nes: data.nes,\n\t\t\t...toProperties(data.providerId),\n\t\t\t$$requestUuid: data.requestUuid,\n\t\t\t$$languageId: data.languageId,\n\t\t} as const);\n\t},\n\n\tinlineCompletionPartialAccept(data: { nes: boolean; requestUuid: string; languageId: string; providerId?: ProviderId; type: 'word' | 'line' }) {\n\t\treturn createEditSource({\n\t\t\tsource: 'inlineCompletionPartialAccept',\n\t\t\ttype: data.type,\n\t\t\t$nes: data.nes,\n\t\t\t...toProperties(data.providerId),\n\t\t\t$$requestUuid: data.requestUuid,\n\t\t\t$$languageId: data.languageId,\n\t\t} as const);\n\t},\n\n\tinlineChatApplyEdit(data: { modelId: string | undefined; requestId: string | undefined; languageId: string; extensionId: VersionedExtensionId | undefined }) {\n\t\treturn createEditSource({\n\t\t\tsource: 'inlineChat.applyEdits',\n\t\t\t$modelId: avoidPathRedaction(data.modelId),\n\t\t\t$extensionId: data.extensionId?.extensionId,\n\t\t\t$extensionVersion: data.extensionId?.version,\n\t\t\t$$requestId: data.requestId,\n\t\t\t$$languageId: data.languageId,\n\t\t} as const);\n\t},\n\n\treloadFromDisk: () => createEditSource({ source: 'reloadFromDisk' } as const),\n\n\tcursor(data: { kind: 'compositionType' | 'compositionEnd' | 'type' | 'paste' | 'cut' | 'executeCommands' | 'executeCommand'; detailedSource?: string | null }) {\n\t\treturn createEditSource({\n\t\t\tsource: 'cursor',\n\t\t\tkind: data.kind,\n\t\t\tdetailedSource: data.detailedSource,\n\t\t} as const);\n\t},\n\n\tsetValue: () => createEditSource({ source: 'setValue' } as const),\n\teolChange: () => createEditSource({ source: 'eolChange' } as const),\n\tapplyEdits: () => createEditSource({ source: 'applyEdits' } as const),\n\tsnippet: () => createEditSource({ source: 'snippet' } as const),\n\tsuggest: (data: { providerId: ProviderId | undefined }) => createEditSource({ source: 'suggest', ...toProperties(data.providerId) } as const),\n\n\tcodeAction: (data: { kind: string | undefined; providerId: ProviderId | undefined }) => createEditSource({ source: 'codeAction', $kind: data.kind, ...toProperties(data.providerId) } as const)\n};\n\nfunction toProperties(version: ProviderId | undefined) {\n\tif (!version) {\n\t\treturn {};\n\t}\n\treturn {\n\t\t$extensionId: version.extensionId,\n\t\t$extensionVersion: version.extensionVersion,\n\t\t$providerId: version.providerId,\n\t};\n}\n\ntype Values<T> = T[keyof T];\nexport type ITextModelEditSourceMetadata = Values<{ [TKey in keyof typeof EditSources]: ReturnType<typeof EditSources[TKey]>['metadataT'] }>;\ntype ITextModelEditSourceMetadataKeys = Values<{ [TKey in keyof typeof EditSources]: keyof ReturnType<typeof EditSources[TKey]>['metadataT'] }>;\n\n\nfunction avoidPathRedaction(str: string | undefined): string | undefined {\n\tif (str === undefined) {\n\t\treturn undefined;\n\t}\n\t// To avoid false-positive file path redaction.\n\treturn str.replaceAll('/', '|');\n}\n\n\n/**\n * This is an opaque serializable type that represents a unique identity for an edit.\n */\nexport interface EditSuggestionId {\n}\n\nexport namespace EditSuggestionId {\n\t/**\n\t * Use AiEditTelemetryServiceImpl to create a new id!\n\t*/\n\texport function newId(): EditSuggestionId {\n\t\tconst id = prefixedUuid('sgt');\n\t\treturn toEditIdentity(id);\n\t}\n}\n\nfunction toEditIdentity(id: string): EditSuggestionId {\n\treturn id as unknown as EditSuggestionId;\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 4595, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/monaco-editor/esm/vs/editor/common/viewEvents.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/file%3A/mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/viewEvents.ts","file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/vs/editor/common/viewEvents.ts"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ScrollEvent } from '../../base/common/scrollable.js';\nimport { ConfigurationChangedEvent, EditorOption } from './config/editorOptions.js';\nimport { Range } from './core/range.js';\nimport { Selection } from './core/selection.js';\nimport { CursorChangeReason } from './cursorEvents.js';\nimport { ScrollType } from './editorCommon.js';\nimport { IModelDecorationsChangedEvent } from './textModelEvents.js';\nimport { IColorTheme } from '../../platform/theme/common/themeService.js';\n\nexport const enum ViewEventType {\n\tViewCompositionStart,\n\tViewCompositionEnd,\n\tViewConfigurationChanged,\n\tViewCursorStateChanged,\n\tViewDecorationsChanged,\n\tViewFlushed,\n\tViewFocusChanged,\n\tViewLanguageConfigurationChanged,\n\tViewLineMappingChanged,\n\tViewLinesChanged,\n\tViewLinesDeleted,\n\tViewLinesInserted,\n\tViewRevealRangeRequest,\n\tViewScrollChanged,\n\tViewThemeChanged,\n\tViewTokensChanged,\n\tViewTokensColorsChanged,\n\tViewZonesChanged,\n}\n\nexport class ViewCompositionStartEvent {\n\tpublic readonly type = ViewEventType.ViewCompositionStart;\n\tconstructor() { }\n}\n\nexport class ViewCompositionEndEvent {\n\tpublic readonly type = ViewEventType.ViewCompositionEnd;\n\tconstructor() { }\n}\n\nexport class ViewConfigurationChangedEvent {\n\n\tpublic readonly type = ViewEventType.ViewConfigurationChanged;\n\n\tpublic readonly _source: ConfigurationChangedEvent;\n\n\tconstructor(source: ConfigurationChangedEvent) {\n\t\tthis._source = source;\n\t}\n\n\tpublic hasChanged(id: EditorOption): boolean {\n\t\treturn this._source.hasChanged(id);\n\t}\n}\n\nexport class ViewCursorStateChangedEvent {\n\n\tpublic readonly type = ViewEventType.ViewCursorStateChanged;\n\n\tconstructor(\n\t\tpublic readonly selections: Selection[],\n\t\tpublic readonly modelSelections: Selection[],\n\t\tpublic readonly reason: CursorChangeReason\n\t) { }\n}\n\nexport class ViewDecorationsChangedEvent {\n\n\tpublic readonly type = ViewEventType.ViewDecorationsChanged;\n\n\treadonly affectsMinimap: boolean;\n\treadonly affectsOverviewRuler: boolean;\n\treadonly affectsGlyphMargin: boolean;\n\treadonly affectsLineNumber: boolean;\n\n\tconstructor(source: IModelDecorationsChangedEvent | null) {\n\t\tif (source) {\n\t\t\tthis.affectsMinimap = source.affectsMinimap;\n\t\t\tthis.affectsOverviewRuler = source.affectsOverviewRuler;\n\t\t\tthis.affectsGlyphMargin = source.affectsGlyphMargin;\n\t\t\tthis.affectsLineNumber = source.affectsLineNumber;\n\t\t} else {\n\t\t\tthis.affectsMinimap = true;\n\t\t\tthis.affectsOverviewRuler = true;\n\t\t\tthis.affectsGlyphMargin = true;\n\t\t\tthis.affectsLineNumber = true;\n\t\t}\n\t}\n}\n\nexport class ViewFlushedEvent {\n\n\tpublic readonly type = ViewEventType.ViewFlushed;\n\n\tconstructor() {\n\t\t// Nothing to do\n\t}\n}\n\nexport class ViewFocusChangedEvent {\n\n\tpublic readonly type = ViewEventType.ViewFocusChanged;\n\n\tpublic readonly isFocused: boolean;\n\n\tconstructor(isFocused: boolean) {\n\t\tthis.isFocused = isFocused;\n\t}\n}\n\nexport class ViewLanguageConfigurationEvent {\n\n\tpublic readonly type = ViewEventType.ViewLanguageConfigurationChanged;\n}\n\nexport class ViewLineMappingChangedEvent {\n\n\tpublic readonly type = ViewEventType.ViewLineMappingChanged;\n\n\tconstructor() {\n\t\t// Nothing to do\n\t}\n}\n\nexport class ViewLinesChangedEvent {\n\n\tpublic readonly type = ViewEventType.ViewLinesChanged;\n\n\tconstructor(\n\t\t/**\n\t\t * The first line that has changed.\n\t\t */\n\t\tpublic readonly fromLineNumber: number,\n\t\t/**\n\t\t * The number of lines that have changed.\n\t\t */\n\t\tpublic readonly count: number,\n\t) { }\n}\n\nexport class ViewLinesDeletedEvent {\n\n\tpublic readonly type = ViewEventType.ViewLinesDeleted;\n\n\t/**\n\t * At what line the deletion began (inclusive).\n\t */\n\tpublic readonly fromLineNumber: number;\n\t/**\n\t * At what line the deletion stopped (inclusive).\n\t */\n\tpublic readonly toLineNumber: number;\n\n\tconstructor(fromLineNumber: number, toLineNumber: number) {\n\t\tthis.fromLineNumber = fromLineNumber;\n\t\tthis.toLineNumber = toLineNumber;\n\t}\n}\n\nexport class ViewLinesInsertedEvent {\n\n\tpublic readonly type = ViewEventType.ViewLinesInserted;\n\n\t/**\n\t * Before what line did the insertion begin\n\t */\n\tpublic readonly fromLineNumber: number;\n\t/**\n\t * `toLineNumber` - `fromLineNumber` + 1 denotes the number of lines that were inserted\n\t */\n\tpublic readonly toLineNumber: number;\n\n\tconstructor(fromLineNumber: number, toLineNumber: number) {\n\t\tthis.fromLineNumber = fromLineNumber;\n\t\tthis.toLineNumber = toLineNumber;\n\t}\n}\n\nexport const enum VerticalRevealType {\n\tSimple = 0,\n\tCenter = 1,\n\tCenterIfOutsideViewport = 2,\n\tTop = 3,\n\tBottom = 4,\n\tNearTop = 5,\n\tNearTopIfOutsideViewport = 6,\n}\n\nexport class ViewRevealRangeRequestEvent {\n\n\tpublic readonly type = ViewEventType.ViewRevealRangeRequest;\n\n\n\tconstructor(\n\t\t/**\n\t\t * Source of the call that caused the event.\n\t\t */\n\t\tpublic readonly source: string | null | undefined,\n\t\t/**\n\t\t * Reduce the revealing to a minimum (e.g. avoid scrolling if the bounding box is visible and near the viewport edge).\n\t\t */\n\t\tpublic readonly minimalReveal: boolean,\n\t\t/**\n\t\t * Range to be reavealed.\n\t\t */\n\t\tpublic readonly range: Range | null,\n\t\t/**\n\t\t * Selections to be revealed.\n\t\t */\n\t\tpublic readonly selections: Selection[] | null,\n\t\t/**\n\t\t * The vertical reveal strategy.\n\t\t */\n\t\tpublic readonly verticalType: VerticalRevealType,\n\t\t/**\n\t\t * If true: there should be a horizontal & vertical revealing.\n\t\t * If false: there should be just a vertical revealing.\n\t\t */\n\t\tpublic readonly revealHorizontal: boolean,\n\t\t/**\n\t\t * The scroll type.\n\t\t */\n\t\tpublic readonly scrollType: ScrollType\n\t) { }\n}\n\nexport class ViewScrollChangedEvent {\n\n\tpublic readonly type = ViewEventType.ViewScrollChanged;\n\n\tpublic readonly scrollWidth: number;\n\tpublic readonly scrollLeft: number;\n\tpublic readonly scrollHeight: number;\n\tpublic readonly scrollTop: number;\n\n\tpublic readonly scrollWidthChanged: boolean;\n\tpublic readonly scrollLeftChanged: boolean;\n\tpublic readonly scrollHeightChanged: boolean;\n\tpublic readonly scrollTopChanged: boolean;\n\n\tconstructor(source: ScrollEvent) {\n\t\tthis.scrollWidth = source.scrollWidth;\n\t\tthis.scrollLeft = source.scrollLeft;\n\t\tthis.scrollHeight = source.scrollHeight;\n\t\tthis.scrollTop = source.scrollTop;\n\n\t\tthis.scrollWidthChanged = source.scrollWidthChanged;\n\t\tthis.scrollLeftChanged = source.scrollLeftChanged;\n\t\tthis.scrollHeightChanged = source.scrollHeightChanged;\n\t\tthis.scrollTopChanged = source.scrollTopChanged;\n\t}\n}\n\nexport class ViewThemeChangedEvent {\n\n\tpublic readonly type = ViewEventType.ViewThemeChanged;\n\n\tconstructor(\n\t\tpublic readonly theme: IColorTheme\n\t) { }\n}\n\nexport class ViewTokensChangedEvent {\n\n\tpublic readonly type = ViewEventType.ViewTokensChanged;\n\n\tpublic readonly ranges: {\n\t\t/**\n\t\t * Start line number of range\n\t\t */\n\t\treadonly fromLineNumber: number;\n\t\t/**\n\t\t * End line number of range\n\t\t */\n\t\treadonly toLineNumber: number;\n\t}[];\n\n\tconstructor(ranges: { fromLineNumber: number; toLineNumber: number }[]) {\n\t\tthis.ranges = ranges;\n\t}\n}\n\nexport class ViewTokensColorsChangedEvent {\n\n\tpublic readonly type = ViewEventType.ViewTokensColorsChanged;\n\n\tconstructor() {\n\t\t// Nothing to do\n\t}\n}\n\nexport class ViewZonesChangedEvent {\n\n\tpublic readonly type = ViewEventType.ViewZonesChanged;\n\n\tconstructor() {\n\t\t// Nothing to do\n\t}\n}\n\nexport type ViewEvent = (\n\tViewCompositionStartEvent\n\t| ViewCompositionEndEvent\n\t| ViewConfigurationChangedEvent\n\t| ViewCursorStateChangedEvent\n\t| ViewDecorationsChangedEvent\n\t| ViewFlushedEvent\n\t| ViewFocusChangedEvent\n\t| ViewLanguageConfigurationEvent\n\t| ViewLineMappingChangedEvent\n\t| ViewLinesChangedEvent\n\t| ViewLinesDeletedEvent\n\t| ViewLinesInsertedEvent\n\t| ViewRevealRangeRequestEvent\n\t| ViewScrollChangedEvent\n\t| ViewThemeChangedEvent\n\t| ViewTokensChangedEvent\n\t| ViewTokensColorsChangedEvent\n\t| ViewZonesChangedEvent\n);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ScrollEvent } from '../../base/common/scrollable.js';\nimport { ConfigurationChangedEvent, EditorOption } from './config/editorOptions.js';\nimport { Range } from './core/range.js';\nimport { Selection } from './core/selection.js';\nimport { CursorChangeReason } from './cursorEvents.js';\nimport { ScrollType } from './editorCommon.js';\nimport { IModelDecorationsChangedEvent } from './textModelEvents.js';\nimport { IColorTheme } from '../../platform/theme/common/themeService.js';\n\nexport const enum ViewEventType {\n\tViewCompositionStart,\n\tViewCompositionEnd,\n\tViewConfigurationChanged,\n\tViewCursorStateChanged,\n\tViewDecorationsChanged,\n\tViewFlushed,\n\tViewFocusChanged,\n\tViewLanguageConfigurationChanged,\n\tViewLineMappingChanged,\n\tViewLinesChanged,\n\tViewLinesDeleted,\n\tViewLinesInserted,\n\tViewRevealRangeRequest,\n\tViewScrollChanged,\n\tViewThemeChanged,\n\tViewTokensChanged,\n\tViewTokensColorsChanged,\n\tViewZonesChanged,\n}\n\nexport class ViewCompositionStartEvent {\n\tpublic readonly type = ViewEventType.ViewCompositionStart;\n\tconstructor() { }\n}\n\nexport class ViewCompositionEndEvent {\n\tpublic readonly type = ViewEventType.ViewCompositionEnd;\n\tconstructor() { }\n}\n\nexport class ViewConfigurationChangedEvent {\n\n\tpublic readonly type = ViewEventType.ViewConfigurationChanged;\n\n\tpublic readonly _source: ConfigurationChangedEvent;\n\n\tconstructor(source: ConfigurationChangedEvent) {\n\t\tthis._source = source;\n\t}\n\n\tpublic hasChanged(id: EditorOption): boolean {\n\t\treturn this._source.hasChanged(id);\n\t}\n}\n\nexport class ViewCursorStateChangedEvent {\n\n\tpublic readonly type = ViewEventType.ViewCursorStateChanged;\n\n\tconstructor(\n\t\tpublic readonly selections: Selection[],\n\t\tpublic readonly modelSelections: Selection[],\n\t\tpublic readonly reason: CursorChangeReason\n\t) { }\n}\n\nexport class ViewDecorationsChangedEvent {\n\n\tpublic readonly type = ViewEventType.ViewDecorationsChanged;\n\n\treadonly affectsMinimap: boolean;\n\treadonly affectsOverviewRuler: boolean;\n\treadonly affectsGlyphMargin: boolean;\n\treadonly affectsLineNumber: boolean;\n\n\tconstructor(source: IModelDecorationsChangedEvent | null) {\n\t\tif (source) {\n\t\t\tthis.affectsMinimap = source.affectsMinimap;\n\t\t\tthis.affectsOverviewRuler = source.affectsOverviewRuler;\n\t\t\tthis.affectsGlyphMargin = source.affectsGlyphMargin;\n\t\t\tthis.affectsLineNumber = source.affectsLineNumber;\n\t\t} else {\n\t\t\tthis.affectsMinimap = true;\n\t\t\tthis.affectsOverviewRuler = true;\n\t\t\tthis.affectsGlyphMargin = true;\n\t\t\tthis.affectsLineNumber = true;\n\t\t}\n\t}\n}\n\nexport class ViewFlushedEvent {\n\n\tpublic readonly type = ViewEventType.ViewFlushed;\n\n\tconstructor() {\n\t\t// Nothing to do\n\t}\n}\n\nexport class ViewFocusChangedEvent {\n\n\tpublic readonly type = ViewEventType.ViewFocusChanged;\n\n\tpublic readonly isFocused: boolean;\n\n\tconstructor(isFocused: boolean) {\n\t\tthis.isFocused = isFocused;\n\t}\n}\n\nexport class ViewLanguageConfigurationEvent {\n\n\tpublic readonly type = ViewEventType.ViewLanguageConfigurationChanged;\n}\n\nexport class ViewLineMappingChangedEvent {\n\n\tpublic readonly type = ViewEventType.ViewLineMappingChanged;\n\n\tconstructor() {\n\t\t// Nothing to do\n\t}\n}\n\nexport class ViewLinesChangedEvent {\n\n\tpublic readonly type = ViewEventType.ViewLinesChanged;\n\n\tconstructor(\n\t\t/**\n\t\t * The first line that has changed.\n\t\t */\n\t\tpublic readonly fromLineNumber: number,\n\t\t/**\n\t\t * The number of lines that have changed.\n\t\t */\n\t\tpublic readonly count: number,\n\t) { }\n}\n\nexport class ViewLinesDeletedEvent {\n\n\tpublic readonly type = ViewEventType.ViewLinesDeleted;\n\n\t/**\n\t * At what line the deletion began (inclusive).\n\t */\n\tpublic readonly fromLineNumber: number;\n\t/**\n\t * At what line the deletion stopped (inclusive).\n\t */\n\tpublic readonly toLineNumber: number;\n\n\tconstructor(fromLineNumber: number, toLineNumber: number) {\n\t\tthis.fromLineNumber = fromLineNumber;\n\t\tthis.toLineNumber = toLineNumber;\n\t}\n}\n\nexport class ViewLinesInsertedEvent {\n\n\tpublic readonly type = ViewEventType.ViewLinesInserted;\n\n\t/**\n\t * Before what line did the insertion begin\n\t */\n\tpublic readonly fromLineNumber: number;\n\t/**\n\t * `toLineNumber` - `fromLineNumber` + 1 denotes the number of lines that were inserted\n\t */\n\tpublic readonly toLineNumber: number;\n\n\tconstructor(fromLineNumber: number, toLineNumber: number) {\n\t\tthis.fromLineNumber = fromLineNumber;\n\t\tthis.toLineNumber = toLineNumber;\n\t}\n}\n\nexport const enum VerticalRevealType {\n\tSimple = 0,\n\tCenter = 1,\n\tCenterIfOutsideViewport = 2,\n\tTop = 3,\n\tBottom = 4,\n\tNearTop = 5,\n\tNearTopIfOutsideViewport = 6,\n}\n\nexport class ViewRevealRangeRequestEvent {\n\n\tpublic readonly type = ViewEventType.ViewRevealRangeRequest;\n\n\n\tconstructor(\n\t\t/**\n\t\t * Source of the call that caused the event.\n\t\t */\n\t\tpublic readonly source: string | null | undefined,\n\t\t/**\n\t\t * Reduce the revealing to a minimum (e.g. avoid scrolling if the bounding box is visible and near the viewport edge).\n\t\t */\n\t\tpublic readonly minimalReveal: boolean,\n\t\t/**\n\t\t * Range to be reavealed.\n\t\t */\n\t\tpublic readonly range: Range | null,\n\t\t/**\n\t\t * Selections to be revealed.\n\t\t */\n\t\tpublic readonly selections: Selection[] | null,\n\t\t/**\n\t\t * The vertical reveal strategy.\n\t\t */\n\t\tpublic readonly verticalType: VerticalRevealType,\n\t\t/**\n\t\t * If true: there should be a horizontal & vertical revealing.\n\t\t * If false: there should be just a vertical revealing.\n\t\t */\n\t\tpublic readonly revealHorizontal: boolean,\n\t\t/**\n\t\t * The scroll type.\n\t\t */\n\t\tpublic readonly scrollType: ScrollType\n\t) { }\n}\n\nexport class ViewScrollChangedEvent {\n\n\tpublic readonly type = ViewEventType.ViewScrollChanged;\n\n\tpublic readonly scrollWidth: number;\n\tpublic readonly scrollLeft: number;\n\tpublic readonly scrollHeight: number;\n\tpublic readonly scrollTop: number;\n\n\tpublic readonly scrollWidthChanged: boolean;\n\tpublic readonly scrollLeftChanged: boolean;\n\tpublic readonly scrollHeightChanged: boolean;\n\tpublic readonly scrollTopChanged: boolean;\n\n\tconstructor(source: ScrollEvent) {\n\t\tthis.scrollWidth = source.scrollWidth;\n\t\tthis.scrollLeft = source.scrollLeft;\n\t\tthis.scrollHeight = source.scrollHeight;\n\t\tthis.scrollTop = source.scrollTop;\n\n\t\tthis.scrollWidthChanged = source.scrollWidthChanged;\n\t\tthis.scrollLeftChanged = source.scrollLeftChanged;\n\t\tthis.scrollHeightChanged = source.scrollHeightChanged;\n\t\tthis.scrollTopChanged = source.scrollTopChanged;\n\t}\n}\n\nexport class ViewThemeChangedEvent {\n\n\tpublic readonly type = ViewEventType.ViewThemeChanged;\n\n\tconstructor(\n\t\tpublic readonly theme: IColorTheme\n\t) { }\n}\n\nexport class ViewTokensChangedEvent {\n\n\tpublic readonly type = ViewEventType.ViewTokensChanged;\n\n\tpublic readonly ranges: {\n\t\t/**\n\t\t * Start line number of range\n\t\t */\n\t\treadonly fromLineNumber: number;\n\t\t/**\n\t\t * End line number of range\n\t\t */\n\t\treadonly toLineNumber: number;\n\t}[];\n\n\tconstructor(ranges: { fromLineNumber: number; toLineNumber: number }[]) {\n\t\tthis.ranges = ranges;\n\t}\n}\n\nexport class ViewTokensColorsChangedEvent {\n\n\tpublic readonly type = ViewEventType.ViewTokensColorsChanged;\n\n\tconstructor() {\n\t\t// Nothing to do\n\t}\n}\n\nexport class ViewZonesChangedEvent {\n\n\tpublic readonly type = ViewEventType.ViewZonesChanged;\n\n\tconstructor() {\n\t\t// Nothing to do\n\t}\n}\n\nexport type ViewEvent = (\n\tViewCompositionStartEvent\n\t| ViewCompositionEndEvent\n\t| ViewConfigurationChangedEvent\n\t| ViewCursorStateChangedEvent\n\t| ViewDecorationsChangedEvent\n\t| ViewFlushedEvent\n\t| ViewFocusChangedEvent\n\t| ViewLanguageConfigurationEvent\n\t| ViewLineMappingChangedEvent\n\t| ViewLinesChangedEvent\n\t| ViewLinesDeletedEvent\n\t| ViewLinesInsertedEvent\n\t| ViewRevealRangeRequestEvent\n\t| ViewScrollChangedEvent\n\t| ViewThemeChangedEvent\n\t| ViewTokensChangedEvent\n\t| ViewTokensColorsChangedEvent\n\t| ViewZonesChangedEvent\n);\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 4795, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/monaco-editor/esm/vs/editor/common/viewModelEventDispatcher.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/file%3A/mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/viewModelEventDispatcher.ts","file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/vs/editor/common/viewModelEventDispatcher.ts"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ViewEventHandler } from './viewEventHandler.js';\nimport { ViewEvent } from './viewEvents.js';\nimport { IContentSizeChangedEvent } from './editorCommon.js';\nimport { Emitter } from '../../base/common/event.js';\nimport { Selection } from './core/selection.js';\nimport { Disposable } from '../../base/common/lifecycle.js';\nimport { CursorChangeReason } from './cursorEvents.js';\nimport { ModelLineHeightChangedEvent as OriginalModelLineHeightChangedEvent, ModelFontChangedEvent as OriginalModelFontChangedEvent, IModelContentChangedEvent, IModelDecorationsChangedEvent, IModelLanguageChangedEvent, IModelLanguageConfigurationChangedEvent, IModelOptionsChangedEvent, IModelTokensChangedEvent } from './textModelEvents.js';\n\nexport class ViewModelEventDispatcher extends Disposable {\n\n\tprivate readonly _onEvent = this._register(new Emitter<OutgoingViewModelEvent>());\n\tpublic readonly onEvent = this._onEvent.event;\n\n\tprivate readonly _eventHandlers: ViewEventHandler[];\n\tprivate _viewEventQueue: ViewEvent[] | null;\n\tprivate _isConsumingViewEventQueue: boolean;\n\tprivate _collector: ViewModelEventsCollector | null;\n\tprivate _collectorCnt: number;\n\tprivate _outgoingEvents: OutgoingViewModelEvent[];\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis._eventHandlers = [];\n\t\tthis._viewEventQueue = null;\n\t\tthis._isConsumingViewEventQueue = false;\n\t\tthis._collector = null;\n\t\tthis._collectorCnt = 0;\n\t\tthis._outgoingEvents = [];\n\t}\n\n\tpublic emitOutgoingEvent(e: OutgoingViewModelEvent): void {\n\t\tthis._addOutgoingEvent(e);\n\t\tthis._emitOutgoingEvents();\n\t}\n\n\tprivate _addOutgoingEvent(e: OutgoingViewModelEvent): void {\n\t\tfor (let i = 0, len = this._outgoingEvents.length; i < len; i++) {\n\t\t\tconst mergeResult = (this._outgoingEvents[i].kind === e.kind ? this._outgoingEvents[i].attemptToMerge(e) : null);\n\t\t\tif (mergeResult) {\n\t\t\t\tthis._outgoingEvents[i] = mergeResult;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t// not merged\n\t\tthis._outgoingEvents.push(e);\n\t}\n\n\tprivate _emitOutgoingEvents(): void {\n\t\twhile (this._outgoingEvents.length > 0) {\n\t\t\tif (this._collector || this._isConsumingViewEventQueue) {\n\t\t\t\t// right now collecting or emitting view events, so let's postpone emitting\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst event = this._outgoingEvents.shift()!;\n\t\t\tif (event.isNoOp()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthis._onEvent.fire(event);\n\t\t}\n\t}\n\n\tpublic addViewEventHandler(eventHandler: ViewEventHandler): void {\n\t\tfor (let i = 0, len = this._eventHandlers.length; i < len; i++) {\n\t\t\tif (this._eventHandlers[i] === eventHandler) {\n\t\t\t\tconsole.warn('Detected duplicate listener in ViewEventDispatcher', eventHandler);\n\t\t\t}\n\t\t}\n\t\tthis._eventHandlers.push(eventHandler);\n\t}\n\n\tpublic removeViewEventHandler(eventHandler: ViewEventHandler): void {\n\t\tfor (let i = 0; i < this._eventHandlers.length; i++) {\n\t\t\tif (this._eventHandlers[i] === eventHandler) {\n\t\t\t\tthis._eventHandlers.splice(i, 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic beginEmitViewEvents(): ViewModelEventsCollector {\n\t\tthis._collectorCnt++;\n\t\tif (this._collectorCnt === 1) {\n\t\t\tthis._collector = new ViewModelEventsCollector();\n\t\t}\n\t\treturn this._collector!;\n\t}\n\n\tpublic endEmitViewEvents(): void {\n\t\tthis._collectorCnt--;\n\t\tif (this._collectorCnt === 0) {\n\t\t\tconst outgoingEvents = this._collector!.outgoingEvents;\n\t\t\tconst viewEvents = this._collector!.viewEvents;\n\t\t\tthis._collector = null;\n\n\t\t\tfor (const outgoingEvent of outgoingEvents) {\n\t\t\t\tthis._addOutgoingEvent(outgoingEvent);\n\t\t\t}\n\n\t\t\tif (viewEvents.length > 0) {\n\t\t\t\tthis._emitMany(viewEvents);\n\t\t\t}\n\t\t}\n\t\tthis._emitOutgoingEvents();\n\t}\n\n\tpublic emitSingleViewEvent(event: ViewEvent): void {\n\t\ttry {\n\t\t\tconst eventsCollector = this.beginEmitViewEvents();\n\t\t\teventsCollector.emitViewEvent(event);\n\t\t} finally {\n\t\t\tthis.endEmitViewEvents();\n\t\t}\n\t}\n\n\tprivate _emitMany(events: ViewEvent[]): void {\n\t\tif (this._viewEventQueue) {\n\t\t\tthis._viewEventQueue = this._viewEventQueue.concat(events);\n\t\t} else {\n\t\t\tthis._viewEventQueue = events;\n\t\t}\n\n\t\tif (!this._isConsumingViewEventQueue) {\n\t\t\tthis._consumeViewEventQueue();\n\t\t}\n\t}\n\n\tprivate _consumeViewEventQueue(): void {\n\t\ttry {\n\t\t\tthis._isConsumingViewEventQueue = true;\n\t\t\tthis._doConsumeQueue();\n\t\t} finally {\n\t\t\tthis._isConsumingViewEventQueue = false;\n\t\t}\n\t}\n\n\tprivate _doConsumeQueue(): void {\n\t\twhile (this._viewEventQueue) {\n\t\t\t// Empty event queue, as events might come in while sending these off\n\t\t\tconst events = this._viewEventQueue;\n\t\t\tthis._viewEventQueue = null;\n\n\t\t\t// Use a clone of the event handlers list, as they might remove themselves\n\t\t\tconst eventHandlers = this._eventHandlers.slice(0);\n\t\t\tfor (const eventHandler of eventHandlers) {\n\t\t\t\teventHandler.handleEvents(events);\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport class ViewModelEventsCollector {\n\n\tpublic readonly viewEvents: ViewEvent[];\n\tpublic readonly outgoingEvents: OutgoingViewModelEvent[];\n\n\tconstructor() {\n\t\tthis.viewEvents = [];\n\t\tthis.outgoingEvents = [];\n\t}\n\n\tpublic emitViewEvent(event: ViewEvent) {\n\t\tthis.viewEvents.push(event);\n\t}\n\n\tpublic emitOutgoingEvent(e: OutgoingViewModelEvent): void {\n\t\tthis.outgoingEvents.push(e);\n\t}\n}\n\nexport type OutgoingViewModelEvent = (\n\tContentSizeChangedEvent\n\t| FocusChangedEvent\n\t| WidgetFocusChangedEvent\n\t| ScrollChangedEvent\n\t| ViewZonesChangedEvent\n\t| HiddenAreasChangedEvent\n\t| ReadOnlyEditAttemptEvent\n\t| CursorStateChangedEvent\n\t| ModelDecorationsChangedEvent\n\t| ModelLanguageChangedEvent\n\t| ModelLanguageConfigurationChangedEvent\n\t| ModelContentChangedEvent\n\t| ModelOptionsChangedEvent\n\t| ModelTokensChangedEvent\n\t| ModelLineHeightChangedEvent\n\t| ModelFontChangedEvent\n);\n\nexport const enum OutgoingViewModelEventKind {\n\tContentSizeChanged,\n\tFocusChanged,\n\tWidgetFocusChanged,\n\tScrollChanged,\n\tViewZonesChanged,\n\tHiddenAreasChanged,\n\tReadOnlyEditAttempt,\n\tCursorStateChanged,\n\tModelDecorationsChanged,\n\tModelLanguageChanged,\n\tModelLanguageConfigurationChanged,\n\tModelContentChanged,\n\tModelOptionsChanged,\n\tModelTokensChanged,\n\tModelLineHeightChanged,\n\tModelFontChangedEvent\n}\n\nexport class ContentSizeChangedEvent implements IContentSizeChangedEvent {\n\n\tpublic readonly kind = OutgoingViewModelEventKind.ContentSizeChanged;\n\n\tprivate readonly _oldContentWidth: number;\n\tprivate readonly _oldContentHeight: number;\n\n\treadonly contentWidth: number;\n\treadonly contentHeight: number;\n\treadonly contentWidthChanged: boolean;\n\treadonly contentHeightChanged: boolean;\n\n\tconstructor(oldContentWidth: number, oldContentHeight: number, contentWidth: number, contentHeight: number) {\n\t\tthis._oldContentWidth = oldContentWidth;\n\t\tthis._oldContentHeight = oldContentHeight;\n\t\tthis.contentWidth = contentWidth;\n\t\tthis.contentHeight = contentHeight;\n\t\tthis.contentWidthChanged = (this._oldContentWidth !== this.contentWidth);\n\t\tthis.contentHeightChanged = (this._oldContentHeight !== this.contentHeight);\n\t}\n\n\tpublic isNoOp(): boolean {\n\t\treturn (!this.contentWidthChanged && !this.contentHeightChanged);\n\t}\n\n\tpublic attemptToMerge(other: OutgoingViewModelEvent): OutgoingViewModelEvent | null {\n\t\tif (other.kind !== this.kind) {\n\t\t\treturn null;\n\t\t}\n\t\treturn new ContentSizeChangedEvent(this._oldContentWidth, this._oldContentHeight, other.contentWidth, other.contentHeight);\n\t}\n}\n\nexport class FocusChangedEvent {\n\n\tpublic readonly kind = OutgoingViewModelEventKind.FocusChanged;\n\n\treadonly oldHasFocus: boolean;\n\treadonly hasFocus: boolean;\n\n\tconstructor(oldHasFocus: boolean, hasFocus: boolean) {\n\t\tthis.oldHasFocus = oldHasFocus;\n\t\tthis.hasFocus = hasFocus;\n\t}\n\n\tpublic isNoOp(): boolean {\n\t\treturn (this.oldHasFocus === this.hasFocus);\n\t}\n\n\tpublic attemptToMerge(other: OutgoingViewModelEvent): OutgoingViewModelEvent | null {\n\t\tif (other.kind !== this.kind) {\n\t\t\treturn null;\n\t\t}\n\t\treturn new FocusChangedEvent(this.oldHasFocus, other.hasFocus);\n\t}\n}\n\nexport class WidgetFocusChangedEvent {\n\n\tpublic readonly kind = OutgoingViewModelEventKind.WidgetFocusChanged;\n\n\treadonly oldHasFocus: boolean;\n\treadonly hasFocus: boolean;\n\n\tconstructor(oldHasFocus: boolean, hasFocus: boolean) {\n\t\tthis.oldHasFocus = oldHasFocus;\n\t\tthis.hasFocus = hasFocus;\n\t}\n\n\tpublic isNoOp(): boolean {\n\t\treturn (this.oldHasFocus === this.hasFocus);\n\t}\n\n\tpublic attemptToMerge(other: OutgoingViewModelEvent): OutgoingViewModelEvent | null {\n\t\tif (other.kind !== this.kind) {\n\t\t\treturn null;\n\t\t}\n\t\treturn new FocusChangedEvent(this.oldHasFocus, other.hasFocus);\n\t}\n}\n\nexport class ScrollChangedEvent {\n\n\tpublic readonly kind = OutgoingViewModelEventKind.ScrollChanged;\n\n\tprivate readonly _oldScrollWidth: number;\n\tprivate readonly _oldScrollLeft: number;\n\tprivate readonly _oldScrollHeight: number;\n\tprivate readonly _oldScrollTop: number;\n\n\tpublic readonly scrollWidth: number;\n\tpublic readonly scrollLeft: number;\n\tpublic readonly scrollHeight: number;\n\tpublic readonly scrollTop: number;\n\n\tpublic readonly scrollWidthChanged: boolean;\n\tpublic readonly scrollLeftChanged: boolean;\n\tpublic readonly scrollHeightChanged: boolean;\n\tpublic readonly scrollTopChanged: boolean;\n\n\tconstructor(\n\t\toldScrollWidth: number, oldScrollLeft: number, oldScrollHeight: number, oldScrollTop: number,\n\t\tscrollWidth: number, scrollLeft: number, scrollHeight: number, scrollTop: number,\n\t) {\n\t\tthis._oldScrollWidth = oldScrollWidth;\n\t\tthis._oldScrollLeft = oldScrollLeft;\n\t\tthis._oldScrollHeight = oldScrollHeight;\n\t\tthis._oldScrollTop = oldScrollTop;\n\n\t\tthis.scrollWidth = scrollWidth;\n\t\tthis.scrollLeft = scrollLeft;\n\t\tthis.scrollHeight = scrollHeight;\n\t\tthis.scrollTop = scrollTop;\n\n\t\tthis.scrollWidthChanged = (this._oldScrollWidth !== this.scrollWidth);\n\t\tthis.scrollLeftChanged = (this._oldScrollLeft !== this.scrollLeft);\n\t\tthis.scrollHeightChanged = (this._oldScrollHeight !== this.scrollHeight);\n\t\tthis.scrollTopChanged = (this._oldScrollTop !== this.scrollTop);\n\t}\n\n\tpublic isNoOp(): boolean {\n\t\treturn (!this.scrollWidthChanged && !this.scrollLeftChanged && !this.scrollHeightChanged && !this.scrollTopChanged);\n\t}\n\n\tpublic attemptToMerge(other: OutgoingViewModelEvent): OutgoingViewModelEvent | null {\n\t\tif (other.kind !== this.kind) {\n\t\t\treturn null;\n\t\t}\n\t\treturn new ScrollChangedEvent(\n\t\t\tthis._oldScrollWidth, this._oldScrollLeft, this._oldScrollHeight, this._oldScrollTop,\n\t\t\tother.scrollWidth, other.scrollLeft, other.scrollHeight, other.scrollTop\n\t\t);\n\t}\n}\n\nexport class ViewZonesChangedEvent {\n\n\tpublic readonly kind = OutgoingViewModelEventKind.ViewZonesChanged;\n\n\tconstructor() {\n\t}\n\n\tpublic isNoOp(): boolean {\n\t\treturn false;\n\t}\n\n\tpublic attemptToMerge(other: OutgoingViewModelEvent): OutgoingViewModelEvent | null {\n\t\tif (other.kind !== this.kind) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this;\n\t}\n}\n\nexport class HiddenAreasChangedEvent {\n\n\tpublic readonly kind = OutgoingViewModelEventKind.HiddenAreasChanged;\n\n\tconstructor() {\n\t}\n\n\tpublic isNoOp(): boolean {\n\t\treturn false;\n\t}\n\n\tpublic attemptToMerge(other: OutgoingViewModelEvent): OutgoingViewModelEvent | null {\n\t\tif (other.kind !== this.kind) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this;\n\t}\n}\n\nexport class CursorStateChangedEvent {\n\n\tpublic readonly kind = OutgoingViewModelEventKind.CursorStateChanged;\n\n\tpublic readonly oldSelections: Selection[] | null;\n\tpublic readonly selections: Selection[];\n\tpublic readonly oldModelVersionId: number;\n\tpublic readonly modelVersionId: number;\n\tpublic readonly source: string;\n\tpublic readonly reason: CursorChangeReason;\n\tpublic readonly reachedMaxCursorCount: boolean;\n\n\tconstructor(oldSelections: Selection[] | null, selections: Selection[], oldModelVersionId: number, modelVersionId: number, source: string, reason: CursorChangeReason, reachedMaxCursorCount: boolean) {\n\t\tthis.oldSelections = oldSelections;\n\t\tthis.selections = selections;\n\t\tthis.oldModelVersionId = oldModelVersionId;\n\t\tthis.modelVersionId = modelVersionId;\n\t\tthis.source = source;\n\t\tthis.reason = reason;\n\t\tthis.reachedMaxCursorCount = reachedMaxCursorCount;\n\t}\n\n\tprivate static _selectionsAreEqual(a: Selection[] | null, b: Selection[] | null): boolean {\n\t\tif (!a && !b) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!a || !b) {\n\t\t\treturn false;\n\t\t}\n\t\tconst aLen = a.length;\n\t\tconst bLen = b.length;\n\t\tif (aLen !== bLen) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let i = 0; i < aLen; i++) {\n\t\t\tif (!a[i].equalsSelection(b[i])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic isNoOp(): boolean {\n\t\treturn (\n\t\t\tCursorStateChangedEvent._selectionsAreEqual(this.oldSelections, this.selections)\n\t\t\t&& this.oldModelVersionId === this.modelVersionId\n\t\t);\n\t}\n\n\tpublic attemptToMerge(other: OutgoingViewModelEvent): OutgoingViewModelEvent | null {\n\t\tif (other.kind !== this.kind) {\n\t\t\treturn null;\n\t\t}\n\t\treturn new CursorStateChangedEvent(\n\t\t\tthis.oldSelections, other.selections, this.oldModelVersionId, other.modelVersionId, other.source, other.reason, this.reachedMaxCursorCount || other.reachedMaxCursorCount\n\t\t);\n\t}\n}\n\nexport class ReadOnlyEditAttemptEvent {\n\n\tpublic readonly kind = OutgoingViewModelEventKind.ReadOnlyEditAttempt;\n\n\tconstructor() {\n\t}\n\n\tpublic isNoOp(): boolean {\n\t\treturn false;\n\t}\n\n\tpublic attemptToMerge(other: OutgoingViewModelEvent): OutgoingViewModelEvent | null {\n\t\tif (other.kind !== this.kind) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this;\n\t}\n}\n\nexport class ModelDecorationsChangedEvent {\n\tpublic readonly kind = OutgoingViewModelEventKind.ModelDecorationsChanged;\n\n\tconstructor(\n\t\tpublic readonly event: IModelDecorationsChangedEvent\n\t) { }\n\n\tpublic isNoOp(): boolean {\n\t\treturn false;\n\t}\n\n\tpublic attemptToMerge(other: OutgoingViewModelEvent): OutgoingViewModelEvent | null {\n\t\treturn null;\n\t}\n}\n\nexport class ModelLanguageChangedEvent {\n\tpublic readonly kind = OutgoingViewModelEventKind.ModelLanguageChanged;\n\n\tconstructor(\n\t\tpublic readonly event: IModelLanguageChangedEvent\n\t) { }\n\n\tpublic isNoOp(): boolean {\n\t\treturn false;\n\t}\n\n\tpublic attemptToMerge(other: OutgoingViewModelEvent): OutgoingViewModelEvent | null {\n\t\treturn null;\n\t}\n}\n\nexport class ModelLanguageConfigurationChangedEvent {\n\tpublic readonly kind = OutgoingViewModelEventKind.ModelLanguageConfigurationChanged;\n\n\tconstructor(\n\t\tpublic readonly event: IModelLanguageConfigurationChangedEvent\n\t) { }\n\n\tpublic isNoOp(): boolean {\n\t\treturn false;\n\t}\n\n\tpublic attemptToMerge(other: OutgoingViewModelEvent): OutgoingViewModelEvent | null {\n\t\treturn null;\n\t}\n}\n\nexport class ModelContentChangedEvent {\n\tpublic readonly kind = OutgoingViewModelEventKind.ModelContentChanged;\n\n\tconstructor(\n\t\tpublic readonly event: IModelContentChangedEvent\n\t) { }\n\n\tpublic isNoOp(): boolean {\n\t\treturn false;\n\t}\n\n\tpublic attemptToMerge(other: OutgoingViewModelEvent): OutgoingViewModelEvent | null {\n\t\treturn null;\n\t}\n}\n\nexport class ModelOptionsChangedEvent {\n\tpublic readonly kind = OutgoingViewModelEventKind.ModelOptionsChanged;\n\n\tconstructor(\n\t\tpublic readonly event: IModelOptionsChangedEvent\n\t) { }\n\n\tpublic isNoOp(): boolean {\n\t\treturn false;\n\t}\n\n\tpublic attemptToMerge(other: OutgoingViewModelEvent): OutgoingViewModelEvent | null {\n\t\treturn null;\n\t}\n}\n\nexport class ModelTokensChangedEvent {\n\tpublic readonly kind = OutgoingViewModelEventKind.ModelTokensChanged;\n\n\tconstructor(\n\t\tpublic readonly event: IModelTokensChangedEvent\n\t) { }\n\n\tpublic isNoOp(): boolean {\n\t\treturn false;\n\t}\n\n\tpublic attemptToMerge(other: OutgoingViewModelEvent): OutgoingViewModelEvent | null {\n\t\treturn null;\n\t}\n}\n\nexport class ModelLineHeightChangedEvent {\n\tpublic readonly kind = OutgoingViewModelEventKind.ModelLineHeightChanged;\n\n\tconstructor(\n\t\tpublic readonly event: OriginalModelLineHeightChangedEvent\n\t) { }\n\n\tpublic isNoOp(): boolean {\n\t\treturn false;\n\t}\n\n\tpublic attemptToMerge(other: OutgoingViewModelEvent): OutgoingViewModelEvent | null {\n\t\treturn null;\n\t}\n}\n\nexport class ModelFontChangedEvent {\n\tpublic readonly kind = OutgoingViewModelEventKind.ModelFontChangedEvent;\n\n\tconstructor(\n\t\tpublic readonly event: OriginalModelFontChangedEvent\n\t) { }\n\n\tpublic isNoOp(): boolean {\n\t\treturn false;\n\t}\n\n\tpublic attemptToMerge(other: OutgoingViewModelEvent): OutgoingViewModelEvent | null {\n\t\treturn null;\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ViewEventHandler } from './viewEventHandler.js';\nimport { ViewEvent } from './viewEvents.js';\nimport { IContentSizeChangedEvent } from './editorCommon.js';\nimport { Emitter } from '../../base/common/event.js';\nimport { Selection } from './core/selection.js';\nimport { Disposable } from '../../base/common/lifecycle.js';\nimport { CursorChangeReason } from './cursorEvents.js';\nimport { ModelLineHeightChangedEvent as OriginalModelLineHeightChangedEvent, ModelFontChangedEvent as OriginalModelFontChangedEvent, IModelContentChangedEvent, IModelDecorationsChangedEvent, IModelLanguageChangedEvent, IModelLanguageConfigurationChangedEvent, IModelOptionsChangedEvent, IModelTokensChangedEvent } from './textModelEvents.js';\n\nexport class ViewModelEventDispatcher extends Disposable {\n\n\tprivate readonly _onEvent = this._register(new Emitter<OutgoingViewModelEvent>());\n\tpublic readonly onEvent = this._onEvent.event;\n\n\tprivate readonly _eventHandlers: ViewEventHandler[];\n\tprivate _viewEventQueue: ViewEvent[] | null;\n\tprivate _isConsumingViewEventQueue: boolean;\n\tprivate _collector: ViewModelEventsCollector | null;\n\tprivate _collectorCnt: number;\n\tprivate _outgoingEvents: OutgoingViewModelEvent[];\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis._eventHandlers = [];\n\t\tthis._viewEventQueue = null;\n\t\tthis._isConsumingViewEventQueue = false;\n\t\tthis._collector = null;\n\t\tthis._collectorCnt = 0;\n\t\tthis._outgoingEvents = [];\n\t}\n\n\tpublic emitOutgoingEvent(e: OutgoingViewModelEvent): void {\n\t\tthis._addOutgoingEvent(e);\n\t\tthis._emitOutgoingEvents();\n\t}\n\n\tprivate _addOutgoingEvent(e: OutgoingViewModelEvent): void {\n\t\tfor (let i = 0, len = this._outgoingEvents.length; i < len; i++) {\n\t\t\tconst mergeResult = (this._outgoingEvents[i].kind === e.kind ? this._outgoingEvents[i].attemptToMerge(e) : null);\n\t\t\tif (mergeResult) {\n\t\t\t\tthis._outgoingEvents[i] = mergeResult;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t// not merged\n\t\tthis._outgoingEvents.push(e);\n\t}\n\n\tprivate _emitOutgoingEvents(): void {\n\t\twhile (this._outgoingEvents.length > 0) {\n\t\t\tif (this._collector || this._isConsumingViewEventQueue) {\n\t\t\t\t// right now collecting or emitting view events, so let's postpone emitting\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst event = this._outgoingEvents.shift()!;\n\t\t\tif (event.isNoOp()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthis._onEvent.fire(event);\n\t\t}\n\t}\n\n\tpublic addViewEventHandler(eventHandler: ViewEventHandler): void {\n\t\tfor (let i = 0, len = this._eventHandlers.length; i < len; i++) {\n\t\t\tif (this._eventHandlers[i] === eventHandler) {\n\t\t\t\tconsole.warn('Detected duplicate listener in ViewEventDispatcher', eventHandler);\n\t\t\t}\n\t\t}\n\t\tthis._eventHandlers.push(eventHandler);\n\t}\n\n\tpublic removeViewEventHandler(eventHandler: ViewEventHandler): void {\n\t\tfor (let i = 0; i < this._eventHandlers.length; i++) {\n\t\t\tif (this._eventHandlers[i] === eventHandler) {\n\t\t\t\tthis._eventHandlers.splice(i, 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic beginEmitViewEvents(): ViewModelEventsCollector {\n\t\tthis._collectorCnt++;\n\t\tif (this._collectorCnt === 1) {\n\t\t\tthis._collector = new ViewModelEventsCollector();\n\t\t}\n\t\treturn this._collector!;\n\t}\n\n\tpublic endEmitViewEvents(): void {\n\t\tthis._collectorCnt--;\n\t\tif (this._collectorCnt === 0) {\n\t\t\tconst outgoingEvents = this._collector!.outgoingEvents;\n\t\t\tconst viewEvents = this._collector!.viewEvents;\n\t\t\tthis._collector = null;\n\n\t\t\tfor (const outgoingEvent of outgoingEvents) {\n\t\t\t\tthis._addOutgoingEvent(outgoingEvent);\n\t\t\t}\n\n\t\t\tif (viewEvents.length > 0) {\n\t\t\t\tthis._emitMany(viewEvents);\n\t\t\t}\n\t\t}\n\t\tthis._emitOutgoingEvents();\n\t}\n\n\tpublic emitSingleViewEvent(event: ViewEvent): void {\n\t\ttry {\n\t\t\tconst eventsCollector = this.beginEmitViewEvents();\n\t\t\teventsCollector.emitViewEvent(event);\n\t\t} finally {\n\t\t\tthis.endEmitViewEvents();\n\t\t}\n\t}\n\n\tprivate _emitMany(events: ViewEvent[]): void {\n\t\tif (this._viewEventQueue) {\n\t\t\tthis._viewEventQueue = this._viewEventQueue.concat(events);\n\t\t} else {\n\t\t\tthis._viewEventQueue = events;\n\t\t}\n\n\t\tif (!this._isConsumingViewEventQueue) {\n\t\t\tthis._consumeViewEventQueue();\n\t\t}\n\t}\n\n\tprivate _consumeViewEventQueue(): void {\n\t\ttry {\n\t\t\tthis._isConsumingViewEventQueue = true;\n\t\t\tthis._doConsumeQueue();\n\t\t} finally {\n\t\t\tthis._isConsumingViewEventQueue = false;\n\t\t}\n\t}\n\n\tprivate _doConsumeQueue(): void {\n\t\twhile (this._viewEventQueue) {\n\t\t\t// Empty event queue, as events might come in while sending these off\n\t\t\tconst events = this._viewEventQueue;\n\t\t\tthis._viewEventQueue = null;\n\n\t\t\t// Use a clone of the event handlers list, as they might remove themselves\n\t\t\tconst eventHandlers = this._eventHandlers.slice(0);\n\t\t\tfor (const eventHandler of eventHandlers) {\n\t\t\t\teventHandler.handleEvents(events);\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport class ViewModelEventsCollector {\n\n\tpublic readonly viewEvents: ViewEvent[];\n\tpublic readonly outgoingEvents: OutgoingViewModelEvent[];\n\n\tconstructor() {\n\t\tthis.viewEvents = [];\n\t\tthis.outgoingEvents = [];\n\t}\n\n\tpublic emitViewEvent(event: ViewEvent) {\n\t\tthis.viewEvents.push(event);\n\t}\n\n\tpublic emitOutgoingEvent(e: OutgoingViewModelEvent): void {\n\t\tthis.outgoingEvents.push(e);\n\t}\n}\n\nexport type OutgoingViewModelEvent = (\n\tContentSizeChangedEvent\n\t| FocusChangedEvent\n\t| WidgetFocusChangedEvent\n\t| ScrollChangedEvent\n\t| ViewZonesChangedEvent\n\t| HiddenAreasChangedEvent\n\t| ReadOnlyEditAttemptEvent\n\t| CursorStateChangedEvent\n\t| ModelDecorationsChangedEvent\n\t| ModelLanguageChangedEvent\n\t| ModelLanguageConfigurationChangedEvent\n\t| ModelContentChangedEvent\n\t| ModelOptionsChangedEvent\n\t| ModelTokensChangedEvent\n\t| ModelLineHeightChangedEvent\n\t| ModelFontChangedEvent\n);\n\nexport const enum OutgoingViewModelEventKind {\n\tContentSizeChanged,\n\tFocusChanged,\n\tWidgetFocusChanged,\n\tScrollChanged,\n\tViewZonesChanged,\n\tHiddenAreasChanged,\n\tReadOnlyEditAttempt,\n\tCursorStateChanged,\n\tModelDecorationsChanged,\n\tModelLanguageChanged,\n\tModelLanguageConfigurationChanged,\n\tModelContentChanged,\n\tModelOptionsChanged,\n\tModelTokensChanged,\n\tModelLineHeightChanged,\n\tModelFontChangedEvent\n}\n\nexport class ContentSizeChangedEvent implements IContentSizeChangedEvent {\n\n\tpublic readonly kind = OutgoingViewModelEventKind.ContentSizeChanged;\n\n\tprivate readonly _oldContentWidth: number;\n\tprivate readonly _oldContentHeight: number;\n\n\treadonly contentWidth: number;\n\treadonly contentHeight: number;\n\treadonly contentWidthChanged: boolean;\n\treadonly contentHeightChanged: boolean;\n\n\tconstructor(oldContentWidth: number, oldContentHeight: number, contentWidth: number, contentHeight: number) {\n\t\tthis._oldContentWidth = oldContentWidth;\n\t\tthis._oldContentHeight = oldContentHeight;\n\t\tthis.contentWidth = contentWidth;\n\t\tthis.contentHeight = contentHeight;\n\t\tthis.contentWidthChanged = (this._oldContentWidth !== this.contentWidth);\n\t\tthis.contentHeightChanged = (this._oldContentHeight !== this.contentHeight);\n\t}\n\n\tpublic isNoOp(): boolean {\n\t\treturn (!this.contentWidthChanged && !this.contentHeightChanged);\n\t}\n\n\tpublic attemptToMerge(other: OutgoingViewModelEvent): OutgoingViewModelEvent | null {\n\t\tif (other.kind !== this.kind) {\n\t\t\treturn null;\n\t\t}\n\t\treturn new ContentSizeChangedEvent(this._oldContentWidth, this._oldContentHeight, other.contentWidth, other.contentHeight);\n\t}\n}\n\nexport class FocusChangedEvent {\n\n\tpublic readonly kind = OutgoingViewModelEventKind.FocusChanged;\n\n\treadonly oldHasFocus: boolean;\n\treadonly hasFocus: boolean;\n\n\tconstructor(oldHasFocus: boolean, hasFocus: boolean) {\n\t\tthis.oldHasFocus = oldHasFocus;\n\t\tthis.hasFocus = hasFocus;\n\t}\n\n\tpublic isNoOp(): boolean {\n\t\treturn (this.oldHasFocus === this.hasFocus);\n\t}\n\n\tpublic attemptToMerge(other: OutgoingViewModelEvent): OutgoingViewModelEvent | null {\n\t\tif (other.kind !== this.kind) {\n\t\t\treturn null;\n\t\t}\n\t\treturn new FocusChangedEvent(this.oldHasFocus, other.hasFocus);\n\t}\n}\n\nexport class WidgetFocusChangedEvent {\n\n\tpublic readonly kind = OutgoingViewModelEventKind.WidgetFocusChanged;\n\n\treadonly oldHasFocus: boolean;\n\treadonly hasFocus: boolean;\n\n\tconstructor(oldHasFocus: boolean, hasFocus: boolean) {\n\t\tthis.oldHasFocus = oldHasFocus;\n\t\tthis.hasFocus = hasFocus;\n\t}\n\n\tpublic isNoOp(): boolean {\n\t\treturn (this.oldHasFocus === this.hasFocus);\n\t}\n\n\tpublic attemptToMerge(other: OutgoingViewModelEvent): OutgoingViewModelEvent | null {\n\t\tif (other.kind !== this.kind) {\n\t\t\treturn null;\n\t\t}\n\t\treturn new FocusChangedEvent(this.oldHasFocus, other.hasFocus);\n\t}\n}\n\nexport class ScrollChangedEvent {\n\n\tpublic readonly kind = OutgoingViewModelEventKind.ScrollChanged;\n\n\tprivate readonly _oldScrollWidth: number;\n\tprivate readonly _oldScrollLeft: number;\n\tprivate readonly _oldScrollHeight: number;\n\tprivate readonly _oldScrollTop: number;\n\n\tpublic readonly scrollWidth: number;\n\tpublic readonly scrollLeft: number;\n\tpublic readonly scrollHeight: number;\n\tpublic readonly scrollTop: number;\n\n\tpublic readonly scrollWidthChanged: boolean;\n\tpublic readonly scrollLeftChanged: boolean;\n\tpublic readonly scrollHeightChanged: boolean;\n\tpublic readonly scrollTopChanged: boolean;\n\n\tconstructor(\n\t\toldScrollWidth: number, oldScrollLeft: number, oldScrollHeight: number, oldScrollTop: number,\n\t\tscrollWidth: number, scrollLeft: number, scrollHeight: number, scrollTop: number,\n\t) {\n\t\tthis._oldScrollWidth = oldScrollWidth;\n\t\tthis._oldScrollLeft = oldScrollLeft;\n\t\tthis._oldScrollHeight = oldScrollHeight;\n\t\tthis._oldScrollTop = oldScrollTop;\n\n\t\tthis.scrollWidth = scrollWidth;\n\t\tthis.scrollLeft = scrollLeft;\n\t\tthis.scrollHeight = scrollHeight;\n\t\tthis.scrollTop = scrollTop;\n\n\t\tthis.scrollWidthChanged = (this._oldScrollWidth !== this.scrollWidth);\n\t\tthis.scrollLeftChanged = (this._oldScrollLeft !== this.scrollLeft);\n\t\tthis.scrollHeightChanged = (this._oldScrollHeight !== this.scrollHeight);\n\t\tthis.scrollTopChanged = (this._oldScrollTop !== this.scrollTop);\n\t}\n\n\tpublic isNoOp(): boolean {\n\t\treturn (!this.scrollWidthChanged && !this.scrollLeftChanged && !this.scrollHeightChanged && !this.scrollTopChanged);\n\t}\n\n\tpublic attemptToMerge(other: OutgoingViewModelEvent): OutgoingViewModelEvent | null {\n\t\tif (other.kind !== this.kind) {\n\t\t\treturn null;\n\t\t}\n\t\treturn new ScrollChangedEvent(\n\t\t\tthis._oldScrollWidth, this._oldScrollLeft, this._oldScrollHeight, this._oldScrollTop,\n\t\t\tother.scrollWidth, other.scrollLeft, other.scrollHeight, other.scrollTop\n\t\t);\n\t}\n}\n\nexport class ViewZonesChangedEvent {\n\n\tpublic readonly kind = OutgoingViewModelEventKind.ViewZonesChanged;\n\n\tconstructor() {\n\t}\n\n\tpublic isNoOp(): boolean {\n\t\treturn false;\n\t}\n\n\tpublic attemptToMerge(other: OutgoingViewModelEvent): OutgoingViewModelEvent | null {\n\t\tif (other.kind !== this.kind) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this;\n\t}\n}\n\nexport class HiddenAreasChangedEvent {\n\n\tpublic readonly kind = OutgoingViewModelEventKind.HiddenAreasChanged;\n\n\tconstructor() {\n\t}\n\n\tpublic isNoOp(): boolean {\n\t\treturn false;\n\t}\n\n\tpublic attemptToMerge(other: OutgoingViewModelEvent): OutgoingViewModelEvent | null {\n\t\tif (other.kind !== this.kind) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this;\n\t}\n}\n\nexport class CursorStateChangedEvent {\n\n\tpublic readonly kind = OutgoingViewModelEventKind.CursorStateChanged;\n\n\tpublic readonly oldSelections: Selection[] | null;\n\tpublic readonly selections: Selection[];\n\tpublic readonly oldModelVersionId: number;\n\tpublic readonly modelVersionId: number;\n\tpublic readonly source: string;\n\tpublic readonly reason: CursorChangeReason;\n\tpublic readonly reachedMaxCursorCount: boolean;\n\n\tconstructor(oldSelections: Selection[] | null, selections: Selection[], oldModelVersionId: number, modelVersionId: number, source: string, reason: CursorChangeReason, reachedMaxCursorCount: boolean) {\n\t\tthis.oldSelections = oldSelections;\n\t\tthis.selections = selections;\n\t\tthis.oldModelVersionId = oldModelVersionId;\n\t\tthis.modelVersionId = modelVersionId;\n\t\tthis.source = source;\n\t\tthis.reason = reason;\n\t\tthis.reachedMaxCursorCount = reachedMaxCursorCount;\n\t}\n\n\tprivate static _selectionsAreEqual(a: Selection[] | null, b: Selection[] | null): boolean {\n\t\tif (!a && !b) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!a || !b) {\n\t\t\treturn false;\n\t\t}\n\t\tconst aLen = a.length;\n\t\tconst bLen = b.length;\n\t\tif (aLen !== bLen) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let i = 0; i < aLen; i++) {\n\t\t\tif (!a[i].equalsSelection(b[i])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic isNoOp(): boolean {\n\t\treturn (\n\t\t\tCursorStateChangedEvent._selectionsAreEqual(this.oldSelections, this.selections)\n\t\t\t&& this.oldModelVersionId === this.modelVersionId\n\t\t);\n\t}\n\n\tpublic attemptToMerge(other: OutgoingViewModelEvent): OutgoingViewModelEvent | null {\n\t\tif (other.kind !== this.kind) {\n\t\t\treturn null;\n\t\t}\n\t\treturn new CursorStateChangedEvent(\n\t\t\tthis.oldSelections, other.selections, this.oldModelVersionId, other.modelVersionId, other.source, other.reason, this.reachedMaxCursorCount || other.reachedMaxCursorCount\n\t\t);\n\t}\n}\n\nexport class ReadOnlyEditAttemptEvent {\n\n\tpublic readonly kind = OutgoingViewModelEventKind.ReadOnlyEditAttempt;\n\n\tconstructor() {\n\t}\n\n\tpublic isNoOp(): boolean {\n\t\treturn false;\n\t}\n\n\tpublic attemptToMerge(other: OutgoingViewModelEvent): OutgoingViewModelEvent | null {\n\t\tif (other.kind !== this.kind) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this;\n\t}\n}\n\nexport class ModelDecorationsChangedEvent {\n\tpublic readonly kind = OutgoingViewModelEventKind.ModelDecorationsChanged;\n\n\tconstructor(\n\t\tpublic readonly event: IModelDecorationsChangedEvent\n\t) { }\n\n\tpublic isNoOp(): boolean {\n\t\treturn false;\n\t}\n\n\tpublic attemptToMerge(other: OutgoingViewModelEvent): OutgoingViewModelEvent | null {\n\t\treturn null;\n\t}\n}\n\nexport class ModelLanguageChangedEvent {\n\tpublic readonly kind = OutgoingViewModelEventKind.ModelLanguageChanged;\n\n\tconstructor(\n\t\tpublic readonly event: IModelLanguageChangedEvent\n\t) { }\n\n\tpublic isNoOp(): boolean {\n\t\treturn false;\n\t}\n\n\tpublic attemptToMerge(other: OutgoingViewModelEvent): OutgoingViewModelEvent | null {\n\t\treturn null;\n\t}\n}\n\nexport class ModelLanguageConfigurationChangedEvent {\n\tpublic readonly kind = OutgoingViewModelEventKind.ModelLanguageConfigurationChanged;\n\n\tconstructor(\n\t\tpublic readonly event: IModelLanguageConfigurationChangedEvent\n\t) { }\n\n\tpublic isNoOp(): boolean {\n\t\treturn false;\n\t}\n\n\tpublic attemptToMerge(other: OutgoingViewModelEvent): OutgoingViewModelEvent | null {\n\t\treturn null;\n\t}\n}\n\nexport class ModelContentChangedEvent {\n\tpublic readonly kind = OutgoingViewModelEventKind.ModelContentChanged;\n\n\tconstructor(\n\t\tpublic readonly event: IModelContentChangedEvent\n\t) { }\n\n\tpublic isNoOp(): boolean {\n\t\treturn false;\n\t}\n\n\tpublic attemptToMerge(other: OutgoingViewModelEvent): OutgoingViewModelEvent | null {\n\t\treturn null;\n\t}\n}\n\nexport class ModelOptionsChangedEvent {\n\tpublic readonly kind = OutgoingViewModelEventKind.ModelOptionsChanged;\n\n\tconstructor(\n\t\tpublic readonly event: IModelOptionsChangedEvent\n\t) { }\n\n\tpublic isNoOp(): boolean {\n\t\treturn false;\n\t}\n\n\tpublic attemptToMerge(other: OutgoingViewModelEvent): OutgoingViewModelEvent | null {\n\t\treturn null;\n\t}\n}\n\nexport class ModelTokensChangedEvent {\n\tpublic readonly kind = OutgoingViewModelEventKind.ModelTokensChanged;\n\n\tconstructor(\n\t\tpublic readonly event: IModelTokensChangedEvent\n\t) { }\n\n\tpublic isNoOp(): boolean {\n\t\treturn false;\n\t}\n\n\tpublic attemptToMerge(other: OutgoingViewModelEvent): OutgoingViewModelEvent | null {\n\t\treturn null;\n\t}\n}\n\nexport class ModelLineHeightChangedEvent {\n\tpublic readonly kind = OutgoingViewModelEventKind.ModelLineHeightChanged;\n\n\tconstructor(\n\t\tpublic readonly event: OriginalModelLineHeightChangedEvent\n\t) { }\n\n\tpublic isNoOp(): boolean {\n\t\treturn false;\n\t}\n\n\tpublic attemptToMerge(other: OutgoingViewModelEvent): OutgoingViewModelEvent | null {\n\t\treturn null;\n\t}\n}\n\nexport class ModelFontChangedEvent {\n\tpublic readonly kind = OutgoingViewModelEventKind.ModelFontChangedEvent;\n\n\tconstructor(\n\t\tpublic readonly event: OriginalModelFontChangedEvent\n\t) { }\n\n\tpublic isNoOp(): boolean {\n\t\treturn false;\n\t}\n\n\tpublic attemptToMerge(other: OutgoingViewModelEvent): OutgoingViewModelEvent | null {\n\t\treturn null;\n\t}\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 5229, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/monaco-editor/esm/vs/editor/common/coordinatesConverter.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/file%3A/mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/coordinatesConverter.ts","file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/vs/editor/common/coordinatesConverter.ts"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Position } from './core/position.js';\nimport { Range } from './core/range.js';\nimport { ITextModel, PositionAffinity } from './model.js';\n\nexport interface ICoordinatesConverter {\n\t// View -> Model conversion and related methods\n\tconvertViewPositionToModelPosition(viewPosition: Position): Position;\n\tconvertViewRangeToModelRange(viewRange: Range): Range;\n\tvalidateViewPosition(viewPosition: Position, expectedModelPosition: Position): Position;\n\tvalidateViewRange(viewRange: Range, expectedModelRange: Range): Range;\n\n\t// Model -> View conversion and related methods\n\t/**\n\t * @param allowZeroLineNumber Should it return 0 when there are hidden lines at the top and the position is in the hidden area?\n\t * @param belowHiddenRanges When the model position is in a hidden area, should it return the first view position after or before?\n\t */\n\tconvertModelPositionToViewPosition(modelPosition: Position, affinity?: PositionAffinity, allowZeroLineNumber?: boolean, belowHiddenRanges?: boolean): Position;\n\t/**\n\t * @param affinity Only has an effect if the range is empty.\n\t*/\n\tconvertModelRangeToViewRange(modelRange: Range, affinity?: PositionAffinity): Range;\n\tmodelPositionIsVisible(modelPosition: Position): boolean;\n\tgetModelLineViewLineCount(modelLineNumber: number): number;\n\tgetViewLineNumberOfModelPosition(modelLineNumber: number, modelColumn: number): number;\n}\n\nexport class IdentityCoordinatesConverter implements ICoordinatesConverter {\n\n\tprivate readonly _model: ITextModel;\n\n\tconstructor(model: ITextModel) {\n\t\tthis._model = model;\n\t}\n\n\tprivate _validPosition(pos: Position): Position {\n\t\treturn this._model.validatePosition(pos);\n\t}\n\n\tprivate _validRange(range: Range): Range {\n\t\treturn this._model.validateRange(range);\n\t}\n\n\t// View -> Model conversion and related methods\n\n\tpublic convertViewPositionToModelPosition(viewPosition: Position): Position {\n\t\treturn this._validPosition(viewPosition);\n\t}\n\n\tpublic convertViewRangeToModelRange(viewRange: Range): Range {\n\t\treturn this._validRange(viewRange);\n\t}\n\n\tpublic validateViewPosition(_viewPosition: Position, expectedModelPosition: Position): Position {\n\t\treturn this._validPosition(expectedModelPosition);\n\t}\n\n\tpublic validateViewRange(_viewRange: Range, expectedModelRange: Range): Range {\n\t\treturn this._validRange(expectedModelRange);\n\t}\n\n\t// Model -> View conversion and related methods\n\n\tpublic convertModelPositionToViewPosition(modelPosition: Position): Position {\n\t\treturn this._validPosition(modelPosition);\n\t}\n\n\tpublic convertModelRangeToViewRange(modelRange: Range): Range {\n\t\treturn this._validRange(modelRange);\n\t}\n\n\tpublic modelPositionIsVisible(modelPosition: Position): boolean {\n\t\tconst lineCount = this._model.getLineCount();\n\t\tif (modelPosition.lineNumber < 1 || modelPosition.lineNumber > lineCount) {\n\t\t\t// invalid arguments\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic getModelLineViewLineCount(modelLineNumber: number): number {\n\t\treturn 1;\n\t}\n\n\tpublic getViewLineNumberOfModelPosition(modelLineNumber: number, modelColumn: number): number {\n\t\treturn modelLineNumber;\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Position } from './core/position.js';\nimport { Range } from './core/range.js';\nimport { ITextModel, PositionAffinity } from './model.js';\n\nexport interface ICoordinatesConverter {\n\t// View -> Model conversion and related methods\n\tconvertViewPositionToModelPosition(viewPosition: Position): Position;\n\tconvertViewRangeToModelRange(viewRange: Range): Range;\n\tvalidateViewPosition(viewPosition: Position, expectedModelPosition: Position): Position;\n\tvalidateViewRange(viewRange: Range, expectedModelRange: Range): Range;\n\n\t// Model -> View conversion and related methods\n\t/**\n\t * @param allowZeroLineNumber Should it return 0 when there are hidden lines at the top and the position is in the hidden area?\n\t * @param belowHiddenRanges When the model position is in a hidden area, should it return the first view position after or before?\n\t */\n\tconvertModelPositionToViewPosition(modelPosition: Position, affinity?: PositionAffinity, allowZeroLineNumber?: boolean, belowHiddenRanges?: boolean): Position;\n\t/**\n\t * @param affinity Only has an effect if the range is empty.\n\t*/\n\tconvertModelRangeToViewRange(modelRange: Range, affinity?: PositionAffinity): Range;\n\tmodelPositionIsVisible(modelPosition: Position): boolean;\n\tgetModelLineViewLineCount(modelLineNumber: number): number;\n\tgetViewLineNumberOfModelPosition(modelLineNumber: number, modelColumn: number): number;\n}\n\nexport class IdentityCoordinatesConverter implements ICoordinatesConverter {\n\n\tprivate readonly _model: ITextModel;\n\n\tconstructor(model: ITextModel) {\n\t\tthis._model = model;\n\t}\n\n\tprivate _validPosition(pos: Position): Position {\n\t\treturn this._model.validatePosition(pos);\n\t}\n\n\tprivate _validRange(range: Range): Range {\n\t\treturn this._model.validateRange(range);\n\t}\n\n\t// View -> Model conversion and related methods\n\n\tpublic convertViewPositionToModelPosition(viewPosition: Position): Position {\n\t\treturn this._validPosition(viewPosition);\n\t}\n\n\tpublic convertViewRangeToModelRange(viewRange: Range): Range {\n\t\treturn this._validRange(viewRange);\n\t}\n\n\tpublic validateViewPosition(_viewPosition: Position, expectedModelPosition: Position): Position {\n\t\treturn this._validPosition(expectedModelPosition);\n\t}\n\n\tpublic validateViewRange(_viewRange: Range, expectedModelRange: Range): Range {\n\t\treturn this._validRange(expectedModelRange);\n\t}\n\n\t// Model -> View conversion and related methods\n\n\tpublic convertModelPositionToViewPosition(modelPosition: Position): Position {\n\t\treturn this._validPosition(modelPosition);\n\t}\n\n\tpublic convertModelRangeToViewRange(modelRange: Range): Range {\n\t\treturn this._validRange(modelRange);\n\t}\n\n\tpublic modelPositionIsVisible(modelPosition: Position): boolean {\n\t\tconst lineCount = this._model.getLineCount();\n\t\tif (modelPosition.lineNumber < 1 || modelPosition.lineNumber > lineCount) {\n\t\t\t// invalid arguments\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic getModelLineViewLineCount(modelLineNumber: number): number {\n\t\treturn 1;\n\t}\n\n\tpublic getViewLineNumberOfModelPosition(modelLineNumber: number, modelColumn: number): number {\n\t\treturn modelLineNumber;\n\t}\n}\n"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;AA4B1F,MAAO,4BAA4B;IAIxC,YAAY,KAAiB,CAAA;QAC5B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACrB,CAAC;IAEO,cAAc,CAAC,GAAa,EAAA;QACnC,OAAO,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;IAC1C,CAAC;IAEO,WAAW,CAAC,KAAY,EAAA;QAC/B,OAAO,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IACzC,CAAC;IAED,+CAA+C;IAExC,kCAAkC,CAAC,YAAsB,EAAA;QAC/D,OAAO,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;IAC1C,CAAC;IAEM,4BAA4B,CAAC,SAAgB,EAAA;QACnD,OAAO,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;IACpC,CAAC;IAEM,oBAAoB,CAAC,aAAuB,EAAE,qBAA+B,EAAA;QACnF,OAAO,IAAI,CAAC,cAAc,CAAC,qBAAqB,CAAC,CAAC;IACnD,CAAC;IAEM,iBAAiB,CAAC,UAAiB,EAAE,kBAAyB,EAAA;QACpE,OAAO,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,CAAC;IAC7C,CAAC;IAED,+CAA+C;IAExC,kCAAkC,CAAC,aAAuB,EAAA;QAChE,OAAO,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;IAC3C,CAAC;IAEM,4BAA4B,CAAC,UAAiB,EAAA;QACpD,OAAO,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;IACrC,CAAC;IAEM,sBAAsB,CAAC,aAAuB,EAAA;QACpD,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC;QAC7C,IAAI,aAAa,CAAC,UAAU,GAAG,CAAC,IAAI,aAAa,CAAC,UAAU,GAAG,SAAS,EAAE,CAAC;YAC1E,oBAAoB;YACpB,OAAO,KAAK,CAAC;QACd,CAAC;QACD,OAAO,IAAI,CAAC;IACb,CAAC;IAEM,yBAAyB,CAAC,eAAuB,EAAA;QACvD,OAAO,CAAC,CAAC;IACV,CAAC;IAEM,gCAAgC,CAAC,eAAuB,EAAE,WAAmB,EAAA;QACnF,OAAO,eAAe,CAAC;IACxB,CAAC;CACD","debugId":null}},
    {"offset": {"line": 5285, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/monaco-editor/esm/vs/editor/common/editorFeatures.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/file%3A/mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/editorFeatures.ts","file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/vs/editor/common/editorFeatures.ts"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { BrandedService, IConstructorSignature } from '../../platform/instantiation/common/instantiation.js';\n\n/**\n * A feature that will be loaded when the first code editor is constructed and disposed when the system shuts down.\n */\nexport interface IEditorFeature {\n\t// Marker Interface\n}\n\nexport type EditorFeatureCtor = IConstructorSignature<IEditorFeature>;\n\nconst editorFeatures: EditorFeatureCtor[] = [];\n\n/**\n * Registers an editor feature. Editor features will be instantiated only once, as soon as\n * the first code editor is instantiated.\n */\nexport function registerEditorFeature<Services extends BrandedService[]>(ctor: { new(...services: Services): IEditorFeature }): void {\n\teditorFeatures.push(ctor as EditorFeatureCtor);\n}\n\nexport function getEditorFeatures(): Iterable<EditorFeatureCtor> {\n\treturn editorFeatures.slice(0);\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { BrandedService, IConstructorSignature } from '../../platform/instantiation/common/instantiation.js';\n\n/**\n * A feature that will be loaded when the first code editor is constructed and disposed when the system shuts down.\n */\nexport interface IEditorFeature {\n\t// Marker Interface\n}\n\nexport type EditorFeatureCtor = IConstructorSignature<IEditorFeature>;\n\nconst editorFeatures: EditorFeatureCtor[] = [];\n\n/**\n * Registers an editor feature. Editor features will be instantiated only once, as soon as\n * the first code editor is instantiated.\n */\nexport function registerEditorFeature<Services extends BrandedService[]>(ctor: { new(...services: Services): IEditorFeature }): void {\n\teditorFeatures.push(ctor as EditorFeatureCtor);\n}\n\nexport function getEditorFeatures(): Iterable<EditorFeatureCtor> {\n\treturn editorFeatures.slice(0);\n}\n"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;AAahG,MAAM,cAAc,GAAwB,EAAE,CAAC;AAMzC,SAAU,qBAAqB,CAAoC,IAAoD;IAC5H,cAAc,CAAC,IAAI,CAAC,IAAyB,CAAC,CAAC;AAChD,CAAC;AAEK,SAAU,iBAAiB;IAChC,OAAO,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC","debugId":null}},
    {"offset": {"line": 5305, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/monaco-editor/esm/vs/editor/common/languageSelector.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/file%3A/mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/languageSelector.ts","file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/vs/editor/common/languageSelector.ts"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IRelativePattern, match as matchGlobPattern } from '../../base/common/glob.js';\nimport { URI } from '../../base/common/uri.js';\nimport { normalize } from '../../base/common/path.js';\n\nexport interface LanguageFilter {\n\treadonly language?: string;\n\treadonly scheme?: string;\n\treadonly pattern?: string | IRelativePattern;\n\treadonly notebookType?: string;\n\t/**\n\t * This provider is implemented in the UI thread.\n\t */\n\treadonly hasAccessToAllModels?: boolean;\n\treadonly exclusive?: boolean;\n\n\t/**\n\t * This provider comes from a builtin extension.\n\t */\n\treadonly isBuiltin?: boolean;\n}\n\nexport type LanguageSelector = string | LanguageFilter | ReadonlyArray<string | LanguageFilter>;\n\nexport function score(selector: LanguageSelector | undefined, candidateUri: URI, candidateLanguage: string, candidateIsSynchronized: boolean, candidateNotebookUri: URI | undefined, candidateNotebookType: string | undefined): number {\n\n\tif (Array.isArray(selector)) {\n\t\t// array -> take max individual value\n\t\tlet ret = 0;\n\t\tfor (const filter of selector) {\n\t\t\tconst value = score(filter, candidateUri, candidateLanguage, candidateIsSynchronized, candidateNotebookUri, candidateNotebookType);\n\t\t\tif (value === 10) {\n\t\t\t\treturn value; // already at the highest\n\t\t\t}\n\t\t\tif (value > ret) {\n\t\t\t\tret = value;\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\n\t} else if (typeof selector === 'string') {\n\n\t\tif (!candidateIsSynchronized) {\n\t\t\treturn 0;\n\t\t}\n\n\t\t// short-hand notion, desugars to\n\t\t// 'fooLang' -> { language: 'fooLang'}\n\t\t// '*' -> { language: '*' }\n\t\tif (selector === '*') {\n\t\t\treturn 5;\n\t\t} else if (selector === candidateLanguage) {\n\t\t\treturn 10;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\n\t} else if (selector) {\n\t\t// filter -> select accordingly, use defaults for scheme\n\t\tconst { language, pattern, scheme, hasAccessToAllModels, notebookType } = selector as LanguageFilter; // TODO: microsoft/TypeScript#42768\n\n\t\tif (!candidateIsSynchronized && !hasAccessToAllModels) {\n\t\t\treturn 0;\n\t\t}\n\n\t\t// selector targets a notebook -> use the notebook uri instead\n\t\t// of the \"normal\" document uri.\n\t\tif (notebookType && candidateNotebookUri) {\n\t\t\tcandidateUri = candidateNotebookUri;\n\t\t}\n\n\t\tlet ret = 0;\n\n\t\tif (scheme) {\n\t\t\tif (scheme === candidateUri.scheme) {\n\t\t\t\tret = 10;\n\t\t\t} else if (scheme === '*') {\n\t\t\t\tret = 5;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\n\t\tif (language) {\n\t\t\tif (language === candidateLanguage) {\n\t\t\t\tret = 10;\n\t\t\t} else if (language === '*') {\n\t\t\t\tret = Math.max(ret, 5);\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\n\t\tif (notebookType) {\n\t\t\tif (notebookType === candidateNotebookType) {\n\t\t\t\tret = 10;\n\t\t\t} else if (notebookType === '*' && candidateNotebookType !== undefined) {\n\t\t\t\tret = Math.max(ret, 5);\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\n\t\tif (pattern) {\n\t\t\tlet normalizedPattern: string | IRelativePattern;\n\t\t\tif (typeof pattern === 'string') {\n\t\t\t\tnormalizedPattern = pattern;\n\t\t\t} else {\n\t\t\t\t// Since this pattern has a `base` property, we need\n\t\t\t\t// to normalize this path first before passing it on\n\t\t\t\t// because we will compare it against `Uri.fsPath`\n\t\t\t\t// which uses platform specific separators.\n\t\t\t\t// Refs: https://github.com/microsoft/vscode/issues/99938\n\t\t\t\tnormalizedPattern = { ...pattern, base: normalize(pattern.base) };\n\t\t\t}\n\n\t\t\tif (normalizedPattern === candidateUri.fsPath || matchGlobPattern(normalizedPattern, candidateUri.fsPath)) {\n\t\t\t\tret = 10;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\n\t} else {\n\t\treturn 0;\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IRelativePattern, match as matchGlobPattern } from '../../base/common/glob.js';\nimport { URI } from '../../base/common/uri.js';\nimport { normalize } from '../../base/common/path.js';\n\nexport interface LanguageFilter {\n\treadonly language?: string;\n\treadonly scheme?: string;\n\treadonly pattern?: string | IRelativePattern;\n\treadonly notebookType?: string;\n\t/**\n\t * This provider is implemented in the UI thread.\n\t */\n\treadonly hasAccessToAllModels?: boolean;\n\treadonly exclusive?: boolean;\n\n\t/**\n\t * This provider comes from a builtin extension.\n\t */\n\treadonly isBuiltin?: boolean;\n}\n\nexport type LanguageSelector = string | LanguageFilter | ReadonlyArray<string | LanguageFilter>;\n\nexport function score(selector: LanguageSelector | undefined, candidateUri: URI, candidateLanguage: string, candidateIsSynchronized: boolean, candidateNotebookUri: URI | undefined, candidateNotebookType: string | undefined): number {\n\n\tif (Array.isArray(selector)) {\n\t\t// array -> take max individual value\n\t\tlet ret = 0;\n\t\tfor (const filter of selector) {\n\t\t\tconst value = score(filter, candidateUri, candidateLanguage, candidateIsSynchronized, candidateNotebookUri, candidateNotebookType);\n\t\t\tif (value === 10) {\n\t\t\t\treturn value; // already at the highest\n\t\t\t}\n\t\t\tif (value > ret) {\n\t\t\t\tret = value;\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\n\t} else if (typeof selector === 'string') {\n\n\t\tif (!candidateIsSynchronized) {\n\t\t\treturn 0;\n\t\t}\n\n\t\t// short-hand notion, desugars to\n\t\t// 'fooLang' -> { language: 'fooLang'}\n\t\t// '*' -> { language: '*' }\n\t\tif (selector === '*') {\n\t\t\treturn 5;\n\t\t} else if (selector === candidateLanguage) {\n\t\t\treturn 10;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\n\t} else if (selector) {\n\t\t// filter -> select accordingly, use defaults for scheme\n\t\tconst { language, pattern, scheme, hasAccessToAllModels, notebookType } = selector as LanguageFilter; // TODO: microsoft/TypeScript#42768\n\n\t\tif (!candidateIsSynchronized && !hasAccessToAllModels) {\n\t\t\treturn 0;\n\t\t}\n\n\t\t// selector targets a notebook -> use the notebook uri instead\n\t\t// of the \"normal\" document uri.\n\t\tif (notebookType && candidateNotebookUri) {\n\t\t\tcandidateUri = candidateNotebookUri;\n\t\t}\n\n\t\tlet ret = 0;\n\n\t\tif (scheme) {\n\t\t\tif (scheme === candidateUri.scheme) {\n\t\t\t\tret = 10;\n\t\t\t} else if (scheme === '*') {\n\t\t\t\tret = 5;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\n\t\tif (language) {\n\t\t\tif (language === candidateLanguage) {\n\t\t\t\tret = 10;\n\t\t\t} else if (language === '*') {\n\t\t\t\tret = Math.max(ret, 5);\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\n\t\tif (notebookType) {\n\t\t\tif (notebookType === candidateNotebookType) {\n\t\t\t\tret = 10;\n\t\t\t} else if (notebookType === '*' && candidateNotebookType !== undefined) {\n\t\t\t\tret = Math.max(ret, 5);\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\n\t\tif (pattern) {\n\t\t\tlet normalizedPattern: string | IRelativePattern;\n\t\t\tif (typeof pattern === 'string') {\n\t\t\t\tnormalizedPattern = pattern;\n\t\t\t} else {\n\t\t\t\t// Since this pattern has a `base` property, we need\n\t\t\t\t// to normalize this path first before passing it on\n\t\t\t\t// because we will compare it against `Uri.fsPath`\n\t\t\t\t// which uses platform specific separators.\n\t\t\t\t// Refs: https://github.com/microsoft/vscode/issues/99938\n\t\t\t\tnormalizedPattern = { ...pattern, base: normalize(pattern.base) };\n\t\t\t}\n\n\t\t\tif (normalizedPattern === candidateUri.fsPath || matchGlobPattern(normalizedPattern, candidateUri.fsPath)) {\n\t\t\t\tret = 10;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\n\t} else {\n\t\treturn 0;\n\t}\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 5413, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/monaco-editor/esm/vs/editor/common/standaloneStrings.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/vs/editor/common/standaloneStrings.ts"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../nls.js';\n\nexport namespace InspectTokensNLS {\n\texport const inspectTokensAction = nls.localize('inspectTokens', \"Developer: Inspect Tokens\");\n}\n\nexport namespace GoToLineNLS {\n\texport const gotoLineActionLabel = nls.localize('gotoLineActionLabel', \"Go to Line/Column...\");\n}\n\nexport namespace QuickHelpNLS {\n\texport const helpQuickAccessActionLabel = nls.localize('helpQuickAccess', \"Show all Quick Access Providers\");\n}\n\nexport namespace QuickCommandNLS {\n\texport const quickCommandActionLabel = nls.localize('quickCommandActionLabel', \"Command Palette\");\n\texport const quickCommandHelp = nls.localize('quickCommandActionHelp', \"Show And Run Commands\");\n}\n\nexport namespace QuickOutlineNLS {\n\texport const quickOutlineActionLabel = nls.localize('quickOutlineActionLabel', \"Go to Symbol...\");\n\texport const quickOutlineByCategoryActionLabel = nls.localize('quickOutlineByCategoryActionLabel', \"Go to Symbol by Category...\");\n}\n\nexport namespace StandaloneCodeEditorNLS {\n\texport const editorViewAccessibleLabel = nls.localize('editorViewAccessibleLabel', \"Editor content\");\n}\n\nexport namespace ToggleHighContrastNLS {\n\texport const toggleHighContrast = nls.localize('toggleHighContrast', \"Toggle High Contrast Theme\");\n}\n\nexport namespace StandaloneServicesNLS {\n\texport const bulkEditServiceSummary = nls.localize('bulkEditServiceSummary', \"Made {0} edits in {1} files\");\n}\n"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;;;;;AAEhG,OAAO,KAAK,GAAG,MAAM,cAAc,CAAC;;AAE9B,IAAW,gBAAgB,CAEhC;AAFD,CAAA,SAAiB,gBAAgB;IACnB,iBAAA,mBAAmB,GAAG,GAAG,CAAC,4KAAQ,CAAC,GAAe,EAAE,2BAA2B,CAAC,CAAC;AAC/F,CAAC,EAFgB,gBAAgB,IAAA,CAAhB,gBAAgB,GAAA,CAAA,CAAA,GAEhC;AAEK,IAAW,WAAW,CAE3B;AAFD,CAAA,SAAiB,WAAW;IACd,YAAA,mBAAmB,GAAG,GAAG,CAAC,4KAAQ,CAAC,GAAqB,EAAE,sBAAsB,CAAC,CAAC;AAChG,CAAC,EAFgB,WAAW,IAAA,CAAX,WAAW,GAAA,CAAA,CAAA,GAE3B;AAEK,IAAW,YAAY,CAE5B;AAFD,CAAA,SAAiB,YAAY;IACf,aAAA,0BAA0B,GAAG,GAAG,CAAC,4KAAQ,CAAC,GAAiB,EAAE,iCAAiC,CAAC,CAAC;AAC9G,CAAC,EAFgB,YAAY,IAAA,CAAZ,YAAY,GAAA,CAAA,CAAA,GAE5B;AAEK,IAAW,eAAe,CAG/B;AAHD,CAAA,SAAiB,eAAe;IAClB,gBAAA,uBAAuB,GAAG,GAAG,CAAC,4KAAQ,CAAC,GAAyB,EAAE,iBAAiB,CAAC,CAAC;IACrF,gBAAA,gBAAgB,GAAG,GAAG,CAAC,4KAAQ,CAAC,GAAwB,EAAE,uBAAuB,CAAC,CAAC;AACjG,CAAC,EAHgB,eAAe,IAAA,CAAf,eAAe,GAAA,CAAA,CAAA,GAG/B;AAEK,IAAW,eAAe,CAG/B;AAHD,CAAA,SAAiB,eAAe;IAClB,gBAAA,uBAAuB,GAAG,GAAG,CAAC,4KAAQ,CAAC,GAAyB,EAAE,iBAAiB,CAAC,CAAC;IACrF,gBAAA,iCAAiC,GAAG,GAAG,CAAC,4KAAQ,CAAC,GAAmC,EAAE,6BAA6B,CAAC,CAAC;AACnI,CAAC,EAHgB,eAAe,IAAA,CAAf,eAAe,GAAA,CAAA,CAAA,GAG/B;AAEK,IAAW,uBAAuB,CAEvC;AAFD,CAAA,SAAiB,uBAAuB;IAC1B,wBAAA,yBAAyB,GAAG,GAAG,CAAC,4KAAQ,CAAC,GAA2B,EAAE,gBAAgB,CAAC,CAAC;AACtG,CAAC,EAFgB,uBAAuB,IAAA,CAAvB,uBAAuB,GAAA,CAAA,CAAA,GAEvC;AAEK,IAAW,qBAAqB,CAErC;AAFD,CAAA,SAAiB,qBAAqB;IACxB,sBAAA,kBAAkB,GAAG,GAAG,CAAC,4KAAQ,CAAC,GAAoB,EAAE,4BAA4B,CAAC,CAAC;AACpG,CAAC,EAFgB,qBAAqB,IAAA,CAArB,qBAAqB,GAAA,CAAA,CAAA,GAErC;AAEK,IAAW,qBAAqB,CAErC;AAFD,CAAA,SAAiB,qBAAqB;IACxB,sBAAA,sBAAsB,GAAG,GAAG,CAAC,4KAAQ,CAAC,GAAwB,EAAE,6BAA6B,CAAC,CAAC;AAC7G,CAAC,EAFgB,qBAAqB,IAAA,CAArB,qBAAqB,GAAA,CAAA,CAAA,GAErC","debugId":null}},
    {"offset": {"line": 5474, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/monaco-editor/esm/vs/editor/common/standalone/standaloneEnums.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/standalone/file%3A/mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/standalone/standaloneEnums.ts","file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/standalone/vs/editor/common/standalone/standaloneEnums.ts"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n// THIS IS A GENERATED FILE. DO NOT EDIT DIRECTLY.\n\n\nexport enum AccessibilitySupport {\n\t/**\n\t * This should be the browser case where it is not known if a screen reader is attached or no.\n\t */\n\tUnknown = 0,\n\tDisabled = 1,\n\tEnabled = 2\n}\n\nexport enum CodeActionTriggerType {\n\tInvoke = 1,\n\tAuto = 2\n}\n\nexport enum CompletionItemInsertTextRule {\n\tNone = 0,\n\t/**\n\t * Adjust whitespace/indentation of multiline insert texts to\n\t * match the current line indentation.\n\t */\n\tKeepWhitespace = 1,\n\t/**\n\t * `insertText` is a snippet.\n\t */\n\tInsertAsSnippet = 4\n}\n\nexport enum CompletionItemKind {\n\tMethod = 0,\n\tFunction = 1,\n\tConstructor = 2,\n\tField = 3,\n\tVariable = 4,\n\tClass = 5,\n\tStruct = 6,\n\tInterface = 7,\n\tModule = 8,\n\tProperty = 9,\n\tEvent = 10,\n\tOperator = 11,\n\tUnit = 12,\n\tValue = 13,\n\tConstant = 14,\n\tEnum = 15,\n\tEnumMember = 16,\n\tKeyword = 17,\n\tText = 18,\n\tColor = 19,\n\tFile = 20,\n\tReference = 21,\n\tCustomcolor = 22,\n\tFolder = 23,\n\tTypeParameter = 24,\n\tUser = 25,\n\tIssue = 26,\n\tTool = 27,\n\tSnippet = 28\n}\n\nexport enum CompletionItemTag {\n\tDeprecated = 1\n}\n\n/**\n * How a suggest provider was triggered.\n */\nexport enum CompletionTriggerKind {\n\tInvoke = 0,\n\tTriggerCharacter = 1,\n\tTriggerForIncompleteCompletions = 2\n}\n\n/**\n * A positioning preference for rendering content widgets.\n */\nexport enum ContentWidgetPositionPreference {\n\t/**\n\t * Place the content widget exactly at a position\n\t */\n\tEXACT = 0,\n\t/**\n\t * Place the content widget above a position\n\t */\n\tABOVE = 1,\n\t/**\n\t * Place the content widget below a position\n\t */\n\tBELOW = 2\n}\n\n/**\n * Describes the reason the cursor has changed its position.\n */\nexport enum CursorChangeReason {\n\t/**\n\t * Unknown or not set.\n\t */\n\tNotSet = 0,\n\t/**\n\t * A `model.setValue()` was called.\n\t */\n\tContentFlush = 1,\n\t/**\n\t * The `model` has been changed outside of this cursor and the cursor recovers its position from associated markers.\n\t */\n\tRecoverFromMarkers = 2,\n\t/**\n\t * There was an explicit user gesture.\n\t */\n\tExplicit = 3,\n\t/**\n\t * There was a Paste.\n\t */\n\tPaste = 4,\n\t/**\n\t * There was an Undo.\n\t */\n\tUndo = 5,\n\t/**\n\t * There was a Redo.\n\t */\n\tRedo = 6\n}\n\n/**\n * The default end of line to use when instantiating models.\n */\nexport enum DefaultEndOfLine {\n\t/**\n\t * Use line feed (\\n) as the end of line character.\n\t */\n\tLF = 1,\n\t/**\n\t * Use carriage return and line feed (\\r\\n) as the end of line character.\n\t */\n\tCRLF = 2\n}\n\n/**\n * A document highlight kind.\n */\nexport enum DocumentHighlightKind {\n\t/**\n\t * A textual occurrence.\n\t */\n\tText = 0,\n\t/**\n\t * Read-access of a symbol, like reading a variable.\n\t */\n\tRead = 1,\n\t/**\n\t * Write-access of a symbol, like writing to a variable.\n\t */\n\tWrite = 2\n}\n\n/**\n * Configuration options for auto indentation in the editor\n */\nexport enum EditorAutoIndentStrategy {\n\tNone = 0,\n\tKeep = 1,\n\tBrackets = 2,\n\tAdvanced = 3,\n\tFull = 4\n}\n\nexport enum EditorOption {\n\tacceptSuggestionOnCommitCharacter = 0,\n\tacceptSuggestionOnEnter = 1,\n\taccessibilitySupport = 2,\n\taccessibilityPageSize = 3,\n\tallowOverflow = 4,\n\tallowVariableLineHeights = 5,\n\tallowVariableFonts = 6,\n\tallowVariableFontsInAccessibilityMode = 7,\n\tariaLabel = 8,\n\tariaRequired = 9,\n\tautoClosingBrackets = 10,\n\tautoClosingComments = 11,\n\tscreenReaderAnnounceInlineSuggestion = 12,\n\tautoClosingDelete = 13,\n\tautoClosingOvertype = 14,\n\tautoClosingQuotes = 15,\n\tautoIndent = 16,\n\tautoIndentOnPaste = 17,\n\tautoIndentOnPasteWithinString = 18,\n\tautomaticLayout = 19,\n\tautoSurround = 20,\n\tbracketPairColorization = 21,\n\tguides = 22,\n\tcodeLens = 23,\n\tcodeLensFontFamily = 24,\n\tcodeLensFontSize = 25,\n\tcolorDecorators = 26,\n\tcolorDecoratorsLimit = 27,\n\tcolumnSelection = 28,\n\tcomments = 29,\n\tcontextmenu = 30,\n\tcopyWithSyntaxHighlighting = 31,\n\tcursorBlinking = 32,\n\tcursorSmoothCaretAnimation = 33,\n\tcursorStyle = 34,\n\tcursorSurroundingLines = 35,\n\tcursorSurroundingLinesStyle = 36,\n\tcursorWidth = 37,\n\tcursorHeight = 38,\n\tdisableLayerHinting = 39,\n\tdisableMonospaceOptimizations = 40,\n\tdomReadOnly = 41,\n\tdragAndDrop = 42,\n\tdropIntoEditor = 43,\n\teditContext = 44,\n\temptySelectionClipboard = 45,\n\texperimentalGpuAcceleration = 46,\n\texperimentalWhitespaceRendering = 47,\n\textraEditorClassName = 48,\n\tfastScrollSensitivity = 49,\n\tfind = 50,\n\tfixedOverflowWidgets = 51,\n\tfolding = 52,\n\tfoldingStrategy = 53,\n\tfoldingHighlight = 54,\n\tfoldingImportsByDefault = 55,\n\tfoldingMaximumRegions = 56,\n\tunfoldOnClickAfterEndOfLine = 57,\n\tfontFamily = 58,\n\tfontInfo = 59,\n\tfontLigatures = 60,\n\tfontSize = 61,\n\tfontWeight = 62,\n\tfontVariations = 63,\n\tformatOnPaste = 64,\n\tformatOnType = 65,\n\tglyphMargin = 66,\n\tgotoLocation = 67,\n\thideCursorInOverviewRuler = 68,\n\thover = 69,\n\tinDiffEditor = 70,\n\tinlineSuggest = 71,\n\tletterSpacing = 72,\n\tlightbulb = 73,\n\tlineDecorationsWidth = 74,\n\tlineHeight = 75,\n\tlineNumbers = 76,\n\tlineNumbersMinChars = 77,\n\tlinkedEditing = 78,\n\tlinks = 79,\n\tmatchBrackets = 80,\n\tminimap = 81,\n\tmouseStyle = 82,\n\tmouseWheelScrollSensitivity = 83,\n\tmouseWheelZoom = 84,\n\tmultiCursorMergeOverlapping = 85,\n\tmultiCursorModifier = 86,\n\tmultiCursorPaste = 87,\n\tmultiCursorLimit = 88,\n\toccurrencesHighlight = 89,\n\toccurrencesHighlightDelay = 90,\n\tovertypeCursorStyle = 91,\n\tovertypeOnPaste = 92,\n\toverviewRulerBorder = 93,\n\toverviewRulerLanes = 94,\n\tpadding = 95,\n\tpasteAs = 96,\n\tparameterHints = 97,\n\tpeekWidgetDefaultFocus = 98,\n\tplaceholder = 99,\n\tdefinitionLinkOpensInPeek = 100,\n\tquickSuggestions = 101,\n\tquickSuggestionsDelay = 102,\n\treadOnly = 103,\n\treadOnlyMessage = 104,\n\trenameOnType = 105,\n\trenderRichScreenReaderContent = 106,\n\trenderControlCharacters = 107,\n\trenderFinalNewline = 108,\n\trenderLineHighlight = 109,\n\trenderLineHighlightOnlyWhenFocus = 110,\n\trenderValidationDecorations = 111,\n\trenderWhitespace = 112,\n\trevealHorizontalRightPadding = 113,\n\troundedSelection = 114,\n\trulers = 115,\n\tscrollbar = 116,\n\tscrollBeyondLastColumn = 117,\n\tscrollBeyondLastLine = 118,\n\tscrollPredominantAxis = 119,\n\tselectionClipboard = 120,\n\tselectionHighlight = 121,\n\tselectionHighlightMaxLength = 122,\n\tselectionHighlightMultiline = 123,\n\tselectOnLineNumbers = 124,\n\tshowFoldingControls = 125,\n\tshowUnused = 126,\n\tsnippetSuggestions = 127,\n\tsmartSelect = 128,\n\tsmoothScrolling = 129,\n\tstickyScroll = 130,\n\tstickyTabStops = 131,\n\tstopRenderingLineAfter = 132,\n\tsuggest = 133,\n\tsuggestFontSize = 134,\n\tsuggestLineHeight = 135,\n\tsuggestOnTriggerCharacters = 136,\n\tsuggestSelection = 137,\n\ttabCompletion = 138,\n\ttabIndex = 139,\n\ttrimWhitespaceOnDelete = 140,\n\tunicodeHighlighting = 141,\n\tunusualLineTerminators = 142,\n\tuseShadowDOM = 143,\n\tuseTabStops = 144,\n\twordBreak = 145,\n\twordSegmenterLocales = 146,\n\twordSeparators = 147,\n\twordWrap = 148,\n\twordWrapBreakAfterCharacters = 149,\n\twordWrapBreakBeforeCharacters = 150,\n\twordWrapColumn = 151,\n\twordWrapOverride1 = 152,\n\twordWrapOverride2 = 153,\n\twrappingIndent = 154,\n\twrappingStrategy = 155,\n\tshowDeprecated = 156,\n\tinertialScroll = 157,\n\tinlayHints = 158,\n\twrapOnEscapedLineFeeds = 159,\n\teffectiveCursorStyle = 160,\n\teditorClassName = 161,\n\tpixelRatio = 162,\n\ttabFocusMode = 163,\n\tlayoutInfo = 164,\n\twrappingInfo = 165,\n\tdefaultColorDecorators = 166,\n\tcolorDecoratorsActivatedOn = 167,\n\tinlineCompletionsAccessibilityVerbose = 168,\n\teffectiveEditContext = 169,\n\tscrollOnMiddleClick = 170,\n\teffectiveAllowVariableFonts = 171\n}\n\n/**\n * End of line character preference.\n */\nexport enum EndOfLinePreference {\n\t/**\n\t * Use the end of line character identified in the text buffer.\n\t */\n\tTextDefined = 0,\n\t/**\n\t * Use line feed (\\n) as the end of line character.\n\t */\n\tLF = 1,\n\t/**\n\t * Use carriage return and line feed (\\r\\n) as the end of line character.\n\t */\n\tCRLF = 2\n}\n\n/**\n * End of line character preference.\n */\nexport enum EndOfLineSequence {\n\t/**\n\t * Use line feed (\\n) as the end of line character.\n\t */\n\tLF = 0,\n\t/**\n\t * Use carriage return and line feed (\\r\\n) as the end of line character.\n\t */\n\tCRLF = 1\n}\n\n/**\n * Vertical Lane in the glyph margin of the editor.\n */\nexport enum GlyphMarginLane {\n\tLeft = 1,\n\tCenter = 2,\n\tRight = 3\n}\n\nexport enum HoverVerbosityAction {\n\t/**\n\t * Increase the verbosity of the hover\n\t */\n\tIncrease = 0,\n\t/**\n\t * Decrease the verbosity of the hover\n\t */\n\tDecrease = 1\n}\n\n/**\n * Describes what to do with the indentation when pressing Enter.\n */\nexport enum IndentAction {\n\t/**\n\t * Insert new line and copy the previous line's indentation.\n\t */\n\tNone = 0,\n\t/**\n\t * Insert new line and indent once (relative to the previous line's indentation).\n\t */\n\tIndent = 1,\n\t/**\n\t * Insert two new lines:\n\t *  - the first one indented which will hold the cursor\n\t *  - the second one at the same indentation level\n\t */\n\tIndentOutdent = 2,\n\t/**\n\t * Insert new line and outdent once (relative to the previous line's indentation).\n\t */\n\tOutdent = 3\n}\n\nexport enum InjectedTextCursorStops {\n\tBoth = 0,\n\tRight = 1,\n\tLeft = 2,\n\tNone = 3\n}\n\nexport enum InlayHintKind {\n\tType = 1,\n\tParameter = 2\n}\n\nexport enum InlineCompletionDisplayLocationKind {\n\tCode = 1,\n\tLabel = 2\n}\n\nexport enum InlineCompletionEndOfLifeReasonKind {\n\tAccepted = 0,\n\tRejected = 1,\n\tIgnored = 2\n}\n\n/**\n * How an {@link InlineCompletionsProvider inline completion provider} was triggered.\n */\nexport enum InlineCompletionTriggerKind {\n\t/**\n\t * Completion was triggered automatically while editing.\n\t * It is sufficient to return a single completion item in this case.\n\t */\n\tAutomatic = 0,\n\t/**\n\t * Completion was triggered explicitly by a user gesture.\n\t * Return multiple completion items to enable cycling through them.\n\t */\n\tExplicit = 1\n}\n/**\n * Virtual Key Codes, the value does not hold any inherent meaning.\n * Inspired somewhat from https://msdn.microsoft.com/en-us/library/windows/desktop/dd375731(v=vs.85).aspx\n * But these are \"more general\", as they should work across browsers & OS`s.\n */\nexport enum KeyCode {\n\tDependsOnKbLayout = -1,\n\t/**\n\t * Placed first to cover the 0 value of the enum.\n\t */\n\tUnknown = 0,\n\tBackspace = 1,\n\tTab = 2,\n\tEnter = 3,\n\tShift = 4,\n\tCtrl = 5,\n\tAlt = 6,\n\tPauseBreak = 7,\n\tCapsLock = 8,\n\tEscape = 9,\n\tSpace = 10,\n\tPageUp = 11,\n\tPageDown = 12,\n\tEnd = 13,\n\tHome = 14,\n\tLeftArrow = 15,\n\tUpArrow = 16,\n\tRightArrow = 17,\n\tDownArrow = 18,\n\tInsert = 19,\n\tDelete = 20,\n\tDigit0 = 21,\n\tDigit1 = 22,\n\tDigit2 = 23,\n\tDigit3 = 24,\n\tDigit4 = 25,\n\tDigit5 = 26,\n\tDigit6 = 27,\n\tDigit7 = 28,\n\tDigit8 = 29,\n\tDigit9 = 30,\n\tKeyA = 31,\n\tKeyB = 32,\n\tKeyC = 33,\n\tKeyD = 34,\n\tKeyE = 35,\n\tKeyF = 36,\n\tKeyG = 37,\n\tKeyH = 38,\n\tKeyI = 39,\n\tKeyJ = 40,\n\tKeyK = 41,\n\tKeyL = 42,\n\tKeyM = 43,\n\tKeyN = 44,\n\tKeyO = 45,\n\tKeyP = 46,\n\tKeyQ = 47,\n\tKeyR = 48,\n\tKeyS = 49,\n\tKeyT = 50,\n\tKeyU = 51,\n\tKeyV = 52,\n\tKeyW = 53,\n\tKeyX = 54,\n\tKeyY = 55,\n\tKeyZ = 56,\n\tMeta = 57,\n\tContextMenu = 58,\n\tF1 = 59,\n\tF2 = 60,\n\tF3 = 61,\n\tF4 = 62,\n\tF5 = 63,\n\tF6 = 64,\n\tF7 = 65,\n\tF8 = 66,\n\tF9 = 67,\n\tF10 = 68,\n\tF11 = 69,\n\tF12 = 70,\n\tF13 = 71,\n\tF14 = 72,\n\tF15 = 73,\n\tF16 = 74,\n\tF17 = 75,\n\tF18 = 76,\n\tF19 = 77,\n\tF20 = 78,\n\tF21 = 79,\n\tF22 = 80,\n\tF23 = 81,\n\tF24 = 82,\n\tNumLock = 83,\n\tScrollLock = 84,\n\t/**\n\t * Used for miscellaneous characters; it can vary by keyboard.\n\t * For the US standard keyboard, the ';:' key\n\t */\n\tSemicolon = 85,\n\t/**\n\t * For any country/region, the '+' key\n\t * For the US standard keyboard, the '=+' key\n\t */\n\tEqual = 86,\n\t/**\n\t * For any country/region, the ',' key\n\t * For the US standard keyboard, the ',<' key\n\t */\n\tComma = 87,\n\t/**\n\t * For any country/region, the '-' key\n\t * For the US standard keyboard, the '-_' key\n\t */\n\tMinus = 88,\n\t/**\n\t * For any country/region, the '.' key\n\t * For the US standard keyboard, the '.>' key\n\t */\n\tPeriod = 89,\n\t/**\n\t * Used for miscellaneous characters; it can vary by keyboard.\n\t * For the US standard keyboard, the '/?' key\n\t */\n\tSlash = 90,\n\t/**\n\t * Used for miscellaneous characters; it can vary by keyboard.\n\t * For the US standard keyboard, the '`~' key\n\t */\n\tBackquote = 91,\n\t/**\n\t * Used for miscellaneous characters; it can vary by keyboard.\n\t * For the US standard keyboard, the '[{' key\n\t */\n\tBracketLeft = 92,\n\t/**\n\t * Used for miscellaneous characters; it can vary by keyboard.\n\t * For the US standard keyboard, the '\\|' key\n\t */\n\tBackslash = 93,\n\t/**\n\t * Used for miscellaneous characters; it can vary by keyboard.\n\t * For the US standard keyboard, the ']}' key\n\t */\n\tBracketRight = 94,\n\t/**\n\t * Used for miscellaneous characters; it can vary by keyboard.\n\t * For the US standard keyboard, the ''\"' key\n\t */\n\tQuote = 95,\n\t/**\n\t * Used for miscellaneous characters; it can vary by keyboard.\n\t */\n\tOEM_8 = 96,\n\t/**\n\t * Either the angle bracket key or the backslash key on the RT 102-key keyboard.\n\t */\n\tIntlBackslash = 97,\n\tNumpad0 = 98,// VK_NUMPAD0, 0x60, Numeric keypad 0 key\n\tNumpad1 = 99,// VK_NUMPAD1, 0x61, Numeric keypad 1 key\n\tNumpad2 = 100,// VK_NUMPAD2, 0x62, Numeric keypad 2 key\n\tNumpad3 = 101,// VK_NUMPAD3, 0x63, Numeric keypad 3 key\n\tNumpad4 = 102,// VK_NUMPAD4, 0x64, Numeric keypad 4 key\n\tNumpad5 = 103,// VK_NUMPAD5, 0x65, Numeric keypad 5 key\n\tNumpad6 = 104,// VK_NUMPAD6, 0x66, Numeric keypad 6 key\n\tNumpad7 = 105,// VK_NUMPAD7, 0x67, Numeric keypad 7 key\n\tNumpad8 = 106,// VK_NUMPAD8, 0x68, Numeric keypad 8 key\n\tNumpad9 = 107,// VK_NUMPAD9, 0x69, Numeric keypad 9 key\n\tNumpadMultiply = 108,// VK_MULTIPLY, 0x6A, Multiply key\n\tNumpadAdd = 109,// VK_ADD, 0x6B, Add key\n\tNUMPAD_SEPARATOR = 110,// VK_SEPARATOR, 0x6C, Separator key\n\tNumpadSubtract = 111,// VK_SUBTRACT, 0x6D, Subtract key\n\tNumpadDecimal = 112,// VK_DECIMAL, 0x6E, Decimal key\n\tNumpadDivide = 113,// VK_DIVIDE, 0x6F,\n\t/**\n\t * Cover all key codes when IME is processing input.\n\t */\n\tKEY_IN_COMPOSITION = 114,\n\tABNT_C1 = 115,// Brazilian (ABNT) Keyboard\n\tABNT_C2 = 116,// Brazilian (ABNT) Keyboard\n\tAudioVolumeMute = 117,\n\tAudioVolumeUp = 118,\n\tAudioVolumeDown = 119,\n\tBrowserSearch = 120,\n\tBrowserHome = 121,\n\tBrowserBack = 122,\n\tBrowserForward = 123,\n\tMediaTrackNext = 124,\n\tMediaTrackPrevious = 125,\n\tMediaStop = 126,\n\tMediaPlayPause = 127,\n\tLaunchMediaPlayer = 128,\n\tLaunchMail = 129,\n\tLaunchApp2 = 130,\n\t/**\n\t * VK_CLEAR, 0x0C, CLEAR key\n\t */\n\tClear = 131,\n\t/**\n\t * Placed last to cover the length of the enum.\n\t * Please do not depend on this value!\n\t */\n\tMAX_VALUE = 132\n}\n\nexport enum MarkerSeverity {\n\tHint = 1,\n\tInfo = 2,\n\tWarning = 4,\n\tError = 8\n}\n\nexport enum MarkerTag {\n\tUnnecessary = 1,\n\tDeprecated = 2\n}\n\n/**\n * Position in the minimap to render the decoration.\n */\nexport enum MinimapPosition {\n\tInline = 1,\n\tGutter = 2\n}\n\n/**\n * Section header style.\n */\nexport enum MinimapSectionHeaderStyle {\n\tNormal = 1,\n\tUnderlined = 2\n}\n\n/**\n * Type of hit element with the mouse in the editor.\n */\nexport enum MouseTargetType {\n\t/**\n\t * Mouse is on top of an unknown element.\n\t */\n\tUNKNOWN = 0,\n\t/**\n\t * Mouse is on top of the textarea used for input.\n\t */\n\tTEXTAREA = 1,\n\t/**\n\t * Mouse is on top of the glyph margin\n\t */\n\tGUTTER_GLYPH_MARGIN = 2,\n\t/**\n\t * Mouse is on top of the line numbers\n\t */\n\tGUTTER_LINE_NUMBERS = 3,\n\t/**\n\t * Mouse is on top of the line decorations\n\t */\n\tGUTTER_LINE_DECORATIONS = 4,\n\t/**\n\t * Mouse is on top of the whitespace left in the gutter by a view zone.\n\t */\n\tGUTTER_VIEW_ZONE = 5,\n\t/**\n\t * Mouse is on top of text in the content.\n\t */\n\tCONTENT_TEXT = 6,\n\t/**\n\t * Mouse is on top of empty space in the content (e.g. after line text or below last line)\n\t */\n\tCONTENT_EMPTY = 7,\n\t/**\n\t * Mouse is on top of a view zone in the content.\n\t */\n\tCONTENT_VIEW_ZONE = 8,\n\t/**\n\t * Mouse is on top of a content widget.\n\t */\n\tCONTENT_WIDGET = 9,\n\t/**\n\t * Mouse is on top of the decorations overview ruler.\n\t */\n\tOVERVIEW_RULER = 10,\n\t/**\n\t * Mouse is on top of a scrollbar.\n\t */\n\tSCROLLBAR = 11,\n\t/**\n\t * Mouse is on top of an overlay widget.\n\t */\n\tOVERLAY_WIDGET = 12,\n\t/**\n\t * Mouse is outside of the editor.\n\t */\n\tOUTSIDE_EDITOR = 13\n}\n\nexport enum NewSymbolNameTag {\n\tAIGenerated = 1\n}\n\nexport enum NewSymbolNameTriggerKind {\n\tInvoke = 0,\n\tAutomatic = 1\n}\n\n/**\n * A positioning preference for rendering overlay widgets.\n */\nexport enum OverlayWidgetPositionPreference {\n\t/**\n\t * Position the overlay widget in the top right corner\n\t */\n\tTOP_RIGHT_CORNER = 0,\n\t/**\n\t * Position the overlay widget in the bottom right corner\n\t */\n\tBOTTOM_RIGHT_CORNER = 1,\n\t/**\n\t * Position the overlay widget in the top center\n\t */\n\tTOP_CENTER = 2\n}\n\n/**\n * Vertical Lane in the overview ruler of the editor.\n */\nexport enum OverviewRulerLane {\n\tLeft = 1,\n\tCenter = 2,\n\tRight = 4,\n\tFull = 7\n}\n\n/**\n * How a partial acceptance was triggered.\n */\nexport enum PartialAcceptTriggerKind {\n\tWord = 0,\n\tLine = 1,\n\tSuggest = 2\n}\n\nexport enum PositionAffinity {\n\t/**\n\t * Prefers the left most position.\n\t*/\n\tLeft = 0,\n\t/**\n\t * Prefers the right most position.\n\t*/\n\tRight = 1,\n\t/**\n\t * No preference.\n\t*/\n\tNone = 2,\n\t/**\n\t * If the given position is on injected text, prefers the position left of it.\n\t*/\n\tLeftOfInjectedText = 3,\n\t/**\n\t * If the given position is on injected text, prefers the position right of it.\n\t*/\n\tRightOfInjectedText = 4\n}\n\nexport enum RenderLineNumbersType {\n\tOff = 0,\n\tOn = 1,\n\tRelative = 2,\n\tInterval = 3,\n\tCustom = 4\n}\n\nexport enum RenderMinimap {\n\tNone = 0,\n\tText = 1,\n\tBlocks = 2\n}\n\nexport enum ScrollType {\n\tSmooth = 0,\n\tImmediate = 1\n}\n\nexport enum ScrollbarVisibility {\n\tAuto = 1,\n\tHidden = 2,\n\tVisible = 3\n}\n\n/**\n * The direction of a selection.\n */\nexport enum SelectionDirection {\n\t/**\n\t * The selection starts above where it ends.\n\t */\n\tLTR = 0,\n\t/**\n\t * The selection starts below where it ends.\n\t */\n\tRTL = 1\n}\n\nexport enum ShowLightbulbIconMode {\n\tOff = 'off',\n\tOnCode = 'onCode',\n\tOn = 'on'\n}\n\nexport enum SignatureHelpTriggerKind {\n\tInvoke = 1,\n\tTriggerCharacter = 2,\n\tContentChange = 3\n}\n\n/**\n * A symbol kind.\n */\nexport enum SymbolKind {\n\tFile = 0,\n\tModule = 1,\n\tNamespace = 2,\n\tPackage = 3,\n\tClass = 4,\n\tMethod = 5,\n\tProperty = 6,\n\tField = 7,\n\tConstructor = 8,\n\tEnum = 9,\n\tInterface = 10,\n\tFunction = 11,\n\tVariable = 12,\n\tConstant = 13,\n\tString = 14,\n\tNumber = 15,\n\tBoolean = 16,\n\tArray = 17,\n\tObject = 18,\n\tKey = 19,\n\tNull = 20,\n\tEnumMember = 21,\n\tStruct = 22,\n\tEvent = 23,\n\tOperator = 24,\n\tTypeParameter = 25\n}\n\nexport enum SymbolTag {\n\tDeprecated = 1\n}\n\n/**\n * Text Direction for a decoration.\n */\nexport enum TextDirection {\n\tLTR = 0,\n\tRTL = 1\n}\n\n/**\n * The kind of animation in which the editor's cursor should be rendered.\n */\nexport enum TextEditorCursorBlinkingStyle {\n\t/**\n\t * Hidden\n\t */\n\tHidden = 0,\n\t/**\n\t * Blinking\n\t */\n\tBlink = 1,\n\t/**\n\t * Blinking with smooth fading\n\t */\n\tSmooth = 2,\n\t/**\n\t * Blinking with prolonged filled state and smooth fading\n\t */\n\tPhase = 3,\n\t/**\n\t * Expand collapse animation on the y axis\n\t */\n\tExpand = 4,\n\t/**\n\t * No-Blinking\n\t */\n\tSolid = 5\n}\n\n/**\n * The style in which the editor's cursor should be rendered.\n */\nexport enum TextEditorCursorStyle {\n\t/**\n\t * As a vertical line (sitting between two characters).\n\t */\n\tLine = 1,\n\t/**\n\t * As a block (sitting on top of a character).\n\t */\n\tBlock = 2,\n\t/**\n\t * As a horizontal line (sitting under a character).\n\t */\n\tUnderline = 3,\n\t/**\n\t * As a thin vertical line (sitting between two characters).\n\t */\n\tLineThin = 4,\n\t/**\n\t * As an outlined block (sitting on top of a character).\n\t */\n\tBlockOutline = 5,\n\t/**\n\t * As a thin horizontal line (sitting under a character).\n\t */\n\tUnderlineThin = 6\n}\n\n/**\n * Describes the behavior of decorations when typing/editing near their edges.\n * Note: Please do not edit the values, as they very carefully match `DecorationRangeBehavior`\n */\nexport enum TrackedRangeStickiness {\n\tAlwaysGrowsWhenTypingAtEdges = 0,\n\tNeverGrowsWhenTypingAtEdges = 1,\n\tGrowsOnlyWhenTypingBefore = 2,\n\tGrowsOnlyWhenTypingAfter = 3\n}\n\n/**\n * Describes how to indent wrapped lines.\n */\nexport enum WrappingIndent {\n\t/**\n\t * No indentation => wrapped lines begin at column 1.\n\t */\n\tNone = 0,\n\t/**\n\t * Same => wrapped lines get the same indentation as the parent.\n\t */\n\tSame = 1,\n\t/**\n\t * Indent => wrapped lines get +1 indentation toward the parent.\n\t */\n\tIndent = 2,\n\t/**\n\t * DeepIndent => wrapped lines get +2 indentation toward the parent.\n\t */\n\tDeepIndent = 3\n}","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n// THIS IS A GENERATED FILE. DO NOT EDIT DIRECTLY.\n\n\nexport enum AccessibilitySupport {\n\t/**\n\t * This should be the browser case where it is not known if a screen reader is attached or no.\n\t */\n\tUnknown = 0,\n\tDisabled = 1,\n\tEnabled = 2\n}\n\nexport enum CodeActionTriggerType {\n\tInvoke = 1,\n\tAuto = 2\n}\n\nexport enum CompletionItemInsertTextRule {\n\tNone = 0,\n\t/**\n\t * Adjust whitespace/indentation of multiline insert texts to\n\t * match the current line indentation.\n\t */\n\tKeepWhitespace = 1,\n\t/**\n\t * `insertText` is a snippet.\n\t */\n\tInsertAsSnippet = 4\n}\n\nexport enum CompletionItemKind {\n\tMethod = 0,\n\tFunction = 1,\n\tConstructor = 2,\n\tField = 3,\n\tVariable = 4,\n\tClass = 5,\n\tStruct = 6,\n\tInterface = 7,\n\tModule = 8,\n\tProperty = 9,\n\tEvent = 10,\n\tOperator = 11,\n\tUnit = 12,\n\tValue = 13,\n\tConstant = 14,\n\tEnum = 15,\n\tEnumMember = 16,\n\tKeyword = 17,\n\tText = 18,\n\tColor = 19,\n\tFile = 20,\n\tReference = 21,\n\tCustomcolor = 22,\n\tFolder = 23,\n\tTypeParameter = 24,\n\tUser = 25,\n\tIssue = 26,\n\tTool = 27,\n\tSnippet = 28\n}\n\nexport enum CompletionItemTag {\n\tDeprecated = 1\n}\n\n/**\n * How a suggest provider was triggered.\n */\nexport enum CompletionTriggerKind {\n\tInvoke = 0,\n\tTriggerCharacter = 1,\n\tTriggerForIncompleteCompletions = 2\n}\n\n/**\n * A positioning preference for rendering content widgets.\n */\nexport enum ContentWidgetPositionPreference {\n\t/**\n\t * Place the content widget exactly at a position\n\t */\n\tEXACT = 0,\n\t/**\n\t * Place the content widget above a position\n\t */\n\tABOVE = 1,\n\t/**\n\t * Place the content widget below a position\n\t */\n\tBELOW = 2\n}\n\n/**\n * Describes the reason the cursor has changed its position.\n */\nexport enum CursorChangeReason {\n\t/**\n\t * Unknown or not set.\n\t */\n\tNotSet = 0,\n\t/**\n\t * A `model.setValue()` was called.\n\t */\n\tContentFlush = 1,\n\t/**\n\t * The `model` has been changed outside of this cursor and the cursor recovers its position from associated markers.\n\t */\n\tRecoverFromMarkers = 2,\n\t/**\n\t * There was an explicit user gesture.\n\t */\n\tExplicit = 3,\n\t/**\n\t * There was a Paste.\n\t */\n\tPaste = 4,\n\t/**\n\t * There was an Undo.\n\t */\n\tUndo = 5,\n\t/**\n\t * There was a Redo.\n\t */\n\tRedo = 6\n}\n\n/**\n * The default end of line to use when instantiating models.\n */\nexport enum DefaultEndOfLine {\n\t/**\n\t * Use line feed (\\n) as the end of line character.\n\t */\n\tLF = 1,\n\t/**\n\t * Use carriage return and line feed (\\r\\n) as the end of line character.\n\t */\n\tCRLF = 2\n}\n\n/**\n * A document highlight kind.\n */\nexport enum DocumentHighlightKind {\n\t/**\n\t * A textual occurrence.\n\t */\n\tText = 0,\n\t/**\n\t * Read-access of a symbol, like reading a variable.\n\t */\n\tRead = 1,\n\t/**\n\t * Write-access of a symbol, like writing to a variable.\n\t */\n\tWrite = 2\n}\n\n/**\n * Configuration options for auto indentation in the editor\n */\nexport enum EditorAutoIndentStrategy {\n\tNone = 0,\n\tKeep = 1,\n\tBrackets = 2,\n\tAdvanced = 3,\n\tFull = 4\n}\n\nexport enum EditorOption {\n\tacceptSuggestionOnCommitCharacter = 0,\n\tacceptSuggestionOnEnter = 1,\n\taccessibilitySupport = 2,\n\taccessibilityPageSize = 3,\n\tallowOverflow = 4,\n\tallowVariableLineHeights = 5,\n\tallowVariableFonts = 6,\n\tallowVariableFontsInAccessibilityMode = 7,\n\tariaLabel = 8,\n\tariaRequired = 9,\n\tautoClosingBrackets = 10,\n\tautoClosingComments = 11,\n\tscreenReaderAnnounceInlineSuggestion = 12,\n\tautoClosingDelete = 13,\n\tautoClosingOvertype = 14,\n\tautoClosingQuotes = 15,\n\tautoIndent = 16,\n\tautoIndentOnPaste = 17,\n\tautoIndentOnPasteWithinString = 18,\n\tautomaticLayout = 19,\n\tautoSurround = 20,\n\tbracketPairColorization = 21,\n\tguides = 22,\n\tcodeLens = 23,\n\tcodeLensFontFamily = 24,\n\tcodeLensFontSize = 25,\n\tcolorDecorators = 26,\n\tcolorDecoratorsLimit = 27,\n\tcolumnSelection = 28,\n\tcomments = 29,\n\tcontextmenu = 30,\n\tcopyWithSyntaxHighlighting = 31,\n\tcursorBlinking = 32,\n\tcursorSmoothCaretAnimation = 33,\n\tcursorStyle = 34,\n\tcursorSurroundingLines = 35,\n\tcursorSurroundingLinesStyle = 36,\n\tcursorWidth = 37,\n\tcursorHeight = 38,\n\tdisableLayerHinting = 39,\n\tdisableMonospaceOptimizations = 40,\n\tdomReadOnly = 41,\n\tdragAndDrop = 42,\n\tdropIntoEditor = 43,\n\teditContext = 44,\n\temptySelectionClipboard = 45,\n\texperimentalGpuAcceleration = 46,\n\texperimentalWhitespaceRendering = 47,\n\textraEditorClassName = 48,\n\tfastScrollSensitivity = 49,\n\tfind = 50,\n\tfixedOverflowWidgets = 51,\n\tfolding = 52,\n\tfoldingStrategy = 53,\n\tfoldingHighlight = 54,\n\tfoldingImportsByDefault = 55,\n\tfoldingMaximumRegions = 56,\n\tunfoldOnClickAfterEndOfLine = 57,\n\tfontFamily = 58,\n\tfontInfo = 59,\n\tfontLigatures = 60,\n\tfontSize = 61,\n\tfontWeight = 62,\n\tfontVariations = 63,\n\tformatOnPaste = 64,\n\tformatOnType = 65,\n\tglyphMargin = 66,\n\tgotoLocation = 67,\n\thideCursorInOverviewRuler = 68,\n\thover = 69,\n\tinDiffEditor = 70,\n\tinlineSuggest = 71,\n\tletterSpacing = 72,\n\tlightbulb = 73,\n\tlineDecorationsWidth = 74,\n\tlineHeight = 75,\n\tlineNumbers = 76,\n\tlineNumbersMinChars = 77,\n\tlinkedEditing = 78,\n\tlinks = 79,\n\tmatchBrackets = 80,\n\tminimap = 81,\n\tmouseStyle = 82,\n\tmouseWheelScrollSensitivity = 83,\n\tmouseWheelZoom = 84,\n\tmultiCursorMergeOverlapping = 85,\n\tmultiCursorModifier = 86,\n\tmultiCursorPaste = 87,\n\tmultiCursorLimit = 88,\n\toccurrencesHighlight = 89,\n\toccurrencesHighlightDelay = 90,\n\tovertypeCursorStyle = 91,\n\tovertypeOnPaste = 92,\n\toverviewRulerBorder = 93,\n\toverviewRulerLanes = 94,\n\tpadding = 95,\n\tpasteAs = 96,\n\tparameterHints = 97,\n\tpeekWidgetDefaultFocus = 98,\n\tplaceholder = 99,\n\tdefinitionLinkOpensInPeek = 100,\n\tquickSuggestions = 101,\n\tquickSuggestionsDelay = 102,\n\treadOnly = 103,\n\treadOnlyMessage = 104,\n\trenameOnType = 105,\n\trenderRichScreenReaderContent = 106,\n\trenderControlCharacters = 107,\n\trenderFinalNewline = 108,\n\trenderLineHighlight = 109,\n\trenderLineHighlightOnlyWhenFocus = 110,\n\trenderValidationDecorations = 111,\n\trenderWhitespace = 112,\n\trevealHorizontalRightPadding = 113,\n\troundedSelection = 114,\n\trulers = 115,\n\tscrollbar = 116,\n\tscrollBeyondLastColumn = 117,\n\tscrollBeyondLastLine = 118,\n\tscrollPredominantAxis = 119,\n\tselectionClipboard = 120,\n\tselectionHighlight = 121,\n\tselectionHighlightMaxLength = 122,\n\tselectionHighlightMultiline = 123,\n\tselectOnLineNumbers = 124,\n\tshowFoldingControls = 125,\n\tshowUnused = 126,\n\tsnippetSuggestions = 127,\n\tsmartSelect = 128,\n\tsmoothScrolling = 129,\n\tstickyScroll = 130,\n\tstickyTabStops = 131,\n\tstopRenderingLineAfter = 132,\n\tsuggest = 133,\n\tsuggestFontSize = 134,\n\tsuggestLineHeight = 135,\n\tsuggestOnTriggerCharacters = 136,\n\tsuggestSelection = 137,\n\ttabCompletion = 138,\n\ttabIndex = 139,\n\ttrimWhitespaceOnDelete = 140,\n\tunicodeHighlighting = 141,\n\tunusualLineTerminators = 142,\n\tuseShadowDOM = 143,\n\tuseTabStops = 144,\n\twordBreak = 145,\n\twordSegmenterLocales = 146,\n\twordSeparators = 147,\n\twordWrap = 148,\n\twordWrapBreakAfterCharacters = 149,\n\twordWrapBreakBeforeCharacters = 150,\n\twordWrapColumn = 151,\n\twordWrapOverride1 = 152,\n\twordWrapOverride2 = 153,\n\twrappingIndent = 154,\n\twrappingStrategy = 155,\n\tshowDeprecated = 156,\n\tinertialScroll = 157,\n\tinlayHints = 158,\n\twrapOnEscapedLineFeeds = 159,\n\teffectiveCursorStyle = 160,\n\teditorClassName = 161,\n\tpixelRatio = 162,\n\ttabFocusMode = 163,\n\tlayoutInfo = 164,\n\twrappingInfo = 165,\n\tdefaultColorDecorators = 166,\n\tcolorDecoratorsActivatedOn = 167,\n\tinlineCompletionsAccessibilityVerbose = 168,\n\teffectiveEditContext = 169,\n\tscrollOnMiddleClick = 170,\n\teffectiveAllowVariableFonts = 171\n}\n\n/**\n * End of line character preference.\n */\nexport enum EndOfLinePreference {\n\t/**\n\t * Use the end of line character identified in the text buffer.\n\t */\n\tTextDefined = 0,\n\t/**\n\t * Use line feed (\\n) as the end of line character.\n\t */\n\tLF = 1,\n\t/**\n\t * Use carriage return and line feed (\\r\\n) as the end of line character.\n\t */\n\tCRLF = 2\n}\n\n/**\n * End of line character preference.\n */\nexport enum EndOfLineSequence {\n\t/**\n\t * Use line feed (\\n) as the end of line character.\n\t */\n\tLF = 0,\n\t/**\n\t * Use carriage return and line feed (\\r\\n) as the end of line character.\n\t */\n\tCRLF = 1\n}\n\n/**\n * Vertical Lane in the glyph margin of the editor.\n */\nexport enum GlyphMarginLane {\n\tLeft = 1,\n\tCenter = 2,\n\tRight = 3\n}\n\nexport enum HoverVerbosityAction {\n\t/**\n\t * Increase the verbosity of the hover\n\t */\n\tIncrease = 0,\n\t/**\n\t * Decrease the verbosity of the hover\n\t */\n\tDecrease = 1\n}\n\n/**\n * Describes what to do with the indentation when pressing Enter.\n */\nexport enum IndentAction {\n\t/**\n\t * Insert new line and copy the previous line's indentation.\n\t */\n\tNone = 0,\n\t/**\n\t * Insert new line and indent once (relative to the previous line's indentation).\n\t */\n\tIndent = 1,\n\t/**\n\t * Insert two new lines:\n\t *  - the first one indented which will hold the cursor\n\t *  - the second one at the same indentation level\n\t */\n\tIndentOutdent = 2,\n\t/**\n\t * Insert new line and outdent once (relative to the previous line's indentation).\n\t */\n\tOutdent = 3\n}\n\nexport enum InjectedTextCursorStops {\n\tBoth = 0,\n\tRight = 1,\n\tLeft = 2,\n\tNone = 3\n}\n\nexport enum InlayHintKind {\n\tType = 1,\n\tParameter = 2\n}\n\nexport enum InlineCompletionDisplayLocationKind {\n\tCode = 1,\n\tLabel = 2\n}\n\nexport enum InlineCompletionEndOfLifeReasonKind {\n\tAccepted = 0,\n\tRejected = 1,\n\tIgnored = 2\n}\n\n/**\n * How an {@link InlineCompletionsProvider inline completion provider} was triggered.\n */\nexport enum InlineCompletionTriggerKind {\n\t/**\n\t * Completion was triggered automatically while editing.\n\t * It is sufficient to return a single completion item in this case.\n\t */\n\tAutomatic = 0,\n\t/**\n\t * Completion was triggered explicitly by a user gesture.\n\t * Return multiple completion items to enable cycling through them.\n\t */\n\tExplicit = 1\n}\n/**\n * Virtual Key Codes, the value does not hold any inherent meaning.\n * Inspired somewhat from https://msdn.microsoft.com/en-us/library/windows/desktop/dd375731(v=vs.85).aspx\n * But these are \"more general\", as they should work across browsers & OS`s.\n */\nexport enum KeyCode {\n\tDependsOnKbLayout = -1,\n\t/**\n\t * Placed first to cover the 0 value of the enum.\n\t */\n\tUnknown = 0,\n\tBackspace = 1,\n\tTab = 2,\n\tEnter = 3,\n\tShift = 4,\n\tCtrl = 5,\n\tAlt = 6,\n\tPauseBreak = 7,\n\tCapsLock = 8,\n\tEscape = 9,\n\tSpace = 10,\n\tPageUp = 11,\n\tPageDown = 12,\n\tEnd = 13,\n\tHome = 14,\n\tLeftArrow = 15,\n\tUpArrow = 16,\n\tRightArrow = 17,\n\tDownArrow = 18,\n\tInsert = 19,\n\tDelete = 20,\n\tDigit0 = 21,\n\tDigit1 = 22,\n\tDigit2 = 23,\n\tDigit3 = 24,\n\tDigit4 = 25,\n\tDigit5 = 26,\n\tDigit6 = 27,\n\tDigit7 = 28,\n\tDigit8 = 29,\n\tDigit9 = 30,\n\tKeyA = 31,\n\tKeyB = 32,\n\tKeyC = 33,\n\tKeyD = 34,\n\tKeyE = 35,\n\tKeyF = 36,\n\tKeyG = 37,\n\tKeyH = 38,\n\tKeyI = 39,\n\tKeyJ = 40,\n\tKeyK = 41,\n\tKeyL = 42,\n\tKeyM = 43,\n\tKeyN = 44,\n\tKeyO = 45,\n\tKeyP = 46,\n\tKeyQ = 47,\n\tKeyR = 48,\n\tKeyS = 49,\n\tKeyT = 50,\n\tKeyU = 51,\n\tKeyV = 52,\n\tKeyW = 53,\n\tKeyX = 54,\n\tKeyY = 55,\n\tKeyZ = 56,\n\tMeta = 57,\n\tContextMenu = 58,\n\tF1 = 59,\n\tF2 = 60,\n\tF3 = 61,\n\tF4 = 62,\n\tF5 = 63,\n\tF6 = 64,\n\tF7 = 65,\n\tF8 = 66,\n\tF9 = 67,\n\tF10 = 68,\n\tF11 = 69,\n\tF12 = 70,\n\tF13 = 71,\n\tF14 = 72,\n\tF15 = 73,\n\tF16 = 74,\n\tF17 = 75,\n\tF18 = 76,\n\tF19 = 77,\n\tF20 = 78,\n\tF21 = 79,\n\tF22 = 80,\n\tF23 = 81,\n\tF24 = 82,\n\tNumLock = 83,\n\tScrollLock = 84,\n\t/**\n\t * Used for miscellaneous characters; it can vary by keyboard.\n\t * For the US standard keyboard, the ';:' key\n\t */\n\tSemicolon = 85,\n\t/**\n\t * For any country/region, the '+' key\n\t * For the US standard keyboard, the '=+' key\n\t */\n\tEqual = 86,\n\t/**\n\t * For any country/region, the ',' key\n\t * For the US standard keyboard, the ',<' key\n\t */\n\tComma = 87,\n\t/**\n\t * For any country/region, the '-' key\n\t * For the US standard keyboard, the '-_' key\n\t */\n\tMinus = 88,\n\t/**\n\t * For any country/region, the '.' key\n\t * For the US standard keyboard, the '.>' key\n\t */\n\tPeriod = 89,\n\t/**\n\t * Used for miscellaneous characters; it can vary by keyboard.\n\t * For the US standard keyboard, the '/?' key\n\t */\n\tSlash = 90,\n\t/**\n\t * Used for miscellaneous characters; it can vary by keyboard.\n\t * For the US standard keyboard, the '`~' key\n\t */\n\tBackquote = 91,\n\t/**\n\t * Used for miscellaneous characters; it can vary by keyboard.\n\t * For the US standard keyboard, the '[{' key\n\t */\n\tBracketLeft = 92,\n\t/**\n\t * Used for miscellaneous characters; it can vary by keyboard.\n\t * For the US standard keyboard, the '\\|' key\n\t */\n\tBackslash = 93,\n\t/**\n\t * Used for miscellaneous characters; it can vary by keyboard.\n\t * For the US standard keyboard, the ']}' key\n\t */\n\tBracketRight = 94,\n\t/**\n\t * Used for miscellaneous characters; it can vary by keyboard.\n\t * For the US standard keyboard, the ''\"' key\n\t */\n\tQuote = 95,\n\t/**\n\t * Used for miscellaneous characters; it can vary by keyboard.\n\t */\n\tOEM_8 = 96,\n\t/**\n\t * Either the angle bracket key or the backslash key on the RT 102-key keyboard.\n\t */\n\tIntlBackslash = 97,\n\tNumpad0 = 98,// VK_NUMPAD0, 0x60, Numeric keypad 0 key\n\tNumpad1 = 99,// VK_NUMPAD1, 0x61, Numeric keypad 1 key\n\tNumpad2 = 100,// VK_NUMPAD2, 0x62, Numeric keypad 2 key\n\tNumpad3 = 101,// VK_NUMPAD3, 0x63, Numeric keypad 3 key\n\tNumpad4 = 102,// VK_NUMPAD4, 0x64, Numeric keypad 4 key\n\tNumpad5 = 103,// VK_NUMPAD5, 0x65, Numeric keypad 5 key\n\tNumpad6 = 104,// VK_NUMPAD6, 0x66, Numeric keypad 6 key\n\tNumpad7 = 105,// VK_NUMPAD7, 0x67, Numeric keypad 7 key\n\tNumpad8 = 106,// VK_NUMPAD8, 0x68, Numeric keypad 8 key\n\tNumpad9 = 107,// VK_NUMPAD9, 0x69, Numeric keypad 9 key\n\tNumpadMultiply = 108,// VK_MULTIPLY, 0x6A, Multiply key\n\tNumpadAdd = 109,// VK_ADD, 0x6B, Add key\n\tNUMPAD_SEPARATOR = 110,// VK_SEPARATOR, 0x6C, Separator key\n\tNumpadSubtract = 111,// VK_SUBTRACT, 0x6D, Subtract key\n\tNumpadDecimal = 112,// VK_DECIMAL, 0x6E, Decimal key\n\tNumpadDivide = 113,// VK_DIVIDE, 0x6F,\n\t/**\n\t * Cover all key codes when IME is processing input.\n\t */\n\tKEY_IN_COMPOSITION = 114,\n\tABNT_C1 = 115,// Brazilian (ABNT) Keyboard\n\tABNT_C2 = 116,// Brazilian (ABNT) Keyboard\n\tAudioVolumeMute = 117,\n\tAudioVolumeUp = 118,\n\tAudioVolumeDown = 119,\n\tBrowserSearch = 120,\n\tBrowserHome = 121,\n\tBrowserBack = 122,\n\tBrowserForward = 123,\n\tMediaTrackNext = 124,\n\tMediaTrackPrevious = 125,\n\tMediaStop = 126,\n\tMediaPlayPause = 127,\n\tLaunchMediaPlayer = 128,\n\tLaunchMail = 129,\n\tLaunchApp2 = 130,\n\t/**\n\t * VK_CLEAR, 0x0C, CLEAR key\n\t */\n\tClear = 131,\n\t/**\n\t * Placed last to cover the length of the enum.\n\t * Please do not depend on this value!\n\t */\n\tMAX_VALUE = 132\n}\n\nexport enum MarkerSeverity {\n\tHint = 1,\n\tInfo = 2,\n\tWarning = 4,\n\tError = 8\n}\n\nexport enum MarkerTag {\n\tUnnecessary = 1,\n\tDeprecated = 2\n}\n\n/**\n * Position in the minimap to render the decoration.\n */\nexport enum MinimapPosition {\n\tInline = 1,\n\tGutter = 2\n}\n\n/**\n * Section header style.\n */\nexport enum MinimapSectionHeaderStyle {\n\tNormal = 1,\n\tUnderlined = 2\n}\n\n/**\n * Type of hit element with the mouse in the editor.\n */\nexport enum MouseTargetType {\n\t/**\n\t * Mouse is on top of an unknown element.\n\t */\n\tUNKNOWN = 0,\n\t/**\n\t * Mouse is on top of the textarea used for input.\n\t */\n\tTEXTAREA = 1,\n\t/**\n\t * Mouse is on top of the glyph margin\n\t */\n\tGUTTER_GLYPH_MARGIN = 2,\n\t/**\n\t * Mouse is on top of the line numbers\n\t */\n\tGUTTER_LINE_NUMBERS = 3,\n\t/**\n\t * Mouse is on top of the line decorations\n\t */\n\tGUTTER_LINE_DECORATIONS = 4,\n\t/**\n\t * Mouse is on top of the whitespace left in the gutter by a view zone.\n\t */\n\tGUTTER_VIEW_ZONE = 5,\n\t/**\n\t * Mouse is on top of text in the content.\n\t */\n\tCONTENT_TEXT = 6,\n\t/**\n\t * Mouse is on top of empty space in the content (e.g. after line text or below last line)\n\t */\n\tCONTENT_EMPTY = 7,\n\t/**\n\t * Mouse is on top of a view zone in the content.\n\t */\n\tCONTENT_VIEW_ZONE = 8,\n\t/**\n\t * Mouse is on top of a content widget.\n\t */\n\tCONTENT_WIDGET = 9,\n\t/**\n\t * Mouse is on top of the decorations overview ruler.\n\t */\n\tOVERVIEW_RULER = 10,\n\t/**\n\t * Mouse is on top of a scrollbar.\n\t */\n\tSCROLLBAR = 11,\n\t/**\n\t * Mouse is on top of an overlay widget.\n\t */\n\tOVERLAY_WIDGET = 12,\n\t/**\n\t * Mouse is outside of the editor.\n\t */\n\tOUTSIDE_EDITOR = 13\n}\n\nexport enum NewSymbolNameTag {\n\tAIGenerated = 1\n}\n\nexport enum NewSymbolNameTriggerKind {\n\tInvoke = 0,\n\tAutomatic = 1\n}\n\n/**\n * A positioning preference for rendering overlay widgets.\n */\nexport enum OverlayWidgetPositionPreference {\n\t/**\n\t * Position the overlay widget in the top right corner\n\t */\n\tTOP_RIGHT_CORNER = 0,\n\t/**\n\t * Position the overlay widget in the bottom right corner\n\t */\n\tBOTTOM_RIGHT_CORNER = 1,\n\t/**\n\t * Position the overlay widget in the top center\n\t */\n\tTOP_CENTER = 2\n}\n\n/**\n * Vertical Lane in the overview ruler of the editor.\n */\nexport enum OverviewRulerLane {\n\tLeft = 1,\n\tCenter = 2,\n\tRight = 4,\n\tFull = 7\n}\n\n/**\n * How a partial acceptance was triggered.\n */\nexport enum PartialAcceptTriggerKind {\n\tWord = 0,\n\tLine = 1,\n\tSuggest = 2\n}\n\nexport enum PositionAffinity {\n\t/**\n\t * Prefers the left most position.\n\t*/\n\tLeft = 0,\n\t/**\n\t * Prefers the right most position.\n\t*/\n\tRight = 1,\n\t/**\n\t * No preference.\n\t*/\n\tNone = 2,\n\t/**\n\t * If the given position is on injected text, prefers the position left of it.\n\t*/\n\tLeftOfInjectedText = 3,\n\t/**\n\t * If the given position is on injected text, prefers the position right of it.\n\t*/\n\tRightOfInjectedText = 4\n}\n\nexport enum RenderLineNumbersType {\n\tOff = 0,\n\tOn = 1,\n\tRelative = 2,\n\tInterval = 3,\n\tCustom = 4\n}\n\nexport enum RenderMinimap {\n\tNone = 0,\n\tText = 1,\n\tBlocks = 2\n}\n\nexport enum ScrollType {\n\tSmooth = 0,\n\tImmediate = 1\n}\n\nexport enum ScrollbarVisibility {\n\tAuto = 1,\n\tHidden = 2,\n\tVisible = 3\n}\n\n/**\n * The direction of a selection.\n */\nexport enum SelectionDirection {\n\t/**\n\t * The selection starts above where it ends.\n\t */\n\tLTR = 0,\n\t/**\n\t * The selection starts below where it ends.\n\t */\n\tRTL = 1\n}\n\nexport enum ShowLightbulbIconMode {\n\tOff = 'off',\n\tOnCode = 'onCode',\n\tOn = 'on'\n}\n\nexport enum SignatureHelpTriggerKind {\n\tInvoke = 1,\n\tTriggerCharacter = 2,\n\tContentChange = 3\n}\n\n/**\n * A symbol kind.\n */\nexport enum SymbolKind {\n\tFile = 0,\n\tModule = 1,\n\tNamespace = 2,\n\tPackage = 3,\n\tClass = 4,\n\tMethod = 5,\n\tProperty = 6,\n\tField = 7,\n\tConstructor = 8,\n\tEnum = 9,\n\tInterface = 10,\n\tFunction = 11,\n\tVariable = 12,\n\tConstant = 13,\n\tString = 14,\n\tNumber = 15,\n\tBoolean = 16,\n\tArray = 17,\n\tObject = 18,\n\tKey = 19,\n\tNull = 20,\n\tEnumMember = 21,\n\tStruct = 22,\n\tEvent = 23,\n\tOperator = 24,\n\tTypeParameter = 25\n}\n\nexport enum SymbolTag {\n\tDeprecated = 1\n}\n\n/**\n * Text Direction for a decoration.\n */\nexport enum TextDirection {\n\tLTR = 0,\n\tRTL = 1\n}\n\n/**\n * The kind of animation in which the editor's cursor should be rendered.\n */\nexport enum TextEditorCursorBlinkingStyle {\n\t/**\n\t * Hidden\n\t */\n\tHidden = 0,\n\t/**\n\t * Blinking\n\t */\n\tBlink = 1,\n\t/**\n\t * Blinking with smooth fading\n\t */\n\tSmooth = 2,\n\t/**\n\t * Blinking with prolonged filled state and smooth fading\n\t */\n\tPhase = 3,\n\t/**\n\t * Expand collapse animation on the y axis\n\t */\n\tExpand = 4,\n\t/**\n\t * No-Blinking\n\t */\n\tSolid = 5\n}\n\n/**\n * The style in which the editor's cursor should be rendered.\n */\nexport enum TextEditorCursorStyle {\n\t/**\n\t * As a vertical line (sitting between two characters).\n\t */\n\tLine = 1,\n\t/**\n\t * As a block (sitting on top of a character).\n\t */\n\tBlock = 2,\n\t/**\n\t * As a horizontal line (sitting under a character).\n\t */\n\tUnderline = 3,\n\t/**\n\t * As a thin vertical line (sitting between two characters).\n\t */\n\tLineThin = 4,\n\t/**\n\t * As an outlined block (sitting on top of a character).\n\t */\n\tBlockOutline = 5,\n\t/**\n\t * As a thin horizontal line (sitting under a character).\n\t */\n\tUnderlineThin = 6\n}\n\n/**\n * Describes the behavior of decorations when typing/editing near their edges.\n * Note: Please do not edit the values, as they very carefully match `DecorationRangeBehavior`\n */\nexport enum TrackedRangeStickiness {\n\tAlwaysGrowsWhenTypingAtEdges = 0,\n\tNeverGrowsWhenTypingAtEdges = 1,\n\tGrowsOnlyWhenTypingBefore = 2,\n\tGrowsOnlyWhenTypingAfter = 3\n}\n\n/**\n * Describes how to indent wrapped lines.\n */\nexport enum WrappingIndent {\n\t/**\n\t * No indentation => wrapped lines begin at column 1.\n\t */\n\tNone = 0,\n\t/**\n\t * Same => wrapped lines get the same indentation as the parent.\n\t */\n\tSame = 1,\n\t/**\n\t * Indent => wrapped lines get +1 indentation toward the parent.\n\t */\n\tIndent = 2,\n\t/**\n\t * DeepIndent => wrapped lines get +2 indentation toward the parent.\n\t */\n\tDeepIndent = 3\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 6423, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/monaco-editor/esm/vs/editor/common/languageFeatureRegistry.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/file%3A/mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/languageFeatureRegistry.ts","file:///Users/liza/Desktop/FrontReady/node_modules/monaco-editor/esm/vs/editor/common/vs/editor/common/languageFeatureRegistry.ts"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from '../../base/common/event.js';\nimport { IDisposable, toDisposable } from '../../base/common/lifecycle.js';\nimport { ITextModel, shouldSynchronizeModel } from './model.js';\nimport { LanguageFilter, LanguageSelector, score } from './languageSelector.js';\nimport { URI } from '../../base/common/uri.js';\n\ninterface Entry<T> {\n\treadonly selector: LanguageSelector;\n\treadonly provider: T;\n\t_score: number;\n\treadonly _time: number;\n}\n\nfunction isExclusive(selector: LanguageSelector): boolean {\n\tif (typeof selector === 'string') {\n\t\treturn false;\n\t} else if (Array.isArray(selector)) {\n\t\treturn selector.every(isExclusive);\n\t} else {\n\t\treturn !!(selector as LanguageFilter).exclusive; // TODO: microsoft/TypeScript#42768\n\t}\n}\n\nexport interface NotebookInfo {\n\treadonly uri: URI;\n\treadonly type: string;\n}\n\nexport interface NotebookInfoResolver {\n\t(uri: URI): NotebookInfo | undefined;\n}\n\nclass MatchCandidate {\n\tconstructor(\n\t\treadonly uri: URI,\n\t\treadonly languageId: string,\n\t\treadonly notebookUri: URI | undefined,\n\t\treadonly notebookType: string | undefined,\n\t\treadonly recursive: boolean,\n\t) { }\n\n\tequals(other: MatchCandidate): boolean {\n\t\treturn this.notebookType === other.notebookType\n\t\t\t&& this.languageId === other.languageId\n\t\t\t&& this.uri.toString() === other.uri.toString()\n\t\t\t&& this.notebookUri?.toString() === other.notebookUri?.toString()\n\t\t\t&& this.recursive === other.recursive;\n\t}\n}\n\nexport class LanguageFeatureRegistry<T> {\n\n\tprivate _clock: number = 0;\n\tprivate readonly _entries: Entry<T>[] = [];\n\n\tprivate readonly _onDidChange = new Emitter<number>();\n\tget onDidChange() { return this._onDidChange.event; }\n\n\tconstructor(private readonly _notebookInfoResolver?: NotebookInfoResolver) { }\n\n\tregister(selector: LanguageSelector, provider: T): IDisposable {\n\n\t\tlet entry: Entry<T> | undefined = {\n\t\t\tselector,\n\t\t\tprovider,\n\t\t\t_score: -1,\n\t\t\t_time: this._clock++\n\t\t};\n\n\t\tthis._entries.push(entry);\n\t\tthis._lastCandidate = undefined;\n\t\tthis._onDidChange.fire(this._entries.length);\n\n\t\treturn toDisposable(() => {\n\t\t\tif (entry) {\n\t\t\t\tconst idx = this._entries.indexOf(entry);\n\t\t\t\tif (idx >= 0) {\n\t\t\t\t\tthis._entries.splice(idx, 1);\n\t\t\t\t\tthis._lastCandidate = undefined;\n\t\t\t\t\tthis._onDidChange.fire(this._entries.length);\n\t\t\t\t\tentry = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\thas(model: ITextModel): boolean {\n\t\treturn this.all(model).length > 0;\n\t}\n\n\tall(model: ITextModel): T[] {\n\t\tif (!model) {\n\t\t\treturn [];\n\t\t}\n\n\t\tthis._updateScores(model, false);\n\t\tconst result: T[] = [];\n\n\t\t// from registry\n\t\tfor (const entry of this._entries) {\n\t\t\tif (entry._score > 0) {\n\t\t\t\tresult.push(entry.provider);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tordered(model: ITextModel, recursive = false): T[] {\n\t\tconst result: T[] = [];\n\t\tthis._orderedForEach(model, recursive, entry => result.push(entry.provider));\n\t\treturn result;\n\t}\n\n\torderedGroups(model: ITextModel): T[][] {\n\t\tconst result: T[][] = [];\n\t\tlet lastBucket: T[];\n\t\tlet lastBucketScore: number;\n\n\t\tthis._orderedForEach(model, false, entry => {\n\t\t\tif (lastBucket && lastBucketScore === entry._score) {\n\t\t\t\tlastBucket.push(entry.provider);\n\t\t\t} else {\n\t\t\t\tlastBucketScore = entry._score;\n\t\t\t\tlastBucket = [entry.provider];\n\t\t\t\tresult.push(lastBucket);\n\t\t\t}\n\t\t});\n\n\t\treturn result;\n\t}\n\n\tprivate _orderedForEach(model: ITextModel, recursive: boolean, callback: (provider: Entry<T>) => void): void {\n\n\t\tthis._updateScores(model, recursive);\n\n\t\tfor (const entry of this._entries) {\n\t\t\tif (entry._score > 0) {\n\t\t\t\tcallback(entry);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _lastCandidate: MatchCandidate | undefined;\n\n\tprivate _updateScores(model: ITextModel, recursive: boolean): void {\n\n\t\tconst notebookInfo = this._notebookInfoResolver?.(model.uri);\n\n\t\t// use the uri (scheme, pattern) of the notebook info iff we have one\n\t\t// otherwise it's the model's/document's uri\n\t\tconst candidate = notebookInfo\n\t\t\t? new MatchCandidate(model.uri, model.getLanguageId(), notebookInfo.uri, notebookInfo.type, recursive)\n\t\t\t: new MatchCandidate(model.uri, model.getLanguageId(), undefined, undefined, recursive);\n\n\t\tif (this._lastCandidate?.equals(candidate)) {\n\t\t\t// nothing has changed\n\t\t\treturn;\n\t\t}\n\n\t\tthis._lastCandidate = candidate;\n\n\t\tfor (const entry of this._entries) {\n\t\t\tentry._score = score(entry.selector, candidate.uri, candidate.languageId, shouldSynchronizeModel(model), candidate.notebookUri, candidate.notebookType);\n\n\t\t\tif (isExclusive(entry.selector) && entry._score > 0) {\n\t\t\t\tif (recursive) {\n\t\t\t\t\tentry._score = 0;\n\t\t\t\t} else {\n\t\t\t\t\t// support for one exclusive selector that overwrites\n\t\t\t\t\t// any other selector\n\t\t\t\t\tfor (const entry of this._entries) {\n\t\t\t\t\t\tentry._score = 0;\n\t\t\t\t\t}\n\t\t\t\t\tentry._score = 1000;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// needs sorting\n\t\tthis._entries.sort(LanguageFeatureRegistry._compareByScoreAndTime);\n\t}\n\n\tprivate static _compareByScoreAndTime(a: Entry<unknown>, b: Entry<unknown>): number {\n\t\tif (a._score < b._score) {\n\t\t\treturn 1;\n\t\t} else if (a._score > b._score) {\n\t\t\treturn -1;\n\t\t}\n\n\t\t// De-prioritize built-in providers\n\t\tif (isBuiltinSelector(a.selector) && !isBuiltinSelector(b.selector)) {\n\t\t\treturn 1;\n\t\t} else if (!isBuiltinSelector(a.selector) && isBuiltinSelector(b.selector)) {\n\t\t\treturn -1;\n\t\t}\n\n\t\tif (a._time < b._time) {\n\t\t\treturn 1;\n\t\t} else if (a._time > b._time) {\n\t\t\treturn -1;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n}\n\nfunction isBuiltinSelector(selector: LanguageSelector): boolean {\n\tif (typeof selector === 'string') {\n\t\treturn false;\n\t}\n\n\tif (Array.isArray(selector)) {\n\t\treturn selector.some(isBuiltinSelector);\n\t}\n\n\treturn Boolean((selector as LanguageFilter).isBuiltin);\n}\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from '../../base/common/event.js';\nimport { IDisposable, toDisposable } from '../../base/common/lifecycle.js';\nimport { ITextModel, shouldSynchronizeModel } from './model.js';\nimport { LanguageFilter, LanguageSelector, score } from './languageSelector.js';\nimport { URI } from '../../base/common/uri.js';\n\ninterface Entry<T> {\n\treadonly selector: LanguageSelector;\n\treadonly provider: T;\n\t_score: number;\n\treadonly _time: number;\n}\n\nfunction isExclusive(selector: LanguageSelector): boolean {\n\tif (typeof selector === 'string') {\n\t\treturn false;\n\t} else if (Array.isArray(selector)) {\n\t\treturn selector.every(isExclusive);\n\t} else {\n\t\treturn !!(selector as LanguageFilter).exclusive; // TODO: microsoft/TypeScript#42768\n\t}\n}\n\nexport interface NotebookInfo {\n\treadonly uri: URI;\n\treadonly type: string;\n}\n\nexport interface NotebookInfoResolver {\n\t(uri: URI): NotebookInfo | undefined;\n}\n\nclass MatchCandidate {\n\tconstructor(\n\t\treadonly uri: URI,\n\t\treadonly languageId: string,\n\t\treadonly notebookUri: URI | undefined,\n\t\treadonly notebookType: string | undefined,\n\t\treadonly recursive: boolean,\n\t) { }\n\n\tequals(other: MatchCandidate): boolean {\n\t\treturn this.notebookType === other.notebookType\n\t\t\t&& this.languageId === other.languageId\n\t\t\t&& this.uri.toString() === other.uri.toString()\n\t\t\t&& this.notebookUri?.toString() === other.notebookUri?.toString()\n\t\t\t&& this.recursive === other.recursive;\n\t}\n}\n\nexport class LanguageFeatureRegistry<T> {\n\n\tprivate _clock: number = 0;\n\tprivate readonly _entries: Entry<T>[] = [];\n\n\tprivate readonly _onDidChange = new Emitter<number>();\n\tget onDidChange() { return this._onDidChange.event; }\n\n\tconstructor(private readonly _notebookInfoResolver?: NotebookInfoResolver) { }\n\n\tregister(selector: LanguageSelector, provider: T): IDisposable {\n\n\t\tlet entry: Entry<T> | undefined = {\n\t\t\tselector,\n\t\t\tprovider,\n\t\t\t_score: -1,\n\t\t\t_time: this._clock++\n\t\t};\n\n\t\tthis._entries.push(entry);\n\t\tthis._lastCandidate = undefined;\n\t\tthis._onDidChange.fire(this._entries.length);\n\n\t\treturn toDisposable(() => {\n\t\t\tif (entry) {\n\t\t\t\tconst idx = this._entries.indexOf(entry);\n\t\t\t\tif (idx >= 0) {\n\t\t\t\t\tthis._entries.splice(idx, 1);\n\t\t\t\t\tthis._lastCandidate = undefined;\n\t\t\t\t\tthis._onDidChange.fire(this._entries.length);\n\t\t\t\t\tentry = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\thas(model: ITextModel): boolean {\n\t\treturn this.all(model).length > 0;\n\t}\n\n\tall(model: ITextModel): T[] {\n\t\tif (!model) {\n\t\t\treturn [];\n\t\t}\n\n\t\tthis._updateScores(model, false);\n\t\tconst result: T[] = [];\n\n\t\t// from registry\n\t\tfor (const entry of this._entries) {\n\t\t\tif (entry._score > 0) {\n\t\t\t\tresult.push(entry.provider);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tordered(model: ITextModel, recursive = false): T[] {\n\t\tconst result: T[] = [];\n\t\tthis._orderedForEach(model, recursive, entry => result.push(entry.provider));\n\t\treturn result;\n\t}\n\n\torderedGroups(model: ITextModel): T[][] {\n\t\tconst result: T[][] = [];\n\t\tlet lastBucket: T[];\n\t\tlet lastBucketScore: number;\n\n\t\tthis._orderedForEach(model, false, entry => {\n\t\t\tif (lastBucket && lastBucketScore === entry._score) {\n\t\t\t\tlastBucket.push(entry.provider);\n\t\t\t} else {\n\t\t\t\tlastBucketScore = entry._score;\n\t\t\t\tlastBucket = [entry.provider];\n\t\t\t\tresult.push(lastBucket);\n\t\t\t}\n\t\t});\n\n\t\treturn result;\n\t}\n\n\tprivate _orderedForEach(model: ITextModel, recursive: boolean, callback: (provider: Entry<T>) => void): void {\n\n\t\tthis._updateScores(model, recursive);\n\n\t\tfor (const entry of this._entries) {\n\t\t\tif (entry._score > 0) {\n\t\t\t\tcallback(entry);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _lastCandidate: MatchCandidate | undefined;\n\n\tprivate _updateScores(model: ITextModel, recursive: boolean): void {\n\n\t\tconst notebookInfo = this._notebookInfoResolver?.(model.uri);\n\n\t\t// use the uri (scheme, pattern) of the notebook info iff we have one\n\t\t// otherwise it's the model's/document's uri\n\t\tconst candidate = notebookInfo\n\t\t\t? new MatchCandidate(model.uri, model.getLanguageId(), notebookInfo.uri, notebookInfo.type, recursive)\n\t\t\t: new MatchCandidate(model.uri, model.getLanguageId(), undefined, undefined, recursive);\n\n\t\tif (this._lastCandidate?.equals(candidate)) {\n\t\t\t// nothing has changed\n\t\t\treturn;\n\t\t}\n\n\t\tthis._lastCandidate = candidate;\n\n\t\tfor (const entry of this._entries) {\n\t\t\tentry._score = score(entry.selector, candidate.uri, candidate.languageId, shouldSynchronizeModel(model), candidate.notebookUri, candidate.notebookType);\n\n\t\t\tif (isExclusive(entry.selector) && entry._score > 0) {\n\t\t\t\tif (recursive) {\n\t\t\t\t\tentry._score = 0;\n\t\t\t\t} else {\n\t\t\t\t\t// support for one exclusive selector that overwrites\n\t\t\t\t\t// any other selector\n\t\t\t\t\tfor (const entry of this._entries) {\n\t\t\t\t\t\tentry._score = 0;\n\t\t\t\t\t}\n\t\t\t\t\tentry._score = 1000;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// needs sorting\n\t\tthis._entries.sort(LanguageFeatureRegistry._compareByScoreAndTime);\n\t}\n\n\tprivate static _compareByScoreAndTime(a: Entry<unknown>, b: Entry<unknown>): number {\n\t\tif (a._score < b._score) {\n\t\t\treturn 1;\n\t\t} else if (a._score > b._score) {\n\t\t\treturn -1;\n\t\t}\n\n\t\t// De-prioritize built-in providers\n\t\tif (isBuiltinSelector(a.selector) && !isBuiltinSelector(b.selector)) {\n\t\t\treturn 1;\n\t\t} else if (!isBuiltinSelector(a.selector) && isBuiltinSelector(b.selector)) {\n\t\t\treturn -1;\n\t\t}\n\n\t\tif (a._time < b._time) {\n\t\t\treturn 1;\n\t\t} else if (a._time > b._time) {\n\t\t\treturn -1;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n}\n\nfunction isBuiltinSelector(selector: LanguageSelector): boolean {\n\tif (typeof selector === 'string') {\n\t\treturn false;\n\t}\n\n\tif (Array.isArray(selector)) {\n\t\treturn selector.some(isBuiltinSelector);\n\t}\n\n\treturn Boolean((selector as LanguageFilter).isBuiltin);\n}\n\n"],"names":[],"mappings":"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","debugId":null}}]
}