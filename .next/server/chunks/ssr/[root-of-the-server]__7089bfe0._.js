module.exports = [
"[project]/.next-internal/server/app/qwestion/page/actions.js [app-rsc] (server actions loader, ecmascript)", ((__turbopack_context__, module, exports) => {

}),
"[project]/src/app/favicon.ico.mjs { IMAGE => \"[project]/src/app/favicon.ico (static in ecmascript)\" } [app-rsc] (structured image object, ecmascript, Next.js Server Component)", ((__turbopack_context__) => {

__turbopack_context__.n(__turbopack_context__.i("[project]/src/app/favicon.ico.mjs { IMAGE => \"[project]/src/app/favicon.ico (static in ecmascript)\" } [app-rsc] (structured image object, ecmascript)"));
}),
"[project]/src/app/layout.tsx [app-rsc] (ecmascript, Next.js Server Component)", ((__turbopack_context__) => {

__turbopack_context__.n(__turbopack_context__.i("[project]/src/app/layout.tsx [app-rsc] (ecmascript)"));
}),
"[project]/src/app/data/qwestion.json (json)", ((__turbopack_context__) => {

__turbopack_context__.v(JSON.parse("[{\"id\":1,\"title\":\"Объясни делегирование событий\",\"content\":[{\"type\":\"paragraph\",\"text\":\"**Делегирование событий** — это приём, при котором обработчик события добавляется не на каждый дочерний элемент, а на их родительский элемент. Обработчик будет срабатывать всякий раз, когда событие произойдёт на дочерних элементах, благодаря механизму всплытия событий в DOM.\"},{\"type\":\"title\",\"text\":\"Преимущества:\"},{\"type\":\"positive\",\"items\":[\"**Снижается нагрузка на память**, так как нужен только один обработчик на родителе, вместо добавления обработчиков на каждый дочерний элемент.\",\"**Нет необходимости отвязывать обработчик** от элементов, которые были удалены, **и привязывать** его к новым элементам.\"]},{\"type\":\"links\",\"items\":[\"https://davidwalsh.name/event-delegate\",\"https://stackoverflow.com/questions/1687296/what-is-dom-event-delegation\"]}]},{\"id\":2,\"title\":\"Объясни, как работает `this` в JavaScript\",\"content\":[{\"type\":\"paragraph\",\"text\":\"`this` — один из самых запутанных концептов в JavaScript. Значение `this` зависит от того, как вызвана функция.\"},{\"type\":\"list\",\"items\":[\"Если функция вызвана с помощью ключевого слова `new`, то `this` внутри неё — это **новый объект**.\",\"Если функция вызвана через `apply`, `call` или `bind`, то `this` — это **объект, переданный в качестве аргумента**.\",\"Если функция вызвана как метод объекта (`obj.method()`), то `this` указывает **на этот объект**.\",\"Если функция вызвана как **обычная функция** без условий выше, то `this` — это **глобальный объект** (в браузере `window`). В строгом режиме (`'use strict'`) `this` будет `undefined`.\",\"Если применимы несколько правил, приоритет отдаётся более высокому.\",\"Если функция — **стрелочная** (`arrow function`), то она игнорирует все правила и берёт `this` **из лексического окружения** на момент создания.\"]},{\"type\":\"paragraph\",\"text\":\"В **ES6** появилась возможность использовать стрелочные функции, которые наследуют `this` из внешнего контекста. Это удобно, но не позволяет управлять контекстом через `call`/`apply`, что может ломать совместимость, например, с **jQuery**.\"},{\"type\":\"links\",\"items\":[\"https://codeburst.io/the-simple-rules-to-this-in-javascript-35d97f31bde3?gi=86e207b492c4\",\"https://stackoverflow.com/a/3127440/1751946\"]}]},{\"id\":3,\"title\":\"Объясни, как работает прототипное наследование\",\"content\":[{\"type\":\"paragraph\",\"text\":\"**Все объекты** JavaScript имеют свойство `__proto__` (кроме созданных через `Object.create(null)`). Оно указывает на другой объект — прототип. Если у объекта запрашивается свойство, которого у него нет, движок идёт по цепочке прототипов, пока не найдёт его или не достигнет конца цепи.\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"// Родительский конструктор\\nfunction Animal(name) {\\n  this.name = name;\\n}\\n\\n// Метод в прототипе родителя\\nAnimal.prototype.makeSound = function () {\\n  console.log('The ' + this.constructor.name + ' makes a sound.');\\n};\\n\\n// Конструктор потомка\\nfunction Dog(name) {\\n  Animal.call(this, name);\\n}\\n\\n// Устанавливаем прототип\\nObject.setPrototypeOf(Dog.prototype, Animal.prototype);\\n\\n// Метод потомка\\nDog.prototype.bark = function () {\\n  console.log('Woof!');\\n};\\n\\nconst bolt = new Dog('Bolt');\\nconsole.log(bolt.name); // \\\"Bolt\\\"\\nbolt.makeSound(); // \\\"The Dog makes a sound.\\\"\\nbolt.bark(); // \\\"Woof!\\\"\"},{\"type\":\"title\",\"text\":\"Важно отметить:\"},{\"type\":\"main\",\"items\":[\"Метод `.makeSound` не определён у `Dog`, поэтому движок находит его выше по цепочке прототипов — у `Animal`.\",\"Использовать `Object.create` для построения цепочки больше не рекомендуется, лучше применять `Object.setPrototypeOf`.\"]},{\"type\":\"links\",\"items\":[\"http://dmitrysoshnikov.com/ecmascript/javascript-the-core/\",\"https://www.quora.com/What-is-prototypal-inheritance/answer/Kyle-Simpson\",\"https://davidwalsh.name/javascript-objects\",\"https://crockford.com/javascript/prototypal.html\",\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain\"]}]},{\"id\":4,\"title\":\"Что ты думаешь о AMD vs CommonJS?\",\"content\":[{\"type\":\"paragraph\",\"text\":\"**AMD** и **CommonJS** — это способы реализовать модульную систему, которой изначально не было в JavaScript до появления **ES2015**.\"},{\"type\":\"list\",\"items\":[\"**CommonJS** работает **синхронно** и был спроектирован **для серверной разработки**.\",\"**AMD (Asynchronous Module Definition)** работает **асинхронно** и был создан **для браузеров**.\",\"**Синтаксис AMD** считается более многословным.\",\"**CommonJS** ближе по стилю к **import** в других языках и используется в Node.js.\",\"Если склеить весь код в один bundle, преимущества асинхронной загрузки AMD теряются.\"]},{\"type\":\"paragraph\",\"text\":\"С **ES2015** появились нативные модули, поддерживающие как синхронную, так и асинхронную загрузку. Даже если они ещё не полностью поддерживаются браузерами и Node, можно использовать транспилеры.\"},{\"type\":\"links\",\"items\":[\"https://auth0.com/blog/javascript-module-systems-showdown/\",\"https://stackoverflow.com/questions/16521471/relation-between-commonjs-amd-and-requirejs\"]}]},{\"id\":5,\"title\":\"Объясни, почему следующий код не работает как IIFE: `function foo(){ }()`;. Что нужно изменить, чтобы сделать корректное IIFE?\",\"content\":[{\"type\":\"paragraph\",\"text\":\"**IIFE (Immediately Invoked Function Expression)** — это функция, которая вызывается сразу после определения. В примере `function foo(){}();` движок видит это как `function foo(){}` (объявление функции) и `();` (попытку вызвать что-то без имени), поэтому возникает ошибка `SyntaxError`.\"},{\"type\":\"paragraph\",\"text\":\"Чтобы превратить объявление функции в выражение, нужно заключить её в скобки. Например:\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"(function foo(){ })();\\n(function foo(){ }());\"},{\"type\":\"paragraph\",\"text\":\"Можно также использовать оператор `void`:\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"const foo = void (function bar() {\\n  return 'foo';\\n})();\\n\\nconsole.log(foo); // undefined\"},{\"type\":\"main\",\"items\":[\"Функция превращается в выражение благодаря скобкам.\",\"Такая функция не попадает в глобальную область видимости.\",\"Минус `void` — результат вызова всегда `undefined`, поэтому вернуть значение нельзя.\"]},{\"type\":\"links\",\"items\":[\"https://lucybain.com/blog/2014/immediately-invoked-function-expression/\",\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void\"]}]},{\"id\":6,\"title\":\"В чём разница между переменной со значением `null`, `undefined` или `undeclared`? Как бы ты проверил любое из этих состояний?\",\"content\":[{\"type\":\"paragraph\",\"text\":\"`Undeclared` (необъявленная переменная)\"},{\"type\":\"list\",\"items\":[\"Создаётся, когда ты присваиваешь значение идентификатору, который не был заранее объявлен с помощью `var`, `let` или `const`.\",\"Такая переменная попадает в глобальную область видимости.\",\"В строгом режиме (`'use strict'`) при попытке присвоить значение необъявленной переменной будет выброшена `ReferenceError`.\",\"Необъявленные переменные — это плохо, как и любые глобальные. Их стоит избегать.\",\"Проверять можно только оборачивая обращение к ней в `try`/`catch`.\"]},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"function foo() {\\n  x = 1; // Throws a ReferenceError in strict mode\\n}\\n\\nfoo();\\nconsole.log(x)\"},{\"type\":\"paragraph\",\"text\":\"`Undefined` (неопределённая переменная)\"},{\"type\":\"list\",\"items\":[\"Переменная **объявлена**, но значение **не присвоено**.\",\"Её тип — `undefined`.\",\"Если функция ничего не возвращает, переменная, которой присвоен её результат, тоже будет `undefined`.\",\"Проверять лучше через строгое равенство (`===`) или через `typeof` (который вернёт строку `'undefined'`).\",\"Нельзя использовать нестрогое равенство (`==`), потому что оно вернёт `true` и для `null`.\"]},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"var foo;\\nconsole.log(foo); // undefined\\nconsole.log(foo === undefined); // true\\nconsole.log(typeof foo === 'undefined'); // true\\n\\nconsole.log(foo == null); // true. Wrong, don't use this to check!\\nfunction bar() {}\\nvar baz = bar();\\nconsole.log(baz); // undefined\"},{\"type\":\"paragraph\",\"text\":\"`null` (переменная со значением `null`)\"},{\"type\":\"list\",\"items\":[\"Переменной явно присвоено значение `null`.\",\"Это **«отсутствие значения»**, но в отличие от `undefined`, оно **задано явно**.\",\"Проверять нужно строго через ===.\",\"Не использовать `==`, потому что тогда результат будет `true` и для `undefined`\"]},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"var foo = null;\\nconsole.log(foo === null); // true\\nconsole.log(typeof foo === 'object'); // true\\n\\nconsole.log(foo == undefined); // true. Wrong, don't use this to check!\"},{\"type\":\"main\",\"items\":[\"**Никогда** не оставлять переменные **необъявленными** или **без значения**.\",\"Если не планируется использовать переменную прямо сейчас — лучше явно присвоить `null`.\",\"Линтер (например `ESLint`) поможет отлавливать использование необъявленных переменных.\"]},{\"type\":\"links\",\"items\":[\"https://stackoverflow.com/questions/15985875/effect-of-declared-and-undeclared-variables\",\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\"]}]},{\"id\":7,\"title\":\"Что такое замыкание, и как/зачем его использовать?\",\"content\":[{\"type\":\"paragraph\",\"text\":\"**Замыкание** — это комбинация функции и лексического окружения, в котором эта функция была объявлена. Слово **«лексическое»** указывает на то, что лексическая область видимости использует местоположение, где переменная была объявлена в исходном коде, чтобы определить, где эта переменная доступна. Замыкания — это функции, которые имеют доступ к переменным внешней (охватывающей) функции — к её цепочке областей видимости — даже после того, как внешняя функция завершила выполнение.\"},{\"type\":\"paragraph\",\"text\":\"Зачем их использовать?\"},{\"type\":\"list\",\"items\":[\"Для защиты данных / имитации приватных методов с помощью замыканий. Часто применяется в модульном паттерне.\",\"Для частичных применений функций или каррирования.\"]},{\"type\":\"links\",\"items\":[\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Closures\",\"https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-closure-b2f0d2152b36\"]}]},{\"id\":8,\"title\":\"Можешь описать основное различие между циклом .`forEach` и `.map()` и почему выбрал бы один вместо другого?\",\"content\":[{\"type\":\"paragraph\",\"text\":\"Чтобы понять различия между ними, посмотрим, что делает каждая функция.\"},{\"type\":\"paragraph\",\"text\":\"`forEach`\"},{\"type\":\"list\",\"items\":[\"Перебирает элементы массива\",\"Выполняет колбэк для каждого элемента.\",\"Не возвращает значение.\"]},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"const a = [1, 2, 3];\\nconst doubled = a.forEach((num, index) => {\\n  // Do something with num and/or index.\\n});\\n\\n// doubled = undefined\"},{\"type\":\"paragraph\",\"text\":\"`map`\"},{\"type\":\"list\",\"items\":[\"Перебирает элементы массива.\",\"Отображает» каждый элемент в новый, вызывая функцию для каждого элемента, создавая в результате новый массив.\"]},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"const a = [1, 2, 3];\\nconst doubled = a.map((num) => {\\n  return num * 2;\\n});\\n\\n// doubled = [2, 4, 6]\"},{\"type\":\"paragraph\",\"text\":\"Основное различие между `.forEach` и `.map`() заключается в том, что `.map()` возвращает новый массив.\"},{\"type\":\"main\",\"items\":[\"Если тебе нужен **результат**, но ты не хочешь изменять исходный массив — выбирай `.map()`.\",\"Если нужно просто **пройтись по массиву** и что-то выполнить — достаточно .`forEach`.\"]},{\"type\":\"links\",\"items\":[\"https://codeburst.io/javascript-map-vs-foreach-f38111822c0f?gi=c9bc30cbec28\"]}]},{\"id\":9,\"title\":\"Какой типичный сценарий использования анонимных функций?\",\"content\":[{\"type\":\"paragraph\",\"text\":\"Их можно использовать в **IIFE** (Immediately Invoked Function Expressions), чтобы инкапсулировать код в локальной области видимости и не допустить **«утечки»** переменных в глобальную область.\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"(function () {\\n  // Some code here.\\n})();\"},{\"type\":\"paragraph\",\"text\":\"В качестве **колбэка**, который используется один раз и больше нигде не нужен. Код выглядит более самодостаточным и читаемым, когда обработчики определяются прямо внутри вызывающего их кода.\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"setTimeout(function () {\\n  console.log('Hello world!');\\n}, 1000);\"},{\"type\":\"paragraph\",\"text\":\"В **аргументах** конструкций **функционального программирования** или **Lodash** (аналогично колбэкам)\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"const arr = [1, 2, 3];\\nconst double = arr.map(function (el) {\\n  return el * 2;\\n});\\nconsole.log(double); // [2, 4, 6]\"}]},{\"id\":10,\"title\":\"Как ты организуешь код? (модульный паттерн, классическое наследование?)\",\"content\":[{\"type\":\"paragraph\",\"text\":\"Я в основном работаю с **React** и **Next.js**.\"},{\"type\":\"list\",\"items\":[\"Архитектуру стараюсь строить через **компоненты** и **hooks**, избегая излишнего усложнения.\",\"Для организации кода использую **файловую структуру Next.js** (`pages/app`, `components`, `hooks`, `utils`).\",\"**Состояние** чаще всего храню **локально** в компонентах или через **Context API**. Если проект большой, можно подключать **Redux** или **Zustand**, но пока чаще хватает встроенных инструментов.\",\"Иногда использую **React Router** (когда это не Next.js-проект).\",\"Стараюсь писать чистые функции для утилит, чтобы было проще тестировать и переиспользовать.\",\"Классическое наследование в JS не использую — предпочитаю **композицию** и **хуки**.\"]}]},{\"id\":11,\"title\":\"В чём разница между host objects и native objects?\",\"content\":[{\"type\":\"paragraph\",\"text\":\"**Native objects** — это объекты, которые являются частью языка JavaScript и определены в спецификации ECMAScript, например: `String`, `Math`, `RegExp`, `Object`, `Function` и т. д.\"},{\"type\":\"paragraph\",\"text\":\"**Host objects** — это объекты, предоставляемые средой выполнения (браузером или Node.js), например: `window`, `XMLHttpRequest` и т. д.\"},{\"type\":\"links\",\"items\":[\"https://stackoverflow.com/questions/7614317/what-is-the-difference-between-native-objects-and-host-objects\"]}]},{\"id\":12,\"title\":\"Разница между: `function Person(){}`, `var person = Person()`, и `var person = new Person()?`\",\"content\":[{\"type\":\"paragraph\",\"text\":\"Вопрос немного расплывчатый, но он, скорее всего, касается конструкторов в JavaScript.\"},{\"type\":\"paragraph\",\"text\":\"Технически `function Person(){}`— это просто обычное объявление функции. По соглашению для функций, которые предполагается использовать как конструкторы, применяют стиль PascalCase.\"},{\"type\":\"paragraph\",\"text\":\"`var person = Person()` вызывает Person как обычную функцию, а не как конструктор. Это распространённая ошибка, если функция задумывалась как конструктор. Обычно конструктор ничего не возвращает, поэтому вызов как функции вернёт undefined, и именно он присвоится переменной вместо экземпляра объекта.\"},{\"type\":\"paragraph\",\"text\":\"`var person = new Person()` создаёт экземпляр объекта Person с помощью оператора `new`, при этом он наследует от `Person.prototype`. Альтернативой является использование `Object.create`, например `Object.create(Person.prototype)`.\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"function Person(name) {\\n  this.name = name;\\n}\\n\\nvar person = Person('John');\\nconsole.log(person); // undefined\\nconsole.log(person.name); // Uncaught TypeError: Cannot read property 'name' of undefined\\n\\nvar person = new Person('John');\\nconsole.log(person); // Person { name: \\\"John\\\" }\\nconsole.log(person.name); // \\\"John\\\"\"},{\"type\":\"links\",\"items\":[\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new\"]}]},{\"id\":13,\"title\":\"В чём разница между `.call` и `.apply?`\",\"content\":[{\"type\":\"paragraph\",\"text\":\"И `.call`, и `.apply` вызывают функцию с указанным значением `this`. Разница в том, как передаются аргументы: `.call` принимает их **через запятую**, а `.apply` — **массивом**.\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"function add(a, b) {\\n  return a + b;\\n}\\n\\nconsole.log(add.call(null, 1, 2)); // 3\\nconsole.log(add.apply(null, [1, 2])); // 3\"},{\"type\":\"mainParagraph\",\"text\":\"Простой способ запомнить: `C = call = comma-separated` (через запятую), `A = apply = array` (массив).\"}]},{\"id\":14,\"title\":\"Объясни `Function.prototype.bind`.\",\"content\":[{\"type\":\"paragraph\",\"text\":\"`Function.prototype.bind` создаёт новую функцию, у которой `this` всегда будет привязан к указанному объекту. Также можно заранее передать часть аргументов.\"},{\"type\":\"paragraph\",\"text\":\"На практике `bind` чаще всего используют, чтобы сохранить правильный контекст `this` в **методах классов**, которые передаются как колбэки. Это особенно полезно в React-компонентах.\"},{\"type\":\"links\",\"items\":[\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"]},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"const module = {\\n  x: 42,\\n  getX: function() {\\n    return this.x;\\n  }\\n};\\n\\nconst unboundGetX = module.getX;\\nconsole.log(unboundGetX()); // undefined (this потерян)\\n\\nconst boundGetX = module.getX.bind(module);\\nconsole.log(boundGetX()); // 42\"}]},{\"id\":15,\"title\":\"Когда стоит использовать `document.write()`?\",\"content\":[{\"type\":\"paragraph\",\"text\":\"`document.write()` записывает строку текста в поток документа, открытый с помощью `document.open()`. Если `document.write()` выполняется после того, как страница загрузилась, он вызывает `document.open`, что очищает весь документ (теги `<head>` и `<body>` удаляются!) и заменяет содержимое переданным значением. Поэтому его обычно считают опасным и склонным к неправильному использованию.\"},{\"type\":\"paragraph\",\"text\":\"В интернете можно встретить ответы, что `document.write()` применялся для:\"},{\"type\":\"list\",\"items\":[\"аналитического кода,\",\"подключения стилей, которые должны работать только при включённом JavaScript,\",\"загрузки скриптов параллельно с сохранением порядка выполнения (например, в HTML5 Boilerplate).\"]},{\"type\":\"paragraph\",\"text\":\"Однако я подозреваю, что эти причины уже устарели, и сегодня того же эффекта можно достичь без использования `document.write()`. Исправьте меня, если я ошибаюсь.\"},{\"type\":\"links\",\"items\":[\"https://www.quirksmode.org/blog/archives/2005/06/three_javascrip_1.html\",\"https://github.com/h5bp/html5-boilerplate/wiki/#documentwrite-script-tag\"]}]},{\"id\":16,\"title\":\"Разница между `feature detection`, `feature inference` и использованием `UA-строки`?\",\"content\":[{\"type\":\"title\",\"text\":\"Определение возможностей (`Feature Detection`)\"},{\"type\":\"paragraph\",\"text\":\"**Определение возможностей** означает проверку, поддерживает ли браузер определённый блок кода, и запуск разного кода в зависимости от того, поддерживается он или нет. Так браузер всегда сможет обеспечить работоспособный опыт, вместо того чтобы ломаться или выдавать ошибки в каких-то браузерах.\"},{\"type\":\"paragraph\",\"text\":\"Пример:\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"if ('geolocation' in navigator) {\\n  // Можно использовать navigator.geolocation\\n} else {\\n  // Обработка отсутствия функции\\n}\"},{\"type\":\"paragraph\",\"text\":\"**Библиотека Modernizr** — отличный инструмент для работы с **определением возможностей**.\"},{\"type\":\"title\",\"text\":\"Вывод возможностей (`Feature Inference`)\"},{\"type\":\"paragraph\",\"text\":\"**Вывод возможностей** похож на определение возможностей, но проверка идёт косвенно: предполагается, что если одна функция есть, то другая тоже должна быть. Например:\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"if (document.getElementsByTagName) {\\n  const element = document.getElementById('id');\\n}\"},{\"type\":\"paragraph\",\"text\":\"Этот подход не особо рекомендуется, так как менее надёжен. **Определение возможностей** считается **более безопасным**.\"},{\"type\":\"title\",\"text\":\"Строка User Agent (`UA String`)\"},{\"type\":\"paragraph\",\"text\":\"Это строка, которую сообщает браузер, чтобы другие участники сетевого протокола могли определить тип приложения, операционную систему, производителя ПО или версию программы (user agent). Доступна через `navigator.userAgent`.\"},{\"type\":\"paragraph\",\"text\":\"Однако:\"},{\"type\":\"list\",\"items\":[\"Строку сложно правильно разобрать.\",\"Она может быть подделана.\",\"Например, **Chrome** указывает себя и как **Chrome**, и как **Safari**. Поэтому для обнаружения **Safari** приходится проверять наличие слова **Safari** и отсутствие слова **Chrome**.\"]},{\"type\":\"paragraph\",\"text\":\"Использование этого метода **лучше избегать**.\"},{\"type\":\"links\",\"items\":[\"https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Testing/Feature_detection\",\"https://stackoverflow.com/questions/20104930/whats-the-difference-between-feature-detection-feature-inference-and-using-th\",\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Guides/Browser_detection_using_the_user_agent\"]}]},{\"id\":17,\"title\":\"Объясни Ajax максимально подробно.\",\"content\":[{\"type\":\"paragraph\",\"text\":\"**Ajax** — это приёмы клиентской веб-разработки, позволяющие отправлять HTTP-запросы и получать данные с сервера **асинхронно** (в фоне) **без полной перезагрузки страницы**. На практике это значит: приложение может динамически обновлять части интерфейса, работая с **JSON/FormData** и используя **fetch()** или **XMLHttpRequest**\"},{\"type\":\"title\",\"text\":\"Что нужно сказать первым на собесе\"},{\"type\":\"list\",\"items\":[\"**Определение**: что это (асинхронный обмен данными без перезагрузки страницы).\",\"**Зачем**: улучшение UX (быстрый, интерактивный интерфейс), разделение данных и представления.\",\"**Ключевые API**: XMLHttpRequest (старый), fetch() (современный, промисы), AbortController, FormData.\",\"**Практические аспекты**: форматы (JSON чаще всего), CORS, безопасность (CSRF/XSS), таймаут/отмена, прогресс загрузки, кеширование, паттерны (polling/long-polling/SSE/WebSocket).\"]},{\"type\":\"title\",\"text\":\"Пошагово — как это работает (типичный сценарий)\"},{\"type\":\"list\",\"items\":[\"Пользователь делает **действие** (клик, ввод).\",\"JS формирует запрос (`GET`/`POST`/`PUT`/`DELETE`) — часто `fetch` + `JSON.stringify` или `FormData`.\",\"Сервер возвращает **ответ** (обычно JSON).\",\"Клиент **парсит ответ** и **обновляет** DOM/состояние компонента.\",\"Обрабатываются ошибки и состояния (`loading`/`error`/`empty`).\"]},{\"type\":\"title\",\"text\":\"Короткие примеры кода (чисто и правильно)\"},{\"type\":\"paragraph\",\"text\":\"`GET` + обработка ошибок:\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"async function getUser(id) {\\n  const res = await fetch(`/api/users/${id}`, { headers: { Accept: 'application/json' } });\\n  if (!res.ok) throw new Error(`HTTP ${res.status}`);\\n  return await res.json();\\n}\\n\\ngetUser(42)\\n  .then(user => console.log(user))\\n  .catch(err => console.error(err));\"},{\"type\":\"paragraph\",\"text\":\"`POST` JSON:\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"async function createItem(payload) {\\n  const res = await fetch('/api/items', {\\n    method: 'POST',\\n    headers: { 'Content-Type': 'application/json', Accept: 'application/json' },\\n    body: JSON.stringify(payload)\\n  });\\n  if (!res.ok) throw new Error(`HTTP ${res.status}`);\\n  return await res.json();\\n}\"},{\"type\":\"paragraph\",\"text\":\"Отмена запроса (`AbortController`):\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"const controller = new AbortController();\\n\\nfetch('/api/search?q=foo', { signal: controller.signal })\\n  .then(r => { if (!r.ok) throw new Error(r.status); return r.json(); })\\n  .then(data => console.log(data))\\n  .catch(err => {\\n    if (err.name === 'AbortError') console.log('cancelled');\\n    else console.error(err);\\n  });\\n\\n// позже\\ncontroller.abort();\"},{\"type\":\"paragraph\",\"text\":\"Загрузка с прогрессом (`XMLHttpRequest` — у `fetch` нет простого onprogress для upload):\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"function uploadFile(file, onProgress) {\\n  return new Promise((resolve, reject) => {\\n    const xhr = new XMLHttpRequest();\\n    const fd = new FormData();\\n    fd.append('file', file);\\n\\n    xhr.open('POST', '/upload');\\n    xhr.upload.onprogress = e => {\\n      if (e.lengthComputable) onProgress(Math.round((e.loaded / e.total) * 100));\\n    };\\n\\n    xhr.onload = () => (xhr.status >= 200 && xhr.status < 300)\\n      ? resolve(xhr.response)\\n      : reject(new Error(xhr.status));\\n\\n    xhr.onerror = () => reject(new Error('Network error'));\\n    xhr.send(fd);\\n  });\\n}\"},{\"type\":\"title\",\"text\":\"`fetch()`vs `XMLHttpRequest` — главные отличия (чем аргументировать выбор)\"},{\"type\":\"list\",\"items\":[\"`fetch` — промисы, `async`/`await`, удобнее и компактнее.\",\"`fetch` не отвергает промис при HTTP-ошибках (нужно проверять `response.ok`).\",\"`XHR` поддерживает удобный `progress` и события для загрузки/загрузки файлов; для `fetch` прогресс загрузки ответа требует стриминга `ReadableStream`.\",\"**Отмена**: у `fetch` — `AbortController`; у `XHR` — `xhr.abort()`.\",\"**Совместимость**: `fetch` старше браузерной поддержки, но сейчас поддерживается почти везде (для старых — `polyfill`).\"]},{\"type\":\"title\",\"text\":\"Форматы данных и заголовки\"},{\"type\":\"list\",\"items\":[\"JSON: `Content-Type: application/json` — самый распространённый.\",\"FormData / multipart/form-data — для файлов\",\"application/x-www-form-urlencoded — формы\",\"XML/текст/бинарные данные/Blob — при необходимости\",\"Заголовки: Accept, Content-Type, аутентификационные заголовки (Authorization: Bearer ...).\"]},{\"type\":\"title\",\"text\":\"CORS и same-origin\"},{\"type\":\"list\",\"items\":[\"**Same-Origin Policy** блокирует доступ из другого домена без специальных заголовков сервера.\",\"Сервер должен вернуть `Access-Control-Allow-Origin` (и для credential-запросов — `Access-Control-Allow-Credentials: true`).\",\"Браузер может делать preflight (OPTIONS) если использованы нестандартные заголовки/методы.\",\"Для отправки cookie кросс-доменно: `fetch(..., { credentials: 'include' })` и сервер должен разрешить credentials.\"]},{\"type\":\"title\",\"text\":\"Безопасность\"},{\"type\":\"list\",\"items\":[\"**CSRF**: если аутентификация по cookie — нужен CSRF-токен (или SameSite cookies / проверка Origin).\",\"**XSS**: никогда не вставлять необработанный HTML из ответа в DOM; использовать textContent, шаблонизаторы или виртуальный DOM.\",\"**Валидация**: серверная валидация всех входных данных — клиент ненадёжный.\",\"Всегда использовать HTTPS для защиты token/credentials.\"]},{\"type\":\"title\",\"text\":\"Кэширование, idempotency и производительность\"},{\"type\":\"list\",\"items\":[\"Используйте HTTP кэширование (Cache-Control, ETag/If-None-Match) при возможности.\",\"Для интерактивных запросов: debounce/throttle, отмена предыдущих запросов, дедупликация/aggregation (batching).\",\"Подумать об optimistic UI (отобразить изменения сразу) и rollback-механизме при ошибке.\",\"Service Workers могут кешировать ответы офлайн / обеспечить стратегию stale-while-revalidate.\"]},{\"type\":\"title\",\"text\":\"UX/архитектурные моменты\"},{\"type\":\"list\",\"items\":[\"Обрабатывать состояния: `loading`, `empty`, `error`.\",\"Использовать **History API** (pushState) при изменении `view` без перезагрузки, чтобы корректно работали «Назад»/«Закладки».\",\"Логирование и ретраи: для `idempotent` запросов организовать логичную стратегию повторов (exponential backoff).\"]},{\"type\":\"title\",\"text\":\"Инструменты и библиотеки (коротко)\"},{\"type\":\"list\",\"items\":[\"**Axios** — удобный HTTP-клиент (интерсепторы, автомат JSON).\",\"**React Query** / **SWR** / **RTK Query** — управление кешем, stale-while-revalidate, синхронизация.\",\"Полезные инструменты: **Postman**, **curl**, **devtools Network**, **Lighthouse**.\"]},{\"type\":\"links\",\"items\":[\"https://en.wikipedia.org/wiki/Ajax_(programming)\",\"https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Scripting/Network_requests\"]}]},{\"id\":18,\"title\":\"Каковы преимущества и недостатки использования **Ajax**?\",\"content\":[{\"type\":\"title\",\"text\":\"Преимущества\"},{\"type\":\"positive\",\"items\":[\"**Лучшая интерактивность**: новый контент с сервера можно загружать динамически без полной перезагрузки страницы.\",\"**Снижение числа соединений с сервером**, так как скрипты и таблицы стилей нужно запрашивать только один раз.\",\"**Состояние может сохраняться на странице**: переменные JavaScript и состояние DOM не теряются, потому что основной контейнер страницы не перезагружается.\"]},{\"type\":\"title\",\"text\":\"Недостатки\"},{\"type\":\"negative\",\"items\":[\"Динамические страницы **сложнее добавлять в закладки**.\",\"**Ajax не работает**, если в браузере **отключён JavaScript**.\",\"**Проблемы с СЕО**. Некоторые поисковые роботы не выполняют JavaScript и не увидят контент, который подгружается с его помощью.\",\"Страницы, использующие Ajax для загрузки данных, обычно должны совмещать полученные удалённые данные с клиентскими шаблонами для обновления DOM. Чтобы это произошло, браузер должен распарсить и выполнить JavaScript, а **устройства с низкой производительностью** (например, слабые мобильные) **могут испытывать трудности**.\"]}]},{\"id\":19,\"title\":\"Объясни, как работает JSONP (и почему это не совсем Ajax).\",\"content\":[{\"type\":\"paragraph\",\"text\":\"**JSONP** (JSON with Padding) — это метод, который раньше часто использовали для обхода политики ограничения кросс-доменных запросов в браузерах. Дело в том, что обычные **Ajax-запросы** на другой домен были запрещены.\"},{\"type\":\"paragraph\",\"text\":\"**JSONP** работает с помощью `<script>`-тега, который позволяет загружать данные с другого домена. Обычно используется параметр callback, например:\"},{\"type\":\"code\",\"lamguage\":\"html\",\"code\":\"https://example.com?callback=printData\"},{\"type\":\"paragraph\",\"text\":\"Сервер, получив такой запрос, возвращает данные, обёрнутые в функцию `printData`.\"},{\"type\":\"paragraph\",\"text\":\"Пример:\"},{\"type\":\"code\",\"language\":\"html\",\"code\":\"<!-- https://mydomain.com -->\\n<script>\\n  function printData(data) {\\n    console.log(`My name is ${data.name}!`);\\n  }\\n</script>\\n\\n<script src=\\\"https://example.com?callback=printData\\\"></script>\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"// Файл, загруженный с https://example.com?callback=printData\\nprintData({ name: 'Yang Shun' });\"},{\"type\":\"title\",\"text\":\"Как это работает\"},{\"type\":\"list\",\"items\":[\"Клиент должен иметь глобальную функцию `printData`.\",\"Когда браузер загружает `<script>` с другого домена, этот код исполняется.\",\"В результате вызывается `printData`, и в неё передаются данные.\"]},{\"type\":\"title\",\"text\":\"Минусы и безопасность\"},{\"type\":\"negative\",\"items\":[\"**JSONP** небезопасен: так как это по сути JavaScript, он может выполнить любой код от стороннего сервера. Поэтому нужно доверять источнику.\",\"Сегодня **вместо JSONP** рекомендуется использовать **CORS** (Cross-Origin Resource Sharing), так как **JSONP** считается «хаками».\"]},{\"type\":\"links\",\"items\":[\"https://stackoverflow.com/a/2067584/1751946\"]}]},{\"id\":20,\"title\":\"Использовал ли ты шаблонизаторы JavaScript? Если да, то какие библиотеки?\",\"content\":[{\"type\":\"paragraph\",\"text\":\"Да, я использую **JSX**, в основном работаю с **Next.js**, а недавно делала себе сайт на **React Router**. **JSX** для меня — самый удобный способ шаблонизации, потому что он выглядит как JavaScript, и нет необходимости отдельно учить синтаксис шаблонов, как в Handlebars или Mustache. Плюс в **JSX** легко использовать **весь JavaScript-функционал** — условия, циклы, функции.\"},{\"type\":\"paragraph\",\"text\":\"Я также пробовала **простые шаблоны** на **ES6** template literals, это удобно для быстрых примеров, но в продакшн-проектах я использую именно **JSX**, так как он безопаснее и встроен в экосистему React.\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"const template = (<div>My name is: {name}</div>);\"},{\"type\":\"title\",\"text\":\"JSX vs классические шаблонизаторы (Handlebars, Mustache):\"},{\"type\":\"list\",\"items\":[\"**JSX**: ближе к JavaScript, можно **использовать логику** (условия, циклы, функции), статическая проверка типов, меньше шансов на ошибки.\",\"**Handlebars/Mustache**: отдельный синтаксис, удобен для простых статичных шаблонов, но **сложнее поддерживать логику** и **легко пропустить опечатку**.\",\"**Вывод**: JSX проще в react-проектах и надёжнее в долгосрочной поддержке.\"]},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"{isLoggedIn ? <UserProfile /> : <LoginForm />}\"}]},{\"id\":21,\"title\":\"Объясни «hoisting».\",\"content\":[{\"type\":\"paragraph\",\"text\":\"**Hoisting** — это механизм, при котором **объявления** переменных и функций становятся **«известны»** движку **до выполнения** кода.\"},{\"type\":\"list\",\"items\":[\"`var`: объявления поднимаются, но инициализация остаётся на месте. Поэтому до строки с присвоением переменная существует, но равна `undefined`.\",\"`function declaration`: поднимается целиком (и объявление, и тело функции), поэтому её можно вызвать до определения.\",\"`function expression` и `var`: поднимается только объявление переменной, сама функция доступна только после присвоения.\",\"`let` и `const`: тоже поднимаются, но попадают в `temporal dead zone` (обратиться к ним до объявления нельзя → `ReferenceError`).\"]},{\"type\":\"paragraph\",\"text\":\"`var`\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"console.log(foo); // undefined\\nvar foo = 1;\\nconsole.log(foo); // 1\"},{\"type\":\"paragraph\",\"text\":\"`Function Declaration`\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"console.log(foo); // [Function: foo]\\nfoo(); // 'FOOOOO'\\nfunction foo() {\\n  console.log('FOOOOO');\\n}\\nconsole.log(foo); // [Function: foo]\"},{\"type\":\"paragraph\",\"text\":\"`Function Expression`\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"console.log(bar); // undefined\\nbar(); // ❌ TypeError: bar is not a function\\nvar bar = function () {\\n  console.log('BARRRR');\\n};\\nconsole.log(bar); // [Function: bar]\"},{\"type\":\"paragraph\",\"text\":\"`let` / `const`\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"x; // undefined\\ny; // ❌ ReferenceError: y is not defined\\n\\nvar x = 'local';\\nlet y = 'local';\"},{\"type\":\"links\",\"items\":[\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Variable_hoisting\",\"https://stackoverflow.com/questions/31219420/are-variables-declared-with-let-or-const-not-hoisted-in-es6/31222689#31222689\"]}]},{\"id\":22,\"title\":\"Опиши всплытие событий (event bubbling).\",\"content\":[{\"type\":\"paragraph\",\"text\":\"**Event bubbling** (всплытие событий) — это механизм в JavaScript, при котором **событие**, сработавшее на каком-то элементе, поднимается вверх **по дереву `DOM`** **к его родителям**, пока не достигнет `document`.\"},{\"type\":\"list\",\"items\":[\"Сначала событие обрабатывается на том **элементе**, где произошло.\",\"Затем оно **“всплывает” к родительскому** элементу.\",\"И так далее, пока не дойдёт **до самого верха (`document`)**.\"]},{\"type\":\"mainParagraph\",\"text\":\"Именно на этом принципе работает **делегирование событий** — когда мы **вешаем обработчик на родителя** и ловим события от потомков.\"}]},{\"id\":23,\"title\":\"В чём разница между «атрибутом» и «свойством»?\",\"content\":[{\"type\":\"paragraph\",\"text\":\"**Атрибуты** (attributes) — это то, что указано в **HTML-разметке**.\"},{\"type\":\"paragraph\",\"text\":\"**Свойства** (properties) — это то, что существует у **DOM-объекта** в JavaScript.\"},{\"type\":\"paragraph\",\"text\":\"Пример:\"},{\"type\":\"code\",\"language\":\"html\",\"code\":\"<input type='text' value='Hello'>\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"const input = document.querySelector('input');\\nconsole.log(input.getAttribute('value')); // Hello\\nconsole.log(input.value); // Hello\"},{\"type\":\"paragraph\",\"text\":\"После того как пользователь изменил текст в поле и добавил ' World!', поведение будет разным:\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"console.log(input.getAttribute('value')); // Hello\\nconsole.log(input.value); // Hello World!\"},{\"type\":\"links\",\"items\":[\"https://stackoverflow.com/questions/6003819/properties-and-attributes-in-html\"]}]},{\"id\":24,\"title\":\"Почему расширение встроенных объектов JavaScript — плохая идея?\",\"content\":[{\"type\":\"paragraph\",\"text\":\"**Расширение встроенного (native) объекта** в JavaScript означает **добавление новых** свойств или методов в его `prototype`. На первый взгляд это может показаться удобным, но на практике **это опасно**:\"},{\"type\":\"list\",\"items\":[\"Если в проекте используется несколько библиотек, и каждая добавляет, например, метод `contains` в `Array.prototype`, то **реализации будут перезаписывать друг друга**.\",\"В итоге поведение кода становится непредсказуемым и может привести к поломкам.\"]},{\"type\":\"mainParagraph\",\"text\":\"**Единственный допустимый случай** — это `polyfill`. То есть когда ты добавляешь метод, который уже описан в спецификации JavaScript, но отсутствует в старых браузерах.\"},{\"type\":\"links\",\"items\":[\"https://lucybain.com/blog/2014/js-extending-built-in-objects/\"]}]},{\"id\":25,\"title\":\"Разница между событием загрузки документа (load) и событием DOMContentLoaded?\",\"content\":[{\"type\":\"paragraph\",\"text\":\"`DOMContentLoaded` срабатывает, когда исходный **HTML-документ** полностью **загружен** и разобран (DOM готов), **не дожидаясь загрузки стилей, картинок и других ресурсов**.\"},{\"type\":\"paragraph\",\"text\":\"`load` (у объекта `window`) срабатывает только **после** того, как загрузился **DOM** и **все связанные ресурсы** (CSS, изображения, фреймы и т. д.).\"},{\"type\":\"paragraph\",\"text\":\"**Пример:** `DOMContentLoaded`\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"document.addEventListener('DOMContentLoaded', function() {\\n  console.log('DOM полностью загружен и разобран');\\n});\"},{\"type\":\"paragraph\",\"text\":\"**Пример:** `load`\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"window.addEventListener('load', function() {\\n  console.log('Страница и все ресурсы полностью загружены');\\n});\"},{\"type\":\"links\",\"items\":[\"https://developer.mozilla.org/en-US/docs/Web/API/Document/DOMContentLoaded_event\",\"https://developer.mozilla.org/en-US/docs/Web/API/Window/load_event\"]}]},{\"id\":26,\"title\":\"В чём разница между `==` и `===`?\",\"content\":[{\"type\":\"paragraph\",\"text\":\"`==` — оператор **абстрактного равенства**: перед сравнением значения **приводятся к общему типу**. Это может давать **неожиданные результаты**.\"},{\"type\":\"paragraph\",\"text\":\"`===` — оператор **строгого равенства**: сравнивает значения **без приведения типов**. Если типы разные — сразу `false`.\"},{\"type\":\"mainParagraph\",\"text\":\"Рекомендуется всегда использовать `===`, кроме случаев, когда специально нужно проверить `null` или `undefined` одной проверкой (`a == null`).\"},{\"type\":\"paragraph\",\"text\":\"**Примеры** с `==`\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"console.log(1 == '1');     // true\\nconsole.log(1 == [1]);     // true\\nconsole.log(1 == true);    // true\\nconsole.log(0 == '');      // true\\nconsole.log(0 == '0');     // true\\nconsole.log(0 == false);   // true\"},{\"type\":\"paragraph\",\"text\":\"**Примеры** с `===`\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"console.log(1 === '1');   // false\\nconsole.log(1 === [1]);   // false\\nconsole.log(1 === true);  // false\\nconsole.log(0 === '');    // false\\nconsole.log(0 === '0');   // false\\nconsole.log(0 === false); // false\"},{\"type\":\"paragraph\",\"text\":\"Удобный **случай** для `==` (с `null` и `undefined`)\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"var a = null;\\nconsole.log(a == null);       // true\\nconsole.log(a == undefined); // true\"},{\"type\":\"links\",\"items\":[\"https://stackoverflow.com/questions/359494/which-equals-operator-vs-should-be-used-in-javascript-comparisons\"]}]},{\"id\":27,\"title\":\"Объясни политику одинакового источника (same-origin policy) в JavaScript.\",\"content\":[{\"type\":\"paragraph\",\"text\":\"**Same-Origin Policy** ограничивает работу JavaScript, **запрещая** ему отправлять запросы и получать данные **с другого источника** (origin).\"},{\"type\":\"image\",\"url\":\"/CORS_page-0001.jpg\"},{\"type\":\"title\",\"text\":\"Например:\"},{\"type\":\"list\",\"items\":[\"https://example.com:443\",\"http://example.com:80\"]},{\"type\":\"title\",\"text\":\"Зачем нужна?\"},{\"type\":\"paragraph\",\"text\":\"Политика **защищает** пользователя **от атак**, когда вредоносный скрипт с одного сайта пытается получить доступ к данным другого сайта через DOM или cookies.\"},{\"type\":\"paragraph\",\"text\":\"Пример: **один и тот же origin**\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"// Оба URL совпадают по схеме, хосту и порту\\nconst originA = 'https://example.com/page1';\\nconst originB = 'https://example.com/page2';\\n\\nconsole.log(new URL(originA).origin === new URL(originB).origin); // true\"},{\"type\":\"paragraph\",\"text\":\"Пример: **разные origin** (запрещено)\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"// Отличается схема (http vs https)\\nconst url1 = 'http://example.com';\\nconst url2 = 'https://example.com';\\n\\nconsole.log(new URL(url1).origin === new URL(url2).origin); // false\\n\\n// Отличается домен (example.com vs evil.com)\\nconst url3 = 'https://example.com';\\nconst url4 = 'https://evil.com';\\n\\nconsole.log(new URL(url3).origin === new URL(url4).origin); // false\"},{\"type\":\"paragraph\",\"text\":\"Чтобы всё-таки **разрешить кросс-доменные запросы**, используют **CORS** (Cross-Origin Resource Sharing).\"},{\"type\":\"links\",\"items\":[\"https://en.wikipedia.org/wiki/Same-origin_policy\"]}]},{\"id\":28,\"title\":\"Почему это выражение называется тернарным, что означает слово «ternary»?\",\"content\":[{\"type\":\"paragraph\",\"text\":\"**«Ternary»** означает **«три»**, и тернарное выражение принимает три операнда: **условие проверки**, **выражение при выполнении условия** («then») и **выражение при невыполнении** («else»). Тернарные выражения не являются чем-то специфичным для JavaScript, и я не уверен, почему этот вопрос вообще в списке.\"},{\"type\":\"image\",\"url\":\"/ternary.jpg\"},{\"type\":\"links\",\"items\":[\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_operator\"]}]},{\"id\":29,\"title\":\"Что такое `'use strict'`? Каковы преимущества и недостатки его использования?\",\"content\":[{\"type\":\"paragraph\",\"text\":\"`'use strict'` — это директива, которая включает **строгий режим** для всего скрипта или отдельных функций. Строгий режим — это способ перейти на **более ограниченный вариант JavaScript**.\"},{\"type\":\"title\",\"text\":\"Преимущества:\"},{\"type\":\"positive\",\"items\":[\"**Исключает** возможность случайного создания **глобальных переменных**.\",\"**Присваивания**, которые раньше тихо игнорировались, теперь выбрасывают исключение.\",\"**Попытки удалить неудаляемые свойства** выбрасывают исключение (раньше они просто не имели эффекта).\",\"Требует, чтобы **имена параметров функций** были **уникальными**.\",\"`this` в глобальном контексте становится `undefined`.\",\"**Ловит распространённые ошибки** в коде, выбрасывая исключения.\",\"**Отключает некоторые функции**, которые сбивают с толку или были плохо продуманы.\"]},{\"type\":\"title\",\"text\":\"Недостатки:\"},{\"type\":\"negative\",\"items\":[\"Отсутствуют некоторые возможности, к которым могли привыкнуть разработчики.\",\"**Нет доступа** к `function.caller` и `function.arguments`.\",\"**Склеивание скриптов**, написанных **в разных режимах** (строгом и обычном), может вызвать **проблемы**.\"]},{\"type\":\"paragraph\",\"text\":\"**Итог**: я считаю, что **преимущества перевешивают недостатки**. Лично мне никогда не приходилось полагаться на те возможности, которые строгий режим блокирует. Я бы рекомендовал всегда использовать строгий режим.\"},{\"type\":\"links\",\"items\":[\"https://2ality.com/2011/10/strict-mode-hatred.html\",\"https://lucybain.com/blog/2014/js-use-strict/\"]}]},{\"id\":30,\"title\":\"Создай цикл `for` до 100, выводящий `“fizz”` на кратных 3, `“buzz”` на кратных 5 и `“fizzbuzz”` на кратных 3 и 5.\",\"content\":[{\"type\":\"paragraph\",\"text\":\"Посмотрите эту версию `FizzBuzz` от Пола Айриша\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"for (let i = 1; i <= 100; i++) {\\n  let f = i % 3 == 0,\\n    b = i % 5 == 0;\\n  console.log(f ? (b ? 'FizzBuzz' : 'Fizz') : b ? 'Buzz' : i);\\n}\"},{\"type\":\"paragraph\",\"text\":\"Я бы не советовал писать приведённый выше вариант на собеседованиях. Лучше использовать длинный, но понятный способ. Для более необычных версий `FizzBuzz` смотрите ниже.\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"for (var i=1; i <= 20; i++) {\\n    if (i % 15 == 0)\\n        console.log(\\\"FizzBuzz\\\");\\n    else if (i % 3 == 0)\\n        console.log(\\\"Fizz\\\");\\n    else if (i % 5 == 0)\\n        console.log(\\\"Buzz\\\");\\n    else\\n        console.log(i);\\n}\"}]},{\"id\":31,\"title\":\"Почему, вообще говоря, лучше не трогать глобальную область видимости сайта?\",\"content\":[{\"type\":\"paragraph\",\"text\":\"**У каждого скрипта** есть доступ к **глобальной области видимости**, и если все будут использовать глобальное пространство имён для определения своих переменных, скорее всего возникнут **конфликты**. Чтобы этого избежать, используйте модульный паттерн **(IIFE)**, чтобы инкапсулировать свои переменные в локальном пространстве имён.\"}]},{\"id\":32,\"title\":\"Зачем использовать событие загрузки `load event`? Есть ли у него недостатки? Какие есть альтернативы и почему их стоит использовать?\",\"content\":[{\"type\":\"paragraph\",\"text\":\"Событие `load` срабатывает **в конце процесса загрузки документа**. К этому моменту все объекты документа находятся в DOM, и все изображения, скрипты, ссылки и подфреймы полностью загружены.\"},{\"type\":\"paragraph\",\"text\":\"Событие DOM `DOMContentLoaded` срабатывает после того, как DOM страницы был построен, но не ждёт, пока загрузятся остальные ресурсы. В некоторых случаях это предпочтительнее, если нет необходимости ждать полной загрузки страницы перед инициализацией.\"},{\"type\":\"links\",\"items\":[\"https://developer.mozilla.org/en-US/docs/Web/API/Window/load_event\"]}]},{\"id\":33,\"title\":\"Объясни, что такое одностраничное приложение (SPA) и как сделать его SEO-дружественным.\",\"content\":[{\"type\":\"paragraph\",\"text\":\"Современные веб-разработчики всё чаще называют свои проекты не сайтами, а **веб-приложениями**. Строгой разницы в терминах нет, но **веб-приложения**, как правило, **более интерактивные** и **динамичные**: пользователь может выполнять действия и сразу получать отклик.\"},{\"type\":\"paragraph\",\"text\":\"**Традиционная модель** (**SSR — server-side rendering**): браузер получает HTML с сервера и отображает его. При переходе на новый URL требуется **полная перезагрузка страницы**, и сервер снова отдает готовый HTML.\"},{\"type\":\"paragraph\",\"text\":\"**SPA (client-side rendering):**\"},{\"type\":\"list\",\"items\":[\"**Браузер загружает** стартовую страницу **вместе со скриптами** (фреймворки, библиотеки, код приложения) и **стилями**.\",\"**При навигации** обновляется только **URL**  с помощью **HTML5 History API**, но полной **перезагрузки страницы не происходит**.\",\"**Данные** (обычно в JSON) подгружаются через **AJAX**.\",\"JavaScript **обновляет интерфейс динамически**, без повторной загрузки ресурсов.\"]},{\"type\":\"paragraph\",\"text\":\"Такой подход напоминает работу нативных мобильных приложений.\"},{\"type\":\"title\",\"text\":\"Преимущества:\"},{\"type\":\"positive\",\"items\":[\"Более высокая отзывчивость: нет мигания при переходах.\",\"Меньше HTTP-запросов (ресурсы загружаются один раз).\",\"Чёткое разделение клиента и сервера: можно подключать разные клиенты (мобильные, чат-боты, умные часы) без изменения серверного кода; клиент и сервер можно развивать независимо, пока API остаётся совместимым\"]},{\"type\":\"title\",\"text\":\"Недостатки:\"},{\"type\":\"negative\",\"items\":[\"Более тяжёлая первая загрузка (нужно скачать фреймворки и код для всего приложения).\",\"На сервере требуется доп. настройка маршрутизации: все запросы должны вести на одну точку входа, а уже клиент берёт управление роутингом на себя.\",\"Зависимость от JavaScript: многие поисковики не исполняют JS при индексации → страница может казаться пустой → проблемы с SEO.\"]},{\"type\":\"title\",\"text\":\"Как сделать SPA SEO-дружественным:\"},{\"type\":\"list\",\"items\":[\"Использовать server-side rendering (SSR) — например, Next.js для React, Nuxt для Vue, Angular Universal. Это позволяет отдавать поисковикам уже готовый HTML.\",\"Применять сервисы типа Prerender — они рендерят страницу в браузере, сохраняют статический HTML и отдают его краулерам.\",\"Частично индексируемые секции можно вынести в статические страницы (landing, блог).\",\"Использовать гибридный рендеринг (SSR + SPA), где часть контента статична, а остальное подгружается динамически.\"]},{\"type\":\"links\",\"items\":[\"https://github.com/grab/front-end-guide#single-page-apps-spas\",\"https://stackoverflow.com/questions/21862054/single-page-app-advantages-and-disadvantages\",\"https://blog.isquaredsoftware.com/presentations/2016-10-revolution-of-web-dev/\",\"https://www.freecodecamp.org/news/heres-why-client-side-rendering-won-46a349fadb52\"]}]},{\"id\":34,\"title\":\"Каков твой опыт работы с Promise и/или их полифилами?\",\"content\":[{\"type\":\"paragraph\",\"text\":\"У меня есть практические знания в этой области.\"},{\"type\":\"title\",\"text\":\"Promise — это объект, который может вернуть одно значение в будущем: либо успешно вычисленное значение, либо причину, по которой оно не было получено (например, произошла сетевая ошибка).\"},{\"type\":\"paragraph\",\"text\":\"Promise может находиться в одном из трёх состояний:\"},{\"type\":\"list\",\"items\":[\"fulfilled (выполнен),\",\"rejected (отклонён),\",\"pending (ожидание).\"]},{\"type\":\"paragraph\",\"text\":\"Пользователи Promises могут прикреплять колбэки для обработки успешного результата или причины отклонения.\"},{\"type\":\"paragraph\",\"text\":\"Некоторые распространённые полифилы — это $.deferred, Q и Bluebird, но не все они строго соответствуют спецификации. Начиная с ES2015, Promises поддерживаются нативно, поэтому полифилы в большинстве случаев больше не нужны.\"},{\"type\":\"links\",\"items\":[\"https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-promise-27fc71e77261\"]}]},{\"id\":35,\"title\":\"Каковы плюсы и минусы использования Promise вместо коллбэков?\",\"content\":[{\"type\":\"title\",\"text\":\"Плюсы\"},{\"type\":\"list\",\"items\":[\"Избегается «ад колбэков», который может быть нечитаемым.\",\"Легко писать последовательный асинхронный код, который читается благодаря .then().\",\"Удобно писать параллельный асинхронный код с помощью Promise.all().\",\"Вызов колбэка слишком рано, Вызов колбэка слишком поздно (или он никогда не вызывается), Вызов колбэка слишком мало или слишком много раз, Потеря необходимых параметров или окружения, Проглатывание ошибок/исключений, которые могут произойти.\"]},{\"type\":\"paragraph\",\"text\":\"При использовании промисов не происходят следующие проблемы, характерные для кода только на колбэках:\"},{\"type\":\"list\",\"items\":[\"Вызов колбэка слишком рано\",\"Вызов колбэка слишком поздно (или он никогда не вызывается)\",\"Вызов колбэка слишком мало или слишком много раз\",\"Потеря необходимых параметров или окружения\",\"Проглатывание ошибок/исключений, которые могут произойти.\"]},{\"type\":\"title\",\"text\":\"Минусы\"},{\"type\":\"list\",\"items\":[\"Код может казаться немного сложнее (хотя это спорный момент).\",\"В старых браузерах, где ES2015 не поддерживается, нужно подключать полифилл, чтобы использовать промисы.\"]},{\"type\":\"links\",\"items\":[\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/async%20%26%20performance/ch3.md\"]}]},{\"id\":36,\"title\":\"Каковы преимущества/недостатки написания JS-кода на языке, компилирующемся в JavaScript?\",\"content\":[{\"type\":\"paragraph\",\"text\":\"Некоторые примеры таких языков: CoffeeScript, Elm, ClojureScript, PureScript, TypeScript.\"},{\"type\":\"title\",\"text\":\"Преимущества:\"},{\"type\":\"positive\",\"items\":[\"Исправляют некоторые давние проблемы JavaScript и препятствуют использованию анти-паттернов.\",\"Позволяют писать более краткий код, предоставляя синтаксический сахар поверх JavaScript (в ES5 его не хватало, но ES2015 уже сильно улучшил ситуацию).\",\"В случае TypeScript — наличие статической типизации, которая очень полезна для крупных проектов, требующих долгосрочной поддержки.\"]},{\"type\":\"title\",\"text\":\"Недостатки:\"},{\"type\":\"negative\",\"items\":[\"Требуется процесс сборки/компиляции, так как браузеры выполняют только JavaScript, и ваш код нужно сначала скомпилировать.\",\"Отладка может быть сложной, если sourcemaps плохо сопоставляются с исходным кодом.\",\"Большинство разработчиков не знакомы с этими языками, и потребуется время на их изучение. Это повышает “порог входа” для команды.\",\"Меньшее сообщество (зависит от языка), а значит — меньше ресурсов, туториалов, библиотек и инструментов.\",\"Поддержка в IDE/редакторах может быть ограниченной.\",\"Эти языки всегда будут отставать от последнего стандарта JavaScript.\",\"Разработчики должны понимать, во что компилируется их код, ведь именно этот JS и будет выполняться в браузере.\"]},{\"type\":\"title\",\"text\":\"На практике:\"},{\"type\":\"paragraph\",\"text\":\"с выходом ES2015 JavaScript сильно улучшился и стал приятнее в использовании. Поэтому, например, в CoffeeScript сейчас особой необходимости нет.\"},{\"type\":\"links\",\"items\":[\"https://softwareengineering.stackexchange.com/questions/72569/what-are-the-pros-and-cons-of-coffeescript\"]}]},{\"id\":37,\"title\":\"Какие инструменты и техники ты используешь для отладки кода JS?\",\"content\":[{\"type\":\"title\",\"text\":\"React and Redux\"},{\"type\":\"list\",\"items\":[\"React DevTools – для просмотра дерева компонентов, пропсов и состояния.\",\"Redux DevTools – для отладки хранилища: просмотр действий (actions), состояния и «time travel» отладки.\"]},{\"type\":\"title\",\"text\":\"JavaScript\"},{\"type\":\"list\",\"items\":[\"Chrome DevTools (или инструменты разработчика в других браузерах) – точки останова, пошаговое выполнение, просмотр переменных, сетевых запросов, профилирование.\",\"Оператор debugger – позволяет остановить выполнение на определённой строке и открыть DevTools.\",\"Старый добрый console.log – быстрый способ проверить значения переменных и ход выполнения программы.\"]},{\"type\":\"links\",\"items\":[\"https://raygun.com/learn/javascript-debugging-tips\"]}]},{\"id\":38,\"title\":\"Какие языковые конструкции ты используешь для перебора свойств объектов и элементов массивов?\",\"content\":[{\"type\":\"paragraph\",\"text\":\"Для объектов:\"},{\"type\":\"title\",\"text\":\"for-in —\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"for (var property in obj) {\\n  console.log(property);\\n}\"},{\"type\":\"paragraph\",\"text\":\"Однако такой цикл также будет перебирать унаследованные свойства, поэтому перед использованием нужно добавить проверку obj.hasOwnProperty(property).\"},{\"type\":\"title\",\"text\":\"Object.keys() —\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"Object.keys(obj).forEach(function (property) { ... })\"},{\"type\":\"paragraph\",\"text\":\"Object.keys() — это статический метод, который возвращает все перечисляемые свойства объекта.\"},{\"type\":\"title\",\"text\":\"Object.getOwnPropertyNames() —\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"Object.getOwnPropertyNames(obj).forEach(function (property) { ... })\"},{\"type\":\"paragraph\",\"text\":\"Object.getOwnPropertyNames() — это статический метод, который возвращает как перечисляемые, так и неперечисляемые свойства объекта.\"},{\"type\":\"paragraph\",\"text\":\"Для массивов:\"},{\"type\":\"title\",\"text\":\"for —\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"for (var i = 0; i < arr.length; i++) { ... }\"},{\"type\":\"paragraph\",\"text\":\"Здесь распространённая ошибка — использование var, так как он имеет область видимости функции, а не блока. В ES2015 был введён let с блочной областью видимости, поэтому рекомендуется писать так:\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"for (let i = 0; i < arr.length; i++) { ... }\"},{\"type\":\"title\",\"text\":\"forEach —\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"arr.forEach(function (el, index) { ... })\"},{\"type\":\"paragraph\",\"text\":\"Удобно, если нужен только элемент массива, а индекс не важен. Также есть методы every и some, позволяющие завершить перебор раньше.\"},{\"type\":\"title\",\"text\":\"for-of —\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"for (let elem of arr) { ... }\"},{\"type\":\"paragraph\",\"text\":\"Новый цикл из ES6, который работает с объектами, реализующими протокол Iterable (например: String, Array, Map, Set). Он объединяет преимущества for (можно выйти из цикла с помощью break) и forEach (более лаконичный синтаксис, без счётчика). Таким образом, в for-of есть и возможность выхода из цикла, и краткая запись.\"},{\"type\":\"paragraph\",\"text\":\"Обычно предпочтительнее использовать .forEach(), но всё зависит от задачи:\"},{\"type\":\"list\",\"items\":[\"До ES6, если нужно было досрочно завершить цикл, применяли for.\",\"С ES6 это можно делать с for-of.\",\"Классический for стоит выбирать, если требуется дополнительная гибкость (например, увеличение счётчика несколько раз за итерацию).\"]},{\"type\":\"title\",\"text\":\"Дополнительно:\"},{\"type\":\"paragraph\",\"text\":\"Если при использовании for-of нужно получить и индекс, и значение, можно применить метод entries() вместе с деструктуризацией:\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"const arr = ['a', 'b', 'c'];\\n\\nfor (let [index, elem] of arr.entries()) {\\n  console.log(index, ': ', elem);\\n}\"}]},{\"id\":39,\"title\":\"Объясни разницу между изменяемыми (mutable) и неизменяемыми (immutable) объектами.\",\"content\":[{\"type\":\"paragraph\",\"text\":\"Неизменяемость — это ключевой принцип функционального программирования, который также полезен в объектно-ориентированных программах.\"},{\"type\":\"list\",\"items\":[\"Изменяемый объект — это объект, состояние которого можно изменять после его создания.\",\"Неизменяемый объект — это объект, состояние которого нельзя изменять после его создания.\"]},{\"type\":\"title\",\"text\":\"Пример неизменяемого объекта в JavaScript:\"},{\"type\":\"paragraph\",\"text\":\"В JavaScript некоторые встроенные типы (числа, строки) являются неизменяемыми, а пользовательские объекты обычно изменяемые.\"},{\"type\":\"paragraph\",\"text\":\"Некоторые встроенные неизменяемые объекты JavaScript: Math, Date.\"},{\"type\":\"title\",\"text\":\"Способы добавить/симулировать неизменяемость у обычных объектов JavaScript\"},{\"type\":\"title\",\"text\":\"Object Constant Properties (Константные свойства объектов)\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"let myObject = {};\\nObject.defineProperty(myObject, 'number', {\\n  value: 42,\\n  writable: false,\\n  configurable: false,\\n});\\nconsole.log(myObject.number); // 42\\nmyObject.number = 43;\\nconsole.log(myObject.number); // 42\"},{\"type\":\"title\",\"text\":\"Prevent Extensions (Предотвращение добавления новых свойств)\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"var myObject = { a: 2 };\\nObject.preventExtensions(myObject);\\nmyObject.b = 3;\\nmyObject.b; // undefined\"},{\"type\":\"title\",\"text\":\"Seal (Запечатывание объекта)\"},{\"type\":\"paragraph\",\"text\":\"Object.seal() создаёт «запечатанный» объект: объект нельзя расширять, а все существующие свойства становятся configurable: false.\"},{\"type\":\"list\",\"items\":[\"Добавлять новые свойства нельзя.\",\"Перенастраивать или удалять существующие свойства нельзя.\",\"Но значения свойств можно менять.\"]},{\"type\":\"title\",\"text\":\"Freeze (Заморозка объекта)\"},{\"type\":\"paragraph\",\"text\":\"Object.freeze() создаёт «замороженный» объект:\"},{\"type\":\"list\",\"items\":[\"Применяет Object.seal().\",\"Все «data accessor» свойства становятся writable: false.\",\"Значения свойств нельзя менять.\"]},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"var immutable = Object.freeze({});\"},{\"type\":\"paragraph\",\"text\":\"Замороженный объект не позволяет добавлять новые свойства и запрещает удалять или изменять существующие. Object.freeze() сохраняет перечисляемость, настраиваемость, возможность записи и прототип объекта. Возвращает тот же объект и не создаёт копию.\"},{\"type\":\"title\",\"text\":\"Преимущества и недостатки неизменяемости\"},{\"type\":\"title\",\"text\":\"Преимущества:\"},{\"type\":\"positive\",\"items\":[\"Легче определять изменения — сравнение объектов по ссылке (referential equality) эффективно.\",\"Программы с неизменяемыми объектами проще понимать, так как не нужно отслеживать изменения состояния объектов.\",\"Нет необходимости в защитных копиях при возврате/передаче объектов в функции.\",\"Лёгкое совместное использование — одну копию объекта можно многократно использовать.\",\"Потокобезопасность — неизменяемые объекты можно безопасно использовать в многопоточном окружении.\",\"С библиотеками вроде ImmutableJS объекты модифицируются с помощью структурного шаринга, что экономит память.\"]},{\"type\":\"title\",\"text\":\"Недостатки:\"},{\"type\":\"negative\",\"items\":[\"Наивная реализация неизменяемых структур данных может сильно ухудшать производительность, так как создаются новые объекты при каждой операции. Рекомендуется использовать библиотеки для эффективного управления памятью.\",\"Частое выделение и удаление мелких объектов вместо модификации существующих может замедлять работу.\",\"Циклические структуры данных (например, графы) сложно создавать, если объекты нельзя изменять после инициализации.\"]},{\"type\":\"links\",\"items\":[\"https://stackoverflow.com/questions/1863515/pros-cons-of-immutability-vs-mutability\"]}]},{\"id\":40,\"title\":\"Объясни разницу между синхронными и асинхронными функциями.\",\"content\":[{\"type\":\"title\",\"text\":\"Синхронные функции\"},{\"type\":\"paragraph\",\"text\":\"блокируют выполнение. В них каждая инструкция выполняется до конца перед тем, как начнётся следующая. Программа обрабатывается строго по порядку, и если какая-то инструкция занимает много времени, выполнение всего кода приостанавливается.\"},{\"type\":\"title\",\"text\":\"Асинхронные функции \"},{\"type\":\"paragraph\",\"text\":\"не блокируют выполнение. Обычно они принимают callback или возвращают промис, и выполнение программы продолжается сразу после вызова асинхронной функции. Callback вызывается только после завершения асинхронной операции и опустошения стека вызовов.\"},{\"type\":\"paragraph\",\"text\":\"Тяжёлые операции, такие как загрузка данных с сервера или запрос к базе данных, лучше выполнять асинхронно, чтобы главный поток мог продолжать выполнять другие действия и интерфейс пользователя не зависал (в случае браузеров).\"}]},{\"id\":41,\"title\":\"Что такое event loop (цикл событий)? В чём разница между call stack (стеком вызовов) и task queue (очередью задач)?\",\"content\":[{\"type\":\"title\",\"text\":\"Event loop\"},{\"type\":\"paragraph\",\"text\":\"— это однопоточный цикл, который следит за стеком вызовов (call stack) и проверяет, есть ли задачи в очереди задач (task queue). Если стек вызовов пуст, а в очереди задач есть колбэки, одна из функций берётся из очереди и помещается в стек вызовов для выполнения.\"},{\"type\":\"title\",\"text\":\"Call stack\"},{\"type\":\"paragraph\",\"text\":\"— это структура данных, где хранится порядок вызова функций. Когда функция вызывается, она помещается в стек; когда выполнение функции завершено, она удаляется из стека.\"},{\"type\":\"title\",\"text\":\"Task queue\"},{\"type\":\"paragraph\",\"text\":\"— это очередь, куда помещаются асинхронные колбэки (например, из setTimeout, промисов или событий). Event loop берёт задачи из этой очереди и выполняет их, когда стек вызовов пуст.\"},{\"type\":\"links\",\"items\":[\"https://2014.jsconf.eu/speakers/philip-roberts-what-the-heck-is-the-event-loop-anyway.html\"]}]},{\"id\":42,\"title\":\"Объясни разницу в использовании foo между function foo() {} и var foo = function() {}.\",\"content\":[{\"type\":\"title\",\"text\":\"Первая форма — это объявление функции (function declaration), вторая — функциональное выражение (function expression).\"},{\"type\":\"paragraph\",\"text\":\"Главное различие: тела объявлений функций поднимаются (hoisting), а тела функциональных выражений — нет (они ведут себя так же, как обычные переменные). Если попытаться вызвать функциональное выражение до его объявления, возникнет ошибка Uncaught TypeError: foo is not a function.\"},{\"type\":\"title\",\"text\":\"Function Declaration\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"“foo(); // ‘FOOOOO’\\nfunction foo() {\\n  console.log(‘FOOOOO’);\"},{\"type\":\"title\",\"text\":\"Function Expression\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"foo(); // Uncaught TypeError: foo is not a function\\nvar foo = function () {\\n  console.log(‘FOOOOO’);\\n};\"},{\"type\":\"links\",\"items\":[\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function\"]}]},{\"id\":43,\"title\":\"В чём разница между переменными, созданными с помощью let, var или const?\",\"content\":[{\"type\":\"paragraph\",\"text\":\"Переменные, объявленные с помощью ключевого слова var, имеют область видимости функции, в которой они созданы, или, если созданы вне любой функции, принадлежат глобальному объекту.\"},{\"type\":\"paragraph\",\"text\":\"let и const имеют блочную область видимости, то есть доступны только внутри ближайших фигурных скобок (функция, блок if-else или цикл for).\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"function foo() {\\n  // Все переменные доступны внутри функции\\n  var bar = ‘bar’;\\n  let baz = ‘baz’;\\n  const qux = ‘qux’;\\n\\n  console.log(bar); // bar\\n  console.log(baz); // baz\\n  console.log(qux); // qux\\n}\\n\\nconsole.log(bar); // ReferenceError: bar не определена\\nconsole.log(baz); // ReferenceError: baz не определена\\nconsole.log(qux); // ReferenceError: qux не определена\\n\\nif (true) {\\n  var bar = ‘bar’;\\n  let baz = ‘baz’;\\n  const qux = ‘qux’;\\n}\\n\\n// Переменные, объявленные через var, доступны в любой части функции\\nconsole.log(bar); // bar\\n// Переменные, объявленные через let и const, недоступны за пределами блока\\nconsole.log(baz); // ReferenceError: baz не определена\\nconsole.log(qux); // ReferenceError: qux не определена\"},{\"type\":\"paragraph\",\"text\":\"var позволяет переменным быть поднятыми (hoisting), то есть их можно использовать в коде до объявления. let и const такого не позволяют и вызовут ошибку.\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"console.log(foo); // undefined\\nvar foo = ‘foo’;\\n\\nconsole.log(baz); // ReferenceError: невозможно получить доступ к ‘baz’ до инициализации\\nlet baz = ‘baz’;\\n\\nconsole.log(bar); // ReferenceError: невозможно получить доступ к ‘bar’ до инициализации\\nconst bar = ‘bar’;\"},{\"type\":\"paragraph\",\"text\":\"Повторное объявление переменной с var не вызывает ошибку, а с let и const — вызовет.\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"var foo = ‘foo’;\\nvar foo = ‘bar’;\\nconsole.log(foo); // 'bar'\\n\\nlet baz = ‘baz’;\\nlet baz = ‘qux’; // Uncaught SyntaxError: Identifier ‘baz’ has already been declared\"},{\"type\":\"paragraph\",\"text\":\"Разница между let и const в том, что let позволяет изменять значение переменной, а const — нет.\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"// Это допустимо\\nlet foo = ‘foo’;\\nfoo = ‘bar’;\\n\\n// Это вызовет исключение\\nconst baz = ‘baz’;\\nbaz = ‘qux’;\"},{\"type\":\"links\",\"items\":[\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\",\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var\",\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\"]}]},{\"id\":44,\"title\":\"В чём разница между классами ES6 и функциями-конструкторами ES5?\",\"content\":[{\"type\":\"paragraph\",\"text\":\"Сначала посмотрим на примеры каждого:\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"// ES5 Function Constructor\\nfunction Person(name) {\\n  this.name = name;\\n}\\n\\n// ES6 Class\\nclass Person {\\n  constructor(name) {\\n    this.name = name;\\n  }\\n}\"},{\"type\":\"paragraph\",\"text\":\"Для простых конструкторов они выглядят довольно похоже.\"},{\"type\":\"paragraph\",\"text\":\"Основное различие в конструкторах проявляется при использовании наследования. Если мы хотим создать класс Student, который наследует Person и добавить поле studentId, то в дополнение к вышеперечисленному нужно сделать следующее:\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"// Конструктор-функция ES5\\nfunction Student(name, studentId) {\\n  // Вызов конструктора суперкласса для инициализации членов суперкласса.\\n  Person.call(this, name);\\n\\n  // Инициализация собственных членов подкласса.\\n  this.studentId = studentId;\\n}\\n\\nStudent.prototype = Object.create(Person.prototype);\\nStudent.prototype.constructor = Student;\\n\\n// Класс ES6\\nclass Student extends Person {\\n  constructor(name, studentId) {\\n    super(name);\\n    this.studentId = studentId;\\n  }\\n}\"},{\"type\":\"paragraph\",\"text\":\"Использовать наследование в ES5 гораздо многословнее, а версия на ES6 проще для понимания и запоминания.\"},{\"type\":\"links\",\"items\":[\"https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Advanced_JavaScript_objects/Classes_in_JavaScript\",\"https://eli.thegreenplace.net/2013/10/22/classical-inheritance-in-javascript-es5\"]}]},{\"id\":45,\"title\":\"Можешь привести пример использования нового синтаксиса стрелочной функции =>? Чем этот синтаксис отличается от обычных функций?\",\"content\":[{\"type\":\"title\",\"text\":\"Очевидное преимущество стрелочных функций\"},{\"type\":\"paragraph\",\"text\":\"— упрощение синтаксиса при создании функций без необходимости использовать ключевое слово function. Кроме того, this внутри стрелочной функции привязан к окружающему (лексическому) контексту, что отличается от обычных функций, где this определяется объектом, который вызывает функцию. Лексически привязанный this особенно полезен при вызове колбеков, например, в компонентах React.\"}]},{\"id\":46,\"title\":\"Какое преимущество даёт использование стрелочного синтаксиса для метода внутри конструктора?\",\"content\":[{\"type\":\"paragraph\",\"text\":\"Главное преимущество использования стрелочной функции в качестве метода внутри конструктора заключается в том, что значение this фиксируется в момент создания функции и не может измениться. То есть, когда конструктор используется для создания нового объекта, this всегда будет ссылаться на этот объект.\"},{\"type\":\"paragraph\",\"text\":\"Например, у нас есть конструктор Person, который принимает имя и имеет два метода для вывода этого имени: один обычной функцией, другой — стрелочной:\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"const Person = function (firstName) {\\n  this.firstName = firstName;\\n  this.sayName1 = function () {\\n    console.log(this.firstName);\\n  };\\n  this.sayName2 = () => {\\n    console.log(this.firstName);\\n  };\\n};\\n\\nconst john = new Person(‘John’);\\nconst dave = new Person(‘Dave’);\\n\\njohn.sayName1(); // John\\njohn.sayName2(); // John\\n\\n// У обычной функции ‘this’ можно изменить, у стрелочной — нет\\njohn.sayName1.call(dave); // Dave\\njohn.sayName2.call(dave); // John\\n\\njohn.sayName1.apply(dave); // Dave\\njohn.sayName2.apply(dave); // John\\n\\njohn.sayName1.bind(dave)(); // Dave\\njohn.sayName2.bind(dave)(); // John\\n\\nvar sayNameFromWindow1 = john.sayName1;\\nsayNameFromWindow1(); // undefined\\n\\nvar sayNameFromWindow2 = john.sayName2;\\nsayNameFromWindow2(); // John\"},{\"type\":\"title\",\"text\":\"Вывод:\"},{\"type\":\"paragraph\",\"text\":\"у обычной функции this может измениться, а у стрелочной функции контекст всегда остается тем же. Даже если вы передаете стрелочную функцию в разные части приложения, контекст останется правильным.\"},{\"type\":\"paragraph\",\"text\":\"Это особенно полезно в классовых компонентах React. Если метод класса определен как обычная функция (например, обработчик клика) и передан дочернему компоненту через пропс, нужно дополнительно привязывать this в конструкторе родителя. Если же использовать стрелочную функцию, привязка не нужна — метод автоматически получает this из окружающего лексического контекста.\"},{\"type\":\"links\",\"items\":[\"https://machnicki.medium.com/handle-events-in-react-with-arrow-functions-ede88184bbb)\",\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\"]}]},{\"id\":47,\"title\":\"Что такое функция высшего порядка (higher-order function)?\",\"content\":[{\"type\":\"title\",\"text\":\"Функция высшего порядка\"},{\"type\":\"paragraph\",\"text\":\"— это любая функция, которая принимает одну или несколько функций в качестве аргументов, используя их для работы с какими-либо данными, и/или возвращает функцию в качестве результата. Функции высшего порядка предназначены для абстрагирования операций, которые выполняются многократно.\"},{\"type\":\"paragraph\",\"text\":\"Классический пример — метод map, который принимает массив и функцию в качестве аргументов. map использует эту функцию для преобразования каждого элемента массива и возвращает новый массив с преобразованными данными.\"},{\"type\":\"paragraph\",\"text\":\"Другие популярные примеры в JavaScript — forEach, filter и reduce. Функция высшего порядка не обязательно должна работать только с массивами, существует множество случаев, когда функция возвращает другую функцию. Например, Function.prototype.bind в JavaScript является такой функцией.\"},{\"type\":\"title\",\"text\":\"Map\"},{\"type\":\"paragraph\",\"text\":\"Предположим, у нас есть массив имён, и нам нужно преобразовать каждую строку в верхний регистр.\"},{\"type\":\"paragraph\",\"text\":\"Императивный способ будет таким:\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"const transformNamesToUppercase = function (names) {\\n  const results = [];\\n  for (let i = 0; i < names.length; i++) {\\n    results.push(names[i].toUpperCase());\\n  }\\n  return results;\\n};\\ntransformNamesToUppercase(names); // ['IRISH', 'DAISY', 'ANNA']\"},{\"type\":\"paragraph\",\"text\":\"Использование .map(transformerFn) делает код короче и более декларативным:\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"const transformNamesToUppercase = function (names) {\\n  return names.map((name) => name.toUpperCase());\\n};\\ntransformNamesToUppercase(names); // ['IRISH', 'DAISY', 'ANNA']\"},{\"type\":\"links\",\"items\":[\"https://medium.com/javascript-scene/higher-order-functions-composing-software-5365cf2cbe99\",\"https://hackernoon.com/effective-functional-javascript-first-class-and-higher-order-functions-713fde8df50a\",\"https://eloquentjavascript.net/05_higher_order.html\"]}]},{\"id\":48,\"title\":\"Можешь привести пример деструктуризации объекта или массива?\",\"content\":[{\"type\":\"title\",\"text\":\"Деструктуризация\"},{\"type\":\"paragraph\",\"text\":\"— это выражение, доступное в ES6, которое позволяет кратко и удобно извлекать значения из объектов или массивов и присваивать их отдельным переменным.\"},{\"type\":\"title\",\"text\":\"Деструктуризация массива\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"// Присваивание переменным\\nconst foo = ['one', 'two', 'three'];\\n\\nconst [one, two, three] = foo;\\nconsole.log(one);   // \\\"one\\\"\\nconsole.log(two);   // \\\"two\\\"\\nconsole.log(three); // \\\"three\\\"\\n\\n// Обмен значениями переменных\\nlet a = 1;\\nlet b = 3;\\n\\n[a, b] = [b, a];\\nconsole.log(a); // 3\\nconsole.log(b); // 1\"},{\"type\":\"title\",\"text\":\"Деструктуризация объекта\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"// Присваивание переменным\\nconst o = { p: 42, q: true };\\nconst { p, q } = o;\\n\\nconsole.log(p); // 42\\nconsole.log(q); // true\"},{\"type\":\"links\",\"items\":[\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring\",\"https://ponyfoo.com/articles/es6-destructuring-in-depth\"]}]},{\"id\":49,\"title\":\"Шаблонные литералы (Template Literals) в ES6 дают много гибкости при создании строк, можешь привести пример?\",\"content\":[{\"type\":\"paragraph\",\"text\":\"Шаблонные литералы упрощают интерполяцию строк, то есть вставку переменных в строку. До ES2015 это обычно делали так:\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"var person = { name: 'Tyler', age: 28 };\\nconsole.log(\\n  'Hi, my name is ' + person.name + ' and I am ' + person.age + ' years old!',\\n);\\n// 'Hi, my name is Tyler and I am 28 years old!'\"},{\"type\":\"paragraph\",\"text\":\"Обрати внимание, что вместо кавычек используются обратные апострофы (backticks), и что внутри конструкции ${} можно вставлять выражения.\"},{\"type\":\"title\",\"text\":\"Второе полезное применение — создание многострочных строк.\"},{\"type\":\"paragraph\",\"text\":\"До ES2015 многострочную строку можно было записать так:\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"console.log('This is line one.\\\\nThis is line two.');\\n// This is line one.\\n// This is line two.\"},{\"type\":\"paragraph\",\"text\":\"Или, чтобы разбить строку в коде на несколько частей (чтобы не прокручивать редактор вправо), писали так:\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"console.log('This is line one.\\\\n' + 'This is line two.');\\n// This is line one.\\n// This is line two.\"},{\"type\":\"title\",\"text\":\"Использование шаблонных литералов вместо простых шаблонизаторов\"},{\"type\":\"title\",\"text\":\"Ещё один вариант применения — когда нужно вставить переменные в HTML:\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"const person = { name: 'Tyler', age: 28 };\\ndocument.body.innerHTML = `\\n  <div>\\n    <p>Name: ${person.name}</p>\\n    <p>Age: ${person.age}</p>\\n  </div>\\n`;\"},{\"type\":\"title\",\"text\":\"⚠️ Обрати внимание: если данные приходят от пользователя, при использовании .innerHTML код может быть уязвим для XSS. Всегда очищай (sanitize) данные перед выводом!\"},{\"type\":\"links\",\"items\":[\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\"]}]},{\"id\":50,\"title\":\"Можешь привести пример каррированной функции (curry function) и объяснить, какое преимущество даёт этот синтаксис?\",\"content\":[{\"type\":\"title\",\"text\":\"Каррирование (currying)\"},{\"type\":\"paragraph\",\"text\":\"— это паттерн, при котором функция с несколькими параметрами разбивается на несколько функций. Эти функции вызываются последовательно, и каждая из них принимает по одному аргументу, пока не будут собраны все необходимые параметры.\"},{\"type\":\"paragraph\",\"text\":\"Такой подход удобен при написании кода в функциональном стиле, делает его более читаемым и удобным для композиции. Важно понимать, что для каррирования функция должна изначально быть одной, а затем преобразовываться в последовательность функций, каждая из которых принимает один параметр.\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"function curry(fn) {\\n  if (fn.length === 0) {\\n    return fn;\\n  }\\n\\n  function _curried(depth, args) {\\n    return function (newArgument) {\\n      if (depth - 1 === 0) {\\n        return fn(...args, newArgument);\\n      }\\n      return _curried(depth - 1, [...args, newArgument]);\\n    };\\n  }\\n\\n  return _curried(fn.length, []);\\n}\\n\\nfunction add(a, b) {\\n  return a + b;\\n}\\n\\nvar curriedAdd = curry(add);\\nvar addFive = curriedAdd(5);\\n\\nvar result = [0, 1, 2, 3, 4, 5].map(addFive); // [5, 6, 7, 8, 9, 10]\"},{\"type\":\"links\",\"items\":[\"https://hackernoon.com/currying-in-js-d9ddc64f162e\"]}]},{\"id\":51,\"title\":\"Какие преимущества использования spread-синтаксиса и чем он отличается от rest-синтаксиса?\",\"content\":[{\"type\":\"title\",\"text\":\"Spread-синтаксис\"},{\"type\":\"paragraph\",\"text\":\"Spread-синтаксис в ES6 очень полезен при написании кода в функциональном стиле, так как мы можем легко создавать копии массивов или объектов без необходимости использовать Object.create, slice или библиотечные функции. Эта языковая конструкция часто используется в проектах на Redux и RxJS.\"},{\"type\":\"title\",\"text\":\"👉 Распаковывает массив или объект наружу. То есть берёт содержимое и раскладывает его «по местам».\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"function putDookieInAnyArray(arr) {\\n  return [...arr, 'dookie'];\\n}\\n\\nconst result = putDookieInAnyArray(['I', 'really', \\\"don't\\\", 'like']);\\n// [\\\"I\\\", \\\"really\\\", \\\"don't\\\", \\\"like\\\", \\\"dookie\\\"]\\n\\nconst person = {\\n  name: 'Todd',\\n  age: 29,\\n};\\n\\nconst copyOfTodd = { ...person };\"},{\"type\":\"title\",\"text\":\"📌 Spread = распаковать готовое.\"},{\"type\":\"title\",\"text\":\"Rest-синтаксис\"},{\"type\":\"paragraph\",\"text\":\"Rest-синтаксис в ES6 предлагает сокращение для включения произвольного количества аргументов, которые передаются в функцию. Его можно рассматривать как противоположность spread: если spread «распаковывает» массив или объект в отдельные элементы, то rest наоборот «собирает» данные в массив. Rest работает в аргументах функций, а также в деструктуризации массивов и объектов.\"},{\"type\":\"title\",\"text\":\"👉 Собирает оставшиеся значения в массив или объект. То есть наоборот — «сжимает» всё в один контейнер.\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"function addFiveToABunchOfNumbers(...numbers) {\\n  return numbers.map((x) => x + 5);\\n}\\n\\nconst result = addFiveToABunchOfNumbers(4, 5, 6, 7, 8, 9, 10);\\n// [9, 10, 11, 12, 13, 14, 15]\\n\\nconst [a, b, ...rest] = [1, 2, 3, 4];\\n// a: 1, b: 2, rest: [3, 4]\\n\\nconst { e, f, ...others } = {\\n  e: 1,\\n  f: 2,\\n  g: 3,\\n  h: 4,\\n};\\n// e: 1, f: 2, others: { g: 3, h: 4 }\"},{\"type\":\"title\",\"text\":\"📌 Rest = собрать всё лишнее в кучу.\"},{\"type\":\"title\",\"text\":\"🚀 Главное отличие\"},{\"type\":\"list\",\"items\":[\"Spread: берёт массив/объект и раскладывает его.\",\"Spread: берёт массив/объект и раскладывает его.\"]},{\"type\":\"links\",\"items\":[\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\",\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters\",\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring\"]}]},{\"id\":52,\"title\":\"Как можно делиться кодом между файлами?\",\"content\":[{\"type\":\"paragraph\",\"text\":\"Это зависит от окружения JavaScript.\"},{\"type\":\"title\",\"text\":\"В клиенте (браузерное окружение)\"},{\"type\":\"paragraph\",\"text\":\"Пока переменные/функции объявлены в глобальной области видимости (`window`), все скрипты могут к ним обращаться. Альтернативно можно использовать **Asynchronous Module Definition (AMD)** через **RequireJS** для более модульного подхода.\"},{\"type\":\"paragraph\",\"text\":\"Раньше всё было просто: если ты объявляешь функцию глобально, она доступна везде.\"},{\"type\":\"code\",\"language\":\"html\",\"code\":\"<script src='math.js'></script>\\n<script src='main.js'></script>\"},{\"type\":\"paragraph\",\"text\":\"В `math.js` пишешь:\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"function add(a, b) {\\n return a + b;\\n}\"},{\"type\":\"paragraph\",\"text\":\"В `main.js` можешь использовать:\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"console.log(add(2, 3)); // 5\"},{\"type\":\"paragraph\",\"text\":\"Но это неудобно, потому что все переменные валяются в одном “глобальном мешке”.\"},{\"type\":\"title\",\"text\":\"На сервере (Node.js)\"},{\"type\":\"paragraph\",\"text\":\"Обычно применяется **CommonJS**. Каждый файл рассматривается как модуль, и он может экспортировать переменные и функции, присваивая их объекту module.exports.\"},{\"type\":\"paragraph\",\"text\":\"**Каждый файл — это модуль.**\"},{\"type\":\"paragraph\",\"text\":\"`math.js`\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"function add(a, b) {\\n  return a + b;\\n}\\nmodule.exports = add; // экспортируем\"},{\"type\":\"paragraph\",\"text\":\"`main.js`\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"const add = require('./math'); // подключаем\\nconsole.log(add(2, 3)); // 5\"},{\"type\":\"title\",\"text\":\"Современный стандарт ES6 (работает и в браузере, и в Node)\"},{\"type\":\"paragraph\",\"text\":\"Определяет новый синтаксис модулей, который призван заменить как AMD, так и CommonJS. В конечном итоге он будет поддерживаться и в браузерах, и в Node-среде.\"},{\"type\":\"paragraph\",\"text\":\"`math.js`\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"export function add(a, b) {\\n  return a + b;\\n}\"},{\"type\":\"paragraph\",\"text\":\"`main.js`\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"import { add } from './math.js';\\nconsole.log(add(2, 3)); // 5\"},{\"type\":\"title\",\"text\":\"То есть разница:\"},{\"type\":\"list\",\"items\":[\"раньше просто подключали скрипты и всё мешалось в одном месте,\",\"потом придумали `require` (Node.js),\",\"теперь есть современный вариант `import/export`, он самый удобный.\"]},{\"type\":\"links\",\"items\":[\"https://requirejs.org/docs/whyamd.html\",\"https://nodejs.org/docs/latest/api/modules.html\",\"https://2ality.com/2014/09/es6-modules-final.html\"]}]},{\"id\":53,\"title\":\"Зачем может понадобиться создавать статические члены класса?\",\"content\":[{\"type\":\"paragraph\",\"text\":\"Статические члены класса (свойства/методы) не привязаны к конкретному экземпляру класса и имеют одно и то же значение независимо от того, какой экземпляр к ним обращается.\"},{\"type\":\"title\",\"text\":\"Статические свойства обычно используют как конфигурационные переменные.\"},{\"type\":\"title\",\"text\":\"Статические методы — это, как правило, чистые вспомогательные функции, которые не зависят от состояния экземпляра.\"},{\"type\":\"paragraph\",\"text\":\"Проще говоря:\"},{\"type\":\"paragraph\",\"text\":\"У класса есть два вида «вещей»:\"},{\"type\":\"list\",\"items\":[\"**Обычные (instance)** → принадлежат конкретному объекту (экземпляру).\",\"**Статические (static)** → принадлежат самому классу, а не объекту.\"]},{\"type\":\"title\",\"text\":\"Пример:\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"class MathHelper {\\n  static PI = 3.14; // статическое свойство\\n\\n  static square(x) { // статический метод\\n    return x * x;\\n  }\\n}\\n\\nconsole.log(MathHelper.PI);       // 3.14\\nconsole.log(MathHelper.square(5)); // 25\\n\\nconst m = new MathHelper();\\n// m.PI или m.square(5) не сработают, потому что они принадлежат классу, а не объекту.\"},{\"type\":\"title\",\"text\":\"Идея простая:\"},{\"type\":\"list\",\"items\":[\"Если нужно **общее** для всех объектов → делаем **static**.\",\"Если нужно **уникальное** для каждого объекта → делаем **обычное** свойство/метод.\"]},{\"type\":\"links\",\"items\":[\"https://stackoverflow.com/questions/21155438/when-to-use-static-variables-methods-and-when-to-use-instance-variables-methods\"]}]},{\"id\":54,\"title\":\"Как можно добиться неизменяемости в собственном коде?\",\"content\":[{\"type\":\"paragraph\",\"text\":\"Один из способов — использовать библиотеки, такие как immutable.js, mori или immer.\"},{\"type\":\"paragraph\",\"text\":\"Альтернатива — использовать `const` в сочетании с методами создания объектов, упомянутыми выше. Для «мутаций» объектов используйте spread-оператор, `Object.assign`, `Array.concat()` и т.д., чтобы создавать новые объекты вместо изменения оригинальных.\"},{\"type\":\"title\",\"text\":\"Примеры:\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"// Пример с массивом\\nconst arr = [1, 2, 3];\\nconst newArr = [...arr, 4]; // [1, 2, 3, 4]\\n\\n// Пример с объектом\\nconst human = Object.freeze({ race: 'human' });\\nconst john = { ...human, name: 'John' }; // {race: \\\"human\\\", name: \\\"John\\\"}\\nconst alienJohn = { ...john, race: 'alien' }; // {race: \\\"alien\\\", name: \\\"John\\\"}\"},{\"type\":\"links\",\"items\":[\"https://stackoverflow.com/questions/1863515/pros-cons-of-immutability-vs-mutability\",\"https://www.sitepoint.com/immutability-javascript/\",\"https://wecodetheweb.com/2016/02/12/immutable-javascript-using-es6-and-beyond/\"]}]},{\"id\":56,\"title\":\"Какие есть способы создания объектов в JavaScript?\",\"content\":[{\"type\":\"paragraph\",\"text\":\"В JavaScript существует несколько способов создать объект:\"},{\"type\":\"list\",\"items\":[\"Литерал объекта\",\"Конструктор Object\",\"Метод Object.create\",\"Функция-конструктор\",\"Функция-конструктор + prototype\",\"Метод Object.assign\",\"ES6 class\",\"Паттерн Singleton (Одиночка)\"]},{\"type\":\"title\",\"text\":\"1. Литерал объекта\"},{\"type\":\"paragraph\",\"text\":\"Литерал объекта (или инициализатор объекта) — это набор пар «ключ–значение», разделённых запятыми и заключённых в фигурные скобки.\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"var object = {\\n  name: 'Sudheer'\\n  age: 34,\\n};\"},{\"type\":\"paragraph\",\"text\":\"Значения могут быть любого типа: массив, функция или вложенный объект.\"},{\"type\":\"paragraph\",\"text\":\"Это самый простой и распространённый способ создавать простые объекты «на лету».\"},{\"type\":\"title\",\"text\":\"2. Конструктор Object\"},{\"type\":\"paragraph\",\"text\":\"Простейший способ создать пустой объект:\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"var object = new Object();\"},{\"type\":\"paragraph\",\"text\":\"или короче:\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"var object = Object();\"},{\"type\":\"paragraph\",\"text\":\"Разница:\"},{\"type\":\"list\",\"items\":[\"`new Object()` — явно создаёт новый объект;\",\"`Object()` — может создавать объект или превращать значение в его объектную обёртку.\"]},{\"type\":\"title\",\"text\":\"3. Метод Object.create\"},{\"type\":\"paragraph\",\"text\":\"Создаёт новый объект, указывая прототип и свойства. Это удобно для прототипного наследования.\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"var object = Object.create(null);\"},{\"type\":\"paragraph\",\"text\":\"Пример с наследованием:\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"let vehicle = {\\n  wheels: '4',\\n  fuelType: 'Gasoline',\\n  color: 'Green',\\n};\\n\\nlet carProps = {\\n  type: { value: 'Volkswagen' },\\n  model: { value: 'Golf' },\\n};\\n\\nvar car = Object.create(vehicle, carProps);\\nconsole.log(car);\"},{\"type\":\"title\",\"text\":\"4. Функция-конструктор\"},{\"type\":\"paragraph\",\"text\":\"До ES6 это был основной способ писать классы.\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"function Person(name) {\\n  this.name = name;\\n  this.age = 21;\\n}\\n\\nvar object = new Person('Sudheer');\"},{\"type\":\"title\",\"text\":\"5. Функция-конструктор + prototype\"},{\"type\":\"paragraph\",\"text\":\"Позволяет вынести свойства и методы в prototype, чтобы они разделялись между всеми экземплярами.\"},{\"type\":\"paragraph\",\"text\":\"Проще говоря, функция-конструктор создаёт объект и его собственные свойства. Методы/свойства выносят в prototype, чтобы они были общими для всех объектов и не дублировались в памяти.\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"function Person() {}\\nPerson.prototype.name = 'Sudheer';\\n\\nvar object = new Person();\"},{\"type\":\"paragraph\",\"text\":\"Эквивалентно `Object.create(func.prototype)` + вызов функции с параметрами.\"},{\"type\":\"title\",\"text\":\"6. Метод Object.assign\"},{\"type\":\"paragraph\",\"text\":\"Копирует свойства из одного или нескольких объектов в новый. Используется для клонирования или слияния объектов.\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"const orgObject = { company: 'XYZ Corp' };\\nconst carObject = { name: 'Toyota' };\\n\\nconst staff = Object.assign({}, orgObject, carObject);\"},{\"type\":\"title\",\"text\":\"7. ES6 class\"},{\"type\":\"paragraph\",\"text\":\"Это просто более удобный и понятный синтаксис для того, что раньше делали через функцию-конструктор + prototype.\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"class Person {\\n  constructor(name) {\\n    this.name = name; // свойства\\n  }\\n\\n  sayHi() {           // методы автоматически попадают в prototype\\n    console.log(`Привет, я ${this.name}`);\\n  }\\n}\\n\\nconst user = new Person('Лена');\\nuser.sayHi(); // Привет, я Лена\"},{\"type\":\"title\",\"text\":\"8. Singleton (Одиночка)\"},{\"type\":\"paragraph\",\"text\":\"Это объект, который может существовать только в одном экземпляре.То есть сколько бы раз ты ни создавал его — всегда будет возвращаться один и тот же объект.\"},{\"type\":\"paragraph\",\"text\":\"Пример в JavaScript\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"const Singleton = (function () {\\n  let instance; // здесь хранится единственный объект\\n\\n  function createInstance() {\\n    return { name: 'Одиночка' };\\n  }\\n\\n  return {\\n    getInstance: function () {\\n      if (!instance) {\\n        instance = createInstance(); // создаём объект только один раз\\n\\n     }\\n      return instance;\\n    }\\n  };\\n})();\\n\\n// Использование:\\nconst obj1 = Singleton.getInstance();\\nconst obj2 = Singleton.getInstance();\\n\\nconsole.log(obj1 === obj2); // true (оба ссылаются на один объект)\"},{\"type\":\"paragraph\",\"text\":\"Где применяется?\"},{\"type\":\"list\",\"items\":[\"Настройки приложения (чтобы всё брали из одного источника).\",\"Подключение к базе данных (одно соединение на всё приложение).\",\"Управление доступом (например, глобальный «менеджер авторизации»).\"]},{\"type\":\"paragraph\",\"text\":\"В современном JS синглтоны часто реализуют через ES6 модули или замыкания.\"}]},{\"id\":57,\"title\":\"Что такое цепочка прототипов\",\"content\":[{\"type\":\"paragraph\",\"text\":\"**Цепочка прототипов** — это ключевая концепция в модели наследования JavaScript. Она позволяет объектам **наследовать свойства и методы** от других объектов. Когда вы пытаетесь получить доступ к свойству или методу объекта, JavaScript сначала ищет его у самого объекта. Если не находит, движок поднимается по внутренней ссылке `[[Prototype]]` (её можно получить через `Object.getPrototypeOf(obj)` или устаревшее свойство  `__proto__`) и продолжает поиск по цепочке до тех пор, пока не найдёт свойство или не дойдёт до конца (обычно null).\"},{\"type\":\"paragraph\",\"text\":\"Для объектов, созданных через функции-конструкторы, цепочка прототипов начинается с самого экземпляра, затем идёт ссылка на объект prototype конструктора и продолжается дальше. Например:\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"function Person() {}\\nconst person1 = new Person();\\n\\nconsole.log(Object.getPrototypeOf(person1) === Person.prototype); // true\"},{\"type\":\"paragraph\",\"text\":\"Этот механизм позволяет разделять свойства и методы между объектами, обеспечивая повторное использование кода и форму наследования.\"},{\"type\":\"title\",\"text\":\"Итоги:\"},{\"type\":\"list\",\"items\":[\"Цепочка прототипов обеспечивает наследование в JavaScript.\",\"Если свойство не найдено у объекта, JavaScript ищет его по цепочке прототипов.\",\"Прототип экземпляра объекта можно получить через `Object.getPrototypeOf(obj)` или `__proto__`.\",\"Прототип функции-конструктора доступен через `Constructor.prototype`.\",\"Цепочка заканчивается, когда **прототип равен `null`**.\"]},{\"type\":\"image\",\"url\":\"/prototype_chain.png\"}]},{\"id\":58,\"title\":\"В чём разница между call, apply и bind\",\"content\":[{\"type\":\"paragraph\",\"text\":\"В JavaScript методы `call`, `apply` и `bind` позволяют управлять контекстом (`this`) при выполнении функции. Их цель похожа, но они различаются тем, как передаются аргументы и когда вызывается функция.\"},{\"type\":\"title\",\"text\":\"call\"},{\"type\":\"paragraph\",\"text\":\"**Метод `call()`** сразу вызывает функцию, позволяя указать значение `this` и передать аргументы по отдельности (через запятую).\"},{\"type\":\"title\",\"text\":\"Синтаксис:\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"func.call(thisArg, arg1, arg2, ...)\"},{\"type\":\"title\",\"text\":\"Пример:\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"var employee1 = { firstName: 'John', lastName: 'Rodson' };\\nvar employee2 = { firstName: 'Jimmy', lastName: 'Baily' };\\n\\nfunction invite(greeting1, greeting2) {\\n  console.log(greeting1 + ' ' + this.firstName + ' ' + this.lastName + ', ' + greeting2);\\n}\\n\\ninvite.call(employee1, 'Hello', 'How are you?'); // Hello John Rodson, How are you?\\ninvite.call(employee2, 'Hello', 'How are you?'); // Hello Jimmy Baily, How are you?\"},{\"type\":\"title\",\"text\":\"apply\"},{\"type\":\"paragraph\",\"text\":\"**Метод `apply()`** похож на `call()`, но аргументы принимает не списком через запятую, а в виде массива (или объекта, похожего на массив).\"},{\"type\":\"title\",\"text\":\"Синтаксис:\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"func.apply(thisArg, [argsArray])\"},{\"type\":\"title\",\"text\":\"Пример:\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"invite.apply(employee1, ['Hello', 'How are you?']); // Hello John Rodson, How are you?\\ninvite.apply(employee2, ['Hello', 'How are you?']); // Hello Jimmy Baily, How are you?\"},{\"type\":\"title\",\"text\":\"bind\"},{\"type\":\"paragraph\",\"text\":\"**Метод `bind()`** не вызывает функцию сразу. Он **создаёт новую функцию** с привязанным значением `this` и (необязательно) заранее заданными аргументами. Эту новую функцию можно вызвать позже.\"},{\"type\":\"title\",\"text\":\"Синтаксис:\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"var boundFunc = func.bind(thisArg[, arg1[, arg2[, ...]]])\"},{\"type\":\"title\",\"text\":\"Пример:\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"var inviteEmployee1 = invite.bind(employee1);\\nvar inviteEmployee2 = invite.bind(employee2);\\n\\ninviteEmployee1('Hello', 'How are you?'); // Hello John Rodson, How are you?\\ninviteEmployee2('Hello', 'How are you?'); // Hello Jimmy Baily, How are you?\"},{\"type\":\"title\",\"text\":\"Ключевые моменты:\"},{\"type\":\"list\",\"items\":[\"`call` и `apply` почти одинаковы: обе сразу вызывают функцию, отличие только в передаче аргументов.\\n👉 “Call — Comma (через запятую), Apply — Array (массив).\",\"`bind` не вызывает функцию сразу, а возвращает новую с зафиксированным `this`.\",\"Используй `call` или `apply`, если нужно **сразу вызвать** функцию с конкретным `this`.\",\"Используй `bind`, если нужно создать функцию с фиксированным `this`, чтобы вызвать её позже.\"]}]},{\"id\":59,\"title\":\"Что такое JSON и его основные операции\",\"content\":[{\"type\":\"paragraph\",\"text\":\"**JSON** (JavaScript Object Notation) — это лёгкий текстовый формат данных, использующий синтаксис объектов JavaScript для структурирования информации. Его популяризировал Дуглас Крокфорд. JSON широко применяется для передачи данных между сервером и клиентом в веб-приложениях.\"},{\"type\":\"paragraph\",\"text\":\"Файлы JSON обычно имеют расширение **.json** и MIME-тип application/json.\"},{\"type\":\"title\",\"text\":\"Основные операции с JSON\"},{\"type\":\"list\",\"items\":[\"Парсинг (Parsing) \",\"Строкификация (Stringification) \"]},{\"type\":\"paragraph\",\"text\":\"**Парсинг (Parsing)** —  преобразование строки в формате JSON в нативный объект JavaScript.\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"const obj = JSON.parse(jsonString);\"},{\"type\":\"title\",\"text\":\"Пример:\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"const jsonString = '{'name':'John','age':30}';\\nconst obj = JSON.parse(jsonString);\\n\\n\\n// { name: 'John', age: 30 }\"},{\"type\":\"paragraph\",\"text\":\"**Строкификация (Stringification)** —  преобразование объекта JavaScript в строку в формате JSON. Обычно используется для передачи или хранения данных.\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"const jsonString = JSON.stringify(object);\"},{\"type\":\"title\",\"text\":\"Пример:\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"const obj = { name: 'Jane', age: 25 };\\nconst jsonString = JSON.stringify(obj);\\n\\n\\n// '{'name':'Jane','age':25}'\"}]},{\"id\":60,\"title\":\"Для чего нужен метод массива slice()\",\"content\":[{\"type\":\"paragraph\",\"text\":\"Метод `slice()` в JavaScript используется для того, чтобы **вырезать часть массива** и вернуть новый массив с выбранными элементами.\"},{\"type\":\"paragraph\",\"text\":\"Важно! Он **не изменяет исходный массив**!\"},{\"type\":\"title\",\"text\":\"Синтаксис\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"array.slice(start, end)\"},{\"type\":\"paragraph\",\"text\":\"`start` — индекс, с которого начинается извлечение (включительно).\"},{\"type\":\"paragraph\",\"text\":\"`end (необязательный)` — индекс, до которого извлекаем элементы **(не включая его)**. Если не указать, копирование идёт до конца массива.\"},{\"type\":\"paragraph\",\"text\":\"Можно использовать **отрицательные индексы** — они считаются от конца массива.\"},{\"type\":\"title\",\"text\":\"Примеры\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"let arrayIntegers = [1, 2, 3, 4, 5];\\n\\nlet arrayIntegers1 = arrayIntegers.slice(0, 2);    // [1, 2]\\nlet arrayIntegers2 = arrayIntegers.slice(2, 3);    // [3]\\nlet arrayIntegers3 = arrayIntegers.slice(4);       // [5]\\nlet arrayIntegers4 = arrayIntegers.slice(-3, -1);  // [3, 4]\\n\\nconsole.log(arrayIntegers); // [1, 2, 3, 4, 5] (не изменился)\"},{\"type\":\"title\",\"text\":\"Итого\"},{\"type\":\"paragraph\",\"text\":\"`slice()` нужен, чтобы сделать **копию части массива** (или всего массива, если вызвать без аргументов), при этом **оригинальный массив остаётся неизменным**.\"}]},{\"id\":61,\"title\":\"В чём разница между slice() и splice()\",\"content\":[{\"type\":\"paragraph\",\"text\":\"Вот основные различия между методами `slice()` и `splice()` в массивах JavaScript:\"},{\"type\":\"table\",\"headers\":[\"slice()\",\"splice()\"],\"rows\":[[\"Не изменяет исходный массив (неизменяемый)\",\"Изменяет исходный массив (изменяемый)\"],[\"Возвращает поверхностную копию (подмножество) выбранных элементов\",\"Возвращает массив удалённых элементов\"],[\"Используется для извлечения элементов из массива\",\"Используется для добавления, удаления или замены элементов в массиве\"],[\"Синтаксис: `array.slice(start, end)`\",\"Синтаксис: `array.splice(start, deleteCount, ...items)`\"]]},{\"type\":\"title\",\"text\":\"Примеры\"},{\"type\":\"code\",\"language\":\"javascript\",\"code\":\"let arr = [1, 2, 3, 4, 5];\\n\\n// slice()\\nlet sliced = arr.slice(1, 3);\\nconsole.log(sliced); // [2, 3]\\nconsole.log(arr);    // [1, 2, 3, 4, 5] (не изменился)\\n\\n// splice()\\nlet spliced = arr.splice(1, 2);\\nconsole.log(spliced); // [2, 3]\\nconsole.log(arr);     // [1, 4, 5] (изменился)\"},{\"type\":\"title\",\"text\":\"Итог:\"},{\"type\":\"paragraph\",\"text\":\"• Используй **`slice()`**, когда нужно скопировать или извлечь элементы, **не меняя** исходный массив.\"},{\"type\":\"paragraph\",\"text\":\"• Используй **`splice()`**, когда нужно добавить, удалить или заменить элементы и при этом изменить исходный массив.\"}]},{\"id\":62,\"title\":\"Как сравнить Object и Map\",\"content\":[{\"type\":\"table\",\"headers\":[\"Возможность\",\"Object\",\"Map\"],\"rows\":[[\"**Типы ключей**\",\"Только строки и символы\",\"Любое значение (объекты, функции, примитивы)\"],[\"**Порядок ключей**\",\"Ключи неупорядочены (на практике порядок вставки для строковых ключей чаще сохраняется, но не гарантирован)\",\"Ключи упорядочены по порядку вставки; обход идёт в том же порядке\"],[\"**Размер**\",\"Нет встроенного свойства для получения числа ключей, нужно использовать `Object.keys(obj).length`\",\"Есть свойство .size для получения количества записей\"],[\"**Итерируемость**\",\"Не итерируем напрямую; нужно использовать `Object.keys`, `Object.values` или `Object.entries`\",\"Итерируем напрямую: `for...of`, `.keys()`, `.values()`, `.entries()`\"],[\"**Прототип**\",\"Есть прототипная цепочка; могут быть унаследованные свойства, которые конфликтуют с пользовательскими ключами (можно избежать через `Object.create(null)`\",\"Прототипа нет, значит, нет и «лишних» ключей\"],[\"**Производительность**\",\"Может быть менее эффективным при частом добавлении/удалении\",\"Оптимизирован для частых добавлений и удалений\"],[\"**Сериализация**\",\"Легко сериализуется в JSON\",\"Нельзя напрямую сериализовать в JSON\"]]}]},{\"id\":63,\"title\":\"\",\"content\":[{\"type\":\"\"}]},{\"id\":64,\"title\":\"\",\"content\":[{\"type\":\"\"}]},{\"id\":65,\"title\":\"\",\"content\":[{\"type\":\"\"}]},{\"id\":66,\"title\":\"\",\"content\":[{\"type\":\"\"}]},{\"id\":67,\"title\":\"\",\"content\":[{\"type\":\"\"}]},{\"id\":68,\"title\":\"\",\"content\":[{\"type\":\"\"}]},{\"id\":69,\"title\":\"\",\"content\":[{\"type\":\"\"}]},{\"id\":70,\"title\":\"\",\"content\":[{\"type\":\"\"}]},{\"id\":55,\"title\":\"Другие вопросы\",\"content\":[{\"type\":\"links\",\"items\":[\"https://github.com/sudheerj/javascript-interview-questions\",\"http://flowerszhong.github.io/2013/11/20/javascript-questions.html\"]}]}]"));}),
"[externals]/tty [external] (tty, cjs)", ((__turbopack_context__, module, exports) => {

const mod = __turbopack_context__.x("tty", () => require("tty"));

module.exports = mod;
}),
"[externals]/os [external] (os, cjs)", ((__turbopack_context__, module, exports) => {

const mod = __turbopack_context__.x("os", () => require("os"));

module.exports = mod;
}),
"[externals]/node:path [external] (node:path, cjs)", ((__turbopack_context__, module, exports) => {

const mod = __turbopack_context__.x("node:path", () => require("node:path"));

module.exports = mod;
}),
"[externals]/node:path [external] (node:path, cjs) <export default as minpath>", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "minpath",
    ()=>__TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__["default"]
]);
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:path [external] (node:path, cjs)");
}),
"[externals]/node:process [external] (node:process, cjs)", ((__turbopack_context__, module, exports) => {

const mod = __turbopack_context__.x("node:process", () => require("node:process"));

module.exports = mod;
}),
"[externals]/node:process [external] (node:process, cjs) <export default as minproc>", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "minproc",
    ()=>__TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$process__$5b$external$5d$__$28$node$3a$process$2c$__cjs$29$__["default"]
]);
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$process__$5b$external$5d$__$28$node$3a$process$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:process [external] (node:process, cjs)");
}),
"[externals]/node:url [external] (node:url, cjs)", ((__turbopack_context__, module, exports) => {

const mod = __turbopack_context__.x("node:url", () => require("node:url"));

module.exports = mod;
}),
"[externals]/node:url [external] (node:url, cjs) <export fileURLToPath as urlToPath>", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "urlToPath",
    ()=>__TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$url__$5b$external$5d$__$28$node$3a$url$2c$__cjs$29$__["fileURLToPath"]
]);
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$url__$5b$external$5d$__$28$node$3a$url$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:url [external] (node:url, cjs)");
}),
"[project]/src/app/qwestion/page.tsx [app-rsc] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "default",
    ()=>Qwestions
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react-jsx-dev-runtime.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$app$2d$dir$2f$link$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/client/app-dir/link.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$icons$2f$fa6$2f$index$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/react-icons/fa6/index.mjs [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$app$2f$data$2f$qwestion$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/src/app/data/qwestion.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$icons$2f$fa$2f$index$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/react-icons/fa/index.mjs [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$syntax$2d$highlighter$2f$dist$2f$esm$2f$prism$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__default__as__Prism$3e$__ = __turbopack_context__.i("[project]/node_modules/react-syntax-highlighter/dist/esm/prism.js [app-rsc] (ecmascript) <export default as Prism>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$syntax$2d$highlighter$2f$dist$2f$esm$2f$styles$2f$prism$2f$one$2d$dark$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__default__as__oneDark$3e$__ = __turbopack_context__.i("[project]/node_modules/react-syntax-highlighter/dist/esm/styles/prism/one-dark.js [app-rsc] (ecmascript) <export default as oneDark>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$image$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/image.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$markdown$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__Markdown__as__default$3e$__ = __turbopack_context__.i("[project]/node_modules/react-markdown/lib/index.js [app-rsc] (ecmascript) <export Markdown as default>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$icons$2f$tb$2f$index$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/react-icons/tb/index.mjs [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$icons$2f$md$2f$index$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/react-icons/md/index.mjs [app-rsc] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
function Qwestions() {
    const questions = __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$app$2f$data$2f$qwestion$2e$json__$28$json$29$__["default"];
    return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("div", {
        className: "font-sans grid justify-items-center p-8 pb-20 gap-16 sm:p-20",
        children: [
            /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("div", {
                className: "flex justify-between",
                children: [
                    /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("h1", {
                        className: "text-4xl",
                        children: "Вопросы"
                    }, void 0, false, {
                        fileName: "[project]/src/app/qwestion/page.tsx",
                        lineNumber: 36,
                        columnNumber: 9
                    }, this),
                    /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$app$2d$dir$2f$link$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"], {
                        href: "/",
                        children: /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("div", {
                            className: "flex items-center gap-2",
                            children: [
                                /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$icons$2f$fa6$2f$index$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["FaArrowRotateLeft"], {
                                    size: 12
                                }, void 0, false, {
                                    fileName: "[project]/src/app/qwestion/page.tsx",
                                    lineNumber: 39,
                                    columnNumber: 13
                                }, this),
                                " назад"
                            ]
                        }, void 0, true, {
                            fileName: "[project]/src/app/qwestion/page.tsx",
                            lineNumber: 38,
                            columnNumber: 11
                        }, this)
                    }, void 0, false, {
                        fileName: "[project]/src/app/qwestion/page.tsx",
                        lineNumber: 37,
                        columnNumber: 9
                    }, this)
                ]
            }, void 0, true, {
                fileName: "[project]/src/app/qwestion/page.tsx",
                lineNumber: 35,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("div", {
                className: "flex gap-6",
                children: [
                    /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("div", {
                        className: "w-[20%]",
                        children: [
                            /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("h2", {
                                className: "text-2xl",
                                children: "Список"
                            }, void 0, false, {
                                fileName: "[project]/src/app/qwestion/page.tsx",
                                lineNumber: 46,
                                columnNumber: 11
                            }, this),
                            /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("ul", {
                                className: "list-disc list-inside",
                                children: questions.map((item)=>/*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("li", {
                                        className: "flex items-center cursor-pointer text-gray-400  hover:text-black dark:hover:text-white py-2 border-t-1 solid border-gray-300",
                                        children: /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("a", {
                                            href: `#${item.title}`,
                                            className: "flex items-center gap-2",
                                            children: /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("h3", {
                                                children: item.title
                                            }, void 0, false, {
                                                fileName: "[project]/src/app/qwestion/page.tsx",
                                                lineNumber: 54,
                                                columnNumber: 19
                                            }, this)
                                        }, void 0, false, {
                                            fileName: "[project]/src/app/qwestion/page.tsx",
                                            lineNumber: 53,
                                            columnNumber: 17
                                        }, this)
                                    }, item.id, false, {
                                        fileName: "[project]/src/app/qwestion/page.tsx",
                                        lineNumber: 49,
                                        columnNumber: 15
                                    }, this))
                            }, void 0, false, {
                                fileName: "[project]/src/app/qwestion/page.tsx",
                                lineNumber: 47,
                                columnNumber: 11
                            }, this)
                        ]
                    }, void 0, true, {
                        fileName: "[project]/src/app/qwestion/page.tsx",
                        lineNumber: 45,
                        columnNumber: 9
                    }, this),
                    /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("div", {
                        className: "w-[80%]",
                        children: questions.map((item)=>/*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("div", {
                                id: item.title,
                                className: "my-10",
                                children: [
                                    /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("h2", {
                                        className: "font-bold text-2xl",
                                        children: /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$markdown$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__Markdown__as__default$3e$__["default"], {
                                            components: {
                                                code ({ children }) {
                                                    return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("code", {
                                                        className: "bg-gray-100 dark:bg-gray-700 rounded text-sm p-1 font-bold",
                                                        children: children
                                                    }, void 0, false, {
                                                        fileName: "[project]/src/app/qwestion/page.tsx",
                                                        lineNumber: 68,
                                                        columnNumber: 25
                                                    }, void 0);
                                                }
                                            },
                                            children: item.title
                                        }, void 0, false, {
                                            fileName: "[project]/src/app/qwestion/page.tsx",
                                            lineNumber: 64,
                                            columnNumber: 17
                                        }, this)
                                    }, void 0, false, {
                                        fileName: "[project]/src/app/qwestion/page.tsx",
                                        lineNumber: 63,
                                        columnNumber: 15
                                    }, this),
                                    Array.isArray(item.content) && item.content.map((block, index)=>{
                                        const key = `${item.id}-${block.type}-${index}`;
                                        switch(block.type){
                                            case "title":
                                                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("h3", {
                                                    className: "my-4 font-bold underline",
                                                    children: /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$markdown$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__Markdown__as__default$3e$__["default"], {
                                                        components: {
                                                            code ({ children }) {
                                                                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("code", {
                                                                    className: "bg-gray-100 dark:bg-gray-700 dark:text-gray-200 rounded text-sm p-1 font-bold",
                                                                    children: children
                                                                }, void 0, false, {
                                                                    fileName: "[project]/src/app/qwestion/page.tsx",
                                                                    lineNumber: 91,
                                                                    columnNumber: 35
                                                                }, void 0);
                                                            }
                                                        },
                                                        children: block.text
                                                    }, void 0, false, {
                                                        fileName: "[project]/src/app/qwestion/page.tsx",
                                                        lineNumber: 87,
                                                        columnNumber: 27
                                                    }, this)
                                                }, key, false, {
                                                    fileName: "[project]/src/app/qwestion/page.tsx",
                                                    lineNumber: 86,
                                                    columnNumber: 25
                                                }, this);
                                            case "paragraph":
                                                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("h3", {
                                                    className: "my-4",
                                                    children: /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$markdown$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__Markdown__as__default$3e$__["default"], {
                                                        components: {
                                                            code ({ children }) {
                                                                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("code", {
                                                                    className: "bg-gray-100 dark:bg-gray-700 dark:text-gray-200 rounded text-sm p-1 font-bold",
                                                                    children: children
                                                                }, void 0, false, {
                                                                    fileName: "[project]/src/app/qwestion/page.tsx",
                                                                    lineNumber: 110,
                                                                    columnNumber: 35
                                                                }, void 0);
                                                            }
                                                        },
                                                        children: block.text
                                                    }, void 0, false, {
                                                        fileName: "[project]/src/app/qwestion/page.tsx",
                                                        lineNumber: 106,
                                                        columnNumber: 27
                                                    }, this)
                                                }, key, false, {
                                                    fileName: "[project]/src/app/qwestion/page.tsx",
                                                    lineNumber: 105,
                                                    columnNumber: 25
                                                }, this);
                                            case "mainParagraph":
                                                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("h3", {
                                                    className: "my-4 border px-4 py-4 rounded-xl flex items-center",
                                                    children: [
                                                        /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("div", {
                                                            className: "text-gray-200 pr-4",
                                                            children: /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$icons$2f$md$2f$index$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["MdNotificationImportant"], {
                                                                size: 40
                                                            }, void 0, false, {
                                                                fileName: "[project]/src/app/qwestion/page.tsx",
                                                                lineNumber: 129,
                                                                columnNumber: 29
                                                            }, this)
                                                        }, void 0, false, {
                                                            fileName: "[project]/src/app/qwestion/page.tsx",
                                                            lineNumber: 128,
                                                            columnNumber: 27
                                                        }, this),
                                                        /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$markdown$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__Markdown__as__default$3e$__["default"], {
                                                            components: {
                                                                code ({ children }) {
                                                                    return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("code", {
                                                                        className: "bg-gray-100 dark:bg-gray-700 dark:text-gray-200 rounded text-sm p-1 font-bold",
                                                                        children: children
                                                                    }, void 0, false, {
                                                                        fileName: "[project]/src/app/qwestion/page.tsx",
                                                                        lineNumber: 135,
                                                                        columnNumber: 35
                                                                    }, void 0);
                                                                }
                                                            },
                                                            children: block.text
                                                        }, void 0, false, {
                                                            fileName: "[project]/src/app/qwestion/page.tsx",
                                                            lineNumber: 131,
                                                            columnNumber: 27
                                                        }, this)
                                                    ]
                                                }, key, true, {
                                                    fileName: "[project]/src/app/qwestion/page.tsx",
                                                    lineNumber: 124,
                                                    columnNumber: 25
                                                }, this);
                                            case "positive":
                                                if (!("items" in block) || !Array.isArray(block.items)) return null;
                                                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("ul", {
                                                    className: "my-4 ml-4  px-8 py-4 rounded-xl bg-green-50 dark:bg-green-950 dark:text-gray-200",
                                                    children: block.items.map((li, i)=>/*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("li", {
                                                            className: "flex",
                                                            children: [
                                                                /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("div", {
                                                                    className: "pt-[5px] pr-2 text-green-500",
                                                                    children: /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$icons$2f$tb$2f$index$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["TbPointFilled"], {
                                                                        size: 12
                                                                    }, void 0, false, {
                                                                        fileName: "[project]/src/app/qwestion/page.tsx",
                                                                        lineNumber: 159,
                                                                        columnNumber: 33
                                                                    }, this)
                                                                }, void 0, false, {
                                                                    fileName: "[project]/src/app/qwestion/page.tsx",
                                                                    lineNumber: 158,
                                                                    columnNumber: 31
                                                                }, this),
                                                                /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$markdown$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__Markdown__as__default$3e$__["default"], {
                                                                    components: {
                                                                        code ({ children }) {
                                                                            return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("code", {
                                                                                className: "bg-green-200 dark:bg-green-900  dark:text-gray-200 rounded text-sm p-1 font-bold",
                                                                                children: children
                                                                            }, void 0, false, {
                                                                                fileName: "[project]/src/app/qwestion/page.tsx",
                                                                                lineNumber: 166,
                                                                                columnNumber: 39
                                                                            }, void 0);
                                                                        }
                                                                    },
                                                                    children: li
                                                                }, void 0, false, {
                                                                    fileName: "[project]/src/app/qwestion/page.tsx",
                                                                    lineNumber: 162,
                                                                    columnNumber: 31
                                                                }, this)
                                                            ]
                                                        }, i, true, {
                                                            fileName: "[project]/src/app/qwestion/page.tsx",
                                                            lineNumber: 157,
                                                            columnNumber: 29
                                                        }, this))
                                                }, key, false, {
                                                    fileName: "[project]/src/app/qwestion/page.tsx",
                                                    lineNumber: 152,
                                                    columnNumber: 25
                                                }, this);
                                            case "negative":
                                                if (!("items" in block) || !Array.isArray(block.items)) return null;
                                                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("ul", {
                                                    className: "my-4 ml-4 px-8 py-4 rounded-xl bg-red-50 dark:bg-red-950",
                                                    children: block.items.map((li, i)=>/*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("li", {
                                                            className: "flex",
                                                            children: [
                                                                /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("div", {
                                                                    className: "pt-[5px] pr-2 text-red-500",
                                                                    children: /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$icons$2f$tb$2f$index$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["TbPointFilled"], {
                                                                        size: 12
                                                                    }, void 0, false, {
                                                                        fileName: "[project]/src/app/qwestion/page.tsx",
                                                                        lineNumber: 192,
                                                                        columnNumber: 33
                                                                    }, this)
                                                                }, void 0, false, {
                                                                    fileName: "[project]/src/app/qwestion/page.tsx",
                                                                    lineNumber: 191,
                                                                    columnNumber: 31
                                                                }, this),
                                                                /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$markdown$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__Markdown__as__default$3e$__["default"], {
                                                                    components: {
                                                                        code ({ children }) {
                                                                            return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("code", {
                                                                                className: "bg-red-200 dark:bg-red-900 rounded text-sm p-1 font-bold",
                                                                                children: children
                                                                            }, void 0, false, {
                                                                                fileName: "[project]/src/app/qwestion/page.tsx",
                                                                                lineNumber: 199,
                                                                                columnNumber: 39
                                                                            }, void 0);
                                                                        }
                                                                    },
                                                                    children: li
                                                                }, void 0, false, {
                                                                    fileName: "[project]/src/app/qwestion/page.tsx",
                                                                    lineNumber: 195,
                                                                    columnNumber: 31
                                                                }, this)
                                                            ]
                                                        }, i, true, {
                                                            fileName: "[project]/src/app/qwestion/page.tsx",
                                                            lineNumber: 190,
                                                            columnNumber: 29
                                                        }, this))
                                                }, key, false, {
                                                    fileName: "[project]/src/app/qwestion/page.tsx",
                                                    lineNumber: 185,
                                                    columnNumber: 25
                                                }, this);
                                            case "main":
                                                if (!("items" in block) || !Array.isArray(block.items)) return null;
                                                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("ul", {
                                                    className: "my-4 px-4 py-4 rounded-xl border flex items-center",
                                                    children: [
                                                        /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("div", {
                                                            className: "text-gray-200 pr-2",
                                                            children: /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$icons$2f$md$2f$index$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["MdNotificationImportant"], {
                                                                size: 40
                                                            }, void 0, false, {
                                                                fileName: "[project]/src/app/qwestion/page.tsx",
                                                                lineNumber: 223,
                                                                columnNumber: 29
                                                            }, this)
                                                        }, void 0, false, {
                                                            fileName: "[project]/src/app/qwestion/page.tsx",
                                                            lineNumber: 222,
                                                            columnNumber: 27
                                                        }, this),
                                                        /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("div", {
                                                            children: block.items.map((li, i)=>/*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("li", {
                                                                    className: "flex",
                                                                    children: [
                                                                        /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("div", {
                                                                            className: "pt-[5px] pr-2 text-gray-400",
                                                                            children: /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$icons$2f$tb$2f$index$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["TbPointFilled"], {
                                                                                size: 12
                                                                            }, void 0, false, {
                                                                                fileName: "[project]/src/app/qwestion/page.tsx",
                                                                                lineNumber: 229,
                                                                                columnNumber: 35
                                                                            }, this)
                                                                        }, void 0, false, {
                                                                            fileName: "[project]/src/app/qwestion/page.tsx",
                                                                            lineNumber: 228,
                                                                            columnNumber: 33
                                                                        }, this),
                                                                        /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$markdown$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__Markdown__as__default$3e$__["default"], {
                                                                            components: {
                                                                                code ({ children }) {
                                                                                    return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("code", {
                                                                                        className: "bg-gray-100 dark:bg-gray-700 rounded text-sm p-1 font-bold",
                                                                                        children: children
                                                                                    }, void 0, false, {
                                                                                        fileName: "[project]/src/app/qwestion/page.tsx",
                                                                                        lineNumber: 235,
                                                                                        columnNumber: 41
                                                                                    }, void 0);
                                                                                }
                                                                            },
                                                                            children: li
                                                                        }, void 0, false, {
                                                                            fileName: "[project]/src/app/qwestion/page.tsx",
                                                                            lineNumber: 231,
                                                                            columnNumber: 33
                                                                        }, this)
                                                                    ]
                                                                }, i, true, {
                                                                    fileName: "[project]/src/app/qwestion/page.tsx",
                                                                    lineNumber: 227,
                                                                    columnNumber: 31
                                                                }, this))
                                                        }, void 0, false, {
                                                            fileName: "[project]/src/app/qwestion/page.tsx",
                                                            lineNumber: 225,
                                                            columnNumber: 27
                                                        }, this)
                                                    ]
                                                }, key, true, {
                                                    fileName: "[project]/src/app/qwestion/page.tsx",
                                                    lineNumber: 218,
                                                    columnNumber: 25
                                                }, this);
                                            case "list":
                                                if (!("items" in block) || !Array.isArray(block.items)) return null;
                                                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("ul", {
                                                    className: "my-4 ml-4 px-8 py-4 rounded-xl",
                                                    children: block.items.map((li, i)=>/*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("li", {
                                                            className: "flex",
                                                            children: [
                                                                /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("div", {
                                                                    className: "pt-[5px] pr-2 text-gray-500",
                                                                    children: /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$icons$2f$tb$2f$index$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["TbPointFilled"], {
                                                                        size: 12
                                                                    }, void 0, false, {
                                                                        fileName: "[project]/src/app/qwestion/page.tsx",
                                                                        lineNumber: 262,
                                                                        columnNumber: 33
                                                                    }, this)
                                                                }, void 0, false, {
                                                                    fileName: "[project]/src/app/qwestion/page.tsx",
                                                                    lineNumber: 261,
                                                                    columnNumber: 31
                                                                }, this),
                                                                /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$markdown$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__Markdown__as__default$3e$__["default"], {
                                                                    components: {
                                                                        code ({ children }) {
                                                                            return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("code", {
                                                                                className: "bg-gray-100 dark:bg-gray-700 rounded text-sm p-1 font-bold",
                                                                                children: children
                                                                            }, void 0, false, {
                                                                                fileName: "[project]/src/app/qwestion/page.tsx",
                                                                                lineNumber: 268,
                                                                                columnNumber: 39
                                                                            }, void 0);
                                                                        }
                                                                    },
                                                                    children: li
                                                                }, void 0, false, {
                                                                    fileName: "[project]/src/app/qwestion/page.tsx",
                                                                    lineNumber: 264,
                                                                    columnNumber: 31
                                                                }, this)
                                                            ]
                                                        }, i, true, {
                                                            fileName: "[project]/src/app/qwestion/page.tsx",
                                                            lineNumber: 260,
                                                            columnNumber: 29
                                                        }, this))
                                                }, key, false, {
                                                    fileName: "[project]/src/app/qwestion/page.tsx",
                                                    lineNumber: 255,
                                                    columnNumber: 25
                                                }, this);
                                            case "links":
                                                if (!("items" in block) || !Array.isArray(block.items)) return null;
                                                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("div", {
                                                    className: "my-4 mx-4 grid-cols-1 text-green-600",
                                                    children: block.items.map((link, i)=>/*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("a", {
                                                            href: link,
                                                            target: "_blank",
                                                            rel: "noopen noreferrer",
                                                            className: "flex gap-2 items-center hover:underline",
                                                            children: [
                                                                /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$icons$2f$fa$2f$index$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["FaLink"], {
                                                                    size: 10
                                                                }, void 0, false, {
                                                                    fileName: "[project]/src/app/qwestion/page.tsx",
                                                                    lineNumber: 299,
                                                                    columnNumber: 31
                                                                }, this),
                                                                " ",
                                                                link
                                                            ]
                                                        }, i, true, {
                                                            fileName: "[project]/src/app/qwestion/page.tsx",
                                                            lineNumber: 292,
                                                            columnNumber: 29
                                                        }, this))
                                                }, key, false, {
                                                    fileName: "[project]/src/app/qwestion/page.tsx",
                                                    lineNumber: 287,
                                                    columnNumber: 25
                                                }, this);
                                            case "code":
                                                if (!("code" in block && typeof block.code === "string")) return null;
                                                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$syntax$2d$highlighter$2f$dist$2f$esm$2f$prism$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__default__as__Prism$3e$__["Prism"], {
                                                    language: "javascript",
                                                    style: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$syntax$2d$highlighter$2f$dist$2f$esm$2f$styles$2f$prism$2f$one$2d$dark$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__default__as__oneDark$3e$__["oneDark"],
                                                    showLineNumbers: true,
                                                    customStyle: {
                                                        borderRadius: "8px",
                                                        padding: "12px"
                                                    },
                                                    children: block.code
                                                }, key, false, {
                                                    fileName: "[project]/src/app/qwestion/page.tsx",
                                                    lineNumber: 309,
                                                    columnNumber: 25
                                                }, this);
                                            case "image":
                                                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$image$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"], {
                                                    src: block.url,
                                                    alt: "",
                                                    width: 1000,
                                                    height: 1000,
                                                    className: "w-[80%] h-full p-5 bg-white m-auto"
                                                }, key, false, {
                                                    fileName: "[project]/src/app/qwestion/page.tsx",
                                                    lineNumber: 322,
                                                    columnNumber: 25
                                                }, this);
                                            case "table":
                                                if (!("headers" in block) || !("rows" in block) || !Array.isArray(block.headers) || !Array.isArray(block.rows)) {
                                                    return null;
                                                }
                                                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("table", {
                                                    className: "my-6 border-collapse border bprder-gray-400 w-full ",
                                                    children: [
                                                        /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("thead", {
                                                            className: "bg-green-200",
                                                            children: /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("tr", {
                                                                children: block.headers.map((header, i)=>/*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("th", {
                                                                        className: "border border-gray-400 px-4 py-2",
                                                                        children: /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$markdown$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__Markdown__as__default$3e$__["default"], {
                                                                            components: {
                                                                                code ({ children }) {
                                                                                    return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("code", {
                                                                                        className: "bg-gray-100 dark:bg-gray-700 rounded text-sm p-1 font-bold",
                                                                                        children: children
                                                                                    }, void 0, false, {
                                                                                        fileName: "[project]/src/app/qwestion/page.tsx",
                                                                                        lineNumber: 357,
                                                                                        columnNumber: 43
                                                                                    }, void 0);
                                                                                }
                                                                            },
                                                                            children: header
                                                                        }, void 0, false, {
                                                                            fileName: "[project]/src/app/qwestion/page.tsx",
                                                                            lineNumber: 353,
                                                                            columnNumber: 35
                                                                        }, this)
                                                                    }, i, false, {
                                                                        fileName: "[project]/src/app/qwestion/page.tsx",
                                                                        lineNumber: 349,
                                                                        columnNumber: 33
                                                                    }, this))
                                                            }, void 0, false, {
                                                                fileName: "[project]/src/app/qwestion/page.tsx",
                                                                lineNumber: 347,
                                                                columnNumber: 29
                                                            }, this)
                                                        }, void 0, false, {
                                                            fileName: "[project]/src/app/qwestion/page.tsx",
                                                            lineNumber: 346,
                                                            columnNumber: 27
                                                        }, this),
                                                        /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("tbody", {
                                                            children: block.rows.map((row, i)=>/*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("tr", {
                                                                    children: row.map((cell, j)=>/*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("td", {
                                                                            className: "border border-gray-400 px-4 py-2",
                                                                            children: /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$markdown$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__Markdown__as__default$3e$__["default"], {
                                                                                components: {
                                                                                    code ({ children }) {
                                                                                        return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("code", {
                                                                                            className: "bg-gray-100 dark:bg-gray-700 rounded text-sm p-1 font-bold",
                                                                                            children: children
                                                                                        }, void 0, false, {
                                                                                            fileName: "[project]/src/app/qwestion/page.tsx",
                                                                                            lineNumber: 382,
                                                                                            columnNumber: 45
                                                                                        }, void 0);
                                                                                    }
                                                                                },
                                                                                children: cell
                                                                            }, void 0, false, {
                                                                                fileName: "[project]/src/app/qwestion/page.tsx",
                                                                                lineNumber: 378,
                                                                                columnNumber: 37
                                                                            }, this)
                                                                        }, j, false, {
                                                                            fileName: "[project]/src/app/qwestion/page.tsx",
                                                                            lineNumber: 374,
                                                                            columnNumber: 35
                                                                        }, this))
                                                                }, i, false, {
                                                                    fileName: "[project]/src/app/qwestion/page.tsx",
                                                                    lineNumber: 372,
                                                                    columnNumber: 31
                                                                }, this))
                                                        }, void 0, false, {
                                                            fileName: "[project]/src/app/qwestion/page.tsx",
                                                            lineNumber: 370,
                                                            columnNumber: 27
                                                        }, this)
                                                    ]
                                                }, key, true, {
                                                    fileName: "[project]/src/app/qwestion/page.tsx",
                                                    lineNumber: 342,
                                                    columnNumber: 25
                                                }, this);
                                            default:
                                                return null;
                                        }
                                    })
                                ]
                            }, item.id, true, {
                                fileName: "[project]/src/app/qwestion/page.tsx",
                                lineNumber: 62,
                                columnNumber: 13
                            }, this))
                    }, void 0, false, {
                        fileName: "[project]/src/app/qwestion/page.tsx",
                        lineNumber: 60,
                        columnNumber: 9
                    }, this)
                ]
            }, void 0, true, {
                fileName: "[project]/src/app/qwestion/page.tsx",
                lineNumber: 44,
                columnNumber: 7
            }, this)
        ]
    }, void 0, true, {
        fileName: "[project]/src/app/qwestion/page.tsx",
        lineNumber: 34,
        columnNumber: 5
    }, this);
}
}),
"[project]/src/app/qwestion/page.tsx [app-rsc] (ecmascript, Next.js Server Component)", ((__turbopack_context__) => {

__turbopack_context__.n(__turbopack_context__.i("[project]/src/app/qwestion/page.tsx [app-rsc] (ecmascript)"));
}),
"[externals]/next/dist/shared/lib/no-fallback-error.external.js [external] (next/dist/shared/lib/no-fallback-error.external.js, cjs)", ((__turbopack_context__, module, exports) => {

const mod = __turbopack_context__.x("next/dist/shared/lib/no-fallback-error.external.js", () => require("next/dist/shared/lib/no-fallback-error.external.js"));

module.exports = mod;
}),
];

//# sourceMappingURL=%5Broot-of-the-server%5D__7089bfe0._.js.map